#! $1c(%rdi) = %%EA
#! (%rdi) = %%EA
#! $1c(%rsi) = %%EA
#! (%rsi) = %%EA
#! $1c(%rdx) = %%EA
#! (%rdx) = %%EA
#! $1c(%rbx) = %%EA
#! (%rbx) = %%EA
#! -$1c(%rip) = %%EA
#! %r$1c = %%r$1c
#! %rax = %%rax
#! %rbx = %%rbx
#! %rcx = %%rcx
#! %rdx = %%rdx
#! %rbp = %%rbp
#! %rsi = %%rsi
#! %eax = %%eax


#! add $1v, $2v -> adds carry $2v $2v $1v
#! adc $1v, $2v -> adcs carry $2v $2v $1v carry
#! adc $1c, $2v -> adcs carry $2v $2v $1c@uint64 carry
#! adcx $1v, $2v -> adcs carry $2v $2v $1v carry
#! adox $1v, $2v -> adcs overflow $2v $2v $1v overflow
#! cmovb $1v, $2v -> cmov $2v carry $1v $2v
#! mov $1c, $2v -> mov $2v $1c@uint64
#! mov $1c, $2ea -> mov $2ea $1c@uint64
#! mov $1v, $2v -> mov $2v $1v
#! mov $1ea, $2v -> mov $2v $1ea
#! mov $1v, $2ea -> mov $2ea $1v
#! mulx $1v, $2v, $3v -> mull $3v $2v rdx $1v
#! sbb $1v, $1v -> sbbs carry $1v $1v $1v carry;\nmov overflow carry;\nnot zero@bit carry
#! sbb $1v, $2v -> sbbs carry $2v $2v $1v carry
#! sbb $1c, $2v -> sbbs carry $2v $2v $1c@uint64 carry
#! shlx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit ddc $3v $2v 32;\nshl $3v $3v 32
#! shrx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit $3v dc $2v 32
#! xor $1v, $1v -> mov $1v 0@uint64;\nclear carry;\nclear overflow
#! sub $1ea, $2v -> subb carry $2v $2v $1ea
#! sub $1c, $2v -> subb carry $2v $2v $1c@uint64
#! test $1v, $1v -> subb zero dontcare $1v 1@uint64
#! lea $1ea, $2v -> mov $2v $1ea
#! test \$0x1, $1v -> and tmp@uint64 0x1@uint64 $1v;\nsubb zero dontcare tmp 0x1@uint64
#! or $1v, $2v -> or $2v@uint64 $1v $2v;\nclear carry;\nclear overflow
#! shl \$0x3f, $1v -> split ddc $1v $1v 1;\nshl $1v $1v 63
#! shr $1v -> split $1v dontcare $1v 1
#! cmove $1v, $2v -> cmov $2v zero $1v $2v
#! shl \$0x20, $1v -> split ddc $1v $1v 32;\nshl $1v $1v 32
#! shr \$0x20, $1v -> split $1v ddc $1v 32
#! cmovne $1v, $2v -> cmov $2v zero $2v $1v
#! mul $1v -> mull rdx rax rax $1v;\nsubb tmp dontcare rdx 1@uint64;\nnot carry@bit tmp;\nnot overflow@bit tmp
#! and $1c, $2v -> and $2v@uint64 $2v $1c@uint64

#! adc $1c, $2v -> adcs carry $2v $2v $1c@uint64 carry
#! imul $1v, $2v -> mull dontcare $2v $1v $2v
#! and \$0x26, $1v -> and $1v@uint64 $1v 0x26@uint64
#! mov \$0x26, $1v -> mov $1v 0x26@uint64 
#! %rdi = %%rdi
#! %edi = %%edi
#! %edx = %%edx
#! $1c(%rsp) = %%EA


x25519_fe64_sqr:
# %rdi = 0x7fffffffdba0
# %rsi = 0x7fffffffdb60
# %rdx = 0x7fffffffdb60
# %rcx = 0x800
# %r8  = 0x0
# %r9  = 0x0
	#! -> SP = 0x7fffffffdb58
	push   %rbp                                     #! EA = L0x7fffffffdb50; PC = 0x555555555800
	push   %rbx                                     #! EA = L0x7fffffffdb48; PC = 0x555555555801
	push   %r12                                     #! EA = L0x7fffffffdb40; PC = 0x555555555802
	push   %r13                                     #! EA = L0x7fffffffdb38; PC = 0x555555555804
	push   %r14                                     #! EA = L0x7fffffffdb30; PC = 0x555555555806
	push   %r15                                     #! EA = L0x7fffffffdb28; PC = 0x555555555808
	push   %rdi                                     #! EA = L0x7fffffffdb20; PC = 0x55555555580a
	lea    -0x10(%rsp),%rsp                         #! PC = 0x55555555580b
	mov    (%rsi),%rdx                              #! EA = L0x7fffffffdb60; Value = 0x0000000000000000; PC = 0x555555555810
	mov    0x8(%rsi),%rcx                           #! EA = L0x7fffffffdb68; Value = 0x0000000000000000; PC = 0x555555555813
	mov    0x10(%rsi),%rbp                          #! EA = L0x7fffffffdb70; Value = 0x0000000000000000; PC = 0x555555555817
	mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdb78; Value = 0x0000000000000000; PC = 0x55555555581b
	mulx   %rdx,%r8,%r15                            #! PC = 0x55555555581f
	mulx   %rcx,%r9,%rax                            #! PC = 0x555555555824
	xor    %edi,%edi                                #! PC = 0x555555555829
	mulx   %rbp,%r10,%rbx                           #! PC = 0x55555555582b
	adcx   %rax,%r10                                #! PC = 0x555555555830
	mulx   %rsi,%r11,%r12                           #! PC = 0x555555555836
	mov    %rcx,%rdx                                #! PC = 0x55555555583b
	adcx   %rbx,%r11                                #! PC = 0x55555555583e
	adcx   %rdi,%r12                                #! PC = 0x555555555844
	mulx   %rbp,%rax,%rbx                           #! PC = 0x55555555584a
	adox   %rax,%r11                                #! PC = 0x55555555584f
	adcx   %rbx,%r12                                #! PC = 0x555555555855
	mulx   %rsi,%rax,%r13                           #! PC = 0x55555555585b
	mov    %rbp,%rdx                                #! PC = 0x555555555860
	adox   %rax,%r12                                #! PC = 0x555555555863
	adcx   %rdi,%r13                                #! PC = 0x555555555869
	mulx   %rsi,%rax,%r14                           #! PC = 0x55555555586f
	mov    %rcx,%rdx                                #! PC = 0x555555555874
	adox   %rax,%r13                                #! PC = 0x555555555877
	adcx   %rdi,%r14                                #! PC = 0x55555555587d
	adox   %rdi,%r14                                #! PC = 0x555555555883
	adcx   %r9,%r9                                  #! PC = 0x555555555889
	adox   %r15,%r9                                 #! PC = 0x55555555588f
	adcx   %r10,%r10                                #! PC = 0x555555555895
	mulx   %rdx,%rax,%rbx                           #! PC = 0x55555555589b
	mov    %rbp,%rdx                                #! PC = 0x5555555558a0
	adcx   %r11,%r11                                #! PC = 0x5555555558a3
	adox   %rax,%r10                                #! PC = 0x5555555558a9
	adcx   %r12,%r12                                #! PC = 0x5555555558af
	adox   %rbx,%r11                                #! PC = 0x5555555558b5
	mulx   %rdx,%rax,%rbx                           #! PC = 0x5555555558bb
	mov    %rsi,%rdx                                #! PC = 0x5555555558c0
	adcx   %r13,%r13                                #! PC = 0x5555555558c3
	adox   %rax,%r12                                #! PC = 0x5555555558c9
	adcx   %r14,%r14                                #! PC = 0x5555555558cf
	adox   %rbx,%r13                                #! PC = 0x5555555558d5
	mulx   %rdx,%rax,%r15                           #! PC = 0x5555555558db
	mov    $0x26,%edx                               #! PC = 0x5555555558e0
	adox   %rax,%r14                                #! PC = 0x5555555558e5
	adcx   %rdi,%r15                                #! PC = 0x5555555558eb
	adox   %rdi,%r15                                #! PC = 0x5555555558f1
	#jmp    0x555555555900 <x25519_fe64_sqr+256>    #! PC = 0x5555555558f7
	mulx   %r12,%rax,%rbx                           #! PC = 0x555555555900
	adcx   %rax,%r8                                 #! PC = 0x555555555905
	adox   %rbx,%r9                                 #! PC = 0x55555555590b
	mulx   %r13,%rax,%rbx                           #! PC = 0x555555555911
	adcx   %rax,%r9                                 #! PC = 0x555555555916
	adox   %rbx,%r10                                #! PC = 0x55555555591c
	mulx   %r14,%rax,%rbx                           #! PC = 0x555555555922
	adcx   %rax,%r10                                #! PC = 0x555555555927
	adox   %rbx,%r11                                #! PC = 0x55555555592d
	mulx   %r15,%rax,%r12                           #! PC = 0x555555555933
	adcx   %rax,%r11                                #! PC = 0x555555555938
	adox   %rdi,%r12                                #! PC = 0x55555555593e
	adcx   %rdi,%r12                                #! PC = 0x555555555944
	mov    0x10(%rsp),%rdi                          #! EA = L0x7fffffffdb20; Value = 0x00007fffffffdba0; PC = 0x55555555594a
	imul   %rdx,%r12                                #! PC = 0x55555555594f
	add    %r12,%r8                                 #! PC = 0x555555555953
	adc    $0x0,%r9                                 #! PC = 0x555555555956
	adc    $0x0,%r10                                #! PC = 0x55555555595a
	adc    $0x0,%r11                                #! PC = 0x55555555595e
	sbb    %rax,%rax                                #! PC = 0x555555555962
	and    $0x26,%rax                               #! PC = 0x555555555965
	add    %rax,%r8                                 #! PC = 0x555555555969
	mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdba8; PC = 0x55555555596c
	mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdbb0; PC = 0x555555555970
	mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdbb8; PC = 0x555555555974
	mov    %r8,(%rdi)                               #! EA = L0x7fffffffdba0; PC = 0x555555555978
	mov    0x18(%rsp),%r15                          #! EA = L0x7fffffffdb28; Value = 0x00007ffff7ffd000; PC = 0x55555555597b
	mov    0x20(%rsp),%r14                          #! EA = L0x7fffffffdb30; Value = 0x0000555555558df0; PC = 0x555555555980
	mov    0x28(%rsp),%r13                          #! EA = L0x7fffffffdb38; Value = 0x00007fffffffdd78; PC = 0x555555555985
	mov    0x30(%rsp),%r12                          #! EA = L0x7fffffffdb40; Value = 0x0000000000000000; PC = 0x55555555598a
	mov    0x38(%rsp),%rbx                          #! EA = L0x7fffffffdb48; Value = 0x00007fffffffdd68; PC = 0x55555555598f
	mov    0x40(%rsp),%rbp                          #! EA = L0x7fffffffdb50; Value = 0x00007fffffffdc50; PC = 0x555555555994
	lea    0x48(%rsp),%rsp                          #! PC = 0x555555555999
	#! <- SP = 0x7fffffffdb58
	#repz ret                                       #! PC = 0x55555555599e
