(* popper: cv_cec.exe -v -ov a0,a1,a2,a3,a4,a5,a6,a7,b0,b1,b2,b3,b4,b5,b6,b7#c0,c1,c2,c3,c4,c5,c6,c7,d0,d1,d2,d3,d4,d5,d6,d7#e0,e1,e2,e3,e4,e5,e6,e7,f0,f1,f2,f3,f4,f5,f6,f7#g0,g1,g2,g3,g4,g5,g6,g7,h0,h1,h2,h3,h4,h5,h6,h7 sha256_multi_block_avx2.cl ../sha256_block_data_order-aarch64x8.cl
Parsing CryptoLine file:                [OK]            0.147136 seconds
Checking well-formedness:               [OK]            0.037516 seconds
Parsing CryptoLine file:                [OK]            0.036924 seconds
Checking well-formedness:               [OK]            0.033576 seconds
Equivalence of output group #3:         [OK]            1895.832811 seconds
Equivalence of output group #2:         [OK]            1900.639143 seconds
Equivalence of output group #0:         [OK]            1903.427724 seconds
Equivalence of output group #1:         [OK]            1921.821899 seconds
Final result:                           [OK]            1923.965376 seconds
*)
(* csweep popper: cv_cec.exe -v -jobs 8 -ov a0,a1,a2,a3,a4,a5,a6,a7#b0,b1,b2,b3,b4,b5,b6,b7#c0,c1,c2,c3,c4,c5,c6,c7#d0,d1,d2,d3,d4,d5,d6,d7#e0,e1,e2,e3,e4,e5,e6,e7#f0,f1,f2,f3,f4,f5,f6,f7#g0,g1,g2,g3,g4,g5,g6,g7#h0,h1,h2,h3,h4,h5,h6,h7 sha256_multi_block_avx2.cl ../sha256_block_data_order-aarch64x8.cl
Parsing CryptoLine file:                [OK]            0.144381 seconds
Checking well-formedness:               [OK]            0.037969 seconds
Parsing CryptoLine file:                [OK]            0.035412 seconds
Checking well-formedness:               [OK]            0.033896 seconds
Equivalence of output group #1:         [OK]            928.858589 seconds
Equivalence of output group #4:         [OK]            952.922424 seconds
Equivalence of output group #7:         [OK]            951.485719 seconds
Equivalence of output group #3:         [OK]            960.952419 seconds
Equivalence of output group #0:         [OK]            970.302403 seconds
Equivalence of output group #6:         [OK]            970.339880 seconds
Equivalence of output group #2:         [OK]            975.782380 seconds
Equivalence of output group #5:         [OK]            1124.748463 seconds
Final result:                           [OK]            1128.629233 seconds
*)
(* iprove popper: cv_cec.exe -v -jobs 8 -ov a0,a1,a2,a3,a4,a5,a6,a7#b0,b1,b2,b3,b4,b5,b6,b7#c0,c1,c2,c3,c4,c5,c6,c7#d0,d1,d2,d3,d4,d5,d6,d7#e0,e1,e2,e3,e4,e5,e6,e7#f0,f1,f2,f3,f4,f5,f6,f7#g0,g1,g2,g3,g4,g5,g6,g7#h0,h1,h2,h3,h4,h5,h6,h7 sha256_multi_block_avx2.cl ../sha256_block_data_order-aarch64x8.cl
Parsing CryptoLine file:                [OK]            0.135298 seconds
Checking well-formedness:               [OK]            0.036969 seconds
Parsing CryptoLine file:                [OK]            0.038871 seconds
Checking well-formedness:               [OK]            0.033191 seconds
Equivalence of output group #1:         [OK]            872.368534 seconds
Equivalence of output group #4:         [OK]            911.086184 seconds
Equivalence of output group #3:         [OK]            915.858011 seconds
Equivalence of output group #2:         [OK]            919.464929 seconds
Equivalence of output group #6:         [OK]            936.275057 seconds
Equivalence of output group #5:         [OK]            964.973252 seconds
Equivalence of output group #0:         [OK]            1002.646842 seconds
Equivalence of output group #7:         [OK]            1004.428886 seconds
Final result:                           [OK]            1009.671340 seconds
*)
(* cec popper: cv_cec.exe -v -jobs 8 -ov a0,a1,a2,a3,a4,a5,a6,a7#b0,b1,b2,b3,b4,b5,b6,b7#c0,c1,c2,c3,c4,c5,c6,c7#d0,d1,d2,d3,d4,d5,d6,d7#e0,e1,e2,e3,e4,e5,e6,e7#f0,f1,f2,f3,f4,f5,f6,f7#g0,g1,g2,g3,g4,g5,g6,g7#h0,h1,h2,h3,h4,h5,h6,h7 sha256_multi_block_avx2.cl ../sha256_block_data_order-aarch64x8.cl
Parsing CryptoLine file:                [OK]            0.144448 seconds
Checking well-formedness:               [OK]            0.037596 seconds
Parsing CryptoLine file:                [OK]            0.035901 seconds
Checking well-formedness:               [OK]            0.033895 seconds
Equivalence of output group #1:         [OK]            874.822898 seconds
Equivalence of output group #3:         [OK]            891.347647 seconds
Equivalence of output group #0:         [OK]            895.499203 seconds
Equivalence of output group #5:         [OK]            895.798802 seconds
Equivalence of output group #4:         [OK]            896.554134 seconds
Equivalence of output group #2:         [OK]            900.655741 seconds
Equivalence of output group #6:         [OK]            902.237238 seconds
Equivalence of output group #7:         [OK]            906.934491 seconds
Final result:                           [OK]            912.199257 seconds
*)

proc main (
uint8 A00, uint8 A01, uint8 A02, uint8 A03, uint8 A04,
uint8 A05, uint8 A06, uint8 A07, uint8 A08, uint8 A09,
uint8 A10, uint8 A11, uint8 A12, uint8 A13, uint8 A14,
uint8 A15, uint8 A16, uint8 A17, uint8 A18, uint8 A19,
uint8 A20, uint8 A21, uint8 A22, uint8 A23, uint8 A24,
uint8 A25, uint8 A26, uint8 A27, uint8 A28, uint8 A29,
uint8 A30, uint8 A31, uint8 A32, uint8 A33, uint8 A34,
uint8 A35, uint8 A36, uint8 A37, uint8 A38, uint8 A39,
uint8 A40, uint8 A41, uint8 A42, uint8 A43, uint8 A44,
uint8 A45, uint8 A46, uint8 A47, uint8 A48, uint8 A49,
uint8 A50, uint8 A51, uint8 A52, uint8 A53, uint8 A54,
uint8 A55, uint8 A56, uint8 A57, uint8 A58, uint8 A59,
uint8 A60, uint8 A61, uint8 A62, uint8 A63,
uint32 A0, uint32 A1, uint32 A2, uint32 A3,
uint32 A4, uint32 A5, uint32 A6, uint32 A7
,
uint8 B00, uint8 B01, uint8 B02, uint8 B03, uint8 B04,
uint8 B05, uint8 B06, uint8 B07, uint8 B08, uint8 B09,
uint8 B10, uint8 B11, uint8 B12, uint8 B13, uint8 B14,
uint8 B15, uint8 B16, uint8 B17, uint8 B18, uint8 B19,
uint8 B20, uint8 B21, uint8 B22, uint8 B23, uint8 B24,
uint8 B25, uint8 B26, uint8 B27, uint8 B28, uint8 B29,
uint8 B30, uint8 B31, uint8 B32, uint8 B33, uint8 B34,
uint8 B35, uint8 B36, uint8 B37, uint8 B38, uint8 B39,
uint8 B40, uint8 B41, uint8 B42, uint8 B43, uint8 B44,
uint8 B45, uint8 B46, uint8 B47, uint8 B48, uint8 B49,
uint8 B50, uint8 B51, uint8 B52, uint8 B53, uint8 B54,
uint8 B55, uint8 B56, uint8 B57, uint8 B58, uint8 B59,
uint8 B60, uint8 B61, uint8 B62, uint8 B63,
uint32 B0, uint32 B1, uint32 B2, uint32 B3,
uint32 B4, uint32 B5, uint32 B6, uint32 B7
,
uint8 C00, uint8 C01, uint8 C02, uint8 C03, uint8 C04,
uint8 C05, uint8 C06, uint8 C07, uint8 C08, uint8 C09,
uint8 C10, uint8 C11, uint8 C12, uint8 C13, uint8 C14,
uint8 C15, uint8 C16, uint8 C17, uint8 C18, uint8 C19,
uint8 C20, uint8 C21, uint8 C22, uint8 C23, uint8 C24,
uint8 C25, uint8 C26, uint8 C27, uint8 C28, uint8 C29,
uint8 C30, uint8 C31, uint8 C32, uint8 C33, uint8 C34,
uint8 C35, uint8 C36, uint8 C37, uint8 C38, uint8 C39,
uint8 C40, uint8 C41, uint8 C42, uint8 C43, uint8 C44,
uint8 C45, uint8 C46, uint8 C47, uint8 C48, uint8 C49,
uint8 C50, uint8 C51, uint8 C52, uint8 C53, uint8 C54,
uint8 C55, uint8 C56, uint8 C57, uint8 C58, uint8 C59,
uint8 C60, uint8 C61, uint8 C62, uint8 C63,
uint32 C0, uint32 C1, uint32 C2, uint32 C3,
uint32 C4, uint32 C5, uint32 C6, uint32 C7
,
uint8 D00, uint8 D01, uint8 D02, uint8 D03, uint8 D04,
uint8 D05, uint8 D06, uint8 D07, uint8 D08, uint8 D09,
uint8 D10, uint8 D11, uint8 D12, uint8 D13, uint8 D14,
uint8 D15, uint8 D16, uint8 D17, uint8 D18, uint8 D19,
uint8 D20, uint8 D21, uint8 D22, uint8 D23, uint8 D24,
uint8 D25, uint8 D26, uint8 D27, uint8 D28, uint8 D29,
uint8 D30, uint8 D31, uint8 D32, uint8 D33, uint8 D34,
uint8 D35, uint8 D36, uint8 D37, uint8 D38, uint8 D39,
uint8 D40, uint8 D41, uint8 D42, uint8 D43, uint8 D44,
uint8 D45, uint8 D46, uint8 D47, uint8 D48, uint8 D49,
uint8 D50, uint8 D51, uint8 D52, uint8 D53, uint8 D54,
uint8 D55, uint8 D56, uint8 D57, uint8 D58, uint8 D59,
uint8 D60, uint8 D61, uint8 D62, uint8 D63,
uint32 D0, uint32 D1, uint32 D2, uint32 D3,
uint32 D4, uint32 D5, uint32 D6, uint32 D7
,
uint8 E00, uint8 E01, uint8 E02, uint8 E03, uint8 E04,
uint8 E05, uint8 E06, uint8 E07, uint8 E08, uint8 E09,
uint8 E10, uint8 E11, uint8 E12, uint8 E13, uint8 E14,
uint8 E15, uint8 E16, uint8 E17, uint8 E18, uint8 E19,
uint8 E20, uint8 E21, uint8 E22, uint8 E23, uint8 E24,
uint8 E25, uint8 E26, uint8 E27, uint8 E28, uint8 E29,
uint8 E30, uint8 E31, uint8 E32, uint8 E33, uint8 E34,
uint8 E35, uint8 E36, uint8 E37, uint8 E38, uint8 E39,
uint8 E40, uint8 E41, uint8 E42, uint8 E43, uint8 E44,
uint8 E45, uint8 E46, uint8 E47, uint8 E48, uint8 E49,
uint8 E50, uint8 E51, uint8 E52, uint8 E53, uint8 E54,
uint8 E55, uint8 E56, uint8 E57, uint8 E58, uint8 E59,
uint8 E60, uint8 E61, uint8 E62, uint8 E63,
uint32 E0, uint32 E1, uint32 E2, uint32 E3,
uint32 E4, uint32 E5, uint32 E6, uint32 E7
,
uint8 F00, uint8 F01, uint8 F02, uint8 F03, uint8 F04,
uint8 F05, uint8 F06, uint8 F07, uint8 F08, uint8 F09,
uint8 F10, uint8 F11, uint8 F12, uint8 F13, uint8 F14,
uint8 F15, uint8 F16, uint8 F17, uint8 F18, uint8 F19,
uint8 F20, uint8 F21, uint8 F22, uint8 F23, uint8 F24,
uint8 F25, uint8 F26, uint8 F27, uint8 F28, uint8 F29,
uint8 F30, uint8 F31, uint8 F32, uint8 F33, uint8 F34,
uint8 F35, uint8 F36, uint8 F37, uint8 F38, uint8 F39,
uint8 F40, uint8 F41, uint8 F42, uint8 F43, uint8 F44,
uint8 F45, uint8 F46, uint8 F47, uint8 F48, uint8 F49,
uint8 F50, uint8 F51, uint8 F52, uint8 F53, uint8 F54,
uint8 F55, uint8 F56, uint8 F57, uint8 F58, uint8 F59,
uint8 F60, uint8 F61, uint8 F62, uint8 F63,
uint32 F0, uint32 F1, uint32 F2, uint32 F3,
uint32 F4, uint32 F5, uint32 F6, uint32 F7
,
uint8 G00, uint8 G01, uint8 G02, uint8 G03, uint8 G04,
uint8 G05, uint8 G06, uint8 G07, uint8 G08, uint8 G09,
uint8 G10, uint8 G11, uint8 G12, uint8 G13, uint8 G14,
uint8 G15, uint8 G16, uint8 G17, uint8 G18, uint8 G19,
uint8 G20, uint8 G21, uint8 G22, uint8 G23, uint8 G24,
uint8 G25, uint8 G26, uint8 G27, uint8 G28, uint8 G29,
uint8 G30, uint8 G31, uint8 G32, uint8 G33, uint8 G34,
uint8 G35, uint8 G36, uint8 G37, uint8 G38, uint8 G39,
uint8 G40, uint8 G41, uint8 G42, uint8 G43, uint8 G44,
uint8 G45, uint8 G46, uint8 G47, uint8 G48, uint8 G49,
uint8 G50, uint8 G51, uint8 G52, uint8 G53, uint8 G54,
uint8 G55, uint8 G56, uint8 G57, uint8 G58, uint8 G59,
uint8 G60, uint8 G61, uint8 G62, uint8 G63,
uint32 G0, uint32 G1, uint32 G2, uint32 G3,
uint32 G4, uint32 G5, uint32 G6, uint32 G7
,
uint8 H00, uint8 H01, uint8 H02, uint8 H03, uint8 H04,
uint8 H05, uint8 H06, uint8 H07, uint8 H08, uint8 H09,
uint8 H10, uint8 H11, uint8 H12, uint8 H13, uint8 H14,
uint8 H15, uint8 H16, uint8 H17, uint8 H18, uint8 H19,
uint8 H20, uint8 H21, uint8 H22, uint8 H23, uint8 H24,
uint8 H25, uint8 H26, uint8 H27, uint8 H28, uint8 H29,
uint8 H30, uint8 H31, uint8 H32, uint8 H33, uint8 H34,
uint8 H35, uint8 H36, uint8 H37, uint8 H38, uint8 H39,
uint8 H40, uint8 H41, uint8 H42, uint8 H43, uint8 H44,
uint8 H45, uint8 H46, uint8 H47, uint8 H48, uint8 H49,
uint8 H50, uint8 H51, uint8 H52, uint8 H53, uint8 H54,
uint8 H55, uint8 H56, uint8 H57, uint8 H58, uint8 H59,
uint8 H60, uint8 H61, uint8 H62, uint8 H63,
uint32 H0, uint32 H1, uint32 H2, uint32 H3,
uint32 H4, uint32 H5, uint32 H6, uint32 H7
) =
{
  true
  &&
  true
}

mov L0x7fffffffd9e8 1@uint32; mov L0x7fffffffd9f8 1@uint32;
mov L0x7fffffffda08 1@uint32; mov L0x7fffffffda18 1@uint32;
mov L0x7fffffffda28 1@uint32; mov L0x7fffffffda38 1@uint32;
mov L0x7fffffffda48 1@uint32; mov L0x7fffffffda58 1@uint32;


nondet rsp@uint32; 
nondet L0x7fffffffd998@uint32; nondet L0x7fffffffd9a0@uint32;
nondet L0x7fffffffd9a8@uint32; nondet L0x7fffffffd9b0@uint32;
nondet L0x7fffffffd9b8@uint32; nondet L0x7fffffffd9c0@uint32;
nondet L0x7fffffffd9e0@uint32; nondet L0x7fffffffd9f0@uint32;
nondet L0x7fffffffda00@uint32; nondet L0x7fffffffda10@uint32;
nondet L0x7fffffffda20@uint32; nondet L0x7fffffffda30@uint32;
nondet L0x7fffffffda40@uint32; nondet L0x7fffffffda50@uint32;


mov L0x55555555d400 0x00010203@uint32; mov L0x55555555d404 0x04050607@uint32;
mov L0x55555555d408 0x08090a0b@uint32; mov L0x55555555d40c 0x0c0d0e0f@uint32;
mov L0x55555555d410 0x00010203@uint32; mov L0x55555555d414 0x04050607@uint32;
mov L0x55555555d418 0x08090a0b@uint32; mov L0x55555555d41c 0x0c0d0e0f@uint32;


join H A03 A02; join L A01 A00; join L0x5555555612a0 H L;
join H A07 A06; join L A05 A04; join L0x5555555612a4 H L;
join H A11 A10; join L A09 A08; join L0x5555555612a8 H L;
join H A15 A14; join L A13 A12; join L0x5555555612ac H L;
join H A19 A18; join L A17 A16; join L0x5555555612b0 H L;
join H A23 A22; join L A21 A20; join L0x5555555612b4 H L;
join H A27 A26; join L A25 A24; join L0x5555555612b8 H L;
join H A31 A30; join L A29 A28; join L0x5555555612bc H L;
join H A35 A34; join L A33 A32; join L0x5555555612c0 H L;
join H A39 A38; join L A37 A36; join L0x5555555612c4 H L;
join H A43 A42; join L A41 A40; join L0x5555555612c8 H L;
join H A47 A46; join L A45 A44; join L0x5555555612cc H L;
join H A51 A50; join L A49 A48; join L0x5555555612d0 H L;
join H A55 A54; join L A53 A52; join L0x5555555612d4 H L;
join H A59 A58; join L A57 A56; join L0x5555555612d8 H L;
join H A63 A62; join L A61 A60; join L0x5555555612dc H L;

join H B03 B02; join L B01 B00; join L0x5555555612f0 H L;
join H B07 B06; join L B05 B04; join L0x5555555612f4 H L;
join H B11 B10; join L B09 B08; join L0x5555555612f8 H L;
join H B15 B14; join L B13 B12; join L0x5555555612fc H L;
join H B19 B18; join L B17 B16; join L0x555555561300 H L;
join H B23 B22; join L B21 B20; join L0x555555561304 H L;
join H B27 B26; join L B25 B24; join L0x555555561308 H L;
join H B31 B30; join L B29 B28; join L0x55555556130c H L;
join H B35 B34; join L B33 B32; join L0x555555561310 H L;
join H B39 B38; join L B37 B36; join L0x555555561314 H L;
join H B43 B42; join L B41 B40; join L0x555555561318 H L;
join H B47 B46; join L B45 B44; join L0x55555556131c H L;
join H B51 B50; join L B49 B48; join L0x555555561320 H L;
join H B55 B54; join L B53 B52; join L0x555555561324 H L;
join H B59 B58; join L B57 B56; join L0x555555561328 H L;
join H B63 B62; join L B61 B60; join L0x55555556132c H L;

join H C03 C02; join L C01 C00; join L0x555555561340 H L;
join H C07 C06; join L C05 C04; join L0x555555561344 H L;
join H C11 C10; join L C09 C08; join L0x555555561348 H L;
join H C15 C14; join L C13 C12; join L0x55555556134c H L;
join H C19 C18; join L C17 C16; join L0x555555561350 H L;
join H C23 C22; join L C21 C20; join L0x555555561354 H L;
join H C27 C26; join L C25 C24; join L0x555555561358 H L;
join H C31 C30; join L C29 C28; join L0x55555556135c H L;
join H C35 C34; join L C33 C32; join L0x555555561360 H L;
join H C39 C38; join L C37 C36; join L0x555555561364 H L;
join H C43 C42; join L C41 C40; join L0x555555561368 H L;
join H C47 C46; join L C45 C44; join L0x55555556136c H L;
join H C51 C50; join L C49 C48; join L0x555555561370 H L;
join H C55 C54; join L C53 C52; join L0x555555561374 H L;
join H C59 C58; join L C57 C56; join L0x555555561378 H L;
join H C63 C62; join L C61 C60; join L0x55555556137c H L;

join H D03 D02; join L D01 D00; join L0x555555561390 H L;
join H D07 D06; join L D05 D04; join L0x555555561394 H L;
join H D11 D10; join L D09 D08; join L0x555555561398 H L;
join H D15 D14; join L D13 D12; join L0x55555556139c H L;
join H D19 D18; join L D17 D16; join L0x5555555613a0 H L;
join H D23 D22; join L D21 D20; join L0x5555555613a4 H L;
join H D27 D26; join L D25 D24; join L0x5555555613a8 H L;
join H D31 D30; join L D29 D28; join L0x5555555613ac H L;
join H D35 D34; join L D33 D32; join L0x5555555613b0 H L;
join H D39 D38; join L D37 D36; join L0x5555555613b4 H L;
join H D43 D42; join L D41 D40; join L0x5555555613b8 H L;
join H D47 D46; join L D45 D44; join L0x5555555613bc H L;
join H D51 D50; join L D49 D48; join L0x5555555613c0 H L;
join H D55 D54; join L D53 D52; join L0x5555555613c4 H L;
join H D59 D58; join L D57 D56; join L0x5555555613c8 H L;
join H D63 D62; join L D61 D60; join L0x5555555613cc H L;

join H E03 E02; join L E01 E00; join L0x5555555613e0 H L;
join H E07 E06; join L E05 E04; join L0x5555555613e4 H L;
join H E11 E10; join L E09 E08; join L0x5555555613e8 H L;
join H E15 E14; join L E13 E12; join L0x5555555613ec H L;
join H E19 E18; join L E17 E16; join L0x5555555613f0 H L;
join H E23 E22; join L E21 E20; join L0x5555555613f4 H L;
join H E27 E26; join L E25 E24; join L0x5555555613f8 H L;
join H E31 E30; join L E29 E28; join L0x5555555613fc H L;
join H E35 E34; join L E33 E32; join L0x555555561400 H L;
join H E39 E38; join L E37 E36; join L0x555555561404 H L;
join H E43 E42; join L E41 E40; join L0x555555561408 H L;
join H E47 E46; join L E45 E44; join L0x55555556140c H L;
join H E51 E50; join L E49 E48; join L0x555555561410 H L;
join H E55 E54; join L E53 E52; join L0x555555561414 H L;
join H E59 E58; join L E57 E56; join L0x555555561418 H L;
join H E63 E62; join L E61 E60; join L0x55555556141c H L;

join H F03 F02; join L F01 F00; join L0x555555561430 H L;
join H F07 F06; join L F05 F04; join L0x555555561434 H L;
join H F11 F10; join L F09 F08; join L0x555555561438 H L;
join H F15 F14; join L F13 F12; join L0x55555556143c H L;
join H F19 F18; join L F17 F16; join L0x555555561440 H L;
join H F23 F22; join L F21 F20; join L0x555555561444 H L;
join H F27 F26; join L F25 F24; join L0x555555561448 H L;
join H F31 F30; join L F29 F28; join L0x55555556144c H L;
join H F35 F34; join L F33 F32; join L0x555555561450 H L;
join H F39 F38; join L F37 F36; join L0x555555561454 H L;
join H F43 F42; join L F41 F40; join L0x555555561458 H L;
join H F47 F46; join L F45 F44; join L0x55555556145c H L;
join H F51 F50; join L F49 F48; join L0x555555561460 H L;
join H F55 F54; join L F53 F52; join L0x555555561464 H L;
join H F59 F58; join L F57 F56; join L0x555555561468 H L;
join H F63 F62; join L F61 F60; join L0x55555556146c H L;

join H G03 G02; join L G01 G00; join L0x555555561480 H L;
join H G07 G06; join L G05 G04; join L0x555555561484 H L;
join H G11 G10; join L G09 G08; join L0x555555561488 H L;
join H G15 G14; join L G13 G12; join L0x55555556148c H L;
join H G19 G18; join L G17 G16; join L0x555555561490 H L;
join H G23 G22; join L G21 G20; join L0x555555561494 H L;
join H G27 G26; join L G25 G24; join L0x555555561498 H L;
join H G31 G30; join L G29 G28; join L0x55555556149c H L;
join H G35 G34; join L G33 G32; join L0x5555555614a0 H L;
join H G39 G38; join L G37 G36; join L0x5555555614a4 H L;
join H G43 G42; join L G41 G40; join L0x5555555614a8 H L;
join H G47 G46; join L G45 G44; join L0x5555555614ac H L;
join H G51 G50; join L G49 G48; join L0x5555555614b0 H L;
join H G55 G54; join L G53 G52; join L0x5555555614b4 H L;
join H G59 G58; join L G57 G56; join L0x5555555614b8 H L;
join H G63 G62; join L G61 G60; join L0x5555555614bc H L;

join H H03 H02; join L H01 H00; join L0x5555555614d0 H L;
join H H07 H06; join L H05 H04; join L0x5555555614d4 H L;
join H H11 H10; join L H09 H08; join L0x5555555614d8 H L;
join H H15 H14; join L H13 H12; join L0x5555555614dc H L;
join H H19 H18; join L H17 H16; join L0x5555555614e0 H L;
join H H23 H22; join L H21 H20; join L0x5555555614e4 H L;
join H H27 H26; join L H25 H24; join L0x5555555614e8 H L;
join H H31 H30; join L H29 H28; join L0x5555555614ec H L;
join H H35 H34; join L H33 H32; join L0x5555555614f0 H L;
join H H39 H38; join L H37 H36; join L0x5555555614f4 H L;
join H H43 H42; join L H41 H40; join L0x5555555614f8 H L;
join H H47 H46; join L H45 H44; join L0x5555555614fc H L;
join H H51 H50; join L H49 H48; join L0x555555561500 H L;
join H H55 H54; join L H53 H52; join L0x555555561504 H L;
join H H59 H58; join L H57 H56; join L0x555555561508 H L;
join H H63 H62; join L H61 H60; join L0x55555556150c H L;

mov L0x7fffffffda60 A0; mov L0x7fffffffda64 B0;
mov L0x7fffffffda68 C0; mov L0x7fffffffda6c D0;
mov L0x7fffffffda70 E0; mov L0x7fffffffda74 F0;
mov L0x7fffffffda78 G0; mov L0x7fffffffda7c H0;
mov L0x7fffffffda80 A1; mov L0x7fffffffda84 B1;
mov L0x7fffffffda88 C1; mov L0x7fffffffda8c D1;
mov L0x7fffffffda90 E1; mov L0x7fffffffda94 F1;
mov L0x7fffffffda98 G1; mov L0x7fffffffda9c H1;
mov L0x7fffffffdaa0 A2; mov L0x7fffffffdaa4 B2;
mov L0x7fffffffdaa8 C2; mov L0x7fffffffdaac D2;
mov L0x7fffffffdab0 E2; mov L0x7fffffffdab4 F2;
mov L0x7fffffffdab8 G2; mov L0x7fffffffdabc H2;
mov L0x7fffffffdac0 A3; mov L0x7fffffffdac4 B3;
mov L0x7fffffffdac8 C3; mov L0x7fffffffdacc D3;
mov L0x7fffffffdad0 E3; mov L0x7fffffffdad4 F3;
mov L0x7fffffffdad8 G3; mov L0x7fffffffdadc H3;
mov L0x7fffffffdae0 A4; mov L0x7fffffffdae4 B4;
mov L0x7fffffffdae8 C4; mov L0x7fffffffdaec D4;
mov L0x7fffffffdaf0 E4; mov L0x7fffffffdaf4 F4;
mov L0x7fffffffdaf8 G4; mov L0x7fffffffdafc H4;
mov L0x7fffffffdb00 A5; mov L0x7fffffffdb04 B5;
mov L0x7fffffffdb08 C5; mov L0x7fffffffdb0c D5;
mov L0x7fffffffdb10 E5; mov L0x7fffffffdb14 F5;
mov L0x7fffffffdb18 G5; mov L0x7fffffffdb1c H5;
mov L0x7fffffffdb20 A6; mov L0x7fffffffdb24 B6;
mov L0x7fffffffdb28 C6; mov L0x7fffffffdb2c D6;
mov L0x7fffffffdb30 E6; mov L0x7fffffffdb34 F6;
mov L0x7fffffffdb38 G6; mov L0x7fffffffdb3c H6;
mov L0x7fffffffdb40 A7; mov L0x7fffffffdb44 B7;
mov L0x7fffffffdb48 C7; mov L0x7fffffffdb4c D7;
mov L0x7fffffffdb50 E7; mov L0x7fffffffdb54 F7;
mov L0x7fffffffdb58 G7; mov L0x7fffffffdb5c H7;
(*
mov L0x7fffffffda60 0x6a09e667@uint32; mov L0x7fffffffda64 0x6a09e667@uint32;
mov L0x7fffffffda68 0x6a09e667@uint32; mov L0x7fffffffda6c 0x6a09e667@uint32;
mov L0x7fffffffda70 0x6a09e667@uint32; mov L0x7fffffffda74 0x6a09e667@uint32;
mov L0x7fffffffda78 0x6a09e667@uint32; mov L0x7fffffffda7c 0x6a09e667@uint32;
mov L0x7fffffffda80 0xbb67ae85@uint32; mov L0x7fffffffda84 0xbb67ae85@uint32;
mov L0x7fffffffda88 0xbb67ae85@uint32; mov L0x7fffffffda8c 0xbb67ae85@uint32;
mov L0x7fffffffda90 0xbb67ae85@uint32; mov L0x7fffffffda94 0xbb67ae85@uint32;
mov L0x7fffffffda98 0xbb67ae85@uint32; mov L0x7fffffffda9c 0xbb67ae85@uint32;
mov L0x7fffffffdaa0 0x3c6ef372@uint32; mov L0x7fffffffdaa4 0x3c6ef372@uint32;
mov L0x7fffffffdaa8 0x3c6ef372@uint32; mov L0x7fffffffdaac 0x3c6ef372@uint32;
mov L0x7fffffffdab0 0x3c6ef372@uint32; mov L0x7fffffffdab4 0x3c6ef372@uint32;
mov L0x7fffffffdab8 0x3c6ef372@uint32; mov L0x7fffffffdabc 0x3c6ef372@uint32;
mov L0x7fffffffdac0 0xa54ff53a@uint32; mov L0x7fffffffdac4 0xa54ff53a@uint32;
mov L0x7fffffffdac8 0xa54ff53a@uint32; mov L0x7fffffffdacc 0xa54ff53a@uint32;
mov L0x7fffffffdad0 0xa54ff53a@uint32; mov L0x7fffffffdad4 0xa54ff53a@uint32;
mov L0x7fffffffdad8 0xa54ff53a@uint32; mov L0x7fffffffdadc 0xa54ff53a@uint32;
mov L0x7fffffffdae0 0x510e527f@uint32; mov L0x7fffffffdae4 0x510e527f@uint32;
mov L0x7fffffffdae8 0x510e527f@uint32; mov L0x7fffffffdaec 0x510e527f@uint32;
mov L0x7fffffffdaf0 0x510e527f@uint32; mov L0x7fffffffdaf4 0x510e527f@uint32;
mov L0x7fffffffdaf8 0x510e527f@uint32; mov L0x7fffffffdafc 0x510e527f@uint32;
mov L0x7fffffffdb00 0x9b05688c@uint32; mov L0x7fffffffdb04 0x9b05688c@uint32;
mov L0x7fffffffdb08 0x9b05688c@uint32; mov L0x7fffffffdb0c 0x9b05688c@uint32;
mov L0x7fffffffdb10 0x9b05688c@uint32; mov L0x7fffffffdb14 0x9b05688c@uint32;
mov L0x7fffffffdb18 0x9b05688c@uint32; mov L0x7fffffffdb1c 0x9b05688c@uint32;
mov L0x7fffffffdb20 0x1f83d9ab@uint32; mov L0x7fffffffdb24 0x1f83d9ab@uint32;
mov L0x7fffffffdb28 0x1f83d9ab@uint32; mov L0x7fffffffdb2c 0x1f83d9ab@uint32;
mov L0x7fffffffdb30 0x1f83d9ab@uint32; mov L0x7fffffffdb34 0x1f83d9ab@uint32;
mov L0x7fffffffdb38 0x1f83d9ab@uint32; mov L0x7fffffffdb3c 0x1f83d9ab@uint32;
mov L0x7fffffffdb40 0x5be0cd19@uint32; mov L0x7fffffffdb44 0x5be0cd19@uint32;
mov L0x7fffffffdb48 0x5be0cd19@uint32; mov L0x7fffffffdb4c 0x5be0cd19@uint32;
mov L0x7fffffffdb50 0x5be0cd19@uint32; mov L0x7fffffffdb54 0x5be0cd19@uint32;
mov L0x7fffffffdb58 0x5be0cd19@uint32; mov L0x7fffffffdb5c 0x5be0cd19@uint32;
*)

mov L0x55555555cc00 0x428a2f98@uint32; mov L0x55555555cc04 0x428a2f98@uint32;
mov L0x55555555cc08 0x428a2f98@uint32; mov L0x55555555cc0c 0x428a2f98@uint32;
mov L0x55555555cc10 0x428a2f98@uint32; mov L0x55555555cc14 0x428a2f98@uint32;
mov L0x55555555cc18 0x428a2f98@uint32; mov L0x55555555cc1c 0x428a2f98@uint32;
mov L0x55555555cc20 0x71374491@uint32; mov L0x55555555cc24 0x71374491@uint32;
mov L0x55555555cc28 0x71374491@uint32; mov L0x55555555cc2c 0x71374491@uint32;
mov L0x55555555cc30 0x71374491@uint32; mov L0x55555555cc34 0x71374491@uint32;
mov L0x55555555cc38 0x71374491@uint32; mov L0x55555555cc3c 0x71374491@uint32;
mov L0x55555555cc40 0xb5c0fbcf@uint32; mov L0x55555555cc44 0xb5c0fbcf@uint32;
mov L0x55555555cc48 0xb5c0fbcf@uint32; mov L0x55555555cc4c 0xb5c0fbcf@uint32;
mov L0x55555555cc50 0xb5c0fbcf@uint32; mov L0x55555555cc54 0xb5c0fbcf@uint32;
mov L0x55555555cc58 0xb5c0fbcf@uint32; mov L0x55555555cc5c 0xb5c0fbcf@uint32;
mov L0x55555555cc60 0xe9b5dba5@uint32; mov L0x55555555cc64 0xe9b5dba5@uint32;
mov L0x55555555cc68 0xe9b5dba5@uint32; mov L0x55555555cc6c 0xe9b5dba5@uint32;
mov L0x55555555cc70 0xe9b5dba5@uint32; mov L0x55555555cc74 0xe9b5dba5@uint32;
mov L0x55555555cc78 0xe9b5dba5@uint32; mov L0x55555555cc7c 0xe9b5dba5@uint32;
mov L0x55555555cc80 0x3956c25b@uint32; mov L0x55555555cc84 0x3956c25b@uint32;
mov L0x55555555cc88 0x3956c25b@uint32; mov L0x55555555cc8c 0x3956c25b@uint32;
mov L0x55555555cc90 0x3956c25b@uint32; mov L0x55555555cc94 0x3956c25b@uint32;
mov L0x55555555cc98 0x3956c25b@uint32; mov L0x55555555cc9c 0x3956c25b@uint32;
mov L0x55555555cca0 0x59f111f1@uint32; mov L0x55555555cca4 0x59f111f1@uint32;
mov L0x55555555cca8 0x59f111f1@uint32; mov L0x55555555ccac 0x59f111f1@uint32;
mov L0x55555555ccb0 0x59f111f1@uint32; mov L0x55555555ccb4 0x59f111f1@uint32;
mov L0x55555555ccb8 0x59f111f1@uint32; mov L0x55555555ccbc 0x59f111f1@uint32;
mov L0x55555555ccc0 0x923f82a4@uint32; mov L0x55555555ccc4 0x923f82a4@uint32;
mov L0x55555555ccc8 0x923f82a4@uint32; mov L0x55555555cccc 0x923f82a4@uint32;
mov L0x55555555ccd0 0x923f82a4@uint32; mov L0x55555555ccd4 0x923f82a4@uint32;
mov L0x55555555ccd8 0x923f82a4@uint32; mov L0x55555555ccdc 0x923f82a4@uint32;
mov L0x55555555cce0 0xab1c5ed5@uint32; mov L0x55555555cce4 0xab1c5ed5@uint32;
mov L0x55555555cce8 0xab1c5ed5@uint32; mov L0x55555555ccec 0xab1c5ed5@uint32;
mov L0x55555555ccf0 0xab1c5ed5@uint32; mov L0x55555555ccf4 0xab1c5ed5@uint32;
mov L0x55555555ccf8 0xab1c5ed5@uint32; mov L0x55555555ccfc 0xab1c5ed5@uint32;
mov L0x55555555cd00 0xd807aa98@uint32; mov L0x55555555cd04 0xd807aa98@uint32;
mov L0x55555555cd08 0xd807aa98@uint32; mov L0x55555555cd0c 0xd807aa98@uint32;
mov L0x55555555cd10 0xd807aa98@uint32; mov L0x55555555cd14 0xd807aa98@uint32;
mov L0x55555555cd18 0xd807aa98@uint32; mov L0x55555555cd1c 0xd807aa98@uint32;
mov L0x55555555cd20 0x12835b01@uint32; mov L0x55555555cd24 0x12835b01@uint32;
mov L0x55555555cd28 0x12835b01@uint32; mov L0x55555555cd2c 0x12835b01@uint32;
mov L0x55555555cd30 0x12835b01@uint32; mov L0x55555555cd34 0x12835b01@uint32;
mov L0x55555555cd38 0x12835b01@uint32; mov L0x55555555cd3c 0x12835b01@uint32;
mov L0x55555555cd40 0x243185be@uint32; mov L0x55555555cd44 0x243185be@uint32;
mov L0x55555555cd48 0x243185be@uint32; mov L0x55555555cd4c 0x243185be@uint32;
mov L0x55555555cd50 0x243185be@uint32; mov L0x55555555cd54 0x243185be@uint32;
mov L0x55555555cd58 0x243185be@uint32; mov L0x55555555cd5c 0x243185be@uint32;
mov L0x55555555cd60 0x550c7dc3@uint32; mov L0x55555555cd64 0x550c7dc3@uint32;
mov L0x55555555cd68 0x550c7dc3@uint32; mov L0x55555555cd6c 0x550c7dc3@uint32;
mov L0x55555555cd70 0x550c7dc3@uint32; mov L0x55555555cd74 0x550c7dc3@uint32;
mov L0x55555555cd78 0x550c7dc3@uint32; mov L0x55555555cd7c 0x550c7dc3@uint32;
mov L0x55555555cd80 0x72be5d74@uint32; mov L0x55555555cd84 0x72be5d74@uint32;
mov L0x55555555cd88 0x72be5d74@uint32; mov L0x55555555cd8c 0x72be5d74@uint32;
mov L0x55555555cd90 0x72be5d74@uint32; mov L0x55555555cd94 0x72be5d74@uint32;
mov L0x55555555cd98 0x72be5d74@uint32; mov L0x55555555cd9c 0x72be5d74@uint32;
mov L0x55555555cda0 0x80deb1fe@uint32; mov L0x55555555cda4 0x80deb1fe@uint32;
mov L0x55555555cda8 0x80deb1fe@uint32; mov L0x55555555cdac 0x80deb1fe@uint32;
mov L0x55555555cdb0 0x80deb1fe@uint32; mov L0x55555555cdb4 0x80deb1fe@uint32;
mov L0x55555555cdb8 0x80deb1fe@uint32; mov L0x55555555cdbc 0x80deb1fe@uint32;
mov L0x55555555cdc0 0x9bdc06a7@uint32; mov L0x55555555cdc4 0x9bdc06a7@uint32;
mov L0x55555555cdc8 0x9bdc06a7@uint32; mov L0x55555555cdcc 0x9bdc06a7@uint32;
mov L0x55555555cdd0 0x9bdc06a7@uint32; mov L0x55555555cdd4 0x9bdc06a7@uint32;
mov L0x55555555cdd8 0x9bdc06a7@uint32; mov L0x55555555cddc 0x9bdc06a7@uint32;
mov L0x55555555cde0 0xc19bf174@uint32; mov L0x55555555cde4 0xc19bf174@uint32;
mov L0x55555555cde8 0xc19bf174@uint32; mov L0x55555555cdec 0xc19bf174@uint32;
mov L0x55555555cdf0 0xc19bf174@uint32; mov L0x55555555cdf4 0xc19bf174@uint32;
mov L0x55555555cdf8 0xc19bf174@uint32; mov L0x55555555cdfc 0xc19bf174@uint32;
mov L0x55555555ce00 0xe49b69c1@uint32; mov L0x55555555ce04 0xe49b69c1@uint32;
mov L0x55555555ce08 0xe49b69c1@uint32; mov L0x55555555ce0c 0xe49b69c1@uint32;
mov L0x55555555ce10 0xe49b69c1@uint32; mov L0x55555555ce14 0xe49b69c1@uint32;
mov L0x55555555ce18 0xe49b69c1@uint32; mov L0x55555555ce1c 0xe49b69c1@uint32;
mov L0x55555555ce20 0xefbe4786@uint32; mov L0x55555555ce24 0xefbe4786@uint32;
mov L0x55555555ce28 0xefbe4786@uint32; mov L0x55555555ce2c 0xefbe4786@uint32;
mov L0x55555555ce30 0xefbe4786@uint32; mov L0x55555555ce34 0xefbe4786@uint32;
mov L0x55555555ce38 0xefbe4786@uint32; mov L0x55555555ce3c 0xefbe4786@uint32;
mov L0x55555555ce40 0x0fc19dc6@uint32; mov L0x55555555ce44 0x0fc19dc6@uint32;
mov L0x55555555ce48 0x0fc19dc6@uint32; mov L0x55555555ce4c 0x0fc19dc6@uint32;
mov L0x55555555ce50 0x0fc19dc6@uint32; mov L0x55555555ce54 0x0fc19dc6@uint32;
mov L0x55555555ce58 0x0fc19dc6@uint32; mov L0x55555555ce5c 0x0fc19dc6@uint32;
mov L0x55555555ce60 0x240ca1cc@uint32; mov L0x55555555ce64 0x240ca1cc@uint32;
mov L0x55555555ce68 0x240ca1cc@uint32; mov L0x55555555ce6c 0x240ca1cc@uint32;
mov L0x55555555ce70 0x240ca1cc@uint32; mov L0x55555555ce74 0x240ca1cc@uint32;
mov L0x55555555ce78 0x240ca1cc@uint32; mov L0x55555555ce7c 0x240ca1cc@uint32;
mov L0x55555555ce80 0x2de92c6f@uint32; mov L0x55555555ce84 0x2de92c6f@uint32;
mov L0x55555555ce88 0x2de92c6f@uint32; mov L0x55555555ce8c 0x2de92c6f@uint32;
mov L0x55555555ce90 0x2de92c6f@uint32; mov L0x55555555ce94 0x2de92c6f@uint32;
mov L0x55555555ce98 0x2de92c6f@uint32; mov L0x55555555ce9c 0x2de92c6f@uint32;
mov L0x55555555cea0 0x4a7484aa@uint32; mov L0x55555555cea4 0x4a7484aa@uint32;
mov L0x55555555cea8 0x4a7484aa@uint32; mov L0x55555555ceac 0x4a7484aa@uint32;
mov L0x55555555ceb0 0x4a7484aa@uint32; mov L0x55555555ceb4 0x4a7484aa@uint32;
mov L0x55555555ceb8 0x4a7484aa@uint32; mov L0x55555555cebc 0x4a7484aa@uint32;
mov L0x55555555cec0 0x5cb0a9dc@uint32; mov L0x55555555cec4 0x5cb0a9dc@uint32;
mov L0x55555555cec8 0x5cb0a9dc@uint32; mov L0x55555555cecc 0x5cb0a9dc@uint32;
mov L0x55555555ced0 0x5cb0a9dc@uint32; mov L0x55555555ced4 0x5cb0a9dc@uint32;
mov L0x55555555ced8 0x5cb0a9dc@uint32; mov L0x55555555cedc 0x5cb0a9dc@uint32;
mov L0x55555555cee0 0x76f988da@uint32; mov L0x55555555cee4 0x76f988da@uint32;
mov L0x55555555cee8 0x76f988da@uint32; mov L0x55555555ceec 0x76f988da@uint32;
mov L0x55555555cef0 0x76f988da@uint32; mov L0x55555555cef4 0x76f988da@uint32;
mov L0x55555555cef8 0x76f988da@uint32; mov L0x55555555cefc 0x76f988da@uint32;
mov L0x55555555cf00 0x983e5152@uint32; mov L0x55555555cf04 0x983e5152@uint32;
mov L0x55555555cf08 0x983e5152@uint32; mov L0x55555555cf0c 0x983e5152@uint32;
mov L0x55555555cf10 0x983e5152@uint32; mov L0x55555555cf14 0x983e5152@uint32;
mov L0x55555555cf18 0x983e5152@uint32; mov L0x55555555cf1c 0x983e5152@uint32;
mov L0x55555555cf20 0xa831c66d@uint32; mov L0x55555555cf24 0xa831c66d@uint32;
mov L0x55555555cf28 0xa831c66d@uint32; mov L0x55555555cf2c 0xa831c66d@uint32;
mov L0x55555555cf30 0xa831c66d@uint32; mov L0x55555555cf34 0xa831c66d@uint32;
mov L0x55555555cf38 0xa831c66d@uint32; mov L0x55555555cf3c 0xa831c66d@uint32;
mov L0x55555555cf40 0xb00327c8@uint32; mov L0x55555555cf44 0xb00327c8@uint32;
mov L0x55555555cf48 0xb00327c8@uint32; mov L0x55555555cf4c 0xb00327c8@uint32;
mov L0x55555555cf50 0xb00327c8@uint32; mov L0x55555555cf54 0xb00327c8@uint32;
mov L0x55555555cf58 0xb00327c8@uint32; mov L0x55555555cf5c 0xb00327c8@uint32;
mov L0x55555555cf60 0xbf597fc7@uint32; mov L0x55555555cf64 0xbf597fc7@uint32;
mov L0x55555555cf68 0xbf597fc7@uint32; mov L0x55555555cf6c 0xbf597fc7@uint32;
mov L0x55555555cf70 0xbf597fc7@uint32; mov L0x55555555cf74 0xbf597fc7@uint32;
mov L0x55555555cf78 0xbf597fc7@uint32; mov L0x55555555cf7c 0xbf597fc7@uint32;
mov L0x55555555cf80 0xc6e00bf3@uint32; mov L0x55555555cf84 0xc6e00bf3@uint32;
mov L0x55555555cf88 0xc6e00bf3@uint32; mov L0x55555555cf8c 0xc6e00bf3@uint32;
mov L0x55555555cf90 0xc6e00bf3@uint32; mov L0x55555555cf94 0xc6e00bf3@uint32;
mov L0x55555555cf98 0xc6e00bf3@uint32; mov L0x55555555cf9c 0xc6e00bf3@uint32;
mov L0x55555555cfa0 0xd5a79147@uint32; mov L0x55555555cfa4 0xd5a79147@uint32;
mov L0x55555555cfa8 0xd5a79147@uint32; mov L0x55555555cfac 0xd5a79147@uint32;
mov L0x55555555cfb0 0xd5a79147@uint32; mov L0x55555555cfb4 0xd5a79147@uint32;
mov L0x55555555cfb8 0xd5a79147@uint32; mov L0x55555555cfbc 0xd5a79147@uint32;
mov L0x55555555cfc0 0x06ca6351@uint32; mov L0x55555555cfc4 0x06ca6351@uint32;
mov L0x55555555cfc8 0x06ca6351@uint32; mov L0x55555555cfcc 0x06ca6351@uint32;
mov L0x55555555cfd0 0x06ca6351@uint32; mov L0x55555555cfd4 0x06ca6351@uint32;
mov L0x55555555cfd8 0x06ca6351@uint32; mov L0x55555555cfdc 0x06ca6351@uint32;
mov L0x55555555cfe0 0x14292967@uint32; mov L0x55555555cfe4 0x14292967@uint32;
mov L0x55555555cfe8 0x14292967@uint32; mov L0x55555555cfec 0x14292967@uint32;
mov L0x55555555cff0 0x14292967@uint32; mov L0x55555555cff4 0x14292967@uint32;
mov L0x55555555cff8 0x14292967@uint32; mov L0x55555555cffc 0x14292967@uint32;
mov L0x55555555d000 0x27b70a85@uint32; mov L0x55555555d004 0x27b70a85@uint32;
mov L0x55555555d008 0x27b70a85@uint32; mov L0x55555555d00c 0x27b70a85@uint32;
mov L0x55555555d010 0x27b70a85@uint32; mov L0x55555555d014 0x27b70a85@uint32;
mov L0x55555555d018 0x27b70a85@uint32; mov L0x55555555d01c 0x27b70a85@uint32;
mov L0x55555555d020 0x2e1b2138@uint32; mov L0x55555555d024 0x2e1b2138@uint32;
mov L0x55555555d028 0x2e1b2138@uint32; mov L0x55555555d02c 0x2e1b2138@uint32;
mov L0x55555555d030 0x2e1b2138@uint32; mov L0x55555555d034 0x2e1b2138@uint32;
mov L0x55555555d038 0x2e1b2138@uint32; mov L0x55555555d03c 0x2e1b2138@uint32;
mov L0x55555555d040 0x4d2c6dfc@uint32; mov L0x55555555d044 0x4d2c6dfc@uint32;
mov L0x55555555d048 0x4d2c6dfc@uint32; mov L0x55555555d04c 0x4d2c6dfc@uint32;
mov L0x55555555d050 0x4d2c6dfc@uint32; mov L0x55555555d054 0x4d2c6dfc@uint32;
mov L0x55555555d058 0x4d2c6dfc@uint32; mov L0x55555555d05c 0x4d2c6dfc@uint32;
mov L0x55555555d060 0x53380d13@uint32; mov L0x55555555d064 0x53380d13@uint32;
mov L0x55555555d068 0x53380d13@uint32; mov L0x55555555d06c 0x53380d13@uint32;
mov L0x55555555d070 0x53380d13@uint32; mov L0x55555555d074 0x53380d13@uint32;
mov L0x55555555d078 0x53380d13@uint32; mov L0x55555555d07c 0x53380d13@uint32;
mov L0x55555555d080 0x650a7354@uint32; mov L0x55555555d084 0x650a7354@uint32;
mov L0x55555555d088 0x650a7354@uint32; mov L0x55555555d08c 0x650a7354@uint32;
mov L0x55555555d090 0x650a7354@uint32; mov L0x55555555d094 0x650a7354@uint32;
mov L0x55555555d098 0x650a7354@uint32; mov L0x55555555d09c 0x650a7354@uint32;
mov L0x55555555d0a0 0x766a0abb@uint32; mov L0x55555555d0a4 0x766a0abb@uint32;
mov L0x55555555d0a8 0x766a0abb@uint32; mov L0x55555555d0ac 0x766a0abb@uint32;
mov L0x55555555d0b0 0x766a0abb@uint32; mov L0x55555555d0b4 0x766a0abb@uint32;
mov L0x55555555d0b8 0x766a0abb@uint32; mov L0x55555555d0bc 0x766a0abb@uint32;
mov L0x55555555d0c0 0x81c2c92e@uint32; mov L0x55555555d0c4 0x81c2c92e@uint32;
mov L0x55555555d0c8 0x81c2c92e@uint32; mov L0x55555555d0cc 0x81c2c92e@uint32;
mov L0x55555555d0d0 0x81c2c92e@uint32; mov L0x55555555d0d4 0x81c2c92e@uint32;
mov L0x55555555d0d8 0x81c2c92e@uint32; mov L0x55555555d0dc 0x81c2c92e@uint32;
mov L0x55555555d0e0 0x92722c85@uint32; mov L0x55555555d0e4 0x92722c85@uint32;
mov L0x55555555d0e8 0x92722c85@uint32; mov L0x55555555d0ec 0x92722c85@uint32;
mov L0x55555555d0f0 0x92722c85@uint32; mov L0x55555555d0f4 0x92722c85@uint32;
mov L0x55555555d0f8 0x92722c85@uint32; mov L0x55555555d0fc 0x92722c85@uint32;
mov L0x55555555d100 0xa2bfe8a1@uint32; mov L0x55555555d104 0xa2bfe8a1@uint32;
mov L0x55555555d108 0xa2bfe8a1@uint32; mov L0x55555555d10c 0xa2bfe8a1@uint32;
mov L0x55555555d110 0xa2bfe8a1@uint32; mov L0x55555555d114 0xa2bfe8a1@uint32;
mov L0x55555555d118 0xa2bfe8a1@uint32; mov L0x55555555d11c 0xa2bfe8a1@uint32;
mov L0x55555555d120 0xa81a664b@uint32; mov L0x55555555d124 0xa81a664b@uint32;
mov L0x55555555d128 0xa81a664b@uint32; mov L0x55555555d12c 0xa81a664b@uint32;
mov L0x55555555d130 0xa81a664b@uint32; mov L0x55555555d134 0xa81a664b@uint32;
mov L0x55555555d138 0xa81a664b@uint32; mov L0x55555555d13c 0xa81a664b@uint32;
mov L0x55555555d140 0xc24b8b70@uint32; mov L0x55555555d144 0xc24b8b70@uint32;
mov L0x55555555d148 0xc24b8b70@uint32; mov L0x55555555d14c 0xc24b8b70@uint32;
mov L0x55555555d150 0xc24b8b70@uint32; mov L0x55555555d154 0xc24b8b70@uint32;
mov L0x55555555d158 0xc24b8b70@uint32; mov L0x55555555d15c 0xc24b8b70@uint32;
mov L0x55555555d160 0xc76c51a3@uint32; mov L0x55555555d164 0xc76c51a3@uint32;
mov L0x55555555d168 0xc76c51a3@uint32; mov L0x55555555d16c 0xc76c51a3@uint32;
mov L0x55555555d170 0xc76c51a3@uint32; mov L0x55555555d174 0xc76c51a3@uint32;
mov L0x55555555d178 0xc76c51a3@uint32; mov L0x55555555d17c 0xc76c51a3@uint32;
mov L0x55555555d180 0xd192e819@uint32; mov L0x55555555d184 0xd192e819@uint32;
mov L0x55555555d188 0xd192e819@uint32; mov L0x55555555d18c 0xd192e819@uint32;
mov L0x55555555d190 0xd192e819@uint32; mov L0x55555555d194 0xd192e819@uint32;
mov L0x55555555d198 0xd192e819@uint32; mov L0x55555555d19c 0xd192e819@uint32;
mov L0x55555555d1a0 0xd6990624@uint32; mov L0x55555555d1a4 0xd6990624@uint32;
mov L0x55555555d1a8 0xd6990624@uint32; mov L0x55555555d1ac 0xd6990624@uint32;
mov L0x55555555d1b0 0xd6990624@uint32; mov L0x55555555d1b4 0xd6990624@uint32;
mov L0x55555555d1b8 0xd6990624@uint32; mov L0x55555555d1bc 0xd6990624@uint32;
mov L0x55555555d1c0 0xf40e3585@uint32; mov L0x55555555d1c4 0xf40e3585@uint32;
mov L0x55555555d1c8 0xf40e3585@uint32; mov L0x55555555d1cc 0xf40e3585@uint32;
mov L0x55555555d1d0 0xf40e3585@uint32; mov L0x55555555d1d4 0xf40e3585@uint32;
mov L0x55555555d1d8 0xf40e3585@uint32; mov L0x55555555d1dc 0xf40e3585@uint32;
mov L0x55555555d1e0 0x106aa070@uint32; mov L0x55555555d1e4 0x106aa070@uint32;
mov L0x55555555d1e8 0x106aa070@uint32; mov L0x55555555d1ec 0x106aa070@uint32;
mov L0x55555555d1f0 0x106aa070@uint32; mov L0x55555555d1f4 0x106aa070@uint32;
mov L0x55555555d1f8 0x106aa070@uint32; mov L0x55555555d1fc 0x106aa070@uint32;
mov L0x55555555d200 0x19a4c116@uint32; mov L0x55555555d204 0x19a4c116@uint32;
mov L0x55555555d208 0x19a4c116@uint32; mov L0x55555555d20c 0x19a4c116@uint32;
mov L0x55555555d210 0x19a4c116@uint32; mov L0x55555555d214 0x19a4c116@uint32;
mov L0x55555555d218 0x19a4c116@uint32; mov L0x55555555d21c 0x19a4c116@uint32;
mov L0x55555555d220 0x1e376c08@uint32; mov L0x55555555d224 0x1e376c08@uint32;
mov L0x55555555d228 0x1e376c08@uint32; mov L0x55555555d22c 0x1e376c08@uint32;
mov L0x55555555d230 0x1e376c08@uint32; mov L0x55555555d234 0x1e376c08@uint32;
mov L0x55555555d238 0x1e376c08@uint32; mov L0x55555555d23c 0x1e376c08@uint32;
mov L0x55555555d240 0x2748774c@uint32; mov L0x55555555d244 0x2748774c@uint32;
mov L0x55555555d248 0x2748774c@uint32; mov L0x55555555d24c 0x2748774c@uint32;
mov L0x55555555d250 0x2748774c@uint32; mov L0x55555555d254 0x2748774c@uint32;
mov L0x55555555d258 0x2748774c@uint32; mov L0x55555555d25c 0x2748774c@uint32;
mov L0x55555555d260 0x34b0bcb5@uint32; mov L0x55555555d264 0x34b0bcb5@uint32;
mov L0x55555555d268 0x34b0bcb5@uint32; mov L0x55555555d26c 0x34b0bcb5@uint32;
mov L0x55555555d270 0x34b0bcb5@uint32; mov L0x55555555d274 0x34b0bcb5@uint32;
mov L0x55555555d278 0x34b0bcb5@uint32; mov L0x55555555d27c 0x34b0bcb5@uint32;
mov L0x55555555d280 0x391c0cb3@uint32; mov L0x55555555d284 0x391c0cb3@uint32;
mov L0x55555555d288 0x391c0cb3@uint32; mov L0x55555555d28c 0x391c0cb3@uint32;
mov L0x55555555d290 0x391c0cb3@uint32; mov L0x55555555d294 0x391c0cb3@uint32;
mov L0x55555555d298 0x391c0cb3@uint32; mov L0x55555555d29c 0x391c0cb3@uint32;
mov L0x55555555d2a0 0x4ed8aa4a@uint32; mov L0x55555555d2a4 0x4ed8aa4a@uint32;
mov L0x55555555d2a8 0x4ed8aa4a@uint32; mov L0x55555555d2ac 0x4ed8aa4a@uint32;
mov L0x55555555d2b0 0x4ed8aa4a@uint32; mov L0x55555555d2b4 0x4ed8aa4a@uint32;
mov L0x55555555d2b8 0x4ed8aa4a@uint32; mov L0x55555555d2bc 0x4ed8aa4a@uint32;
mov L0x55555555d2c0 0x5b9cca4f@uint32; mov L0x55555555d2c4 0x5b9cca4f@uint32;
mov L0x55555555d2c8 0x5b9cca4f@uint32; mov L0x55555555d2cc 0x5b9cca4f@uint32;
mov L0x55555555d2d0 0x5b9cca4f@uint32; mov L0x55555555d2d4 0x5b9cca4f@uint32;
mov L0x55555555d2d8 0x5b9cca4f@uint32; mov L0x55555555d2dc 0x5b9cca4f@uint32;
mov L0x55555555d2e0 0x682e6ff3@uint32; mov L0x55555555d2e4 0x682e6ff3@uint32;
mov L0x55555555d2e8 0x682e6ff3@uint32; mov L0x55555555d2ec 0x682e6ff3@uint32;
mov L0x55555555d2f0 0x682e6ff3@uint32; mov L0x55555555d2f4 0x682e6ff3@uint32;
mov L0x55555555d2f8 0x682e6ff3@uint32; mov L0x55555555d2fc 0x682e6ff3@uint32;
mov L0x55555555d300 0x748f82ee@uint32; mov L0x55555555d304 0x748f82ee@uint32;
mov L0x55555555d308 0x748f82ee@uint32; mov L0x55555555d30c 0x748f82ee@uint32;
mov L0x55555555d310 0x748f82ee@uint32; mov L0x55555555d314 0x748f82ee@uint32;
mov L0x55555555d318 0x748f82ee@uint32; mov L0x55555555d31c 0x748f82ee@uint32;
mov L0x55555555d320 0x78a5636f@uint32; mov L0x55555555d324 0x78a5636f@uint32;
mov L0x55555555d328 0x78a5636f@uint32; mov L0x55555555d32c 0x78a5636f@uint32;
mov L0x55555555d330 0x78a5636f@uint32; mov L0x55555555d334 0x78a5636f@uint32;
mov L0x55555555d338 0x78a5636f@uint32; mov L0x55555555d33c 0x78a5636f@uint32;
mov L0x55555555d340 0x84c87814@uint32; mov L0x55555555d344 0x84c87814@uint32;
mov L0x55555555d348 0x84c87814@uint32; mov L0x55555555d34c 0x84c87814@uint32;
mov L0x55555555d350 0x84c87814@uint32; mov L0x55555555d354 0x84c87814@uint32;
mov L0x55555555d358 0x84c87814@uint32; mov L0x55555555d35c 0x84c87814@uint32;
mov L0x55555555d360 0x8cc70208@uint32; mov L0x55555555d364 0x8cc70208@uint32;
mov L0x55555555d368 0x8cc70208@uint32; mov L0x55555555d36c 0x8cc70208@uint32;
mov L0x55555555d370 0x8cc70208@uint32; mov L0x55555555d374 0x8cc70208@uint32;
mov L0x55555555d378 0x8cc70208@uint32; mov L0x55555555d37c 0x8cc70208@uint32;
mov L0x55555555d380 0x90befffa@uint32; mov L0x55555555d384 0x90befffa@uint32;
mov L0x55555555d388 0x90befffa@uint32; mov L0x55555555d38c 0x90befffa@uint32;
mov L0x55555555d390 0x90befffa@uint32; mov L0x55555555d394 0x90befffa@uint32;
mov L0x55555555d398 0x90befffa@uint32; mov L0x55555555d39c 0x90befffa@uint32;
mov L0x55555555d3a0 0xa4506ceb@uint32; mov L0x55555555d3a4 0xa4506ceb@uint32;
mov L0x55555555d3a8 0xa4506ceb@uint32; mov L0x55555555d3ac 0xa4506ceb@uint32;
mov L0x55555555d3b0 0xa4506ceb@uint32; mov L0x55555555d3b4 0xa4506ceb@uint32;
mov L0x55555555d3b8 0xa4506ceb@uint32; mov L0x55555555d3bc 0xa4506ceb@uint32;
mov L0x55555555d3c0 0xbef9a3f7@uint32; mov L0x55555555d3c4 0xbef9a3f7@uint32;
mov L0x55555555d3c8 0xbef9a3f7@uint32; mov L0x55555555d3cc 0xbef9a3f7@uint32;
mov L0x55555555d3d0 0xbef9a3f7@uint32; mov L0x55555555d3d4 0xbef9a3f7@uint32;
mov L0x55555555d3d8 0xbef9a3f7@uint32; mov L0x55555555d3dc 0xbef9a3f7@uint32;
mov L0x55555555d3e0 0xc67178f2@uint32; mov L0x55555555d3e4 0xc67178f2@uint32;
mov L0x55555555d3e8 0xc67178f2@uint32; mov L0x55555555d3ec 0xc67178f2@uint32;
mov L0x55555555d3f0 0xc67178f2@uint32; mov L0x55555555d3f4 0xc67178f2@uint32;
mov L0x55555555d3f8 0xc67178f2@uint32; mov L0x55555555d3fc 0xc67178f2@uint32;

(* #! -> SP = 0x7fffffffd9c8 *)
#! 0x7fffffffd9c8 = 0x7fffffffd9c8;
(* mov    %rsp,%rax                                #! PC = 0x55555555a7a0 *)
mov rax rsp;
(* push   %rbx                                     #! EA = L0x7fffffffd9c0; PC = 0x55555555a7a3 *)
(* push rbx *)
nop;
(* push   %rbp                                     #! EA = L0x7fffffffd9b8; PC = 0x55555555a7a4 *)
(* push rbp *)
nop;
(* push   %r12                                     #! EA = L0x7fffffffd9b0; PC = 0x55555555a7a5 *)
(* push r12 *)
nop;
(* push   %r13                                     #! EA = L0x7fffffffd9a8; PC = 0x55555555a7a7 *)
(* push r13 *)
nop;
(* push   %r14                                     #! EA = L0x7fffffffd9a0; PC = 0x55555555a7a9 *)
(* push r14 *)
nop;
(* push   %r15                                     #! EA = L0x7fffffffd998; PC = 0x55555555a7ab *)
(* push r15 *)
nop;
(* sub    $0x240,%rsp                              #! PC = 0x55555555a7ad *)
(* sub 0x240, %rsp *)
nop;
(* and    $0xffffffffffffff00,%rsp                 #! PC = 0x55555555a7b4 *)
(* and 0xffffffffffffff00, %rsp *)
nop;
(* mov    %rax,0x220(%rsp)                         #! EA = L0x7fffffffd920; PC = 0x55555555a7bb *)
(* mov rax, 0x220(%rsp) *)
nop;
(* lea    0x24b6(%rip),%rbp        # 0x55555555cc80 <K256+128>#! PC = 0x55555555a7c3 *)
(* lea XXX, rbp *)
nop;
(* lea    0x80(%rdi),%rdi                          #! PC = 0x55555555a7ca *)
(* lea XXX, %rdi *)
nop;
(* mov    %edx,0x228(%rsp)                         #! EA = L0x7fffffffd928; PC = 0x55555555a7d1 *)
(* mov edx, 0x228(%rsp) *)
nop;
(* xor    %edx,%edx                                #! PC = 0x55555555a7d8 *)
mov edx 0@uint32;
(* lea    0x200(%rsp),%rbx                         #! PC = 0x55555555a7da *)
(* lea 0x200(%rsp), rbx *)
nop;
(* mov    (%rsi),%r12                              #! EA = L0x7fffffffd9e0; Value = 0x00005555555612a0; PC = 0x55555555a7e2 *)
mov r12 L0x7fffffffd9e0;
(* mov    0x8(%rsi),%ecx                           #! EA = L0x7fffffffd9e8; Value = 0x0000000000000001; PC = 0x55555555a7e5 *)
mov ecx L0x7fffffffd9e8;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a7e8 *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a7ea *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a7ed *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,(%rbx)                              #! EA = L0x7fffffffd900; PC = 0x55555555a7ef *)
mov L0x7fffffffd900 ecx;
(* cmovle %rbp,%r12                                #! PC = 0x55555555a7f1 *)
(* cmovle rbp, r12 *)
nop;
(* mov    0x10(%rsi),%r13                          #! EA = L0x7fffffffd9f0; Value = 0x00005555555612f0; PC = 0x55555555a7f5 *)
mov r13 L0x7fffffffd9f0;
(* mov    0x18(%rsi),%ecx                          #! EA = L0x7fffffffd9f8; Value = 0x0000000000000001; PC = 0x55555555a7f9 *)
mov ecx L0x7fffffffd9f8;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a7fc *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a7fe *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a801 *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x4(%rbx)                           #! EA = L0x7fffffffd904; PC = 0x55555555a803 *)
mov L0x7fffffffd904 ecx;
(* cmovle %rbp,%r13                                #! PC = 0x55555555a806 *)
(* cmovle rbp, r13 *)
nop;
(* mov    0x20(%rsi),%r14                          #! EA = L0x7fffffffda00; Value = 0x0000555555561340; PC = 0x55555555a80a *)
mov r14 L0x7fffffffda00;
(* mov    0x28(%rsi),%ecx                          #! EA = L0x7fffffffda08; Value = 0x0000000000000001; PC = 0x55555555a80e *)
mov ecx L0x7fffffffda08;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a811 *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a813 *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a816 *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x8(%rbx)                           #! EA = L0x7fffffffd908; PC = 0x55555555a818 *)
mov L0x7fffffffd908 ecx;
(* cmovle %rbp,%r14                                #! PC = 0x55555555a81b *)
(* cmovle rbp, r14 *)
nop;
(* mov    0x30(%rsi),%r15                          #! EA = L0x7fffffffda10; Value = 0x0000555555561390; PC = 0x55555555a81f *)
mov r15 L0x7fffffffda10;
(* mov    0x38(%rsi),%ecx                          #! EA = L0x7fffffffda18; Value = 0x0000000000000001; PC = 0x55555555a823 *)
mov ecx L0x7fffffffda18;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a826 *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a828 *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a82b *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0xc(%rbx)                           #! EA = L0x7fffffffd90c; PC = 0x55555555a82d *)
mov L0x7fffffffd90c ecx;
(* cmovle %rbp,%r15                                #! PC = 0x55555555a830 *)
(* cmovle rbp, r15 *)
nop;
(* mov    0x40(%rsi),%r8                           #! EA = L0x7fffffffda20; Value = 0x00005555555613e0; PC = 0x55555555a834 *)
mov r8 L0x7fffffffda20;
(* mov    0x48(%rsi),%ecx                          #! EA = L0x7fffffffda28; Value = 0x0000000000000001; PC = 0x55555555a838 *)
mov ecx L0x7fffffffda28;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a83b *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a83d *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a840 *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x10(%rbx)                          #! EA = L0x7fffffffd910; PC = 0x55555555a842 *)
mov L0x7fffffffd910 ecx;
(* cmovle %rbp,%r8                                 #! PC = 0x55555555a845 *)
(* cmovle rbp, r8 *)
nop;
(* mov    0x50(%rsi),%r9                           #! EA = L0x7fffffffda30; Value = 0x0000555555561430; PC = 0x55555555a849 *)
mov r9 L0x7fffffffda30;
(* mov    0x58(%rsi),%ecx                          #! EA = L0x7fffffffda38; Value = 0x0000000000000001; PC = 0x55555555a84d *)
mov ecx L0x7fffffffda38;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a850 *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a852 *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a855 *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x14(%rbx)                          #! EA = L0x7fffffffd914; PC = 0x55555555a857 *)
mov L0x7fffffffd914 ecx;
(* cmovle %rbp,%r9                                 #! PC = 0x55555555a85a *)
(* cmovle rbp, r9 *)
nop;
(* mov    0x60(%rsi),%r10                          #! EA = L0x7fffffffda40; Value = 0x0000555555561480; PC = 0x55555555a85e *)
mov r10 L0x7fffffffda40;
(* mov    0x68(%rsi),%ecx                          #! EA = L0x7fffffffda48; Value = 0x0000000000000001; PC = 0x55555555a862 *)
mov ecx L0x7fffffffda48;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a865 *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a867 *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a86a *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x18(%rbx)                          #! EA = L0x7fffffffd918; PC = 0x55555555a86c *)
mov L0x7fffffffd918 ecx;
(* cmovle %rbp,%r10                                #! PC = 0x55555555a86f *)
(* cmovle rbp, r10 *)
nop;
(* mov    0x70(%rsi),%r11                          #! EA = L0x7fffffffda50; Value = 0x00005555555614d0; PC = 0x55555555a873 *)
mov r11 L0x7fffffffda50;
(* mov    0x78(%rsi),%ecx                          #! EA = L0x7fffffffda58; Value = 0x0000000000000001; PC = 0x55555555a877 *)
mov ecx L0x7fffffffda58;
(* cmp    %edx,%ecx                                #! PC = 0x55555555a87a *)
(* cmp edx, ecx *)
nop;
(* cmovg  %ecx,%edx                                #! PC = 0x55555555a87c *)
(* cmovg ecx, edx *)
nop;
(* test   %ecx,%ecx                                #! PC = 0x55555555a87f *)
(* test ecx, ecx *)
nop;
(* mov    %ecx,0x1c(%rbx)                          #! EA = L0x7fffffffd91c; PC = 0x55555555a881 *)
mov L0x7fffffffd91c ecx;
(* cmovle %rbp,%r11                                #! PC = 0x55555555a884 *)
(* cmovle rbp, r11 *)
nop;
(* vmovdqu -0x80(%rdi),%ymm8                       #! EA = L0x7fffffffda60; Value = 0x5d957ea7303f3328; PC = 0x55555555a888 *)
mov ymm8_0 L0x7fffffffda60; mov ymm8_1 L0x7fffffffda64;
mov ymm8_2 L0x7fffffffda68; mov ymm8_3 L0x7fffffffda6c;
mov ymm8_4 L0x7fffffffda70; mov ymm8_5 L0x7fffffffda74;
mov ymm8_6 L0x7fffffffda78; mov ymm8_7 L0x7fffffffda7c;
(* lea    0x80(%rsp),%rax                          #! PC = 0x55555555a88d *)
(* lea 0x80(%rsp), rax *)
nop;
(* vmovdqu -0x60(%rdi),%ymm9                       #! EA = L0x7fffffffda80; Value = 0xad718c55d64e2fdf; PC = 0x55555555a895 *)
mov ymm9_0 L0x7fffffffda80; mov ymm9_1 L0x7fffffffda84;
mov ymm9_2 L0x7fffffffda88; mov ymm9_3 L0x7fffffffda8c;
mov ymm9_4 L0x7fffffffda90; mov ymm9_5 L0x7fffffffda94;
mov ymm9_6 L0x7fffffffda98; mov ymm9_7 L0x7fffffffda9c;
(* lea    0x180(%rsp),%rbx                         #! PC = 0x55555555a89a *)
(* lea 0x180(%rsp), rbx *)
nop;
(* vmovdqu -0x40(%rdi),%ymm10                      #! EA = L0x7fffffffdaa0; Value = 0xcf6b2c6eafede3dd; PC = 0x55555555a8a2 *)
mov ymm10_0 L0x7fffffffdaa0; mov ymm10_1 L0x7fffffffdaa4;
mov ymm10_2 L0x7fffffffdaa8; mov ymm10_3 L0x7fffffffdaac;
mov ymm10_4 L0x7fffffffdab0; mov ymm10_5 L0x7fffffffdab4;
mov ymm10_6 L0x7fffffffdab8; mov ymm10_7 L0x7fffffffdabc;
(* vmovdqu -0x20(%rdi),%ymm11                      #! EA = L0x7fffffffdac0; Value = 0x1a1f1d310b8d50eb; PC = 0x55555555a8a7 *)
mov ymm11_0 L0x7fffffffdac0; mov ymm11_1 L0x7fffffffdac4;
mov ymm11_2 L0x7fffffffdac8; mov ymm11_3 L0x7fffffffdacc;
mov ymm11_4 L0x7fffffffdad0; mov ymm11_5 L0x7fffffffdad4;
mov ymm11_6 L0x7fffffffdad8; mov ymm11_7 L0x7fffffffdadc;
(* vmovdqu (%rdi),%ymm12                           #! EA = L0x7fffffffdae0; Value = 0xb19133cc5f7f3e1d; PC = 0x55555555a8ac *)
mov ymm12_0 L0x7fffffffdae0; mov ymm12_1 L0x7fffffffdae4;
mov ymm12_2 L0x7fffffffdae8; mov ymm12_3 L0x7fffffffdaec;
mov ymm12_4 L0x7fffffffdaf0; mov ymm12_5 L0x7fffffffdaf4;
mov ymm12_6 L0x7fffffffdaf8; mov ymm12_7 L0x7fffffffdafc;
(* vmovdqu 0x20(%rdi),%ymm13                       #! EA = L0x7fffffffdb00; Value = 0xeeb5f5f16975682e; PC = 0x55555555a8b0 *)
mov ymm13_0 L0x7fffffffdb00; mov ymm13_1 L0x7fffffffdb04;
mov ymm13_2 L0x7fffffffdb08; mov ymm13_3 L0x7fffffffdb0c;
mov ymm13_4 L0x7fffffffdb10; mov ymm13_5 L0x7fffffffdb14;
mov ymm13_6 L0x7fffffffdb18; mov ymm13_7 L0x7fffffffdb1c;
(* vmovdqu 0x40(%rdi),%ymm14                       #! EA = L0x7fffffffdb20; Value = 0x462ac18168fd9a41; PC = 0x55555555a8b5 *)
mov ymm14_0 L0x7fffffffdb20; mov ymm14_1 L0x7fffffffdb24;
mov ymm14_2 L0x7fffffffdb28; mov ymm14_3 L0x7fffffffdb2c;
mov ymm14_4 L0x7fffffffdb30; mov ymm14_5 L0x7fffffffdb34;
mov ymm14_6 L0x7fffffffdb38; mov ymm14_7 L0x7fffffffdb3c;
(* vmovdqu 0x60(%rdi),%ymm15                       #! EA = L0x7fffffffdb40; Value = 0x67feae026b8ea1e8; PC = 0x55555555a8ba *)
mov ymm15_0 L0x7fffffffdb40; mov ymm15_1 L0x7fffffffdb44;
mov ymm15_2 L0x7fffffffdb48; mov ymm15_3 L0x7fffffffdb4c;
mov ymm15_4 L0x7fffffffdb50; mov ymm15_5 L0x7fffffffdb54;
mov ymm15_6 L0x7fffffffdb58; mov ymm15_7 L0x7fffffffdb5c;
(* vmovdqu 0x2b39(%rip),%ymm6        # 0x55555555d400 <K256+2048>#! EA = L0x55555555d400; Value = 0x0405060700010203; PC = 0x55555555a8bf *)
mov ymm6_0 L0x55555555d400; mov ymm6_1 L0x55555555d404;
mov ymm6_2 L0x55555555d408; mov ymm6_3 L0x55555555d40c;
mov ymm6_4 L0x55555555d410; mov ymm6_5 L0x55555555d414;
mov ymm6_6 L0x55555555d418; mov ymm6_7 L0x55555555d41c;
(* #jmp    0x55555555a8e0 <sha256_multi_block_avx2+320>#! PC = 0x55555555a8c7 *)
#jmp    0x55555555a8e0 <sha256_multi_block_avx2+320>#! 0x55555555a8c7 = 0x55555555a8c7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555a8e0 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vmovd  (%r12),%xmm5                             #! EA = L0x5555555612a0; Value = 0x0706050403020100; PC = 0x55555555a8e5 *)
mov ymm5_0 L0x5555555612a0; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  (%r8),%xmm0                              #! EA = L0x5555555613e0; Value = 0x0706050403020100; PC = 0x55555555a8eb *)
mov ymm0_0 L0x5555555613e0; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x0(%r13),%xmm1                          #! EA = L0x5555555612f0; Value = 0x0706050403020100; PC = 0x55555555a8f0 *)
mov ymm1_0 L0x5555555612f0; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  (%r9),%xmm2                              #! EA = L0x555555561430; Value = 0x0706050403020100; PC = 0x55555555a8f6 *)
mov ymm2_0 L0x555555561430; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,(%r14),%xmm5,%xmm5                 #! EA = L0x555555561340; Value = 0x0706050403020100; PC = 0x55555555a8fb *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561340;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,(%r10),%xmm0,%xmm0                 #! EA = L0x555555561480; Value = 0x0706050403020100; PC = 0x55555555a901 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561480;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,(%r15),%xmm1,%xmm1                 #! EA = L0x555555561390; Value = 0x0706050403020100; PC = 0x55555555a907 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x555555561390;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555a90d *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,(%r11),%xmm2,%xmm2                 #! EA = L0x5555555614d0; Value = 0x0706050403020100; PC = 0x55555555a911 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614d0;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555a917 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555a91b *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555a921 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555a926 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555a92c *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rax)                       #! EA = L0x7fffffffd700; PC = 0x55555555a932 *)
mov L0x7fffffffd700 ymm5_0; mov L0x7fffffffd704 ymm5_1;
mov L0x7fffffffd708 ymm5_2; mov L0x7fffffffd70c ymm5_3;
mov L0x7fffffffd710 ymm5_4; mov L0x7fffffffd714 ymm5_5;
mov L0x7fffffffd718 ymm5_6; mov L0x7fffffffd71c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555a937 *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555a93c *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555a942 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555a946 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cc00; Value = 0x428a2f98428a2f98; PC = 0x55555555a94c *)
adds dc ymm5_0 ymm5_0 L0x55555555cc00; adds dc ymm5_1 ymm5_1 L0x55555555cc04;
adds dc ymm5_2 ymm5_2 L0x55555555cc08; adds dc ymm5_3 ymm5_3 L0x55555555cc0c;
adds dc ymm5_4 ymm5_4 L0x55555555cc10; adds dc ymm5_5 ymm5_5 L0x55555555cc14;
adds dc ymm5_6 ymm5_6 L0x55555555cc18; adds dc ymm5_7 ymm5_7 L0x55555555cc1c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555a951 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555a955 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555a95b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555a95f *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555a965 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555a96a *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555a96f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555a973 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555a979 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555a97d *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555a983 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555a987 *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555a98c *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555a990 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555a994 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555a99a *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555a9a0 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555a9a4 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555a9a8 *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555a9ac *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555a9b2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555a9b6 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555a9bc *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555a9c0 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555a9c4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555a9c8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555a9cc *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555a9d0 *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovd  0x4(%r12),%xmm5                          #! EA = L0x5555555612a4; Value = 0x0b0a090807060504; PC = 0x55555555a9d4 *)
mov ymm5_0 L0x5555555612a4; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x4(%r8),%xmm0                           #! EA = L0x5555555613e4; Value = 0x0b0a090807060504; PC = 0x55555555a9db *)
mov ymm0_0 L0x5555555613e4; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x4(%r13),%xmm1                          #! EA = L0x5555555612f4; Value = 0x0b0a090807060504; PC = 0x55555555a9e1 *)
mov ymm1_0 L0x5555555612f4; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x4(%r9),%xmm2                           #! EA = L0x555555561434; Value = 0x0b0a090807060504; PC = 0x55555555a9e7 *)
mov ymm2_0 L0x555555561434; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x4(%r14),%xmm5,%xmm5              #! EA = L0x555555561344; Value = 0x0b0a090807060504; PC = 0x55555555a9ed *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561344;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x4(%r10),%xmm0,%xmm0              #! EA = L0x555555561484; Value = 0x0b0a090807060504; PC = 0x55555555a9f4 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561484;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x4(%r15),%xmm1,%xmm1              #! EA = L0x555555561394; Value = 0x0b0a090807060504; PC = 0x55555555a9fb *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x555555561394;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555aa02 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x4(%r11),%xmm2,%xmm2              #! EA = L0x5555555614d4; Value = 0x0b0a090807060504; PC = 0x55555555aa06 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614d4;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555aa0d *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555aa11 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555aa17 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555aa1c *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555aa22 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x60(%rax)                       #! EA = L0x7fffffffd720; PC = 0x55555555aa28 *)
mov L0x7fffffffd720 ymm5_0; mov L0x7fffffffd724 ymm5_1;
mov L0x7fffffffd728 ymm5_2; mov L0x7fffffffd72c ymm5_3;
mov L0x7fffffffd730 ymm5_4; mov L0x7fffffffd734 ymm5_5;
mov L0x7fffffffd738 ymm5_6; mov L0x7fffffffd73c ymm5_7;
(* vpaddd %ymm14,%ymm5,%ymm5                       #! PC = 0x55555555aa2d *)
adds dc ymm5_0 ymm5_0 ymm14_0; adds dc ymm5_1 ymm5_1 ymm14_1;
adds dc ymm5_2 ymm5_2 ymm14_2; adds dc ymm5_3 ymm5_3 ymm14_3;
adds dc ymm5_4 ymm5_4 ymm14_4; adds dc ymm5_5 ymm5_5 ymm14_5;
adds dc ymm5_6 ymm5_6 ymm14_6; adds dc ymm5_7 ymm5_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555aa32 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555aa38 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555aa3c *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cc20; Value = 0x7137449171374491; PC = 0x55555555aa42 *)
adds dc ymm5_0 ymm5_0 L0x55555555cc20; adds dc ymm5_1 ymm5_1 L0x55555555cc24;
adds dc ymm5_2 ymm5_2 L0x55555555cc28; adds dc ymm5_3 ymm5_3 L0x55555555cc2c;
adds dc ymm5_4 ymm5_4 L0x55555555cc30; adds dc ymm5_5 ymm5_5 L0x55555555cc34;
adds dc ymm5_6 ymm5_6 L0x55555555cc38; adds dc ymm5_7 ymm5_7 L0x55555555cc3c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555aa47 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555aa4b *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555aa51 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555aa55 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555aa5b *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555aa60 *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555aa65 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555aa69 *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555aa6f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555aa73 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555aa79 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555aa7d *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555aa82 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555aa86 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555aa8a *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555aa90 *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555aa96 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555aa9a *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555aa9e *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555aaa2 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555aaa8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555aaac *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555aab2 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm5,%ymm10,%ymm10                      #! PC = 0x55555555aab6 *)
adds dc ymm10_0 ymm10_0 ymm5_0; adds dc ymm10_1 ymm10_1 ymm5_1;
adds dc ymm10_2 ymm10_2 ymm5_2; adds dc ymm10_3 ymm10_3 ymm5_3;
adds dc ymm10_4 ymm10_4 ymm5_4; adds dc ymm10_5 ymm10_5 ymm5_5;
adds dc ymm10_6 ymm10_6 ymm5_6; adds dc ymm10_7 ymm10_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555aaba *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555aabe *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm14,%ymm14                      #! PC = 0x55555555aac2 *)
adds dc ymm14_0 ymm14_0 ymm5_0; adds dc ymm14_1 ymm14_1 ymm5_1;
adds dc ymm14_2 ymm14_2 ymm5_2; adds dc ymm14_3 ymm14_3 ymm5_3;
adds dc ymm14_4 ymm14_4 ymm5_4; adds dc ymm14_5 ymm14_5 ymm5_5;
adds dc ymm14_6 ymm14_6 ymm5_6; adds dc ymm14_7 ymm14_7 ymm5_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555aac6 *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovd  0x8(%r12),%xmm5                          #! EA = L0x5555555612a8; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aaca *)
mov ymm5_0 L0x5555555612a8; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x8(%r8),%xmm0                           #! EA = L0x5555555613e8; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aad1 *)
mov ymm0_0 L0x5555555613e8; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x8(%r13),%xmm1                          #! EA = L0x5555555612f8; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aad7 *)
mov ymm1_0 L0x5555555612f8; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x8(%r9),%xmm2                           #! EA = L0x555555561438; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aadd *)
mov ymm2_0 L0x555555561438; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x8(%r14),%xmm5,%xmm5              #! EA = L0x555555561348; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aae3 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561348;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x8(%r10),%xmm0,%xmm0              #! EA = L0x555555561488; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aaea *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561488;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x8(%r15),%xmm1,%xmm1              #! EA = L0x555555561398; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aaf1 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x555555561398;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555aaf8 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x8(%r11),%xmm2,%xmm2              #! EA = L0x5555555614d8; Value = 0x0f0e0d0c0b0a0908; PC = 0x55555555aafc *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614d8;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555ab03 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555ab07 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555ab0d *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555ab12 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555ab18 *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rax)                       #! EA = L0x7fffffffd740; PC = 0x55555555ab1e *)
mov L0x7fffffffd740 ymm5_0; mov L0x7fffffffd744 ymm5_1;
mov L0x7fffffffd748 ymm5_2; mov L0x7fffffffd74c ymm5_3;
mov L0x7fffffffd750 ymm5_4; mov L0x7fffffffd754 ymm5_5;
mov L0x7fffffffd758 ymm5_6; mov L0x7fffffffd75c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555ab23 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555ab28 *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ab2e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555ab32 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cc40; Value = 0xb5c0fbcfb5c0fbcf; PC = 0x55555555ab38 *)
adds dc ymm5_0 ymm5_0 L0x55555555cc40; adds dc ymm5_1 ymm5_1 L0x55555555cc44;
adds dc ymm5_2 ymm5_2 L0x55555555cc48; adds dc ymm5_3 ymm5_3 L0x55555555cc4c;
adds dc ymm5_4 ymm5_4 L0x55555555cc50; adds dc ymm5_5 ymm5_5 L0x55555555cc54;
adds dc ymm5_6 ymm5_6 L0x55555555cc58; adds dc ymm5_7 ymm5_7 L0x55555555cc5c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ab3d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555ab41 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ab47 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555ab4b *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555ab51 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555ab56 *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ab5b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555ab5f *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ab65 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555ab69 *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555ab6f *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555ab73 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555ab78 *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555ab7c *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555ab80 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555ab86 *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555ab8c *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555ab90 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555ab94 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555ab98 *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ab9e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555aba2 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555aba8 *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555abac *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555abb0 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555abb4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555abb8 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555abbc *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovd  0xc(%r12),%xmm5                          #! EA = L0x5555555612ac; Value = 0x131211100f0e0d0c; PC = 0x55555555abc0 *)
mov ymm5_0 L0x5555555612ac; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0xc(%r8),%xmm0                           #! EA = L0x5555555613ec; Value = 0x131211100f0e0d0c; PC = 0x55555555abc7 *)
mov ymm0_0 L0x5555555613ec; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0xc(%r13),%xmm1                          #! EA = L0x5555555612fc; Value = 0x131211100f0e0d0c; PC = 0x55555555abcd *)
mov ymm1_0 L0x5555555612fc; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0xc(%r9),%xmm2                           #! EA = L0x55555556143c; Value = 0x131211100f0e0d0c; PC = 0x55555555abd3 *)
mov ymm2_0 L0x55555556143c; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0xc(%r14),%xmm5,%xmm5              #! EA = L0x55555556134c; Value = 0x131211100f0e0d0c; PC = 0x55555555abd9 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x55555556134c;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0xc(%r10),%xmm0,%xmm0              #! EA = L0x55555556148c; Value = 0x131211100f0e0d0c; PC = 0x55555555abe0 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x55555556148c;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0xc(%r15),%xmm1,%xmm1              #! EA = L0x55555556139c; Value = 0x131211100f0e0d0c; PC = 0x55555555abe7 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x55555556139c;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555abee *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0xc(%r11),%xmm2,%xmm2              #! EA = L0x5555555614dc; Value = 0x131211100f0e0d0c; PC = 0x55555555abf2 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614dc;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555abf9 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555abfd *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555ac03 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555ac08 *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555ac0e *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x20(%rax)                       #! EA = L0x7fffffffd760; PC = 0x55555555ac14 *)
mov L0x7fffffffd760 ymm5_0; mov L0x7fffffffd764 ymm5_1;
mov L0x7fffffffd768 ymm5_2; mov L0x7fffffffd76c ymm5_3;
mov L0x7fffffffd770 ymm5_4; mov L0x7fffffffd774 ymm5_5;
mov L0x7fffffffd778 ymm5_6; mov L0x7fffffffd77c ymm5_7;
(* vpaddd %ymm12,%ymm5,%ymm5                       #! PC = 0x55555555ac19 *)
adds dc ymm5_0 ymm5_0 ymm12_0; adds dc ymm5_1 ymm5_1 ymm12_1;
adds dc ymm5_2 ymm5_2 ymm12_2; adds dc ymm5_3 ymm5_3 ymm12_3;
adds dc ymm5_4 ymm5_4 ymm12_4; adds dc ymm5_5 ymm5_5 ymm12_5;
adds dc ymm5_6 ymm5_6 ymm12_6; adds dc ymm5_7 ymm5_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555ac1e *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ac24 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555ac28 *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cc60; Value = 0xe9b5dba5e9b5dba5; PC = 0x55555555ac2e *)
adds dc ymm5_0 ymm5_0 L0x55555555cc60; adds dc ymm5_1 ymm5_1 L0x55555555cc64;
adds dc ymm5_2 ymm5_2 L0x55555555cc68; adds dc ymm5_3 ymm5_3 L0x55555555cc6c;
adds dc ymm5_4 ymm5_4 L0x55555555cc70; adds dc ymm5_5 ymm5_5 L0x55555555cc74;
adds dc ymm5_6 ymm5_6 L0x55555555cc78; adds dc ymm5_7 ymm5_7 L0x55555555cc7c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ac33 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555ac37 *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ac3d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555ac41 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555ac47 *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555ac4c *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ac51 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555ac55 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ac5b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555ac5f *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555ac65 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555ac69 *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555ac6e *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555ac72 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555ac76 *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555ac7c *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555ac82 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555ac86 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555ac8a *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555ac8e *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ac94 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555ac98 *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555ac9e *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm5,%ymm8,%ymm8                        #! PC = 0x55555555aca2 *)
adds dc ymm8_0 ymm8_0 ymm5_0; adds dc ymm8_1 ymm8_1 ymm5_1;
adds dc ymm8_2 ymm8_2 ymm5_2; adds dc ymm8_3 ymm8_3 ymm5_3;
adds dc ymm8_4 ymm8_4 ymm5_4; adds dc ymm8_5 ymm8_5 ymm5_5;
adds dc ymm8_6 ymm8_6 ymm5_6; adds dc ymm8_7 ymm8_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555aca6 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555acaa *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm12,%ymm12                      #! PC = 0x55555555acae *)
adds dc ymm12_0 ymm12_0 ymm5_0; adds dc ymm12_1 ymm12_1 ymm5_1;
adds dc ymm12_2 ymm12_2 ymm5_2; adds dc ymm12_3 ymm12_3 ymm5_3;
adds dc ymm12_4 ymm12_4 ymm5_4; adds dc ymm12_5 ymm12_5 ymm5_5;
adds dc ymm12_6 ymm12_6 ymm5_6; adds dc ymm12_7 ymm12_7 ymm5_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555acb2 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovd  0x10(%r12),%xmm5                         #! EA = L0x5555555612b0; Value = 0x1716151413121110; PC = 0x55555555acb6 *)
mov ymm5_0 L0x5555555612b0; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x10(%r8),%xmm0                          #! EA = L0x5555555613f0; Value = 0x1716151413121110; PC = 0x55555555acbd *)
mov ymm0_0 L0x5555555613f0; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x10(%r13),%xmm1                         #! EA = L0x555555561300; Value = 0x1716151413121110; PC = 0x55555555acc3 *)
mov ymm1_0 L0x555555561300; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x10(%r9),%xmm2                          #! EA = L0x555555561440; Value = 0x1716151413121110; PC = 0x55555555acc9 *)
mov ymm2_0 L0x555555561440; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x10(%r14),%xmm5,%xmm5             #! EA = L0x555555561350; Value = 0x1716151413121110; PC = 0x55555555accf *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561350;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x10(%r10),%xmm0,%xmm0             #! EA = L0x555555561490; Value = 0x1716151413121110; PC = 0x55555555acd6 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561490;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x10(%r15),%xmm1,%xmm1             #! EA = L0x5555555613a0; Value = 0x1716151413121110; PC = 0x55555555acdd *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613a0;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555ace4 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x10(%r11),%xmm2,%xmm2             #! EA = L0x5555555614e0; Value = 0x1716151413121110; PC = 0x55555555ace8 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614e0;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555acef *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555acf3 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555acf9 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555acfe *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555ad04 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rax)                            #! EA = L0x7fffffffd780; PC = 0x55555555ad0a *)
mov L0x7fffffffd780 ymm5_0; mov L0x7fffffffd784 ymm5_1;
mov L0x7fffffffd788 ymm5_2; mov L0x7fffffffd78c ymm5_3;
mov L0x7fffffffd790 ymm5_4; mov L0x7fffffffd794 ymm5_5;
mov L0x7fffffffd798 ymm5_6; mov L0x7fffffffd79c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555ad0e *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555ad13 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ad19 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555ad1d *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555cc80; Value = 0x3956c25b3956c25b; PC = 0x55555555ad23 *)
adds dc ymm5_0 ymm5_0 L0x55555555cc80; adds dc ymm5_1 ymm5_1 L0x55555555cc84;
adds dc ymm5_2 ymm5_2 L0x55555555cc88; adds dc ymm5_3 ymm5_3 L0x55555555cc8c;
adds dc ymm5_4 ymm5_4 L0x55555555cc90; adds dc ymm5_5 ymm5_5 L0x55555555cc94;
adds dc ymm5_6 ymm5_6 L0x55555555cc98; adds dc ymm5_7 ymm5_7 L0x55555555cc9c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ad28 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555ad2c *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ad32 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555ad36 *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555ad3c *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555ad41 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ad46 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555ad4a *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ad50 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555ad54 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555ad5a *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555ad5e *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555ad63 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555ad67 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555ad6b *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555ad71 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555ad77 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555ad7b *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555ad7f *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555ad83 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ad89 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555ad8d *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555ad93 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555ad97 *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ad9b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ad9f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555ada3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555ada7 *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovd  0x14(%r12),%xmm5                         #! EA = L0x5555555612b4; Value = 0x1b1a191817161514; PC = 0x55555555adab *)
mov ymm5_0 L0x5555555612b4; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x14(%r8),%xmm0                          #! EA = L0x5555555613f4; Value = 0x1b1a191817161514; PC = 0x55555555adb2 *)
mov ymm0_0 L0x5555555613f4; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x14(%r13),%xmm1                         #! EA = L0x555555561304; Value = 0x1b1a191817161514; PC = 0x55555555adb8 *)
mov ymm1_0 L0x555555561304; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x14(%r9),%xmm2                          #! EA = L0x555555561444; Value = 0x1b1a191817161514; PC = 0x55555555adbe *)
mov ymm2_0 L0x555555561444; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x14(%r14),%xmm5,%xmm5             #! EA = L0x555555561354; Value = 0x1b1a191817161514; PC = 0x55555555adc4 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561354;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x14(%r10),%xmm0,%xmm0             #! EA = L0x555555561494; Value = 0x1b1a191817161514; PC = 0x55555555adcb *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561494;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x14(%r15),%xmm1,%xmm1             #! EA = L0x5555555613a4; Value = 0x1b1a191817161514; PC = 0x55555555add2 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613a4;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555add9 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x14(%r11),%xmm2,%xmm2             #! EA = L0x5555555614e4; Value = 0x1b1a191817161514; PC = 0x55555555addd *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614e4;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555ade4 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555ade8 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555adee *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555adf3 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555adf9 *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x20(%rax)                        #! EA = L0x7fffffffd7a0; PC = 0x55555555adff *)
mov L0x7fffffffd7a0 ymm5_0; mov L0x7fffffffd7a4 ymm5_1;
mov L0x7fffffffd7a8 ymm5_2; mov L0x7fffffffd7ac ymm5_3;
mov L0x7fffffffd7b0 ymm5_4; mov L0x7fffffffd7b4 ymm5_5;
mov L0x7fffffffd7b8 ymm5_6; mov L0x7fffffffd7bc ymm5_7;
(* vpaddd %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555ae04 *)
adds dc ymm5_0 ymm5_0 ymm10_0; adds dc ymm5_1 ymm5_1 ymm10_1;
adds dc ymm5_2 ymm5_2 ymm10_2; adds dc ymm5_3 ymm5_3 ymm10_3;
adds dc ymm5_4 ymm5_4 ymm10_4; adds dc ymm5_5 ymm5_5 ymm10_5;
adds dc ymm5_6 ymm5_6 ymm10_6; adds dc ymm5_7 ymm5_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555ae09 *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ae0f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555ae13 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cca0; Value = 0x59f111f159f111f1; PC = 0x55555555ae19 *)
adds dc ymm5_0 ymm5_0 L0x55555555cca0; adds dc ymm5_1 ymm5_1 L0x55555555cca4;
adds dc ymm5_2 ymm5_2 L0x55555555cca8; adds dc ymm5_3 ymm5_3 L0x55555555ccac;
adds dc ymm5_4 ymm5_4 L0x55555555ccb0; adds dc ymm5_5 ymm5_5 L0x55555555ccb4;
adds dc ymm5_6 ymm5_6 L0x55555555ccb8; adds dc ymm5_7 ymm5_7 L0x55555555ccbc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ae1e *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555ae22 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ae28 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555ae2c *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555ae32 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555ae37 *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ae3c *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555ae40 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ae46 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555ae4a *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555ae50 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555ae54 *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555ae59 *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555ae5d *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555ae61 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555ae67 *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555ae6d *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555ae71 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555ae75 *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555ae79 *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ae7f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555ae83 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555ae89 *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm5,%ymm14,%ymm14                      #! PC = 0x55555555ae8d *)
adds dc ymm14_0 ymm14_0 ymm5_0; adds dc ymm14_1 ymm14_1 ymm5_1;
adds dc ymm14_2 ymm14_2 ymm5_2; adds dc ymm14_3 ymm14_3 ymm5_3;
adds dc ymm14_4 ymm14_4 ymm5_4; adds dc ymm14_5 ymm14_5 ymm5_5;
adds dc ymm14_6 ymm14_6 ymm5_6; adds dc ymm14_7 ymm14_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ae91 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ae95 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm10,%ymm10                      #! PC = 0x55555555ae99 *)
adds dc ymm10_0 ymm10_0 ymm5_0; adds dc ymm10_1 ymm10_1 ymm5_1;
adds dc ymm10_2 ymm10_2 ymm5_2; adds dc ymm10_3 ymm10_3 ymm5_3;
adds dc ymm10_4 ymm10_4 ymm5_4; adds dc ymm10_5 ymm10_5 ymm5_5;
adds dc ymm10_6 ymm10_6 ymm5_6; adds dc ymm10_7 ymm10_7 ymm5_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555ae9d *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovd  0x18(%r12),%xmm5                         #! EA = L0x5555555612b8; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aea1 *)
mov ymm5_0 L0x5555555612b8; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x18(%r8),%xmm0                          #! EA = L0x5555555613f8; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aea8 *)
mov ymm0_0 L0x5555555613f8; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x18(%r13),%xmm1                         #! EA = L0x555555561308; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aeae *)
mov ymm1_0 L0x555555561308; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x18(%r9),%xmm2                          #! EA = L0x555555561448; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aeb4 *)
mov ymm2_0 L0x555555561448; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x18(%r14),%xmm5,%xmm5             #! EA = L0x555555561358; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aeba *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561358;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x18(%r10),%xmm0,%xmm0             #! EA = L0x555555561498; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aec1 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x555555561498;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x18(%r15),%xmm1,%xmm1             #! EA = L0x5555555613a8; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aec8 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613a8;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555aecf *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x18(%r11),%xmm2,%xmm2             #! EA = L0x5555555614e8; Value = 0x1f1e1d1c1b1a1918; PC = 0x55555555aed3 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614e8;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555aeda *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555aede *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555aee4 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555aee9 *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555aeef *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rax)                        #! EA = L0x7fffffffd7c0; PC = 0x55555555aef5 *)
mov L0x7fffffffd7c0 ymm5_0; mov L0x7fffffffd7c4 ymm5_1;
mov L0x7fffffffd7c8 ymm5_2; mov L0x7fffffffd7cc ymm5_3;
mov L0x7fffffffd7d0 ymm5_4; mov L0x7fffffffd7d4 ymm5_5;
mov L0x7fffffffd7d8 ymm5_6; mov L0x7fffffffd7dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555aefa *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555aeff *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555af05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555af09 *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555ccc0; Value = 0x923f82a4923f82a4; PC = 0x55555555af0f *)
adds dc ymm5_0 ymm5_0 L0x55555555ccc0; adds dc ymm5_1 ymm5_1 L0x55555555ccc4;
adds dc ymm5_2 ymm5_2 L0x55555555ccc8; adds dc ymm5_3 ymm5_3 L0x55555555cccc;
adds dc ymm5_4 ymm5_4 L0x55555555ccd0; adds dc ymm5_5 ymm5_5 L0x55555555ccd4;
adds dc ymm5_6 ymm5_6 L0x55555555ccd8; adds dc ymm5_7 ymm5_7 L0x55555555ccdc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555af14 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555af18 *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555af1e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555af22 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555af28 *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555af2d *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555af32 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555af36 *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555af3c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555af40 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555af46 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555af4a *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555af4f *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555af53 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555af57 *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555af5d *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555af63 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555af67 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555af6b *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555af6f *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555af75 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555af79 *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555af7f *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555af83 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555af87 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555af8b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555af8f *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555af93 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovd  0x1c(%r12),%xmm5                         #! EA = L0x5555555612bc; Value = 0x232221201f1e1d1c; PC = 0x55555555af97 *)
mov ymm5_0 L0x5555555612bc; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x1c(%r8),%xmm0                          #! EA = L0x5555555613fc; Value = 0x232221201f1e1d1c; PC = 0x55555555af9e *)
mov ymm0_0 L0x5555555613fc; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x1c(%r13),%xmm1                         #! EA = L0x55555556130c; Value = 0x232221201f1e1d1c; PC = 0x55555555afa4 *)
mov ymm1_0 L0x55555556130c; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x1c(%r9),%xmm2                          #! EA = L0x55555556144c; Value = 0x232221201f1e1d1c; PC = 0x55555555afaa *)
mov ymm2_0 L0x55555556144c; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x1c(%r14),%xmm5,%xmm5             #! EA = L0x55555556135c; Value = 0x232221201f1e1d1c; PC = 0x55555555afb0 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x55555556135c;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x1c(%r10),%xmm0,%xmm0             #! EA = L0x55555556149c; Value = 0x232221201f1e1d1c; PC = 0x55555555afb7 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x55555556149c;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x1c(%r15),%xmm1,%xmm1             #! EA = L0x5555555613ac; Value = 0x232221201f1e1d1c; PC = 0x55555555afbe *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613ac;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555afc5 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x1c(%r11),%xmm2,%xmm2             #! EA = L0x5555555614ec; Value = 0x232221201f1e1d1c; PC = 0x55555555afc9 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614ec;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555afd0 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555afd4 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555afda *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555afdf *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555afe5 *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x60(%rax)                        #! EA = L0x7fffffffd7e0; PC = 0x55555555afeb *)
mov L0x7fffffffd7e0 ymm5_0; mov L0x7fffffffd7e4 ymm5_1;
mov L0x7fffffffd7e8 ymm5_2; mov L0x7fffffffd7ec ymm5_3;
mov L0x7fffffffd7f0 ymm5_4; mov L0x7fffffffd7f4 ymm5_5;
mov L0x7fffffffd7f8 ymm5_6; mov L0x7fffffffd7fc ymm5_7;
(* vpaddd %ymm8,%ymm5,%ymm5                        #! PC = 0x55555555aff0 *)
adds dc ymm5_0 ymm5_0 ymm8_0; adds dc ymm5_1 ymm5_1 ymm8_1;
adds dc ymm5_2 ymm5_2 ymm8_2; adds dc ymm5_3 ymm5_3 ymm8_3;
adds dc ymm5_4 ymm5_4 ymm8_4; adds dc ymm5_5 ymm5_5 ymm8_5;
adds dc ymm5_6 ymm5_6 ymm8_6; adds dc ymm5_7 ymm5_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555aff5 *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555affb *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555afff *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cce0; Value = 0xab1c5ed5ab1c5ed5; PC = 0x55555555b005 *)
adds dc ymm5_0 ymm5_0 L0x55555555cce0; adds dc ymm5_1 ymm5_1 L0x55555555cce4;
adds dc ymm5_2 ymm5_2 L0x55555555cce8; adds dc ymm5_3 ymm5_3 L0x55555555ccec;
adds dc ymm5_4 ymm5_4 L0x55555555ccf0; adds dc ymm5_5 ymm5_5 L0x55555555ccf4;
adds dc ymm5_6 ymm5_6 L0x55555555ccf8; adds dc ymm5_7 ymm5_7 L0x55555555ccfc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b00a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555b00e *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b014 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555b018 *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555b01e *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555b023 *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b028 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555b02c *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b032 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555b036 *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555b03c *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555b040 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555b045 *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b049 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555b04d *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555b053 *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b059 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555b05d *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555b061 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555b065 *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b06b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555b06f *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555b075 *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm5,%ymm12,%ymm12                      #! PC = 0x55555555b079 *)
adds dc ymm12_0 ymm12_0 ymm5_0; adds dc ymm12_1 ymm12_1 ymm5_1;
adds dc ymm12_2 ymm12_2 ymm5_2; adds dc ymm12_3 ymm12_3 ymm5_3;
adds dc ymm12_4 ymm12_4 ymm5_4; adds dc ymm12_5 ymm12_5 ymm5_5;
adds dc ymm12_6 ymm12_6 ymm5_6; adds dc ymm12_7 ymm12_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b07d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b081 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm8,%ymm8                        #! PC = 0x55555555b085 *)
adds dc ymm8_0 ymm8_0 ymm5_0; adds dc ymm8_1 ymm8_1 ymm5_1;
adds dc ymm8_2 ymm8_2 ymm5_2; adds dc ymm8_3 ymm8_3 ymm5_3;
adds dc ymm8_4 ymm8_4 ymm5_4; adds dc ymm8_5 ymm8_5 ymm5_5;
adds dc ymm8_6 ymm8_6 ymm5_6; adds dc ymm8_7 ymm8_7 ymm5_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555b089 *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555b08d *)
(* add 0x100, rbp *)
nop;
(* vmovd  0x20(%r12),%xmm5                         #! EA = L0x5555555612c0; Value = 0x2726252423222120; PC = 0x55555555b094 *)
mov ymm5_0 L0x5555555612c0; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x20(%r8),%xmm0                          #! EA = L0x555555561400; Value = 0x2726252423222120; PC = 0x55555555b09b *)
mov ymm0_0 L0x555555561400; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x20(%r13),%xmm1                         #! EA = L0x555555561310; Value = 0x2726252423222120; PC = 0x55555555b0a1 *)
mov ymm1_0 L0x555555561310; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x20(%r9),%xmm2                          #! EA = L0x555555561450; Value = 0x2726252423222120; PC = 0x55555555b0a7 *)
mov ymm2_0 L0x555555561450; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x20(%r14),%xmm5,%xmm5             #! EA = L0x555555561360; Value = 0x2726252423222120; PC = 0x55555555b0ad *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561360;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x20(%r10),%xmm0,%xmm0             #! EA = L0x5555555614a0; Value = 0x2726252423222120; PC = 0x55555555b0b4 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614a0;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x20(%r15),%xmm1,%xmm1             #! EA = L0x5555555613b0; Value = 0x2726252423222120; PC = 0x55555555b0bb *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613b0;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b0c2 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x20(%r11),%xmm2,%xmm2             #! EA = L0x5555555614f0; Value = 0x2726252423222120; PC = 0x55555555b0c6 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614f0;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b0cd *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b0d1 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b0d7 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555b0dc *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555b0e2 *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rbx)                       #! EA = L0x7fffffffd800; PC = 0x55555555b0e8 *)
mov L0x7fffffffd800 ymm5_0; mov L0x7fffffffd804 ymm5_1;
mov L0x7fffffffd808 ymm5_2; mov L0x7fffffffd80c ymm5_3;
mov L0x7fffffffd810 ymm5_4; mov L0x7fffffffd814 ymm5_5;
mov L0x7fffffffd818 ymm5_6; mov L0x7fffffffd81c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555b0ed *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555b0f2 *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b0f8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555b0fc *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cd00; Value = 0xd807aa98d807aa98; PC = 0x55555555b102 *)
adds dc ymm5_0 ymm5_0 L0x55555555cd00; adds dc ymm5_1 ymm5_1 L0x55555555cd04;
adds dc ymm5_2 ymm5_2 L0x55555555cd08; adds dc ymm5_3 ymm5_3 L0x55555555cd0c;
adds dc ymm5_4 ymm5_4 L0x55555555cd10; adds dc ymm5_5 ymm5_5 L0x55555555cd14;
adds dc ymm5_6 ymm5_6 L0x55555555cd18; adds dc ymm5_7 ymm5_7 L0x55555555cd1c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b107 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555b10b *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b111 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555b115 *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555b11b *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555b120 *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b125 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555b129 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b12f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555b133 *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b139 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555b13d *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555b142 *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b146 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555b14a *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555b150 *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b156 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b15a *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555b15e *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555b162 *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b168 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555b16c *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555b172 *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555b176 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b17a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b17e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555b182 *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555b186 *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovd  0x24(%r12),%xmm5                         #! EA = L0x5555555612c4; Value = 0x2b2a292827262524; PC = 0x55555555b18a *)
mov ymm5_0 L0x5555555612c4; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x24(%r8),%xmm0                          #! EA = L0x555555561404; Value = 0x2b2a292827262524; PC = 0x55555555b191 *)
mov ymm0_0 L0x555555561404; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x24(%r13),%xmm1                         #! EA = L0x555555561314; Value = 0x2b2a292827262524; PC = 0x55555555b197 *)
mov ymm1_0 L0x555555561314; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x24(%r9),%xmm2                          #! EA = L0x555555561454; Value = 0x2b2a292827262524; PC = 0x55555555b19d *)
mov ymm2_0 L0x555555561454; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x24(%r14),%xmm5,%xmm5             #! EA = L0x555555561364; Value = 0x2b2a292827262524; PC = 0x55555555b1a3 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561364;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x24(%r10),%xmm0,%xmm0             #! EA = L0x5555555614a4; Value = 0x2b2a292827262524; PC = 0x55555555b1aa *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614a4;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x24(%r15),%xmm1,%xmm1             #! EA = L0x5555555613b4; Value = 0x2b2a292827262524; PC = 0x55555555b1b1 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613b4;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b1b8 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x24(%r11),%xmm2,%xmm2             #! EA = L0x5555555614f4; Value = 0x2b2a292827262524; PC = 0x55555555b1bc *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614f4;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b1c3 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b1c7 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b1cd *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555b1d2 *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555b1d8 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x60(%rbx)                       #! EA = L0x7fffffffd820; PC = 0x55555555b1de *)
mov L0x7fffffffd820 ymm5_0; mov L0x7fffffffd824 ymm5_1;
mov L0x7fffffffd828 ymm5_2; mov L0x7fffffffd82c ymm5_3;
mov L0x7fffffffd830 ymm5_4; mov L0x7fffffffd834 ymm5_5;
mov L0x7fffffffd838 ymm5_6; mov L0x7fffffffd83c ymm5_7;
(* vpaddd %ymm14,%ymm5,%ymm5                       #! PC = 0x55555555b1e3 *)
adds dc ymm5_0 ymm5_0 ymm14_0; adds dc ymm5_1 ymm5_1 ymm14_1;
adds dc ymm5_2 ymm5_2 ymm14_2; adds dc ymm5_3 ymm5_3 ymm14_3;
adds dc ymm5_4 ymm5_4 ymm14_4; adds dc ymm5_5 ymm5_5 ymm14_5;
adds dc ymm5_6 ymm5_6 ymm14_6; adds dc ymm5_7 ymm5_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555b1e8 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b1ee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555b1f2 *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cd20; Value = 0x12835b0112835b01; PC = 0x55555555b1f8 *)
adds dc ymm5_0 ymm5_0 L0x55555555cd20; adds dc ymm5_1 ymm5_1 L0x55555555cd24;
adds dc ymm5_2 ymm5_2 L0x55555555cd28; adds dc ymm5_3 ymm5_3 L0x55555555cd2c;
adds dc ymm5_4 ymm5_4 L0x55555555cd30; adds dc ymm5_5 ymm5_5 L0x55555555cd34;
adds dc ymm5_6 ymm5_6 L0x55555555cd38; adds dc ymm5_7 ymm5_7 L0x55555555cd3c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b1fd *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555b201 *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b207 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555b20b *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555b211 *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555b216 *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b21b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555b21f *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b225 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555b229 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555b22f *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555b233 *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555b238 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b23c *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555b240 *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555b246 *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b24c *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555b250 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555b254 *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555b258 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b25e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555b262 *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555b268 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm5,%ymm10,%ymm10                      #! PC = 0x55555555b26c *)
adds dc ymm10_0 ymm10_0 ymm5_0; adds dc ymm10_1 ymm10_1 ymm5_1;
adds dc ymm10_2 ymm10_2 ymm5_2; adds dc ymm10_3 ymm10_3 ymm5_3;
adds dc ymm10_4 ymm10_4 ymm5_4; adds dc ymm10_5 ymm10_5 ymm5_5;
adds dc ymm10_6 ymm10_6 ymm5_6; adds dc ymm10_7 ymm10_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b270 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b274 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm14,%ymm14                      #! PC = 0x55555555b278 *)
adds dc ymm14_0 ymm14_0 ymm5_0; adds dc ymm14_1 ymm14_1 ymm5_1;
adds dc ymm14_2 ymm14_2 ymm5_2; adds dc ymm14_3 ymm14_3 ymm5_3;
adds dc ymm14_4 ymm14_4 ymm5_4; adds dc ymm14_5 ymm14_5 ymm5_5;
adds dc ymm14_6 ymm14_6 ymm5_6; adds dc ymm14_7 ymm14_7 ymm5_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555b27c *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovd  0x28(%r12),%xmm5                         #! EA = L0x5555555612c8; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b280 *)
mov ymm5_0 L0x5555555612c8; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x28(%r8),%xmm0                          #! EA = L0x555555561408; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b287 *)
mov ymm0_0 L0x555555561408; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x28(%r13),%xmm1                         #! EA = L0x555555561318; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b28d *)
mov ymm1_0 L0x555555561318; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x28(%r9),%xmm2                          #! EA = L0x555555561458; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b293 *)
mov ymm2_0 L0x555555561458; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x28(%r14),%xmm5,%xmm5             #! EA = L0x555555561368; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b299 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561368;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x28(%r10),%xmm0,%xmm0             #! EA = L0x5555555614a8; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b2a0 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614a8;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x28(%r15),%xmm1,%xmm1             #! EA = L0x5555555613b8; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b2a7 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613b8;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b2ae *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x28(%r11),%xmm2,%xmm2             #! EA = L0x5555555614f8; Value = 0x2f2e2d2c2b2a2928; PC = 0x55555555b2b2 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614f8;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b2b9 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b2bd *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b2c3 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555b2c8 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555b2ce *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rbx)                       #! EA = L0x7fffffffd840; PC = 0x55555555b2d4 *)
mov L0x7fffffffd840 ymm5_0; mov L0x7fffffffd844 ymm5_1;
mov L0x7fffffffd848 ymm5_2; mov L0x7fffffffd84c ymm5_3;
mov L0x7fffffffd850 ymm5_4; mov L0x7fffffffd854 ymm5_5;
mov L0x7fffffffd858 ymm5_6; mov L0x7fffffffd85c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555b2d9 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555b2de *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b2e4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555b2e8 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cd40; Value = 0x243185be243185be; PC = 0x55555555b2ee *)
adds dc ymm5_0 ymm5_0 L0x55555555cd40; adds dc ymm5_1 ymm5_1 L0x55555555cd44;
adds dc ymm5_2 ymm5_2 L0x55555555cd48; adds dc ymm5_3 ymm5_3 L0x55555555cd4c;
adds dc ymm5_4 ymm5_4 L0x55555555cd50; adds dc ymm5_5 ymm5_5 L0x55555555cd54;
adds dc ymm5_6 ymm5_6 L0x55555555cd58; adds dc ymm5_7 ymm5_7 L0x55555555cd5c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b2f3 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555b2f7 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b2fd *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555b301 *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555b307 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555b30c *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b311 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555b315 *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b31b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555b31f *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b325 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555b329 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555b32e *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b332 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555b336 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555b33c *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b342 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b346 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555b34a *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555b34e *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b354 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555b358 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555b35e *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555b362 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b366 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b36a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555b36e *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555b372 *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovd  0x2c(%r12),%xmm5                         #! EA = L0x5555555612cc; Value = 0x333231302f2e2d2c; PC = 0x55555555b376 *)
mov ymm5_0 L0x5555555612cc; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x2c(%r8),%xmm0                          #! EA = L0x55555556140c; Value = 0x333231302f2e2d2c; PC = 0x55555555b37d *)
mov ymm0_0 L0x55555556140c; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x2c(%r13),%xmm1                         #! EA = L0x55555556131c; Value = 0x333231302f2e2d2c; PC = 0x55555555b383 *)
mov ymm1_0 L0x55555556131c; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x2c(%r9),%xmm2                          #! EA = L0x55555556145c; Value = 0x333231302f2e2d2c; PC = 0x55555555b389 *)
mov ymm2_0 L0x55555556145c; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x2c(%r14),%xmm5,%xmm5             #! EA = L0x55555556136c; Value = 0x333231302f2e2d2c; PC = 0x55555555b38f *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x55555556136c;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x2c(%r10),%xmm0,%xmm0             #! EA = L0x5555555614ac; Value = 0x333231302f2e2d2c; PC = 0x55555555b396 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614ac;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x2c(%r15),%xmm1,%xmm1             #! EA = L0x5555555613bc; Value = 0x333231302f2e2d2c; PC = 0x55555555b39d *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613bc;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b3a4 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x2c(%r11),%xmm2,%xmm2             #! EA = L0x5555555614fc; Value = 0x333231302f2e2d2c; PC = 0x55555555b3a8 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x5555555614fc;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b3af *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b3b3 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b3b9 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555b3be *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555b3c4 *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x20(%rbx)                       #! EA = L0x7fffffffd860; PC = 0x55555555b3ca *)
mov L0x7fffffffd860 ymm5_0; mov L0x7fffffffd864 ymm5_1;
mov L0x7fffffffd868 ymm5_2; mov L0x7fffffffd86c ymm5_3;
mov L0x7fffffffd870 ymm5_4; mov L0x7fffffffd874 ymm5_5;
mov L0x7fffffffd878 ymm5_6; mov L0x7fffffffd87c ymm5_7;
(* vpaddd %ymm12,%ymm5,%ymm5                       #! PC = 0x55555555b3cf *)
adds dc ymm5_0 ymm5_0 ymm12_0; adds dc ymm5_1 ymm5_1 ymm12_1;
adds dc ymm5_2 ymm5_2 ymm12_2; adds dc ymm5_3 ymm5_3 ymm12_3;
adds dc ymm5_4 ymm5_4 ymm12_4; adds dc ymm5_5 ymm5_5 ymm12_5;
adds dc ymm5_6 ymm5_6 ymm12_6; adds dc ymm5_7 ymm5_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555b3d4 *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b3da *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555b3de *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cd60; Value = 0x550c7dc3550c7dc3; PC = 0x55555555b3e4 *)
adds dc ymm5_0 ymm5_0 L0x55555555cd60; adds dc ymm5_1 ymm5_1 L0x55555555cd64;
adds dc ymm5_2 ymm5_2 L0x55555555cd68; adds dc ymm5_3 ymm5_3 L0x55555555cd6c;
adds dc ymm5_4 ymm5_4 L0x55555555cd70; adds dc ymm5_5 ymm5_5 L0x55555555cd74;
adds dc ymm5_6 ymm5_6 L0x55555555cd78; adds dc ymm5_7 ymm5_7 L0x55555555cd7c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b3e9 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555b3ed *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b3f3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555b3f7 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555b3fd *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555b402 *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b407 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555b40b *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b411 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555b415 *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555b41b *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555b41f *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555b424 *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b428 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555b42c *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555b432 *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b438 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555b43c *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555b440 *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555b444 *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b44a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555b44e *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555b454 *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm5,%ymm8,%ymm8                        #! PC = 0x55555555b458 *)
adds dc ymm8_0 ymm8_0 ymm5_0; adds dc ymm8_1 ymm8_1 ymm5_1;
adds dc ymm8_2 ymm8_2 ymm5_2; adds dc ymm8_3 ymm8_3 ymm5_3;
adds dc ymm8_4 ymm8_4 ymm5_4; adds dc ymm8_5 ymm8_5 ymm5_5;
adds dc ymm8_6 ymm8_6 ymm5_6; adds dc ymm8_7 ymm8_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b45c *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b460 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm12,%ymm12                      #! PC = 0x55555555b464 *)
adds dc ymm12_0 ymm12_0 ymm5_0; adds dc ymm12_1 ymm12_1 ymm5_1;
adds dc ymm12_2 ymm12_2 ymm5_2; adds dc ymm12_3 ymm12_3 ymm5_3;
adds dc ymm12_4 ymm12_4 ymm5_4; adds dc ymm12_5 ymm12_5 ymm5_5;
adds dc ymm12_6 ymm12_6 ymm5_6; adds dc ymm12_7 ymm12_7 ymm5_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555b468 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovd  0x30(%r12),%xmm5                         #! EA = L0x5555555612d0; Value = 0x3736353433323130; PC = 0x55555555b46c *)
mov ymm5_0 L0x5555555612d0; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x30(%r8),%xmm0                          #! EA = L0x555555561410; Value = 0x3736353433323130; PC = 0x55555555b473 *)
mov ymm0_0 L0x555555561410; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x30(%r13),%xmm1                         #! EA = L0x555555561320; Value = 0x3736353433323130; PC = 0x55555555b479 *)
mov ymm1_0 L0x555555561320; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x30(%r9),%xmm2                          #! EA = L0x555555561460; Value = 0x3736353433323130; PC = 0x55555555b47f *)
mov ymm2_0 L0x555555561460; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x30(%r14),%xmm5,%xmm5             #! EA = L0x555555561370; Value = 0x3736353433323130; PC = 0x55555555b485 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561370;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x30(%r10),%xmm0,%xmm0             #! EA = L0x5555555614b0; Value = 0x3736353433323130; PC = 0x55555555b48c *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614b0;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x30(%r15),%xmm1,%xmm1             #! EA = L0x5555555613c0; Value = 0x3736353433323130; PC = 0x55555555b493 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613c0;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b49a *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x30(%r11),%xmm2,%xmm2             #! EA = L0x555555561500; Value = 0x3736353433323130; PC = 0x55555555b49e *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x555555561500;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b4a5 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b4a9 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b4af *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555b4b4 *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555b4ba *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rbx)                            #! EA = L0x7fffffffd880; PC = 0x55555555b4c0 *)
mov L0x7fffffffd880 ymm5_0; mov L0x7fffffffd884 ymm5_1;
mov L0x7fffffffd888 ymm5_2; mov L0x7fffffffd88c ymm5_3;
mov L0x7fffffffd890 ymm5_4; mov L0x7fffffffd894 ymm5_5;
mov L0x7fffffffd898 ymm5_6; mov L0x7fffffffd89c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555b4c4 *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555b4c9 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b4cf *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555b4d3 *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555cd80; Value = 0x72be5d7472be5d74; PC = 0x55555555b4d9 *)
adds dc ymm5_0 ymm5_0 L0x55555555cd80; adds dc ymm5_1 ymm5_1 L0x55555555cd84;
adds dc ymm5_2 ymm5_2 L0x55555555cd88; adds dc ymm5_3 ymm5_3 L0x55555555cd8c;
adds dc ymm5_4 ymm5_4 L0x55555555cd90; adds dc ymm5_5 ymm5_5 L0x55555555cd94;
adds dc ymm5_6 ymm5_6 L0x55555555cd98; adds dc ymm5_7 ymm5_7 L0x55555555cd9c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b4de *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555b4e2 *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b4e8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555b4ec *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555b4f2 *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555b4f7 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b4fc *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555b500 *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b506 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555b50a *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b510 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555b514 *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555b519 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b51d *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555b521 *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555b527 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b52d *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b531 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555b535 *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555b539 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b53f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555b543 *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555b549 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555b54d *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b551 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b555 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555b559 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555b55d *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovd  0x34(%r12),%xmm5                         #! EA = L0x5555555612d4; Value = 0x3b3a393837363534; PC = 0x55555555b561 *)
mov ymm5_0 L0x5555555612d4; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x34(%r8),%xmm0                          #! EA = L0x555555561414; Value = 0x3b3a393837363534; PC = 0x55555555b568 *)
mov ymm0_0 L0x555555561414; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x34(%r13),%xmm1                         #! EA = L0x555555561324; Value = 0x3b3a393837363534; PC = 0x55555555b56e *)
mov ymm1_0 L0x555555561324; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x34(%r9),%xmm2                          #! EA = L0x555555561464; Value = 0x3b3a393837363534; PC = 0x55555555b574 *)
mov ymm2_0 L0x555555561464; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x34(%r14),%xmm5,%xmm5             #! EA = L0x555555561374; Value = 0x3b3a393837363534; PC = 0x55555555b57a *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561374;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x34(%r10),%xmm0,%xmm0             #! EA = L0x5555555614b4; Value = 0x3b3a393837363534; PC = 0x55555555b581 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614b4;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x34(%r15),%xmm1,%xmm1             #! EA = L0x5555555613c4; Value = 0x3b3a393837363534; PC = 0x55555555b588 *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613c4;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b58f *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x34(%r11),%xmm2,%xmm2             #! EA = L0x555555561504; Value = 0x3b3a393837363534; PC = 0x55555555b593 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x555555561504;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b59a *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b59e *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b5a4 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555b5a9 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555b5af *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x20(%rbx)                        #! EA = L0x7fffffffd8a0; PC = 0x55555555b5b5 *)
mov L0x7fffffffd8a0 ymm5_0; mov L0x7fffffffd8a4 ymm5_1;
mov L0x7fffffffd8a8 ymm5_2; mov L0x7fffffffd8ac ymm5_3;
mov L0x7fffffffd8b0 ymm5_4; mov L0x7fffffffd8b4 ymm5_5;
mov L0x7fffffffd8b8 ymm5_6; mov L0x7fffffffd8bc ymm5_7;
(* vpaddd %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555b5ba *)
adds dc ymm5_0 ymm5_0 ymm10_0; adds dc ymm5_1 ymm5_1 ymm10_1;
adds dc ymm5_2 ymm5_2 ymm10_2; adds dc ymm5_3 ymm5_3 ymm10_3;
adds dc ymm5_4 ymm5_4 ymm10_4; adds dc ymm5_5 ymm5_5 ymm10_5;
adds dc ymm5_6 ymm5_6 ymm10_6; adds dc ymm5_7 ymm5_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555b5bf *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b5c5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555b5c9 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cda0; Value = 0x80deb1fe80deb1fe; PC = 0x55555555b5cf *)
adds dc ymm5_0 ymm5_0 L0x55555555cda0; adds dc ymm5_1 ymm5_1 L0x55555555cda4;
adds dc ymm5_2 ymm5_2 L0x55555555cda8; adds dc ymm5_3 ymm5_3 L0x55555555cdac;
adds dc ymm5_4 ymm5_4 L0x55555555cdb0; adds dc ymm5_5 ymm5_5 L0x55555555cdb4;
adds dc ymm5_6 ymm5_6 L0x55555555cdb8; adds dc ymm5_7 ymm5_7 L0x55555555cdbc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b5d4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555b5d8 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b5de *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555b5e2 *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555b5e8 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555b5ed *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b5f2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555b5f6 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b5fc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555b600 *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555b606 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555b60a *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555b60f *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b613 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555b617 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555b61d *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b623 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555b627 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555b62b *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555b62f *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b635 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555b639 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555b63f *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm5,%ymm14,%ymm14                      #! PC = 0x55555555b643 *)
adds dc ymm14_0 ymm14_0 ymm5_0; adds dc ymm14_1 ymm14_1 ymm5_1;
adds dc ymm14_2 ymm14_2 ymm5_2; adds dc ymm14_3 ymm14_3 ymm5_3;
adds dc ymm14_4 ymm14_4 ymm5_4; adds dc ymm14_5 ymm14_5 ymm5_5;
adds dc ymm14_6 ymm14_6 ymm5_6; adds dc ymm14_7 ymm14_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b647 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b64b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm10,%ymm10                      #! PC = 0x55555555b64f *)
adds dc ymm10_0 ymm10_0 ymm5_0; adds dc ymm10_1 ymm10_1 ymm5_1;
adds dc ymm10_2 ymm10_2 ymm5_2; adds dc ymm10_3 ymm10_3 ymm5_3;
adds dc ymm10_4 ymm10_4 ymm5_4; adds dc ymm10_5 ymm10_5 ymm5_5;
adds dc ymm10_6 ymm10_6 ymm5_6; adds dc ymm10_7 ymm10_7 ymm5_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555b653 *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovd  0x38(%r12),%xmm5                         #! EA = L0x5555555612d8; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b657 *)
mov ymm5_0 L0x5555555612d8; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* vmovd  0x38(%r8),%xmm0                          #! EA = L0x555555561418; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b65e *)
mov ymm0_0 L0x555555561418; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovd  0x38(%r13),%xmm1                         #! EA = L0x555555561328; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b664 *)
mov ymm1_0 L0x555555561328; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* vmovd  0x38(%r9),%xmm2                          #! EA = L0x555555561468; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b66a *)
mov ymm2_0 L0x555555561468; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* vpinsrd $0x1,0x38(%r14),%xmm5,%xmm5             #! EA = L0x555555561378; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b670 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x555555561378;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* vpinsrd $0x1,0x38(%r10),%xmm0,%xmm0             #! EA = L0x5555555614b8; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b677 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614b8;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* vpinsrd $0x1,0x38(%r15),%xmm1,%xmm1             #! EA = L0x5555555613c8; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b67e *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613c8;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b685 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x38(%r11),%xmm2,%xmm2             #! EA = L0x555555561508; Value = 0x3f3e3d3c3b3a3938; PC = 0x55555555b689 *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x555555561508;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b690 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b694 *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b69a *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555b69f *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555b6a5 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rbx)                        #! EA = L0x7fffffffd8c0; PC = 0x55555555b6ab *)
mov L0x7fffffffd8c0 ymm5_0; mov L0x7fffffffd8c4 ymm5_1;
mov L0x7fffffffd8c8 ymm5_2; mov L0x7fffffffd8cc ymm5_3;
mov L0x7fffffffd8d0 ymm5_4; mov L0x7fffffffd8d4 ymm5_5;
mov L0x7fffffffd8d8 ymm5_6; mov L0x7fffffffd8dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555b6b0 *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555b6b5 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b6bb *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555b6bf *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cdc0; Value = 0x9bdc06a79bdc06a7; PC = 0x55555555b6c5 *)
adds dc ymm5_0 ymm5_0 L0x55555555cdc0; adds dc ymm5_1 ymm5_1 L0x55555555cdc4;
adds dc ymm5_2 ymm5_2 L0x55555555cdc8; adds dc ymm5_3 ymm5_3 L0x55555555cdcc;
adds dc ymm5_4 ymm5_4 L0x55555555cdd0; adds dc ymm5_5 ymm5_5 L0x55555555cdd4;
adds dc ymm5_6 ymm5_6 L0x55555555cdd8; adds dc ymm5_7 ymm5_7 L0x55555555cddc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b6ca *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555b6ce *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b6d4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555b6d8 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555b6de *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555b6e3 *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b6e8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555b6ec *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b6f2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555b6f6 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b6fc *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555b700 *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555b705 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b709 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555b70d *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555b713 *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b719 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b71d *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555b721 *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555b725 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b72b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555b72f *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555b735 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555b739 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b73d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b741 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555b745 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555b749 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovd  0x3c(%r12),%xmm5                         #! EA = L0x5555555612dc; Value = 0x000000003f3e3d3c; PC = 0x55555555b74d *)
mov ymm5_0 L0x5555555612dc; mov ymm5_1 0@uint32;
mov ymm5_2 0@uint32; mov ymm5_3 0@uint32;
mov ymm5_4 0@uint32; mov ymm5_5 0@uint32;
mov ymm5_6 0@uint32; mov ymm5_7 0@uint32;
(* lea    0x40(%r12),%r12                          #! PC = 0x55555555b754 *)
(* lea XXX, r12 *)
nop;
(* vmovd  0x3c(%r8),%xmm0                          #! EA = L0x55555556141c; Value = 0x000000003f3e3d3c; PC = 0x55555555b759 *)
mov ymm0_0 L0x55555556141c; mov ymm0_1 0@uint32;
mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32;
mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* lea    0x40(%r8),%r8                            #! PC = 0x55555555b75f *)
(* lea XXX, r8 *)
nop;
(* vmovd  0x3c(%r13),%xmm1                         #! EA = L0x55555556132c; Value = 0x000000003f3e3d3c; PC = 0x55555555b763 *)
mov ymm1_0 L0x55555556132c; mov ymm1_1 0@uint32;
mov ymm1_2 0@uint32; mov ymm1_3 0@uint32;
mov ymm1_4 0@uint32; mov ymm1_5 0@uint32;
mov ymm1_6 0@uint32; mov ymm1_7 0@uint32;
(* lea    0x40(%r13),%r13                          #! PC = 0x55555555b769 *)
(* lea XXX, r13 *)
nop;
(* vmovd  0x3c(%r9),%xmm2                          #! EA = L0x55555556146c; Value = 0x000000003f3e3d3c; PC = 0x55555555b76d *)
mov ymm2_0 L0x55555556146c; mov ymm2_1 0@uint32;
mov ymm2_2 0@uint32; mov ymm2_3 0@uint32;
mov ymm2_4 0@uint32; mov ymm2_5 0@uint32;
mov ymm2_6 0@uint32; mov ymm2_7 0@uint32;
(* lea    0x40(%r9),%r9                            #! PC = 0x55555555b773 *)
(* lea XXX, r9 *)
nop;
(* vpinsrd $0x1,0x3c(%r14),%xmm5,%xmm5             #! EA = L0x55555556137c; Value = 0x000000003f3e3d3c; PC = 0x55555555b777 *)
mov ymm5_0 ymm5_0; mov ymm5_1 L0x55555556137c;
mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
(* lea    0x40(%r14),%r14                          #! PC = 0x55555555b77e *)
(* lea XXX, r14 *)
nop;
(* vpinsrd $0x1,0x3c(%r10),%xmm0,%xmm0             #! EA = L0x5555555614bc; Value = 0x000000003f3e3d3c; PC = 0x55555555b782 *)
mov ymm0_0 ymm0_0; mov ymm0_1 L0x5555555614bc;
mov ymm0_2 ymm0_2; mov ymm0_3 ymm0_3;
(* lea    0x40(%r10),%r10                          #! PC = 0x55555555b789 *)
(* lea XXX, r10 *)
nop;
(* vpinsrd $0x1,0x3c(%r15),%xmm1,%xmm1             #! EA = L0x5555555613cc; Value = 0x000000003f3e3d3c; PC = 0x55555555b78d *)
mov ymm1_0 ymm1_0; mov ymm1_1 L0x5555555613cc;
mov ymm1_2 ymm1_2; mov ymm1_3 ymm1_3;
(* lea    0x40(%r15),%r15                          #! PC = 0x55555555b794 *)
(* lea XXX, r15 *)
nop;
(* vpunpckldq %ymm1,%ymm5,%ymm5                    #! PC = 0x55555555b798 *)
mov upck0 ymm5_0; mov upck1 ymm1_0; mov upck2 ymm5_1; mov upck3 ymm1_1;
mov upck4 ymm5_4; mov upck5 ymm1_4; mov upck6 ymm5_5; mov upck7 ymm1_5;
mov ymm5_0 upck0; mov ymm5_1 upck1; mov ymm5_2 upck2; mov ymm5_3 upck3;
mov ymm5_4 upck4; mov ymm5_5 upck5; mov ymm5_6 upck6; mov ymm5_7 upck7;
(* vpinsrd $0x1,0x3c(%r11),%xmm2,%xmm2             #! EA = L0x55555556150c; Value = 0x000000003f3e3d3c; PC = 0x55555555b79c *)
mov ymm2_0 ymm2_0; mov ymm2_1 L0x55555556150c;
mov ymm2_2 ymm2_2; mov ymm2_3 ymm2_3;
(* lea    0x40(%r11),%r11                          #! PC = 0x55555555b7a3 *)
(* lea XXX, r11 *)
nop;
(* vpunpckldq %ymm2,%ymm0,%ymm0                    #! PC = 0x55555555b7a7 *)
mov upck0 ymm0_0; mov upck1 ymm2_0; mov upck2 ymm0_1; mov upck3 ymm2_1;
mov upck4 ymm0_4; mov upck5 ymm2_4; mov upck6 ymm0_5; mov upck7 ymm2_5;
mov ymm0_0 upck0; mov ymm0_1 upck1; mov ymm0_2 upck2; mov ymm0_3 upck3;
mov ymm0_4 upck4; mov ymm0_5 upck5; mov ymm0_6 upck6; mov ymm0_7 upck7;
(* vinserti128 $0x1,%xmm0,%ymm5,%ymm5              #! PC = 0x55555555b7ab *)
mov ymm5_0 ymm5_0; mov ymm5_1 ymm5_1; mov ymm5_2 ymm5_2; mov ymm5_3 ymm5_3;
mov ymm5_4 ymm0_0; mov ymm5_5 ymm0_1; mov ymm5_6 ymm0_2; mov ymm5_7 ymm0_3;
(* vpshufb %ymm6,%ymm5,%ymm5                       #! PC = 0x55555555b7b1 *)
assert true
   && and [ymm6_0=0x00010203@32, ymm6_1=0x04050607@32, ymm6_2=0x08090a0b@32, ymm6_3=0x0c0d0e0f@32,ymm6_4=0x00010203@32, ymm6_5=0x04050607@32, ymm6_6=0x08090a0b@32, ymm6_7=0x0c0d0e0f@32];
spl s1 s0 ymm5_0 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_0 t1 t0;
spl s1 s0 ymm5_1 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_1 t1 t0;
spl s1 s0 ymm5_2 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_2 t1 t0;
spl s1 s0 ymm5_3 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_3 t1 t0;
spl s1 s0 ymm5_4 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_4 t1 t0;
spl s1 s0 ymm5_5 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_5 t1 t0;
spl s1 s0 ymm5_6 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_6 t1 t0;
spl s1 s0 ymm5_7 16; spl s01 s00 s0 8; spl s11 s10 s1 8;
join t1 s00 s01; join t0 s10 s11; join ymm5_7 t1 t0;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555b7b6 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555b7bc *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x60(%rbx)                        #! EA = L0x7fffffffd8e0; PC = 0x55555555b7c2 *)
mov L0x7fffffffd8e0 ymm5_0; mov L0x7fffffffd8e4 ymm5_1;
mov L0x7fffffffd8e8 ymm5_2; mov L0x7fffffffd8ec ymm5_3;
mov L0x7fffffffd8f0 ymm5_4; mov L0x7fffffffd8f4 ymm5_5;
mov L0x7fffffffd8f8 ymm5_6; mov L0x7fffffffd8fc ymm5_7;
(* vpaddd %ymm8,%ymm5,%ymm5                        #! PC = 0x55555555b7c7 *)
adds dc ymm5_0 ymm5_0 ymm8_0; adds dc ymm5_1 ymm5_1 ymm8_1;
adds dc ymm5_2 ymm5_2 ymm8_2; adds dc ymm5_3 ymm5_3 ymm8_3;
adds dc ymm5_4 ymm5_4 ymm8_4; adds dc ymm5_5 ymm5_5 ymm8_5;
adds dc ymm5_6 ymm5_6 ymm8_6; adds dc ymm5_7 ymm5_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555b7cc *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b7d2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555b7d6 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cde0; Value = 0xc19bf174c19bf174; PC = 0x55555555b7dc *)
adds dc ymm5_0 ymm5_0 L0x55555555cde0; adds dc ymm5_1 ymm5_1 L0x55555555cde4;
adds dc ymm5_2 ymm5_2 L0x55555555cde8; adds dc ymm5_3 ymm5_3 L0x55555555cdec;
adds dc ymm5_4 ymm5_4 L0x55555555cdf0; adds dc ymm5_5 ymm5_5 L0x55555555cdf4;
adds dc ymm5_6 ymm5_6 L0x55555555cdf8; adds dc ymm5_7 ymm5_7 L0x55555555cdfc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b7e1 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555b7e5 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b7eb *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* prefetcht0 0x3f(%r12)                           #! EA = L0x55555556131f; PC = 0x55555555b7ef *)
(* prefetcht0 L0x55555556131f *)
nop;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555b7f5 *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555b7fb *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555b800 *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* prefetcht0 0x3f(%r13)                           #! EA = L0x55555556136f; PC = 0x55555555b805 *)
(* prefetcht0 L0x55555556136f *)
nop;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b80a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555b80e *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b814 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* prefetcht0 0x3f(%r14)                           #! EA = L0x5555555613bf; PC = 0x55555555b818 *)
(* prefetcht0 L0x5555555613bf *)
nop;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555b81d *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555b823 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555b827 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* prefetcht0 0x3f(%r15)                           #! EA = L0x55555556140f; PC = 0x55555555b82c *)
(* prefetcht0 L0x55555556140f *)
nop;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555b831 *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b835 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555b839 *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* prefetcht0 0x3f(%r8)                            #! EA = L0x55555556145f; PC = 0x55555555b83f *)
(* prefetcht0 L0x55555556145f *)
nop;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555b844 *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b84a *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555b84e *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* prefetcht0 0x3f(%r9)                            #! EA = L0x5555555614af; PC = 0x55555555b852 *)
(* prefetcht0 L0x5555555614af *)
nop;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555b857 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555b85b *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b861 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* prefetcht0 0x3f(%r10)                           #! EA = L0x5555555614ff; PC = 0x55555555b865 *)
(* prefetcht0 L0x5555555614ff *)
nop;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555b86a *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555b870 *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm5,%ymm12,%ymm12                      #! PC = 0x55555555b874 *)
adds dc ymm12_0 ymm12_0 ymm5_0; adds dc ymm12_1 ymm12_1 ymm5_1;
adds dc ymm12_2 ymm12_2 ymm5_2; adds dc ymm12_3 ymm12_3 ymm5_3;
adds dc ymm12_4 ymm12_4 ymm5_4; adds dc ymm12_5 ymm12_5 ymm5_5;
adds dc ymm12_6 ymm12_6 ymm5_6; adds dc ymm12_7 ymm12_7 ymm5_7;
(* prefetcht0 0x3f(%r11)                           #! EA = L0x55555556154f; PC = 0x55555555b878 *)
(* prefetcht0 L0x55555556154f *)
nop;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b87d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b881 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm8,%ymm8                        #! PC = 0x55555555b885 *)
adds dc ymm8_0 ymm8_0 ymm5_0; adds dc ymm8_1 ymm8_1 ymm5_1;
adds dc ymm8_2 ymm8_2 ymm5_2; adds dc ymm8_3 ymm8_3 ymm5_3;
adds dc ymm8_4 ymm8_4 ymm5_4; adds dc ymm8_5 ymm8_5 ymm5_5;
adds dc ymm8_6 ymm8_6 ymm5_6; adds dc ymm8_7 ymm8_7 ymm5_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555b889 *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555b88d *)
(* add 0x100, rbp *)
nop;
(* vmovdqu -0x80(%rax),%ymm5                       #! EA = L0x7fffffffd700; Value = 0x0001020300010203; PC = 0x55555555b894 *)
mov ymm5_0 L0x7fffffffd700; mov ymm5_1 L0x7fffffffd704;
mov ymm5_2 L0x7fffffffd708; mov ymm5_3 L0x7fffffffd70c;
mov ymm5_4 L0x7fffffffd710; mov ymm5_5 L0x7fffffffd714;
mov ymm5_6 L0x7fffffffd718; mov ymm5_7 L0x7fffffffd71c;
(* mov    $0x3,%ecx                                #! PC = 0x55555555b899 *)
mov ecx 0x3@uint32;
(* #jmp    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! PC = 0x55555555b89e *)
#jmp    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! 0x55555555b89e = 0x55555555b89e;
(* vmovdqu -0x60(%rax),%ymm6                       #! EA = L0x7fffffffd720; Value = 0x0405060704050607; PC = 0x55555555b8a0 *)
mov ymm6_0 L0x7fffffffd720; mov ymm6_1 L0x7fffffffd724;
mov ymm6_2 L0x7fffffffd728; mov ymm6_3 L0x7fffffffd72c;
mov ymm6_4 L0x7fffffffd730; mov ymm6_5 L0x7fffffffd734;
mov ymm6_6 L0x7fffffffd738; mov ymm6_7 L0x7fffffffd73c;
(* vpaddd -0x60(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd820; Value = 0x2425262724252627; PC = 0x55555555b8a5 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd820; adds dc ymm5_1 ymm5_1 L0x7fffffffd824;
adds dc ymm5_2 ymm5_2 L0x7fffffffd828; adds dc ymm5_3 ymm5_3 L0x7fffffffd82c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd830; adds dc ymm5_5 ymm5_5 L0x7fffffffd834;
adds dc ymm5_6 ymm5_6 L0x7fffffffd838; adds dc ymm5_7 ymm5_7 L0x7fffffffd83c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555b8aa *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555b8af *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555b8b4 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8b9 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555b8bd *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555b8c6 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rbx),%ymm0                        #! EA = L0x7fffffffd8c0; Value = 0x38393a3b38393a3b; PC = 0x55555555b8cb *)
mov ymm0_0 L0x7fffffffd8c0; mov ymm0_1 L0x7fffffffd8c4;
mov ymm0_2 L0x7fffffffd8c8; mov ymm0_3 L0x7fffffffd8cc;
mov ymm0_4 L0x7fffffffd8d0; mov ymm0_5 L0x7fffffffd8d4;
mov ymm0_6 L0x7fffffffd8d8; mov ymm0_7 L0x7fffffffd8dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555b8d0 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8d5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b8d9 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8de *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b8e2 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b8e7 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555b8eb *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555b8ef *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8f4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555b8f8 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8fd *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b901 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b905 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555b909 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555b90f *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rax)                       #! EA = L0x7fffffffd700; PC = 0x55555555b915 *)
mov L0x7fffffffd700 ymm5_0; mov L0x7fffffffd704 ymm5_1;
mov L0x7fffffffd708 ymm5_2; mov L0x7fffffffd70c ymm5_3;
mov L0x7fffffffd710 ymm5_4; mov L0x7fffffffd714 ymm5_5;
mov L0x7fffffffd718 ymm5_6; mov L0x7fffffffd71c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555b91a *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555b91f *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b925 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555b929 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555ce00; Value = 0xe49b69c1e49b69c1; PC = 0x55555555b92f *)
adds dc ymm5_0 ymm5_0 L0x55555555ce00; adds dc ymm5_1 ymm5_1 L0x55555555ce04;
adds dc ymm5_2 ymm5_2 L0x55555555ce08; adds dc ymm5_3 ymm5_3 L0x55555555ce0c;
adds dc ymm5_4 ymm5_4 L0x55555555ce10; adds dc ymm5_5 ymm5_5 L0x55555555ce14;
adds dc ymm5_6 ymm5_6 L0x55555555ce18; adds dc ymm5_7 ymm5_7 L0x55555555ce1c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b934 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555b938 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b93e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555b942 *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555b948 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555b94d *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b952 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555b956 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b95c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555b960 *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b966 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555b96a *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555b96f *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b973 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555b977 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555b97d *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b983 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b987 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555b98b *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555b98f *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b995 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555b999 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555b99f *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555b9a3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555b9af *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555b9b3 *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rax),%ymm5                       #! EA = L0x7fffffffd740; Value = 0x08090a0b08090a0b; PC = 0x55555555b9b7 *)
mov ymm5_0 L0x7fffffffd740; mov ymm5_1 L0x7fffffffd744;
mov ymm5_2 L0x7fffffffd748; mov ymm5_3 L0x7fffffffd74c;
mov ymm5_4 L0x7fffffffd750; mov ymm5_5 L0x7fffffffd754;
mov ymm5_6 L0x7fffffffd758; mov ymm5_7 L0x7fffffffd75c;
(* vpaddd -0x40(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd840; Value = 0x28292a2b28292a2b; PC = 0x55555555b9bc *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd840; adds dc ymm6_1 ymm6_1 L0x7fffffffd844;
adds dc ymm6_2 ymm6_2 L0x7fffffffd848; adds dc ymm6_3 ymm6_3 L0x7fffffffd84c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd850; adds dc ymm6_5 ymm6_5 L0x7fffffffd854;
adds dc ymm6_6 ymm6_6 L0x7fffffffd858; adds dc ymm6_7 ymm6_7 L0x7fffffffd85c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555b9c1 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555b9c6 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555b9cb *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9d0 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555b9d4 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9d9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555b9dd *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rbx),%ymm0                        #! EA = L0x7fffffffd8e0; Value = 0x3c3d3e3f3c3d3e3f; PC = 0x55555555b9e2 *)
mov ymm0_0 L0x7fffffffd8e0; mov ymm0_1 L0x7fffffffd8e4;
mov ymm0_2 L0x7fffffffd8e8; mov ymm0_3 L0x7fffffffd8ec;
mov ymm0_4 L0x7fffffffd8f0; mov ymm0_5 L0x7fffffffd8f4;
mov ymm0_6 L0x7fffffffd8f8; mov ymm0_7 L0x7fffffffd8fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555b9e7 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9ec *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b9f0 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9f5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b9f9 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555b9fe *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555ba02 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555ba06 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba0b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555ba0f *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba14 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba18 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba1c *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555ba20 *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555ba26 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rax)                       #! EA = L0x7fffffffd720; PC = 0x55555555ba2c *)
mov L0x7fffffffd720 ymm6_0; mov L0x7fffffffd724 ymm6_1;
mov L0x7fffffffd728 ymm6_2; mov L0x7fffffffd72c ymm6_3;
mov L0x7fffffffd730 ymm6_4; mov L0x7fffffffd734 ymm6_5;
mov L0x7fffffffd738 ymm6_6; mov L0x7fffffffd73c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555ba31 *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555ba36 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba3c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555ba40 *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555ce20; Value = 0xefbe4786efbe4786; PC = 0x55555555ba46 *)
adds dc ymm6_0 ymm6_0 L0x55555555ce20; adds dc ymm6_1 ymm6_1 L0x55555555ce24;
adds dc ymm6_2 ymm6_2 L0x55555555ce28; adds dc ymm6_3 ymm6_3 L0x55555555ce2c;
adds dc ymm6_4 ymm6_4 L0x55555555ce30; adds dc ymm6_5 ymm6_5 L0x55555555ce34;
adds dc ymm6_6 ymm6_6 L0x55555555ce38; adds dc ymm6_7 ymm6_7 L0x55555555ce3c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba4b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555ba4f *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba55 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555ba59 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555ba5f *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555ba64 *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba69 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555ba6d *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba73 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555ba77 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555ba7d *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555ba81 *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555ba86 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba8a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555ba8e *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555ba94 *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555ba9a *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555ba9e *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555baa2 *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555baa6 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baac *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555bab0 *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555bab6 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555baba *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555babe *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bac2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bac6 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555baca *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rax),%ymm6                       #! EA = L0x7fffffffd760; Value = 0x0c0d0e0f0c0d0e0f; PC = 0x55555555bace *)
mov ymm6_0 L0x7fffffffd760; mov ymm6_1 L0x7fffffffd764;
mov ymm6_2 L0x7fffffffd768; mov ymm6_3 L0x7fffffffd76c;
mov ymm6_4 L0x7fffffffd770; mov ymm6_5 L0x7fffffffd774;
mov ymm6_6 L0x7fffffffd778; mov ymm6_7 L0x7fffffffd77c;
(* vpaddd -0x20(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd860; Value = 0x2c2d2e2f2c2d2e2f; PC = 0x55555555bad3 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd860; adds dc ymm5_1 ymm5_1 L0x7fffffffd864;
adds dc ymm5_2 ymm5_2 L0x7fffffffd868; adds dc ymm5_3 ymm5_3 L0x7fffffffd86c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd870; adds dc ymm5_5 ymm5_5 L0x7fffffffd874;
adds dc ymm5_6 ymm5_6 L0x7fffffffd878; adds dc ymm5_7 ymm5_7 L0x7fffffffd87c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bad8 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555badd *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bae2 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bae7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555baeb *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baf0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555baf4 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rax),%ymm0                       #! EA = L0x7fffffffd700; Value = 0x2d84894c2d84894c; PC = 0x55555555baf9 *)
mov ymm0_0 L0x7fffffffd700; mov ymm0_1 L0x7fffffffd704;
mov ymm0_2 L0x7fffffffd708; mov ymm0_3 L0x7fffffffd70c;
mov ymm0_4 L0x7fffffffd710; mov ymm0_5 L0x7fffffffd714;
mov ymm0_6 L0x7fffffffd718; mov ymm0_7 L0x7fffffffd71c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bafe *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb03 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bb07 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb0c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bb10 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb15 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bb19 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bb1d *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb22 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bb26 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb2b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb2f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb33 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555bb37 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555bb3d *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rax)                       #! EA = L0x7fffffffd740; PC = 0x55555555bb43 *)
mov L0x7fffffffd740 ymm5_0; mov L0x7fffffffd744 ymm5_1;
mov L0x7fffffffd748 ymm5_2; mov L0x7fffffffd74c ymm5_3;
mov L0x7fffffffd750 ymm5_4; mov L0x7fffffffd754 ymm5_5;
mov L0x7fffffffd758 ymm5_6; mov L0x7fffffffd75c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555bb48 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555bb4d *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb53 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555bb57 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555ce40; Value = 0x0fc19dc60fc19dc6; PC = 0x55555555bb5d *)
adds dc ymm5_0 ymm5_0 L0x55555555ce40; adds dc ymm5_1 ymm5_1 L0x55555555ce44;
adds dc ymm5_2 ymm5_2 L0x55555555ce48; adds dc ymm5_3 ymm5_3 L0x55555555ce4c;
adds dc ymm5_4 ymm5_4 L0x55555555ce50; adds dc ymm5_5 ymm5_5 L0x55555555ce54;
adds dc ymm5_6 ymm5_6 L0x55555555ce58; adds dc ymm5_7 ymm5_7 L0x55555555ce5c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb62 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555bb66 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb6c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555bb70 *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555bb76 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555bb7b *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb80 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555bb84 *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb8a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555bb8e *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bb94 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555bb98 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555bb9d *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bba1 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555bba5 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555bbab *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bbb1 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bbb5 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555bbb9 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555bbbd *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbc3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555bbc7 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555bbcd *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555bbd1 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbd5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbd9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555bbdd *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555bbe1 *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rax),%ymm5                            #! EA = L0x7fffffffd780; Value = 0x1011121310111213; PC = 0x55555555bbe5 *)
mov ymm5_0 L0x7fffffffd780; mov ymm5_1 L0x7fffffffd784;
mov ymm5_2 L0x7fffffffd788; mov ymm5_3 L0x7fffffffd78c;
mov ymm5_4 L0x7fffffffd790; mov ymm5_5 L0x7fffffffd794;
mov ymm5_6 L0x7fffffffd798; mov ymm5_7 L0x7fffffffd79c;
(* vpaddd (%rbx),%ymm6,%ymm6                       #! EA = L0x7fffffffd880; Value = 0x3031323330313233; PC = 0x55555555bbe9 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd880; adds dc ymm6_1 ymm6_1 L0x7fffffffd884;
adds dc ymm6_2 ymm6_2 L0x7fffffffd888; adds dc ymm6_3 ymm6_3 L0x7fffffffd88c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd890; adds dc ymm6_5 ymm6_5 L0x7fffffffd894;
adds dc ymm6_6 ymm6_6 L0x7fffffffd898; adds dc ymm6_7 ymm6_7 L0x7fffffffd89c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555bbed *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555bbf2 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555bbf7 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbfc *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555bc00 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555bc09 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rax),%ymm0                       #! EA = L0x7fffffffd720; Value = 0xba99985fba99985f; PC = 0x55555555bc0e *)
mov ymm0_0 L0x7fffffffd720; mov ymm0_1 L0x7fffffffd724;
mov ymm0_2 L0x7fffffffd728; mov ymm0_3 L0x7fffffffd72c;
mov ymm0_4 L0x7fffffffd730; mov ymm0_5 L0x7fffffffd734;
mov ymm0_6 L0x7fffffffd738; mov ymm0_7 L0x7fffffffd73c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555bc13 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc18 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bc1c *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc21 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bc25 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc2a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555bc2e *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bc32 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc37 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bc3b *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc44 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc48 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555bc4c *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555bc52 *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rax)                       #! EA = L0x7fffffffd760; PC = 0x55555555bc58 *)
mov L0x7fffffffd760 ymm6_0; mov L0x7fffffffd764 ymm6_1;
mov L0x7fffffffd768 ymm6_2; mov L0x7fffffffd76c ymm6_3;
mov L0x7fffffffd770 ymm6_4; mov L0x7fffffffd774 ymm6_5;
mov L0x7fffffffd778 ymm6_6; mov L0x7fffffffd77c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555bc5d *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555bc62 *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc68 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555bc6c *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555ce60; Value = 0x240ca1cc240ca1cc; PC = 0x55555555bc72 *)
adds dc ymm6_0 ymm6_0 L0x55555555ce60; adds dc ymm6_1 ymm6_1 L0x55555555ce64;
adds dc ymm6_2 ymm6_2 L0x55555555ce68; adds dc ymm6_3 ymm6_3 L0x55555555ce6c;
adds dc ymm6_4 ymm6_4 L0x55555555ce70; adds dc ymm6_5 ymm6_5 L0x55555555ce74;
adds dc ymm6_6 ymm6_6 L0x55555555ce78; adds dc ymm6_7 ymm6_7 L0x55555555ce7c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc77 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555bc7b *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc81 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555bc85 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555bc8b *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555bc90 *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc95 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555bc99 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc9f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555bca3 *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bca9 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555bcad *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555bcb2 *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bcb6 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555bcba *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555bcc0 *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bcc6 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bcca *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555bcce *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555bcd2 *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcd8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555bcdc *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555bce2 *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555bce6 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bcea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555bcf2 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555bcf6 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rax),%ymm6                        #! EA = L0x7fffffffd7a0; Value = 0x1415161714151617; PC = 0x55555555bcfa *)
mov ymm6_0 L0x7fffffffd7a0; mov ymm6_1 L0x7fffffffd7a4;
mov ymm6_2 L0x7fffffffd7a8; mov ymm6_3 L0x7fffffffd7ac;
mov ymm6_4 L0x7fffffffd7b0; mov ymm6_5 L0x7fffffffd7b4;
mov ymm6_6 L0x7fffffffd7b8; mov ymm6_7 L0x7fffffffd7bc;
(* vpaddd 0x20(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8a0; Value = 0x3435363734353637; PC = 0x55555555bcff *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bd04 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bd09 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bd0e *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd13 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bd17 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd1c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bd20 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rax),%ymm0                       #! EA = L0x7fffffffd740; Value = 0x65d5a36865d5a368; PC = 0x55555555bd25 *)
mov ymm0_0 L0x7fffffffd740; mov ymm0_1 L0x7fffffffd744;
mov ymm0_2 L0x7fffffffd748; mov ymm0_3 L0x7fffffffd74c;
mov ymm0_4 L0x7fffffffd750; mov ymm0_5 L0x7fffffffd754;
mov ymm0_6 L0x7fffffffd758; mov ymm0_7 L0x7fffffffd75c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bd2a *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd2f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bd33 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd38 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bd3c *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd41 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bd45 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bd49 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bd52 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd57 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd5b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd5f *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555bd63 *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555bd69 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rax)                            #! EA = L0x7fffffffd780; PC = 0x55555555bd6f *)
mov L0x7fffffffd780 ymm5_0; mov L0x7fffffffd784 ymm5_1;
mov L0x7fffffffd788 ymm5_2; mov L0x7fffffffd78c ymm5_3;
mov L0x7fffffffd790 ymm5_4; mov L0x7fffffffd794 ymm5_5;
mov L0x7fffffffd798 ymm5_6; mov L0x7fffffffd79c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555bd73 *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555bd78 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd7e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555bd82 *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555ce80; Value = 0x2de92c6f2de92c6f; PC = 0x55555555bd88 *)
adds dc ymm5_0 ymm5_0 L0x55555555ce80; adds dc ymm5_1 ymm5_1 L0x55555555ce84;
adds dc ymm5_2 ymm5_2 L0x55555555ce88; adds dc ymm5_3 ymm5_3 L0x55555555ce8c;
adds dc ymm5_4 ymm5_4 L0x55555555ce90; adds dc ymm5_5 ymm5_5 L0x55555555ce94;
adds dc ymm5_6 ymm5_6 L0x55555555ce98; adds dc ymm5_7 ymm5_7 L0x55555555ce9c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd8d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555bd91 *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd97 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555bd9b *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555bda1 *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555bda6 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bdab *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555bdaf *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdb5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555bdb9 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bdbf *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555bdc3 *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555bdc8 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bdcc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555bdd0 *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555bdd6 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bddc *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bde0 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555bde4 *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555bde8 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555bdf2 *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555bdf8 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555bdfc *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be00 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be04 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555be08 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555be0c *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rax),%ymm5                        #! EA = L0x7fffffffd7c0; Value = 0x18191a1b18191a1b; PC = 0x55555555be10 *)
mov ymm5_0 L0x7fffffffd7c0; mov ymm5_1 L0x7fffffffd7c4;
mov ymm5_2 L0x7fffffffd7c8; mov ymm5_3 L0x7fffffffd7cc;
mov ymm5_4 L0x7fffffffd7d0; mov ymm5_5 L0x7fffffffd7d4;
mov ymm5_6 L0x7fffffffd7d8; mov ymm5_7 L0x7fffffffd7dc;
(* vpaddd 0x40(%rbx),%ymm6,%ymm6                   #! EA = L0x7fffffffd8c0; Value = 0x38393a3b38393a3b; PC = 0x55555555be15 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd8c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd8c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd8c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd8cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd8d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd8d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd8d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd8dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555be1a *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555be1f *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555be24 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be29 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555be2d *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be32 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555be36 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rax),%ymm0                       #! EA = L0x7fffffffd760; Value = 0x9bef911d9bef911d; PC = 0x55555555be3b *)
mov ymm0_0 L0x7fffffffd760; mov ymm0_1 L0x7fffffffd764;
mov ymm0_2 L0x7fffffffd768; mov ymm0_3 L0x7fffffffd76c;
mov ymm0_4 L0x7fffffffd770; mov ymm0_5 L0x7fffffffd774;
mov ymm0_6 L0x7fffffffd778; mov ymm0_7 L0x7fffffffd77c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555be40 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be45 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555be49 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555be52 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be57 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555be5b *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555be5f *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555be68 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be6d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be71 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be75 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555be79 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555be7f *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rax)                        #! EA = L0x7fffffffd7a0; PC = 0x55555555be85 *)
mov L0x7fffffffd7a0 ymm6_0; mov L0x7fffffffd7a4 ymm6_1;
mov L0x7fffffffd7a8 ymm6_2; mov L0x7fffffffd7ac ymm6_3;
mov L0x7fffffffd7b0 ymm6_4; mov L0x7fffffffd7b4 ymm6_5;
mov L0x7fffffffd7b8 ymm6_6; mov L0x7fffffffd7bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555be8a *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555be8f *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be95 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555be99 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555cea0; Value = 0x4a7484aa4a7484aa; PC = 0x55555555be9f *)
adds dc ymm6_0 ymm6_0 L0x55555555cea0; adds dc ymm6_1 ymm6_1 L0x55555555cea4;
adds dc ymm6_2 ymm6_2 L0x55555555cea8; adds dc ymm6_3 ymm6_3 L0x55555555ceac;
adds dc ymm6_4 ymm6_4 L0x55555555ceb0; adds dc ymm6_5 ymm6_5 L0x55555555ceb4;
adds dc ymm6_6 ymm6_6 L0x55555555ceb8; adds dc ymm6_7 ymm6_7 L0x55555555cebc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bea4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555bea8 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555beae *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555beb2 *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555beb8 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555bebd *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bec2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555bec6 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555becc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555bed0 *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bed6 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555beda *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555bedf *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bee3 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555bee7 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555beed *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bef3 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bef7 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555befb *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555beff *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555bf09 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555bf0f *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bf13 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf17 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf1b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555bf1f *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555bf23 *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rax),%ymm6                        #! EA = L0x7fffffffd7e0; Value = 0x1c1d1e1f1c1d1e1f; PC = 0x55555555bf27 *)
mov ymm6_0 L0x7fffffffd7e0; mov ymm6_1 L0x7fffffffd7e4;
mov ymm6_2 L0x7fffffffd7e8; mov ymm6_3 L0x7fffffffd7ec;
mov ymm6_4 L0x7fffffffd7f0; mov ymm6_5 L0x7fffffffd7f4;
mov ymm6_6 L0x7fffffffd7f8; mov ymm6_7 L0x7fffffffd7fc;
(* vpaddd 0x60(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8e0; Value = 0x3c3d3e3f3c3d3e3f; PC = 0x55555555bf2c *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bf31 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bf36 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bf3b *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bf44 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf49 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bf4d *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rax),%ymm0                            #! EA = L0x7fffffffd780; Value = 0x1335e16d1335e16d; PC = 0x55555555bf52 *)
mov ymm0_0 L0x7fffffffd780; mov ymm0_1 L0x7fffffffd784;
mov ymm0_2 L0x7fffffffd788; mov ymm0_3 L0x7fffffffd78c;
mov ymm0_4 L0x7fffffffd790; mov ymm0_5 L0x7fffffffd794;
mov ymm0_6 L0x7fffffffd798; mov ymm0_7 L0x7fffffffd79c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bf56 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf5b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bf5f *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bf68 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf6d *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bf71 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bf75 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf7a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bf7e *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf83 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf87 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf8b *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555bf8f *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555bf95 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rax)                        #! EA = L0x7fffffffd7c0; PC = 0x55555555bf9b *)
mov L0x7fffffffd7c0 ymm5_0; mov L0x7fffffffd7c4 ymm5_1;
mov L0x7fffffffd7c8 ymm5_2; mov L0x7fffffffd7cc ymm5_3;
mov L0x7fffffffd7d0 ymm5_4; mov L0x7fffffffd7d4 ymm5_5;
mov L0x7fffffffd7d8 ymm5_6; mov L0x7fffffffd7dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555bfa0 *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555bfa5 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555bfaf *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cec0; Value = 0x5cb0a9dc5cb0a9dc; PC = 0x55555555bfb5 *)
adds dc ymm5_0 ymm5_0 L0x55555555cec0; adds dc ymm5_1 ymm5_1 L0x55555555cec4;
adds dc ymm5_2 ymm5_2 L0x55555555cec8; adds dc ymm5_3 ymm5_3 L0x55555555cecc;
adds dc ymm5_4 ymm5_4 L0x55555555ced0; adds dc ymm5_5 ymm5_5 L0x55555555ced4;
adds dc ymm5_6 ymm5_6 L0x55555555ced8; adds dc ymm5_7 ymm5_7 L0x55555555cedc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfba *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555bfbe *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfc4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555bfc8 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555bfce *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555bfd3 *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfd8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555bfdc *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfe2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555bfe6 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bfec *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555bff0 *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555bff5 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bff9 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555bffd *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c003 *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c009 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c00d *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c011 *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c015 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c01b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c01f *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c025 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c029 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c02d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c031 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c035 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c039 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rbx),%ymm5                       #! EA = L0x7fffffffd800; Value = 0x2021222320212223; PC = 0x55555555c03d *)
mov ymm5_0 L0x7fffffffd800; mov ymm5_1 L0x7fffffffd804;
mov ymm5_2 L0x7fffffffd808; mov ymm5_3 L0x7fffffffd80c;
mov ymm5_4 L0x7fffffffd810; mov ymm5_5 L0x7fffffffd814;
mov ymm5_6 L0x7fffffffd818; mov ymm5_7 L0x7fffffffd81c;
(* vpaddd -0x80(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd700; Value = 0x2d84894c2d84894c; PC = 0x55555555c042 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd700; adds dc ymm6_1 ymm6_1 L0x7fffffffd704;
adds dc ymm6_2 ymm6_2 L0x7fffffffd708; adds dc ymm6_3 ymm6_3 L0x7fffffffd70c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd710; adds dc ymm6_5 ymm6_5 L0x7fffffffd714;
adds dc ymm6_6 ymm6_6 L0x7fffffffd718; adds dc ymm6_7 ymm6_7 L0x7fffffffd71c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c047 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c04c *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c051 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c056 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c05a *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c05f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c063 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rax),%ymm0                        #! EA = L0x7fffffffd7a0; Value = 0xfa8fad31fa8fad31; PC = 0x55555555c068 *)
mov ymm0_0 L0x7fffffffd7a0; mov ymm0_1 L0x7fffffffd7a4;
mov ymm0_2 L0x7fffffffd7a8; mov ymm0_3 L0x7fffffffd7ac;
mov ymm0_4 L0x7fffffffd7b0; mov ymm0_5 L0x7fffffffd7b4;
mov ymm0_6 L0x7fffffffd7b8; mov ymm0_7 L0x7fffffffd7bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c06d *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c072 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c076 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c07b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c07f *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c084 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c088 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c08c *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c091 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c095 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c09a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c09e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c0a2 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c0a6 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c0ac *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rax)                        #! EA = L0x7fffffffd7e0; PC = 0x55555555c0b2 *)
mov L0x7fffffffd7e0 ymm6_0; mov L0x7fffffffd7e4 ymm6_1;
mov L0x7fffffffd7e8 ymm6_2; mov L0x7fffffffd7ec ymm6_3;
mov L0x7fffffffd7f0 ymm6_4; mov L0x7fffffffd7f4 ymm6_5;
mov L0x7fffffffd7f8 ymm6_6; mov L0x7fffffffd7fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c0b7 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c0bc *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c0c6 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555cee0; Value = 0x76f988da76f988da; PC = 0x55555555c0cc *)
adds dc ymm6_0 ymm6_0 L0x55555555cee0; adds dc ymm6_1 ymm6_1 L0x55555555cee4;
adds dc ymm6_2 ymm6_2 L0x55555555cee8; adds dc ymm6_3 ymm6_3 L0x55555555ceec;
adds dc ymm6_4 ymm6_4 L0x55555555cef0; adds dc ymm6_5 ymm6_5 L0x55555555cef4;
adds dc ymm6_6 ymm6_6 L0x55555555cef8; adds dc ymm6_7 ymm6_7 L0x55555555cefc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0d1 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c0d5 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0db *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c0df *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c0e5 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c0ea *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c0f3 *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c0fd *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c103 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c107 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c10c *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c110 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c114 *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c11a *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c120 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c124 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c128 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c12c *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c132 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c136 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c13c *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c140 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c144 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c148 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c14c *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555c150 *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555c154 *)
(* add 0x100, rbp *)
nop;
(* vmovdqu -0x60(%rbx),%ymm6                       #! EA = L0x7fffffffd820; Value = 0x2425262724252627; PC = 0x55555555c15b *)
mov ymm6_0 L0x7fffffffd820; mov ymm6_1 L0x7fffffffd824;
mov ymm6_2 L0x7fffffffd828; mov ymm6_3 L0x7fffffffd82c;
mov ymm6_4 L0x7fffffffd830; mov ymm6_5 L0x7fffffffd834;
mov ymm6_6 L0x7fffffffd838; mov ymm6_7 L0x7fffffffd83c;
(* vpaddd -0x60(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd720; Value = 0xba99985fba99985f; PC = 0x55555555c160 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd720; adds dc ymm5_1 ymm5_1 L0x7fffffffd724;
adds dc ymm5_2 ymm5_2 L0x7fffffffd728; adds dc ymm5_3 ymm5_3 L0x7fffffffd72c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd730; adds dc ymm5_5 ymm5_5 L0x7fffffffd734;
adds dc ymm5_6 ymm5_6 L0x7fffffffd738; adds dc ymm5_7 ymm5_7 L0x7fffffffd73c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c165 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c16a *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c16f *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c174 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c178 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c17d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c181 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rax),%ymm0                        #! EA = L0x7fffffffd7c0; Value = 0x1b329dd61b329dd6; PC = 0x55555555c186 *)
mov ymm0_0 L0x7fffffffd7c0; mov ymm0_1 L0x7fffffffd7c4;
mov ymm0_2 L0x7fffffffd7c8; mov ymm0_3 L0x7fffffffd7cc;
mov ymm0_4 L0x7fffffffd7d0; mov ymm0_5 L0x7fffffffd7d4;
mov ymm0_6 L0x7fffffffd7d8; mov ymm0_7 L0x7fffffffd7dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c18b *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c190 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c194 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c199 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c19d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1a2 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c1a6 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c1aa *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1af *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c1b3 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1b8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1bc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1c0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555c1c4 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555c1ca *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rbx)                       #! EA = L0x7fffffffd800; PC = 0x55555555c1d0 *)
mov L0x7fffffffd800 ymm5_0; mov L0x7fffffffd804 ymm5_1;
mov L0x7fffffffd808 ymm5_2; mov L0x7fffffffd80c ymm5_3;
mov L0x7fffffffd810 ymm5_4; mov L0x7fffffffd814 ymm5_5;
mov L0x7fffffffd818 ymm5_6; mov L0x7fffffffd81c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555c1d5 *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555c1da *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1e0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555c1e4 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cf00; Value = 0x983e5152983e5152; PC = 0x55555555c1ea *)
adds dc ymm5_0 ymm5_0 L0x55555555cf00; adds dc ymm5_1 ymm5_1 L0x55555555cf04;
adds dc ymm5_2 ymm5_2 L0x55555555cf08; adds dc ymm5_3 ymm5_3 L0x55555555cf0c;
adds dc ymm5_4 ymm5_4 L0x55555555cf10; adds dc ymm5_5 ymm5_5 L0x55555555cf14;
adds dc ymm5_6 ymm5_6 L0x55555555cf18; adds dc ymm5_7 ymm5_7 L0x55555555cf1c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555c1f3 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555c1fd *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555c203 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555c208 *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c20d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555c211 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c217 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555c21b *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c221 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555c225 *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555c22a *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c22e *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555c232 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555c238 *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c23e *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c242 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555c246 *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555c24a *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c250 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555c254 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555c25a *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c25e *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c262 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c266 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c26a *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555c26e *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rbx),%ymm5                       #! EA = L0x7fffffffd840; Value = 0x28292a2b28292a2b; PC = 0x55555555c272 *)
mov ymm5_0 L0x7fffffffd840; mov ymm5_1 L0x7fffffffd844;
mov ymm5_2 L0x7fffffffd848; mov ymm5_3 L0x7fffffffd84c;
mov ymm5_4 L0x7fffffffd850; mov ymm5_5 L0x7fffffffd854;
mov ymm5_6 L0x7fffffffd858; mov ymm5_7 L0x7fffffffd85c;
(* vpaddd -0x40(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd740; Value = 0x65d5a36865d5a368; PC = 0x55555555c277 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd740; adds dc ymm6_1 ymm6_1 L0x7fffffffd744;
adds dc ymm6_2 ymm6_2 L0x7fffffffd748; adds dc ymm6_3 ymm6_3 L0x7fffffffd74c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd750; adds dc ymm6_5 ymm6_5 L0x7fffffffd754;
adds dc ymm6_6 ymm6_6 L0x7fffffffd758; adds dc ymm6_7 ymm6_7 L0x7fffffffd75c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c27c *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c281 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c286 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c28b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c28f *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c294 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c298 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rax),%ymm0                        #! EA = L0x7fffffffd7e0; Value = 0x776eb770776eb770; PC = 0x55555555c29d *)
mov ymm0_0 L0x7fffffffd7e0; mov ymm0_1 L0x7fffffffd7e4;
mov ymm0_2 L0x7fffffffd7e8; mov ymm0_3 L0x7fffffffd7ec;
mov ymm0_4 L0x7fffffffd7f0; mov ymm0_5 L0x7fffffffd7f4;
mov ymm0_6 L0x7fffffffd7f8; mov ymm0_7 L0x7fffffffd7fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c2a2 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c2ab *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2b0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c2b4 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2b9 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c2bd *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c2c1 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2c6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c2ca *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2cf *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2d3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2d7 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555c2db *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555c2e1 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rbx)                       #! EA = L0x7fffffffd820; PC = 0x55555555c2e7 *)
mov L0x7fffffffd820 ymm6_0; mov L0x7fffffffd824 ymm6_1;
mov L0x7fffffffd828 ymm6_2; mov L0x7fffffffd82c ymm6_3;
mov L0x7fffffffd830 ymm6_4; mov L0x7fffffffd834 ymm6_5;
mov L0x7fffffffd838 ymm6_6; mov L0x7fffffffd83c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555c2ec *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555c2f1 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2f7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555c2fb *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555cf20; Value = 0xa831c66da831c66d; PC = 0x55555555c301 *)
adds dc ymm6_0 ymm6_0 L0x55555555cf20; adds dc ymm6_1 ymm6_1 L0x55555555cf24;
adds dc ymm6_2 ymm6_2 L0x55555555cf28; adds dc ymm6_3 ymm6_3 L0x55555555cf2c;
adds dc ymm6_4 ymm6_4 L0x55555555cf30; adds dc ymm6_5 ymm6_5 L0x55555555cf34;
adds dc ymm6_6 ymm6_6 L0x55555555cf38; adds dc ymm6_7 ymm6_7 L0x55555555cf3c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c306 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555c30a *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c310 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555c314 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555c31a *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555c31f *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c324 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555c328 *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c32e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555c332 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c338 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555c33c *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555c341 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c345 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555c349 *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555c34f *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c355 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c359 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555c35d *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555c361 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c367 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555c36b *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555c371 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c375 *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c379 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c37d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c381 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555c385 *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rbx),%ymm6                       #! EA = L0x7fffffffd860; Value = 0x2c2d2e2f2c2d2e2f; PC = 0x55555555c389 *)
mov ymm6_0 L0x7fffffffd860; mov ymm6_1 L0x7fffffffd864;
mov ymm6_2 L0x7fffffffd868; mov ymm6_3 L0x7fffffffd86c;
mov ymm6_4 L0x7fffffffd870; mov ymm6_5 L0x7fffffffd874;
mov ymm6_6 L0x7fffffffd878; mov ymm6_7 L0x7fffffffd87c;
(* vpaddd -0x20(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd760; Value = 0x9bef911d9bef911d; PC = 0x55555555c38e *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd760; adds dc ymm5_1 ymm5_1 L0x7fffffffd764;
adds dc ymm5_2 ymm5_2 L0x7fffffffd768; adds dc ymm5_3 ymm5_3 L0x7fffffffd76c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd770; adds dc ymm5_5 ymm5_5 L0x7fffffffd774;
adds dc ymm5_6 ymm5_6 L0x7fffffffd778; adds dc ymm5_7 ymm5_7 L0x7fffffffd77c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c393 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c398 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c39d *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3a2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c3a6 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c3af *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rbx),%ymm0                       #! EA = L0x7fffffffd800; Value = 0xfb56e45bfb56e45b; PC = 0x55555555c3b4 *)
mov ymm0_0 L0x7fffffffd800; mov ymm0_1 L0x7fffffffd804;
mov ymm0_2 L0x7fffffffd808; mov ymm0_3 L0x7fffffffd80c;
mov ymm0_4 L0x7fffffffd810; mov ymm0_5 L0x7fffffffd814;
mov ymm0_6 L0x7fffffffd818; mov ymm0_7 L0x7fffffffd81c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c3b9 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3be *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c3c2 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3c7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c3cb *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3d0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c3d4 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c3d8 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3dd *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c3e1 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3e6 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ea *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3ee *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555c3f2 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555c3f8 *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rbx)                       #! EA = L0x7fffffffd840; PC = 0x55555555c3fe *)
mov L0x7fffffffd840 ymm5_0; mov L0x7fffffffd844 ymm5_1;
mov L0x7fffffffd848 ymm5_2; mov L0x7fffffffd84c ymm5_3;
mov L0x7fffffffd850 ymm5_4; mov L0x7fffffffd854 ymm5_5;
mov L0x7fffffffd858 ymm5_6; mov L0x7fffffffd85c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555c403 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555c408 *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c40e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555c412 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555cf40; Value = 0xb00327c8b00327c8; PC = 0x55555555c418 *)
adds dc ymm5_0 ymm5_0 L0x55555555cf40; adds dc ymm5_1 ymm5_1 L0x55555555cf44;
adds dc ymm5_2 ymm5_2 L0x55555555cf48; adds dc ymm5_3 ymm5_3 L0x55555555cf4c;
adds dc ymm5_4 ymm5_4 L0x55555555cf50; adds dc ymm5_5 ymm5_5 L0x55555555cf54;
adds dc ymm5_6 ymm5_6 L0x55555555cf58; adds dc ymm5_7 ymm5_7 L0x55555555cf5c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c41d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555c421 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c427 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555c42b *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555c431 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555c436 *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c43b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555c43f *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c445 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555c449 *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c44f *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555c453 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555c458 *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c45c *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555c460 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555c466 *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c46c *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c470 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555c474 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555c478 *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c47e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555c482 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555c488 *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c48c *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c490 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c494 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c498 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555c49c *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rbx),%ymm5                            #! EA = L0x7fffffffd880; Value = 0x3031323330313233; PC = 0x55555555c4a0 *)
mov ymm5_0 L0x7fffffffd880; mov ymm5_1 L0x7fffffffd884;
mov ymm5_2 L0x7fffffffd888; mov ymm5_3 L0x7fffffffd88c;
mov ymm5_4 L0x7fffffffd890; mov ymm5_5 L0x7fffffffd894;
mov ymm5_6 L0x7fffffffd898; mov ymm5_7 L0x7fffffffd89c;
(* vpaddd (%rax),%ymm6,%ymm6                       #! EA = L0x7fffffffd780; Value = 0x1335e16d1335e16d; PC = 0x55555555c4a4 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd780; adds dc ymm6_1 ymm6_1 L0x7fffffffd784;
adds dc ymm6_2 ymm6_2 L0x7fffffffd788; adds dc ymm6_3 ymm6_3 L0x7fffffffd78c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd790; adds dc ymm6_5 ymm6_5 L0x7fffffffd794;
adds dc ymm6_6 ymm6_6 L0x7fffffffd798; adds dc ymm6_7 ymm6_7 L0x7fffffffd79c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c4a8 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c4ad *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c4b2 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4b7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c4bb *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c4c4 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rbx),%ymm0                       #! EA = L0x7fffffffd820; Value = 0x312675a1312675a1; PC = 0x55555555c4c9 *)
mov ymm0_0 L0x7fffffffd820; mov ymm0_1 L0x7fffffffd824;
mov ymm0_2 L0x7fffffffd828; mov ymm0_3 L0x7fffffffd82c;
mov ymm0_4 L0x7fffffffd830; mov ymm0_5 L0x7fffffffd834;
mov ymm0_6 L0x7fffffffd838; mov ymm0_7 L0x7fffffffd83c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c4ce *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4d3 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c4d7 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4dc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c4e0 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c4e5 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c4e9 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c4ed *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4f2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c4f6 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4ff *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c503 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555c507 *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555c50d *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rbx)                       #! EA = L0x7fffffffd860; PC = 0x55555555c513 *)
mov L0x7fffffffd860 ymm6_0; mov L0x7fffffffd864 ymm6_1;
mov L0x7fffffffd868 ymm6_2; mov L0x7fffffffd86c ymm6_3;
mov L0x7fffffffd870 ymm6_4; mov L0x7fffffffd874 ymm6_5;
mov L0x7fffffffd878 ymm6_6; mov L0x7fffffffd87c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555c518 *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555c51d *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c523 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555c527 *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555cf60; Value = 0xbf597fc7bf597fc7; PC = 0x55555555c52d *)
adds dc ymm6_0 ymm6_0 L0x55555555cf60; adds dc ymm6_1 ymm6_1 L0x55555555cf64;
adds dc ymm6_2 ymm6_2 L0x55555555cf68; adds dc ymm6_3 ymm6_3 L0x55555555cf6c;
adds dc ymm6_4 ymm6_4 L0x55555555cf70; adds dc ymm6_5 ymm6_5 L0x55555555cf74;
adds dc ymm6_6 ymm6_6 L0x55555555cf78; adds dc ymm6_7 ymm6_7 L0x55555555cf7c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c532 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555c536 *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c53c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555c540 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555c546 *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555c54b *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c550 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555c554 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c55a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555c55e *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c564 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555c568 *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555c56d *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c571 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555c575 *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555c57b *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c581 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c585 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555c589 *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555c58d *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c593 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555c597 *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555c59d *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c5a1 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5a5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c5ad *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555c5b1 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rbx),%ymm6                        #! EA = L0x7fffffffd8a0; Value = 0x3435363734353637; PC = 0x55555555c5b5 *)
mov ymm6_0 L0x7fffffffd8a0; mov ymm6_1 L0x7fffffffd8a4;
mov ymm6_2 L0x7fffffffd8a8; mov ymm6_3 L0x7fffffffd8ac;
mov ymm6_4 L0x7fffffffd8b0; mov ymm6_5 L0x7fffffffd8b4;
mov ymm6_6 L0x7fffffffd8b8; mov ymm6_7 L0x7fffffffd8bc;
(* vpaddd 0x20(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7a0; Value = 0xfa8fad31fa8fad31; PC = 0x55555555c5ba *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c5bf *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c5c4 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c5c9 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ce *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c5d2 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5d7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c5db *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rbx),%ymm0                       #! EA = L0x7fffffffd840; Value = 0x8307475283074752; PC = 0x55555555c5e0 *)
mov ymm0_0 L0x7fffffffd840; mov ymm0_1 L0x7fffffffd844;
mov ymm0_2 L0x7fffffffd848; mov ymm0_3 L0x7fffffffd84c;
mov ymm0_4 L0x7fffffffd850; mov ymm0_5 L0x7fffffffd854;
mov ymm0_6 L0x7fffffffd858; mov ymm0_7 L0x7fffffffd85c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c5e5 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c5ee *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5f3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c5f7 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c5fc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c600 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c604 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c609 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c60d *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c612 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c616 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c61a *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555c61e *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555c624 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rbx)                            #! EA = L0x7fffffffd880; PC = 0x55555555c62a *)
mov L0x7fffffffd880 ymm5_0; mov L0x7fffffffd884 ymm5_1;
mov L0x7fffffffd888 ymm5_2; mov L0x7fffffffd88c ymm5_3;
mov L0x7fffffffd890 ymm5_4; mov L0x7fffffffd894 ymm5_5;
mov L0x7fffffffd898 ymm5_6; mov L0x7fffffffd89c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555c62e *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555c633 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c639 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555c63d *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555cf80; Value = 0xc6e00bf3c6e00bf3; PC = 0x55555555c643 *)
adds dc ymm5_0 ymm5_0 L0x55555555cf80; adds dc ymm5_1 ymm5_1 L0x55555555cf84;
adds dc ymm5_2 ymm5_2 L0x55555555cf88; adds dc ymm5_3 ymm5_3 L0x55555555cf8c;
adds dc ymm5_4 ymm5_4 L0x55555555cf90; adds dc ymm5_5 ymm5_5 L0x55555555cf94;
adds dc ymm5_6 ymm5_6 L0x55555555cf98; adds dc ymm5_7 ymm5_7 L0x55555555cf9c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c648 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555c64c *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c652 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555c656 *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555c65c *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555c661 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c666 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555c66a *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c670 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555c674 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c67a *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555c67e *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555c683 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c687 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555c68b *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555c691 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c697 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c69b *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555c69f *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555c6a3 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555c6ad *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555c6b3 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c6b7 *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6bb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6bf *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c6c3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555c6c7 *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rbx),%ymm5                        #! EA = L0x7fffffffd8c0; Value = 0x38393a3b38393a3b; PC = 0x55555555c6cb *)
mov ymm5_0 L0x7fffffffd8c0; mov ymm5_1 L0x7fffffffd8c4;
mov ymm5_2 L0x7fffffffd8c8; mov ymm5_3 L0x7fffffffd8cc;
mov ymm5_4 L0x7fffffffd8d0; mov ymm5_5 L0x7fffffffd8d4;
mov ymm5_6 L0x7fffffffd8d8; mov ymm5_7 L0x7fffffffd8dc;
(* vpaddd 0x40(%rax),%ymm6,%ymm6                   #! EA = L0x7fffffffd7c0; Value = 0x1b329dd61b329dd6; PC = 0x55555555c6d0 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd7c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd7c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd7c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd7cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd7d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd7d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd7d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd7dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c6d5 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c6da *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c6df *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6e4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c6e8 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c6f1 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rbx),%ymm0                       #! EA = L0x7fffffffd860; Value = 0x60b68ef460b68ef4; PC = 0x55555555c6f6 *)
mov ymm0_0 L0x7fffffffd860; mov ymm0_1 L0x7fffffffd864;
mov ymm0_2 L0x7fffffffd868; mov ymm0_3 L0x7fffffffd86c;
mov ymm0_4 L0x7fffffffd870; mov ymm0_5 L0x7fffffffd874;
mov ymm0_6 L0x7fffffffd878; mov ymm0_7 L0x7fffffffd87c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c6fb *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c700 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c704 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c709 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c70d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c712 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c716 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c71a *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c71f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c723 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c728 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c72c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c730 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555c734 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555c73a *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rbx)                        #! EA = L0x7fffffffd8a0; PC = 0x55555555c740 *)
mov L0x7fffffffd8a0 ymm6_0; mov L0x7fffffffd8a4 ymm6_1;
mov L0x7fffffffd8a8 ymm6_2; mov L0x7fffffffd8ac ymm6_3;
mov L0x7fffffffd8b0 ymm6_4; mov L0x7fffffffd8b4 ymm6_5;
mov L0x7fffffffd8b8 ymm6_6; mov L0x7fffffffd8bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555c745 *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555c74a *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c750 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555c754 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555cfa0; Value = 0xd5a79147d5a79147; PC = 0x55555555c75a *)
adds dc ymm6_0 ymm6_0 L0x55555555cfa0; adds dc ymm6_1 ymm6_1 L0x55555555cfa4;
adds dc ymm6_2 ymm6_2 L0x55555555cfa8; adds dc ymm6_3 ymm6_3 L0x55555555cfac;
adds dc ymm6_4 ymm6_4 L0x55555555cfb0; adds dc ymm6_5 ymm6_5 L0x55555555cfb4;
adds dc ymm6_6 ymm6_6 L0x55555555cfb8; adds dc ymm6_7 ymm6_7 L0x55555555cfbc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c75f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555c763 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c769 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555c76d *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555c773 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555c778 *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c77d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555c781 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c787 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555c78b *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c791 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555c795 *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555c79a *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c79e *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555c7a2 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555c7a8 *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c7ae *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c7b2 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555c7b6 *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555c7ba *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555c7c4 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555c7ca *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c7ce *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7d2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c7da *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555c7de *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rbx),%ymm6                        #! EA = L0x7fffffffd8e0; Value = 0x3c3d3e3f3c3d3e3f; PC = 0x55555555c7e2 *)
mov ymm6_0 L0x7fffffffd8e0; mov ymm6_1 L0x7fffffffd8e4;
mov ymm6_2 L0x7fffffffd8e8; mov ymm6_3 L0x7fffffffd8ec;
mov ymm6_4 L0x7fffffffd8f0; mov ymm6_5 L0x7fffffffd8f4;
mov ymm6_6 L0x7fffffffd8f8; mov ymm6_7 L0x7fffffffd8fc;
(* vpaddd 0x60(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7e0; Value = 0x776eb770776eb770; PC = 0x55555555c7e7 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c7ec *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c7f1 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c7f6 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c7ff *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c804 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c808 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rbx),%ymm0                            #! EA = L0x7fffffffd880; Value = 0x9b87b13d9b87b13d; PC = 0x55555555c80d *)
mov ymm0_0 L0x7fffffffd880; mov ymm0_1 L0x7fffffffd884;
mov ymm0_2 L0x7fffffffd888; mov ymm0_3 L0x7fffffffd88c;
mov ymm0_4 L0x7fffffffd890; mov ymm0_5 L0x7fffffffd894;
mov ymm0_6 L0x7fffffffd898; mov ymm0_7 L0x7fffffffd89c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c811 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c816 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c81a *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c81f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c823 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c828 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c82c *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c830 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c835 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c839 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c83e *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c842 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c846 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555c84a *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555c850 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rbx)                        #! EA = L0x7fffffffd8c0; PC = 0x55555555c856 *)
mov L0x7fffffffd8c0 ymm5_0; mov L0x7fffffffd8c4 ymm5_1;
mov L0x7fffffffd8c8 ymm5_2; mov L0x7fffffffd8cc ymm5_3;
mov L0x7fffffffd8d0 ymm5_4; mov L0x7fffffffd8d4 ymm5_5;
mov L0x7fffffffd8d8 ymm5_6; mov L0x7fffffffd8dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555c85b *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555c860 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c866 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555c86a *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555cfc0; Value = 0x06ca635106ca6351; PC = 0x55555555c870 *)
adds dc ymm5_0 ymm5_0 L0x55555555cfc0; adds dc ymm5_1 ymm5_1 L0x55555555cfc4;
adds dc ymm5_2 ymm5_2 L0x55555555cfc8; adds dc ymm5_3 ymm5_3 L0x55555555cfcc;
adds dc ymm5_4 ymm5_4 L0x55555555cfd0; adds dc ymm5_5 ymm5_5 L0x55555555cfd4;
adds dc ymm5_6 ymm5_6 L0x55555555cfd8; adds dc ymm5_7 ymm5_7 L0x55555555cfdc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c875 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555c879 *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c87f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555c883 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555c889 *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555c88e *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c893 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555c897 *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c89d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555c8a1 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c8a7 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555c8ab *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555c8b0 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c8b4 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555c8b8 *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c8be *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c8c4 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c8c8 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c8cc *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c8d0 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c8da *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c8e0 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c8e4 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c8e8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8ec *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c8f0 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c8f4 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rax),%ymm5                       #! EA = L0x7fffffffd700; Value = 0x2d84894c2d84894c; PC = 0x55555555c8f8 *)
mov ymm5_0 L0x7fffffffd700; mov ymm5_1 L0x7fffffffd704;
mov ymm5_2 L0x7fffffffd708; mov ymm5_3 L0x7fffffffd70c;
mov ymm5_4 L0x7fffffffd710; mov ymm5_5 L0x7fffffffd714;
mov ymm5_6 L0x7fffffffd718; mov ymm5_7 L0x7fffffffd71c;
(* vpaddd -0x80(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd800; Value = 0xfb56e45bfb56e45b; PC = 0x55555555c8fd *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd800; adds dc ymm6_1 ymm6_1 L0x7fffffffd804;
adds dc ymm6_2 ymm6_2 L0x7fffffffd808; adds dc ymm6_3 ymm6_3 L0x7fffffffd80c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd810; adds dc ymm6_5 ymm6_5 L0x7fffffffd814;
adds dc ymm6_6 ymm6_6 L0x7fffffffd818; adds dc ymm6_7 ymm6_7 L0x7fffffffd81c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c902 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c907 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c90c *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c911 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c915 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c91a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c91e *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rbx),%ymm0                        #! EA = L0x7fffffffd8a0; Value = 0x261e0138261e0138; PC = 0x55555555c923 *)
mov ymm0_0 L0x7fffffffd8a0; mov ymm0_1 L0x7fffffffd8a4;
mov ymm0_2 L0x7fffffffd8a8; mov ymm0_3 L0x7fffffffd8ac;
mov ymm0_4 L0x7fffffffd8b0; mov ymm0_5 L0x7fffffffd8b4;
mov ymm0_6 L0x7fffffffd8b8; mov ymm0_7 L0x7fffffffd8bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c928 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c92d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c931 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c936 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c93a *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c93f *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c943 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c947 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c94c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c950 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c955 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c959 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c95d *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c961 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c967 *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rbx)                        #! EA = L0x7fffffffd8e0; PC = 0x55555555c96d *)
mov L0x7fffffffd8e0 ymm6_0; mov L0x7fffffffd8e4 ymm6_1;
mov L0x7fffffffd8e8 ymm6_2; mov L0x7fffffffd8ec ymm6_3;
mov L0x7fffffffd8f0 ymm6_4; mov L0x7fffffffd8f4 ymm6_5;
mov L0x7fffffffd8f8 ymm6_6; mov L0x7fffffffd8fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c972 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c977 *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c97d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c981 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555cfe0; Value = 0x1429296714292967; PC = 0x55555555c987 *)
adds dc ymm6_0 ymm6_0 L0x55555555cfe0; adds dc ymm6_1 ymm6_1 L0x55555555cfe4;
adds dc ymm6_2 ymm6_2 L0x55555555cfe8; adds dc ymm6_3 ymm6_3 L0x55555555cfec;
adds dc ymm6_4 ymm6_4 L0x55555555cff0; adds dc ymm6_5 ymm6_5 L0x55555555cff4;
adds dc ymm6_6 ymm6_6 L0x55555555cff8; adds dc ymm6_7 ymm6_7 L0x55555555cffc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c98c *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c990 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c996 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c99a *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c9a0 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c9a5 *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9aa *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c9ae *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9b4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c9b8 *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c9be *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c9c2 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c9c7 *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c9cb *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c9cf *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c9d5 *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c9db *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c9df *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c9e3 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c9e7 *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c9f1 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c9f7 *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c9fb *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9ff *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ca03 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555ca07 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555ca0b *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555ca0f *)
(* add 0x100, rbp *)
nop;
(* dec    %ecx                                     #! PC = 0x55555555ca16 *)
(* dec ecx *)
nop;
(* #jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! PC = 0x55555555ca18 *)
#jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! 0x55555555ca18 = 0x55555555ca18;
(* vmovdqu -0x60(%rax),%ymm6                       #! EA = L0x7fffffffd720; Value = 0xba99985fba99985f; PC = 0x55555555b8a0 *)
mov ymm6_0 L0x7fffffffd720; mov ymm6_1 L0x7fffffffd724;
mov ymm6_2 L0x7fffffffd728; mov ymm6_3 L0x7fffffffd72c;
mov ymm6_4 L0x7fffffffd730; mov ymm6_5 L0x7fffffffd734;
mov ymm6_6 L0x7fffffffd738; mov ymm6_7 L0x7fffffffd73c;
(* vpaddd -0x60(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd820; Value = 0x312675a1312675a1; PC = 0x55555555b8a5 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd820; adds dc ymm5_1 ymm5_1 L0x7fffffffd824;
adds dc ymm5_2 ymm5_2 L0x7fffffffd828; adds dc ymm5_3 ymm5_3 L0x7fffffffd82c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd830; adds dc ymm5_5 ymm5_5 L0x7fffffffd834;
adds dc ymm5_6 ymm5_6 L0x7fffffffd838; adds dc ymm5_7 ymm5_7 L0x7fffffffd83c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555b8aa *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555b8af *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555b8b4 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8b9 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555b8bd *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555b8c6 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rbx),%ymm0                        #! EA = L0x7fffffffd8c0; Value = 0x14b7a3be14b7a3be; PC = 0x55555555b8cb *)
mov ymm0_0 L0x7fffffffd8c0; mov ymm0_1 L0x7fffffffd8c4;
mov ymm0_2 L0x7fffffffd8c8; mov ymm0_3 L0x7fffffffd8cc;
mov ymm0_4 L0x7fffffffd8d0; mov ymm0_5 L0x7fffffffd8d4;
mov ymm0_6 L0x7fffffffd8d8; mov ymm0_7 L0x7fffffffd8dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555b8d0 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8d5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b8d9 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8de *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b8e2 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b8e7 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555b8eb *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555b8ef *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8f4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555b8f8 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8fd *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b901 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b905 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555b909 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555b90f *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rax)                       #! EA = L0x7fffffffd700; PC = 0x55555555b915 *)
mov L0x7fffffffd700 ymm5_0; mov L0x7fffffffd704 ymm5_1;
mov L0x7fffffffd708 ymm5_2; mov L0x7fffffffd70c ymm5_3;
mov L0x7fffffffd710 ymm5_4; mov L0x7fffffffd714 ymm5_5;
mov L0x7fffffffd718 ymm5_6; mov L0x7fffffffd71c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555b91a *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555b91f *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b925 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555b929 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d000; Value = 0x27b70a8527b70a85; PC = 0x55555555b92f *)
adds dc ymm5_0 ymm5_0 L0x55555555d000; adds dc ymm5_1 ymm5_1 L0x55555555d004;
adds dc ymm5_2 ymm5_2 L0x55555555d008; adds dc ymm5_3 ymm5_3 L0x55555555d00c;
adds dc ymm5_4 ymm5_4 L0x55555555d010; adds dc ymm5_5 ymm5_5 L0x55555555d014;
adds dc ymm5_6 ymm5_6 L0x55555555d018; adds dc ymm5_7 ymm5_7 L0x55555555d01c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b934 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555b938 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b93e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555b942 *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555b948 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555b94d *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b952 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555b956 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b95c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555b960 *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b966 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555b96a *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555b96f *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b973 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555b977 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555b97d *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b983 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b987 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555b98b *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555b98f *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b995 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555b999 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555b99f *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555b9a3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555b9af *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555b9b3 *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rax),%ymm5                       #! EA = L0x7fffffffd740; Value = 0x65d5a36865d5a368; PC = 0x55555555b9b7 *)
mov ymm5_0 L0x7fffffffd740; mov ymm5_1 L0x7fffffffd744;
mov ymm5_2 L0x7fffffffd748; mov ymm5_3 L0x7fffffffd74c;
mov ymm5_4 L0x7fffffffd750; mov ymm5_5 L0x7fffffffd754;
mov ymm5_6 L0x7fffffffd758; mov ymm5_7 L0x7fffffffd75c;
(* vpaddd -0x40(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd840; Value = 0x8307475283074752; PC = 0x55555555b9bc *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd840; adds dc ymm6_1 ymm6_1 L0x7fffffffd844;
adds dc ymm6_2 ymm6_2 L0x7fffffffd848; adds dc ymm6_3 ymm6_3 L0x7fffffffd84c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd850; adds dc ymm6_5 ymm6_5 L0x7fffffffd854;
adds dc ymm6_6 ymm6_6 L0x7fffffffd858; adds dc ymm6_7 ymm6_7 L0x7fffffffd85c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555b9c1 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555b9c6 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555b9cb *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9d0 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555b9d4 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9d9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555b9dd *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rbx),%ymm0                        #! EA = L0x7fffffffd8e0; Value = 0xb7ff4640b7ff4640; PC = 0x55555555b9e2 *)
mov ymm0_0 L0x7fffffffd8e0; mov ymm0_1 L0x7fffffffd8e4;
mov ymm0_2 L0x7fffffffd8e8; mov ymm0_3 L0x7fffffffd8ec;
mov ymm0_4 L0x7fffffffd8f0; mov ymm0_5 L0x7fffffffd8f4;
mov ymm0_6 L0x7fffffffd8f8; mov ymm0_7 L0x7fffffffd8fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555b9e7 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9ec *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b9f0 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9f5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b9f9 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555b9fe *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555ba02 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555ba06 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba0b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555ba0f *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba14 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba18 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba1c *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555ba20 *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555ba26 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rax)                       #! EA = L0x7fffffffd720; PC = 0x55555555ba2c *)
mov L0x7fffffffd720 ymm6_0; mov L0x7fffffffd724 ymm6_1;
mov L0x7fffffffd728 ymm6_2; mov L0x7fffffffd72c ymm6_3;
mov L0x7fffffffd730 ymm6_4; mov L0x7fffffffd734 ymm6_5;
mov L0x7fffffffd738 ymm6_6; mov L0x7fffffffd73c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555ba31 *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555ba36 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba3c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555ba40 *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d020; Value = 0x2e1b21382e1b2138; PC = 0x55555555ba46 *)
adds dc ymm6_0 ymm6_0 L0x55555555d020; adds dc ymm6_1 ymm6_1 L0x55555555d024;
adds dc ymm6_2 ymm6_2 L0x55555555d028; adds dc ymm6_3 ymm6_3 L0x55555555d02c;
adds dc ymm6_4 ymm6_4 L0x55555555d030; adds dc ymm6_5 ymm6_5 L0x55555555d034;
adds dc ymm6_6 ymm6_6 L0x55555555d038; adds dc ymm6_7 ymm6_7 L0x55555555d03c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba4b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555ba4f *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba55 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555ba59 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555ba5f *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555ba64 *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba69 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555ba6d *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba73 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555ba77 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555ba7d *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555ba81 *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555ba86 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba8a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555ba8e *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555ba94 *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555ba9a *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555ba9e *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555baa2 *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555baa6 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baac *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555bab0 *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555bab6 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555baba *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555babe *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bac2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bac6 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555baca *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rax),%ymm6                       #! EA = L0x7fffffffd760; Value = 0x9bef911d9bef911d; PC = 0x55555555bace *)
mov ymm6_0 L0x7fffffffd760; mov ymm6_1 L0x7fffffffd764;
mov ymm6_2 L0x7fffffffd768; mov ymm6_3 L0x7fffffffd76c;
mov ymm6_4 L0x7fffffffd770; mov ymm6_5 L0x7fffffffd774;
mov ymm6_6 L0x7fffffffd778; mov ymm6_7 L0x7fffffffd77c;
(* vpaddd -0x20(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd860; Value = 0x60b68ef460b68ef4; PC = 0x55555555bad3 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd860; adds dc ymm5_1 ymm5_1 L0x7fffffffd864;
adds dc ymm5_2 ymm5_2 L0x7fffffffd868; adds dc ymm5_3 ymm5_3 L0x7fffffffd86c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd870; adds dc ymm5_5 ymm5_5 L0x7fffffffd874;
adds dc ymm5_6 ymm5_6 L0x7fffffffd878; adds dc ymm5_7 ymm5_7 L0x7fffffffd87c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bad8 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555badd *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bae2 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bae7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555baeb *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baf0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555baf4 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rax),%ymm0                       #! EA = L0x7fffffffd700; Value = 0x528ad2af528ad2af; PC = 0x55555555baf9 *)
mov ymm0_0 L0x7fffffffd700; mov ymm0_1 L0x7fffffffd704;
mov ymm0_2 L0x7fffffffd708; mov ymm0_3 L0x7fffffffd70c;
mov ymm0_4 L0x7fffffffd710; mov ymm0_5 L0x7fffffffd714;
mov ymm0_6 L0x7fffffffd718; mov ymm0_7 L0x7fffffffd71c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bafe *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb03 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bb07 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb0c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bb10 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb15 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bb19 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bb1d *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb22 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bb26 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb2b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb2f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb33 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555bb37 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555bb3d *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rax)                       #! EA = L0x7fffffffd740; PC = 0x55555555bb43 *)
mov L0x7fffffffd740 ymm5_0; mov L0x7fffffffd744 ymm5_1;
mov L0x7fffffffd748 ymm5_2; mov L0x7fffffffd74c ymm5_3;
mov L0x7fffffffd750 ymm5_4; mov L0x7fffffffd754 ymm5_5;
mov L0x7fffffffd758 ymm5_6; mov L0x7fffffffd75c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555bb48 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555bb4d *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb53 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555bb57 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d040; Value = 0x4d2c6dfc4d2c6dfc; PC = 0x55555555bb5d *)
adds dc ymm5_0 ymm5_0 L0x55555555d040; adds dc ymm5_1 ymm5_1 L0x55555555d044;
adds dc ymm5_2 ymm5_2 L0x55555555d048; adds dc ymm5_3 ymm5_3 L0x55555555d04c;
adds dc ymm5_4 ymm5_4 L0x55555555d050; adds dc ymm5_5 ymm5_5 L0x55555555d054;
adds dc ymm5_6 ymm5_6 L0x55555555d058; adds dc ymm5_7 ymm5_7 L0x55555555d05c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb62 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555bb66 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb6c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555bb70 *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555bb76 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555bb7b *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb80 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555bb84 *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb8a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555bb8e *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bb94 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555bb98 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555bb9d *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bba1 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555bba5 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555bbab *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bbb1 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bbb5 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555bbb9 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555bbbd *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbc3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555bbc7 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555bbcd *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555bbd1 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbd5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbd9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555bbdd *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555bbe1 *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rax),%ymm5                            #! EA = L0x7fffffffd780; Value = 0x1335e16d1335e16d; PC = 0x55555555bbe5 *)
mov ymm5_0 L0x7fffffffd780; mov ymm5_1 L0x7fffffffd784;
mov ymm5_2 L0x7fffffffd788; mov ymm5_3 L0x7fffffffd78c;
mov ymm5_4 L0x7fffffffd790; mov ymm5_5 L0x7fffffffd794;
mov ymm5_6 L0x7fffffffd798; mov ymm5_7 L0x7fffffffd79c;
(* vpaddd (%rbx),%ymm6,%ymm6                       #! EA = L0x7fffffffd880; Value = 0x9b87b13d9b87b13d; PC = 0x55555555bbe9 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd880; adds dc ymm6_1 ymm6_1 L0x7fffffffd884;
adds dc ymm6_2 ymm6_2 L0x7fffffffd888; adds dc ymm6_3 ymm6_3 L0x7fffffffd88c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd890; adds dc ymm6_5 ymm6_5 L0x7fffffffd894;
adds dc ymm6_6 ymm6_6 L0x7fffffffd898; adds dc ymm6_7 ymm6_7 L0x7fffffffd89c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555bbed *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555bbf2 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555bbf7 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbfc *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555bc00 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555bc09 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rax),%ymm0                       #! EA = L0x7fffffffd720; Value = 0x3e1198e03e1198e0; PC = 0x55555555bc0e *)
mov ymm0_0 L0x7fffffffd720; mov ymm0_1 L0x7fffffffd724;
mov ymm0_2 L0x7fffffffd728; mov ymm0_3 L0x7fffffffd72c;
mov ymm0_4 L0x7fffffffd730; mov ymm0_5 L0x7fffffffd734;
mov ymm0_6 L0x7fffffffd738; mov ymm0_7 L0x7fffffffd73c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555bc13 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc18 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bc1c *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc21 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bc25 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc2a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555bc2e *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bc32 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc37 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bc3b *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc44 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc48 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555bc4c *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555bc52 *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rax)                       #! EA = L0x7fffffffd760; PC = 0x55555555bc58 *)
mov L0x7fffffffd760 ymm6_0; mov L0x7fffffffd764 ymm6_1;
mov L0x7fffffffd768 ymm6_2; mov L0x7fffffffd76c ymm6_3;
mov L0x7fffffffd770 ymm6_4; mov L0x7fffffffd774 ymm6_5;
mov L0x7fffffffd778 ymm6_6; mov L0x7fffffffd77c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555bc5d *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555bc62 *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc68 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555bc6c *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d060; Value = 0x53380d1353380d13; PC = 0x55555555bc72 *)
adds dc ymm6_0 ymm6_0 L0x55555555d060; adds dc ymm6_1 ymm6_1 L0x55555555d064;
adds dc ymm6_2 ymm6_2 L0x55555555d068; adds dc ymm6_3 ymm6_3 L0x55555555d06c;
adds dc ymm6_4 ymm6_4 L0x55555555d070; adds dc ymm6_5 ymm6_5 L0x55555555d074;
adds dc ymm6_6 ymm6_6 L0x55555555d078; adds dc ymm6_7 ymm6_7 L0x55555555d07c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc77 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555bc7b *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc81 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555bc85 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555bc8b *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555bc90 *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc95 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555bc99 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc9f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555bca3 *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bca9 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555bcad *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555bcb2 *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bcb6 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555bcba *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555bcc0 *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bcc6 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bcca *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555bcce *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555bcd2 *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcd8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555bcdc *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555bce2 *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555bce6 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bcea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555bcf2 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555bcf6 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rax),%ymm6                        #! EA = L0x7fffffffd7a0; Value = 0xfa8fad31fa8fad31; PC = 0x55555555bcfa *)
mov ymm6_0 L0x7fffffffd7a0; mov ymm6_1 L0x7fffffffd7a4;
mov ymm6_2 L0x7fffffffd7a8; mov ymm6_3 L0x7fffffffd7ac;
mov ymm6_4 L0x7fffffffd7b0; mov ymm6_5 L0x7fffffffd7b4;
mov ymm6_6 L0x7fffffffd7b8; mov ymm6_7 L0x7fffffffd7bc;
(* vpaddd 0x20(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8a0; Value = 0x261e0138261e0138; PC = 0x55555555bcff *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bd04 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bd09 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bd0e *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd13 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bd17 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd1c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bd20 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rax),%ymm0                       #! EA = L0x7fffffffd740; Value = 0xc5b05ff6c5b05ff6; PC = 0x55555555bd25 *)
mov ymm0_0 L0x7fffffffd740; mov ymm0_1 L0x7fffffffd744;
mov ymm0_2 L0x7fffffffd748; mov ymm0_3 L0x7fffffffd74c;
mov ymm0_4 L0x7fffffffd750; mov ymm0_5 L0x7fffffffd754;
mov ymm0_6 L0x7fffffffd758; mov ymm0_7 L0x7fffffffd75c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bd2a *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd2f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bd33 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd38 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bd3c *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd41 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bd45 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bd49 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bd52 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd57 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd5b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd5f *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555bd63 *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555bd69 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rax)                            #! EA = L0x7fffffffd780; PC = 0x55555555bd6f *)
mov L0x7fffffffd780 ymm5_0; mov L0x7fffffffd784 ymm5_1;
mov L0x7fffffffd788 ymm5_2; mov L0x7fffffffd78c ymm5_3;
mov L0x7fffffffd790 ymm5_4; mov L0x7fffffffd794 ymm5_5;
mov L0x7fffffffd798 ymm5_6; mov L0x7fffffffd79c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555bd73 *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555bd78 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd7e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555bd82 *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555d080; Value = 0x650a7354650a7354; PC = 0x55555555bd88 *)
adds dc ymm5_0 ymm5_0 L0x55555555d080; adds dc ymm5_1 ymm5_1 L0x55555555d084;
adds dc ymm5_2 ymm5_2 L0x55555555d088; adds dc ymm5_3 ymm5_3 L0x55555555d08c;
adds dc ymm5_4 ymm5_4 L0x55555555d090; adds dc ymm5_5 ymm5_5 L0x55555555d094;
adds dc ymm5_6 ymm5_6 L0x55555555d098; adds dc ymm5_7 ymm5_7 L0x55555555d09c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd8d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555bd91 *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd97 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555bd9b *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555bda1 *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555bda6 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bdab *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555bdaf *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdb5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555bdb9 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bdbf *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555bdc3 *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555bdc8 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bdcc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555bdd0 *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555bdd6 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bddc *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bde0 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555bde4 *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555bde8 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555bdf2 *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555bdf8 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555bdfc *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be00 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be04 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555be08 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555be0c *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rax),%ymm5                        #! EA = L0x7fffffffd7c0; Value = 0x1b329dd61b329dd6; PC = 0x55555555be10 *)
mov ymm5_0 L0x7fffffffd7c0; mov ymm5_1 L0x7fffffffd7c4;
mov ymm5_2 L0x7fffffffd7c8; mov ymm5_3 L0x7fffffffd7cc;
mov ymm5_4 L0x7fffffffd7d0; mov ymm5_5 L0x7fffffffd7d4;
mov ymm5_6 L0x7fffffffd7d8; mov ymm5_7 L0x7fffffffd7dc;
(* vpaddd 0x40(%rbx),%ymm6,%ymm6                   #! EA = L0x7fffffffd8c0; Value = 0x14b7a3be14b7a3be; PC = 0x55555555be15 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd8c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd8c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd8c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd8cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd8d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd8d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd8d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd8dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555be1a *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555be1f *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555be24 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be29 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555be2d *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be32 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555be36 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rax),%ymm0                       #! EA = L0x7fffffffd760; Value = 0xd6f67228d6f67228; PC = 0x55555555be3b *)
mov ymm0_0 L0x7fffffffd760; mov ymm0_1 L0x7fffffffd764;
mov ymm0_2 L0x7fffffffd768; mov ymm0_3 L0x7fffffffd76c;
mov ymm0_4 L0x7fffffffd770; mov ymm0_5 L0x7fffffffd774;
mov ymm0_6 L0x7fffffffd778; mov ymm0_7 L0x7fffffffd77c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555be40 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be45 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555be49 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555be52 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be57 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555be5b *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555be5f *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555be68 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be6d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be71 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be75 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555be79 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555be7f *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rax)                        #! EA = L0x7fffffffd7a0; PC = 0x55555555be85 *)
mov L0x7fffffffd7a0 ymm6_0; mov L0x7fffffffd7a4 ymm6_1;
mov L0x7fffffffd7a8 ymm6_2; mov L0x7fffffffd7ac ymm6_3;
mov L0x7fffffffd7b0 ymm6_4; mov L0x7fffffffd7b4 ymm6_5;
mov L0x7fffffffd7b8 ymm6_6; mov L0x7fffffffd7bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555be8a *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555be8f *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be95 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555be99 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d0a0; Value = 0x766a0abb766a0abb; PC = 0x55555555be9f *)
adds dc ymm6_0 ymm6_0 L0x55555555d0a0; adds dc ymm6_1 ymm6_1 L0x55555555d0a4;
adds dc ymm6_2 ymm6_2 L0x55555555d0a8; adds dc ymm6_3 ymm6_3 L0x55555555d0ac;
adds dc ymm6_4 ymm6_4 L0x55555555d0b0; adds dc ymm6_5 ymm6_5 L0x55555555d0b4;
adds dc ymm6_6 ymm6_6 L0x55555555d0b8; adds dc ymm6_7 ymm6_7 L0x55555555d0bc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bea4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555bea8 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555beae *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555beb2 *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555beb8 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555bebd *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bec2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555bec6 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555becc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555bed0 *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bed6 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555beda *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555bedf *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bee3 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555bee7 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555beed *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bef3 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bef7 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555befb *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555beff *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555bf09 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555bf0f *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bf13 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf17 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf1b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555bf1f *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555bf23 *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rax),%ymm6                        #! EA = L0x7fffffffd7e0; Value = 0x776eb770776eb770; PC = 0x55555555bf27 *)
mov ymm6_0 L0x7fffffffd7e0; mov ymm6_1 L0x7fffffffd7e4;
mov ymm6_2 L0x7fffffffd7e8; mov ymm6_3 L0x7fffffffd7ec;
mov ymm6_4 L0x7fffffffd7f0; mov ymm6_5 L0x7fffffffd7f4;
mov ymm6_6 L0x7fffffffd7f8; mov ymm6_7 L0x7fffffffd7fc;
(* vpaddd 0x60(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8e0; Value = 0xb7ff4640b7ff4640; PC = 0x55555555bf2c *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bf31 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bf36 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bf3b *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bf44 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf49 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bf4d *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rax),%ymm0                            #! EA = L0x7fffffffd780; Value = 0xf5714d7df5714d7d; PC = 0x55555555bf52 *)
mov ymm0_0 L0x7fffffffd780; mov ymm0_1 L0x7fffffffd784;
mov ymm0_2 L0x7fffffffd788; mov ymm0_3 L0x7fffffffd78c;
mov ymm0_4 L0x7fffffffd790; mov ymm0_5 L0x7fffffffd794;
mov ymm0_6 L0x7fffffffd798; mov ymm0_7 L0x7fffffffd79c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bf56 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf5b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bf5f *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bf68 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf6d *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bf71 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bf75 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf7a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bf7e *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf83 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf87 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf8b *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555bf8f *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555bf95 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rax)                        #! EA = L0x7fffffffd7c0; PC = 0x55555555bf9b *)
mov L0x7fffffffd7c0 ymm5_0; mov L0x7fffffffd7c4 ymm5_1;
mov L0x7fffffffd7c8 ymm5_2; mov L0x7fffffffd7cc ymm5_3;
mov L0x7fffffffd7d0 ymm5_4; mov L0x7fffffffd7d4 ymm5_5;
mov L0x7fffffffd7d8 ymm5_6; mov L0x7fffffffd7dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555bfa0 *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555bfa5 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555bfaf *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555d0c0; Value = 0x81c2c92e81c2c92e; PC = 0x55555555bfb5 *)
adds dc ymm5_0 ymm5_0 L0x55555555d0c0; adds dc ymm5_1 ymm5_1 L0x55555555d0c4;
adds dc ymm5_2 ymm5_2 L0x55555555d0c8; adds dc ymm5_3 ymm5_3 L0x55555555d0cc;
adds dc ymm5_4 ymm5_4 L0x55555555d0d0; adds dc ymm5_5 ymm5_5 L0x55555555d0d4;
adds dc ymm5_6 ymm5_6 L0x55555555d0d8; adds dc ymm5_7 ymm5_7 L0x55555555d0dc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfba *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555bfbe *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfc4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555bfc8 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555bfce *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555bfd3 *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfd8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555bfdc *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfe2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555bfe6 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bfec *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555bff0 *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555bff5 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bff9 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555bffd *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c003 *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c009 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c00d *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c011 *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c015 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c01b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c01f *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c025 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c029 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c02d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c031 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c035 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c039 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rbx),%ymm5                       #! EA = L0x7fffffffd800; Value = 0xfb56e45bfb56e45b; PC = 0x55555555c03d *)
mov ymm5_0 L0x7fffffffd800; mov ymm5_1 L0x7fffffffd804;
mov ymm5_2 L0x7fffffffd808; mov ymm5_3 L0x7fffffffd80c;
mov ymm5_4 L0x7fffffffd810; mov ymm5_5 L0x7fffffffd814;
mov ymm5_6 L0x7fffffffd818; mov ymm5_7 L0x7fffffffd81c;
(* vpaddd -0x80(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd700; Value = 0x528ad2af528ad2af; PC = 0x55555555c042 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd700; adds dc ymm6_1 ymm6_1 L0x7fffffffd704;
adds dc ymm6_2 ymm6_2 L0x7fffffffd708; adds dc ymm6_3 ymm6_3 L0x7fffffffd70c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd710; adds dc ymm6_5 ymm6_5 L0x7fffffffd714;
adds dc ymm6_6 ymm6_6 L0x7fffffffd718; adds dc ymm6_7 ymm6_7 L0x7fffffffd71c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c047 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c04c *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c051 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c056 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c05a *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c05f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c063 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rax),%ymm0                        #! EA = L0x7fffffffd7a0; Value = 0x0ed1cd750ed1cd75; PC = 0x55555555c068 *)
mov ymm0_0 L0x7fffffffd7a0; mov ymm0_1 L0x7fffffffd7a4;
mov ymm0_2 L0x7fffffffd7a8; mov ymm0_3 L0x7fffffffd7ac;
mov ymm0_4 L0x7fffffffd7b0; mov ymm0_5 L0x7fffffffd7b4;
mov ymm0_6 L0x7fffffffd7b8; mov ymm0_7 L0x7fffffffd7bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c06d *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c072 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c076 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c07b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c07f *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c084 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c088 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c08c *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c091 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c095 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c09a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c09e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c0a2 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c0a6 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c0ac *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rax)                        #! EA = L0x7fffffffd7e0; PC = 0x55555555c0b2 *)
mov L0x7fffffffd7e0 ymm6_0; mov L0x7fffffffd7e4 ymm6_1;
mov L0x7fffffffd7e8 ymm6_2; mov L0x7fffffffd7ec ymm6_3;
mov L0x7fffffffd7f0 ymm6_4; mov L0x7fffffffd7f4 ymm6_5;
mov L0x7fffffffd7f8 ymm6_6; mov L0x7fffffffd7fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c0b7 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c0bc *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c0c6 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d0e0; Value = 0x92722c8592722c85; PC = 0x55555555c0cc *)
adds dc ymm6_0 ymm6_0 L0x55555555d0e0; adds dc ymm6_1 ymm6_1 L0x55555555d0e4;
adds dc ymm6_2 ymm6_2 L0x55555555d0e8; adds dc ymm6_3 ymm6_3 L0x55555555d0ec;
adds dc ymm6_4 ymm6_4 L0x55555555d0f0; adds dc ymm6_5 ymm6_5 L0x55555555d0f4;
adds dc ymm6_6 ymm6_6 L0x55555555d0f8; adds dc ymm6_7 ymm6_7 L0x55555555d0fc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0d1 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c0d5 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0db *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c0df *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c0e5 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c0ea *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c0f3 *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c0fd *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c103 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c107 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c10c *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c110 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c114 *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c11a *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c120 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c124 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c128 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c12c *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c132 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c136 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c13c *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c140 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c144 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c148 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c14c *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555c150 *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555c154 *)
(* add 0x100, rbp *)
nop;
(* vmovdqu -0x60(%rbx),%ymm6                       #! EA = L0x7fffffffd820; Value = 0x312675a1312675a1; PC = 0x55555555c15b *)
mov ymm6_0 L0x7fffffffd820; mov ymm6_1 L0x7fffffffd824;
mov ymm6_2 L0x7fffffffd828; mov ymm6_3 L0x7fffffffd82c;
mov ymm6_4 L0x7fffffffd830; mov ymm6_5 L0x7fffffffd834;
mov ymm6_6 L0x7fffffffd838; mov ymm6_7 L0x7fffffffd83c;
(* vpaddd -0x60(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd720; Value = 0x3e1198e03e1198e0; PC = 0x55555555c160 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd720; adds dc ymm5_1 ymm5_1 L0x7fffffffd724;
adds dc ymm5_2 ymm5_2 L0x7fffffffd728; adds dc ymm5_3 ymm5_3 L0x7fffffffd72c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd730; adds dc ymm5_5 ymm5_5 L0x7fffffffd734;
adds dc ymm5_6 ymm5_6 L0x7fffffffd738; adds dc ymm5_7 ymm5_7 L0x7fffffffd73c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c165 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c16a *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c16f *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c174 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c178 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c17d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c181 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rax),%ymm0                        #! EA = L0x7fffffffd7c0; Value = 0xa63d12b6a63d12b6; PC = 0x55555555c186 *)
mov ymm0_0 L0x7fffffffd7c0; mov ymm0_1 L0x7fffffffd7c4;
mov ymm0_2 L0x7fffffffd7c8; mov ymm0_3 L0x7fffffffd7cc;
mov ymm0_4 L0x7fffffffd7d0; mov ymm0_5 L0x7fffffffd7d4;
mov ymm0_6 L0x7fffffffd7d8; mov ymm0_7 L0x7fffffffd7dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c18b *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c190 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c194 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c199 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c19d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1a2 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c1a6 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c1aa *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1af *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c1b3 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1b8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1bc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1c0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555c1c4 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555c1ca *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rbx)                       #! EA = L0x7fffffffd800; PC = 0x55555555c1d0 *)
mov L0x7fffffffd800 ymm5_0; mov L0x7fffffffd804 ymm5_1;
mov L0x7fffffffd808 ymm5_2; mov L0x7fffffffd80c ymm5_3;
mov L0x7fffffffd810 ymm5_4; mov L0x7fffffffd814 ymm5_5;
mov L0x7fffffffd818 ymm5_6; mov L0x7fffffffd81c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555c1d5 *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555c1da *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1e0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555c1e4 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d100; Value = 0xa2bfe8a1a2bfe8a1; PC = 0x55555555c1ea *)
adds dc ymm5_0 ymm5_0 L0x55555555d100; adds dc ymm5_1 ymm5_1 L0x55555555d104;
adds dc ymm5_2 ymm5_2 L0x55555555d108; adds dc ymm5_3 ymm5_3 L0x55555555d10c;
adds dc ymm5_4 ymm5_4 L0x55555555d110; adds dc ymm5_5 ymm5_5 L0x55555555d114;
adds dc ymm5_6 ymm5_6 L0x55555555d118; adds dc ymm5_7 ymm5_7 L0x55555555d11c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555c1f3 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555c1fd *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555c203 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555c208 *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c20d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555c211 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c217 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555c21b *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c221 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555c225 *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555c22a *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c22e *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555c232 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555c238 *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c23e *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c242 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555c246 *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555c24a *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c250 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555c254 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555c25a *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c25e *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c262 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c266 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c26a *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555c26e *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rbx),%ymm5                       #! EA = L0x7fffffffd840; Value = 0x8307475283074752; PC = 0x55555555c272 *)
mov ymm5_0 L0x7fffffffd840; mov ymm5_1 L0x7fffffffd844;
mov ymm5_2 L0x7fffffffd848; mov ymm5_3 L0x7fffffffd84c;
mov ymm5_4 L0x7fffffffd850; mov ymm5_5 L0x7fffffffd854;
mov ymm5_6 L0x7fffffffd858; mov ymm5_7 L0x7fffffffd85c;
(* vpaddd -0x40(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd740; Value = 0xc5b05ff6c5b05ff6; PC = 0x55555555c277 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd740; adds dc ymm6_1 ymm6_1 L0x7fffffffd744;
adds dc ymm6_2 ymm6_2 L0x7fffffffd748; adds dc ymm6_3 ymm6_3 L0x7fffffffd74c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd750; adds dc ymm6_5 ymm6_5 L0x7fffffffd754;
adds dc ymm6_6 ymm6_6 L0x7fffffffd758; adds dc ymm6_7 ymm6_7 L0x7fffffffd75c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c27c *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c281 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c286 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c28b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c28f *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c294 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c298 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rax),%ymm0                        #! EA = L0x7fffffffd7e0; Value = 0xba9bac76ba9bac76; PC = 0x55555555c29d *)
mov ymm0_0 L0x7fffffffd7e0; mov ymm0_1 L0x7fffffffd7e4;
mov ymm0_2 L0x7fffffffd7e8; mov ymm0_3 L0x7fffffffd7ec;
mov ymm0_4 L0x7fffffffd7f0; mov ymm0_5 L0x7fffffffd7f4;
mov ymm0_6 L0x7fffffffd7f8; mov ymm0_7 L0x7fffffffd7fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c2a2 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c2ab *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2b0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c2b4 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2b9 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c2bd *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c2c1 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2c6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c2ca *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2cf *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2d3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2d7 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555c2db *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555c2e1 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rbx)                       #! EA = L0x7fffffffd820; PC = 0x55555555c2e7 *)
mov L0x7fffffffd820 ymm6_0; mov L0x7fffffffd824 ymm6_1;
mov L0x7fffffffd828 ymm6_2; mov L0x7fffffffd82c ymm6_3;
mov L0x7fffffffd830 ymm6_4; mov L0x7fffffffd834 ymm6_5;
mov L0x7fffffffd838 ymm6_6; mov L0x7fffffffd83c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555c2ec *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555c2f1 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2f7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555c2fb *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d120; Value = 0xa81a664ba81a664b; PC = 0x55555555c301 *)
adds dc ymm6_0 ymm6_0 L0x55555555d120; adds dc ymm6_1 ymm6_1 L0x55555555d124;
adds dc ymm6_2 ymm6_2 L0x55555555d128; adds dc ymm6_3 ymm6_3 L0x55555555d12c;
adds dc ymm6_4 ymm6_4 L0x55555555d130; adds dc ymm6_5 ymm6_5 L0x55555555d134;
adds dc ymm6_6 ymm6_6 L0x55555555d138; adds dc ymm6_7 ymm6_7 L0x55555555d13c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c306 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555c30a *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c310 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555c314 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555c31a *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555c31f *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c324 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555c328 *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c32e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555c332 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c338 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555c33c *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555c341 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c345 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555c349 *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555c34f *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c355 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c359 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555c35d *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555c361 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c367 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555c36b *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555c371 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c375 *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c379 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c37d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c381 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555c385 *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rbx),%ymm6                       #! EA = L0x7fffffffd860; Value = 0x60b68ef460b68ef4; PC = 0x55555555c389 *)
mov ymm6_0 L0x7fffffffd860; mov ymm6_1 L0x7fffffffd864;
mov ymm6_2 L0x7fffffffd868; mov ymm6_3 L0x7fffffffd86c;
mov ymm6_4 L0x7fffffffd870; mov ymm6_5 L0x7fffffffd874;
mov ymm6_6 L0x7fffffffd878; mov ymm6_7 L0x7fffffffd87c;
(* vpaddd -0x20(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd760; Value = 0xd6f67228d6f67228; PC = 0x55555555c38e *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd760; adds dc ymm5_1 ymm5_1 L0x7fffffffd764;
adds dc ymm5_2 ymm5_2 L0x7fffffffd768; adds dc ymm5_3 ymm5_3 L0x7fffffffd76c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd770; adds dc ymm5_5 ymm5_5 L0x7fffffffd774;
adds dc ymm5_6 ymm5_6 L0x7fffffffd778; adds dc ymm5_7 ymm5_7 L0x7fffffffd77c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c393 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c398 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c39d *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3a2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c3a6 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c3af *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rbx),%ymm0                       #! EA = L0x7fffffffd800; Value = 0x3dbb53ee3dbb53ee; PC = 0x55555555c3b4 *)
mov ymm0_0 L0x7fffffffd800; mov ymm0_1 L0x7fffffffd804;
mov ymm0_2 L0x7fffffffd808; mov ymm0_3 L0x7fffffffd80c;
mov ymm0_4 L0x7fffffffd810; mov ymm0_5 L0x7fffffffd814;
mov ymm0_6 L0x7fffffffd818; mov ymm0_7 L0x7fffffffd81c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c3b9 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3be *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c3c2 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3c7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c3cb *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3d0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c3d4 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c3d8 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3dd *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c3e1 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3e6 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ea *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3ee *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555c3f2 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555c3f8 *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rbx)                       #! EA = L0x7fffffffd840; PC = 0x55555555c3fe *)
mov L0x7fffffffd840 ymm5_0; mov L0x7fffffffd844 ymm5_1;
mov L0x7fffffffd848 ymm5_2; mov L0x7fffffffd84c ymm5_3;
mov L0x7fffffffd850 ymm5_4; mov L0x7fffffffd854 ymm5_5;
mov L0x7fffffffd858 ymm5_6; mov L0x7fffffffd85c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555c403 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555c408 *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c40e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555c412 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d140; Value = 0xc24b8b70c24b8b70; PC = 0x55555555c418 *)
adds dc ymm5_0 ymm5_0 L0x55555555d140; adds dc ymm5_1 ymm5_1 L0x55555555d144;
adds dc ymm5_2 ymm5_2 L0x55555555d148; adds dc ymm5_3 ymm5_3 L0x55555555d14c;
adds dc ymm5_4 ymm5_4 L0x55555555d150; adds dc ymm5_5 ymm5_5 L0x55555555d154;
adds dc ymm5_6 ymm5_6 L0x55555555d158; adds dc ymm5_7 ymm5_7 L0x55555555d15c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c41d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555c421 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c427 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555c42b *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555c431 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555c436 *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c43b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555c43f *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c445 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555c449 *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c44f *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555c453 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555c458 *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c45c *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555c460 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555c466 *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c46c *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c470 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555c474 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555c478 *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c47e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555c482 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555c488 *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c48c *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c490 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c494 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c498 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555c49c *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rbx),%ymm5                            #! EA = L0x7fffffffd880; Value = 0x9b87b13d9b87b13d; PC = 0x55555555c4a0 *)
mov ymm5_0 L0x7fffffffd880; mov ymm5_1 L0x7fffffffd884;
mov ymm5_2 L0x7fffffffd888; mov ymm5_3 L0x7fffffffd88c;
mov ymm5_4 L0x7fffffffd890; mov ymm5_5 L0x7fffffffd894;
mov ymm5_6 L0x7fffffffd898; mov ymm5_7 L0x7fffffffd89c;
(* vpaddd (%rax),%ymm6,%ymm6                       #! EA = L0x7fffffffd780; Value = 0xf5714d7df5714d7d; PC = 0x55555555c4a4 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd780; adds dc ymm6_1 ymm6_1 L0x7fffffffd784;
adds dc ymm6_2 ymm6_2 L0x7fffffffd788; adds dc ymm6_3 ymm6_3 L0x7fffffffd78c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd790; adds dc ymm6_5 ymm6_5 L0x7fffffffd794;
adds dc ymm6_6 ymm6_6 L0x7fffffffd798; adds dc ymm6_7 ymm6_7 L0x7fffffffd79c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c4a8 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c4ad *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c4b2 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4b7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c4bb *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c4c4 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rbx),%ymm0                       #! EA = L0x7fffffffd820; Value = 0xff244931ff244931; PC = 0x55555555c4c9 *)
mov ymm0_0 L0x7fffffffd820; mov ymm0_1 L0x7fffffffd824;
mov ymm0_2 L0x7fffffffd828; mov ymm0_3 L0x7fffffffd82c;
mov ymm0_4 L0x7fffffffd830; mov ymm0_5 L0x7fffffffd834;
mov ymm0_6 L0x7fffffffd838; mov ymm0_7 L0x7fffffffd83c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c4ce *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4d3 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c4d7 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4dc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c4e0 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c4e5 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c4e9 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c4ed *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4f2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c4f6 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4ff *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c503 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555c507 *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555c50d *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rbx)                       #! EA = L0x7fffffffd860; PC = 0x55555555c513 *)
mov L0x7fffffffd860 ymm6_0; mov L0x7fffffffd864 ymm6_1;
mov L0x7fffffffd868 ymm6_2; mov L0x7fffffffd86c ymm6_3;
mov L0x7fffffffd870 ymm6_4; mov L0x7fffffffd874 ymm6_5;
mov L0x7fffffffd878 ymm6_6; mov L0x7fffffffd87c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555c518 *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555c51d *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c523 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555c527 *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d160; Value = 0xc76c51a3c76c51a3; PC = 0x55555555c52d *)
adds dc ymm6_0 ymm6_0 L0x55555555d160; adds dc ymm6_1 ymm6_1 L0x55555555d164;
adds dc ymm6_2 ymm6_2 L0x55555555d168; adds dc ymm6_3 ymm6_3 L0x55555555d16c;
adds dc ymm6_4 ymm6_4 L0x55555555d170; adds dc ymm6_5 ymm6_5 L0x55555555d174;
adds dc ymm6_6 ymm6_6 L0x55555555d178; adds dc ymm6_7 ymm6_7 L0x55555555d17c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c532 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555c536 *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c53c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555c540 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555c546 *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555c54b *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c550 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555c554 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c55a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555c55e *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c564 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555c568 *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555c56d *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c571 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555c575 *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555c57b *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c581 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c585 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555c589 *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555c58d *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c593 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555c597 *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555c59d *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c5a1 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5a5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c5ad *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555c5b1 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rbx),%ymm6                        #! EA = L0x7fffffffd8a0; Value = 0x261e0138261e0138; PC = 0x55555555c5b5 *)
mov ymm6_0 L0x7fffffffd8a0; mov ymm6_1 L0x7fffffffd8a4;
mov ymm6_2 L0x7fffffffd8a8; mov ymm6_3 L0x7fffffffd8ac;
mov ymm6_4 L0x7fffffffd8b0; mov ymm6_5 L0x7fffffffd8b4;
mov ymm6_6 L0x7fffffffd8b8; mov ymm6_7 L0x7fffffffd8bc;
(* vpaddd 0x20(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7a0; Value = 0x0ed1cd750ed1cd75; PC = 0x55555555c5ba *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c5bf *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c5c4 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c5c9 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ce *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c5d2 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5d7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c5db *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rbx),%ymm0                       #! EA = L0x7fffffffd840; Value = 0x64ee162664ee1626; PC = 0x55555555c5e0 *)
mov ymm0_0 L0x7fffffffd840; mov ymm0_1 L0x7fffffffd844;
mov ymm0_2 L0x7fffffffd848; mov ymm0_3 L0x7fffffffd84c;
mov ymm0_4 L0x7fffffffd850; mov ymm0_5 L0x7fffffffd854;
mov ymm0_6 L0x7fffffffd858; mov ymm0_7 L0x7fffffffd85c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c5e5 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c5ee *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5f3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c5f7 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c5fc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c600 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c604 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c609 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c60d *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c612 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c616 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c61a *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555c61e *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555c624 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rbx)                            #! EA = L0x7fffffffd880; PC = 0x55555555c62a *)
mov L0x7fffffffd880 ymm5_0; mov L0x7fffffffd884 ymm5_1;
mov L0x7fffffffd888 ymm5_2; mov L0x7fffffffd88c ymm5_3;
mov L0x7fffffffd890 ymm5_4; mov L0x7fffffffd894 ymm5_5;
mov L0x7fffffffd898 ymm5_6; mov L0x7fffffffd89c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555c62e *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555c633 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c639 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555c63d *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555d180; Value = 0xd192e819d192e819; PC = 0x55555555c643 *)
adds dc ymm5_0 ymm5_0 L0x55555555d180; adds dc ymm5_1 ymm5_1 L0x55555555d184;
adds dc ymm5_2 ymm5_2 L0x55555555d188; adds dc ymm5_3 ymm5_3 L0x55555555d18c;
adds dc ymm5_4 ymm5_4 L0x55555555d190; adds dc ymm5_5 ymm5_5 L0x55555555d194;
adds dc ymm5_6 ymm5_6 L0x55555555d198; adds dc ymm5_7 ymm5_7 L0x55555555d19c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c648 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555c64c *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c652 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555c656 *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555c65c *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555c661 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c666 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555c66a *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c670 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555c674 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c67a *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555c67e *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555c683 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c687 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555c68b *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555c691 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c697 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c69b *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555c69f *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555c6a3 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555c6ad *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555c6b3 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c6b7 *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6bb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6bf *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c6c3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555c6c7 *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rbx),%ymm5                        #! EA = L0x7fffffffd8c0; Value = 0x14b7a3be14b7a3be; PC = 0x55555555c6cb *)
mov ymm5_0 L0x7fffffffd8c0; mov ymm5_1 L0x7fffffffd8c4;
mov ymm5_2 L0x7fffffffd8c8; mov ymm5_3 L0x7fffffffd8cc;
mov ymm5_4 L0x7fffffffd8d0; mov ymm5_5 L0x7fffffffd8d4;
mov ymm5_6 L0x7fffffffd8d8; mov ymm5_7 L0x7fffffffd8dc;
(* vpaddd 0x40(%rax),%ymm6,%ymm6                   #! EA = L0x7fffffffd7c0; Value = 0xa63d12b6a63d12b6; PC = 0x55555555c6d0 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd7c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd7c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd7c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd7cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd7d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd7d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd7d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd7dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c6d5 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c6da *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c6df *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6e4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c6e8 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c6f1 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rbx),%ymm0                       #! EA = L0x7fffffffd860; Value = 0x87b1857987b18579; PC = 0x55555555c6f6 *)
mov ymm0_0 L0x7fffffffd860; mov ymm0_1 L0x7fffffffd864;
mov ymm0_2 L0x7fffffffd868; mov ymm0_3 L0x7fffffffd86c;
mov ymm0_4 L0x7fffffffd870; mov ymm0_5 L0x7fffffffd874;
mov ymm0_6 L0x7fffffffd878; mov ymm0_7 L0x7fffffffd87c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c6fb *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c700 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c704 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c709 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c70d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c712 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c716 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c71a *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c71f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c723 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c728 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c72c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c730 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555c734 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555c73a *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rbx)                        #! EA = L0x7fffffffd8a0; PC = 0x55555555c740 *)
mov L0x7fffffffd8a0 ymm6_0; mov L0x7fffffffd8a4 ymm6_1;
mov L0x7fffffffd8a8 ymm6_2; mov L0x7fffffffd8ac ymm6_3;
mov L0x7fffffffd8b0 ymm6_4; mov L0x7fffffffd8b4 ymm6_5;
mov L0x7fffffffd8b8 ymm6_6; mov L0x7fffffffd8bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555c745 *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555c74a *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c750 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555c754 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d1a0; Value = 0xd6990624d6990624; PC = 0x55555555c75a *)
adds dc ymm6_0 ymm6_0 L0x55555555d1a0; adds dc ymm6_1 ymm6_1 L0x55555555d1a4;
adds dc ymm6_2 ymm6_2 L0x55555555d1a8; adds dc ymm6_3 ymm6_3 L0x55555555d1ac;
adds dc ymm6_4 ymm6_4 L0x55555555d1b0; adds dc ymm6_5 ymm6_5 L0x55555555d1b4;
adds dc ymm6_6 ymm6_6 L0x55555555d1b8; adds dc ymm6_7 ymm6_7 L0x55555555d1bc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c75f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555c763 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c769 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555c76d *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555c773 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555c778 *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c77d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555c781 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c787 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555c78b *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c791 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555c795 *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555c79a *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c79e *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555c7a2 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555c7a8 *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c7ae *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c7b2 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555c7b6 *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555c7ba *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555c7c4 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555c7ca *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c7ce *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7d2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c7da *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555c7de *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rbx),%ymm6                        #! EA = L0x7fffffffd8e0; Value = 0xb7ff4640b7ff4640; PC = 0x55555555c7e2 *)
mov ymm6_0 L0x7fffffffd8e0; mov ymm6_1 L0x7fffffffd8e4;
mov ymm6_2 L0x7fffffffd8e8; mov ymm6_3 L0x7fffffffd8ec;
mov ymm6_4 L0x7fffffffd8f0; mov ymm6_5 L0x7fffffffd8f4;
mov ymm6_6 L0x7fffffffd8f8; mov ymm6_7 L0x7fffffffd8fc;
(* vpaddd 0x60(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7e0; Value = 0xba9bac76ba9bac76; PC = 0x55555555c7e7 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c7ec *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c7f1 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c7f6 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c7ff *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c804 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c808 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rbx),%ymm0                            #! EA = L0x7fffffffd880; Value = 0x68ea39c368ea39c3; PC = 0x55555555c80d *)
mov ymm0_0 L0x7fffffffd880; mov ymm0_1 L0x7fffffffd884;
mov ymm0_2 L0x7fffffffd888; mov ymm0_3 L0x7fffffffd88c;
mov ymm0_4 L0x7fffffffd890; mov ymm0_5 L0x7fffffffd894;
mov ymm0_6 L0x7fffffffd898; mov ymm0_7 L0x7fffffffd89c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c811 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c816 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c81a *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c81f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c823 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c828 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c82c *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c830 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c835 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c839 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c83e *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c842 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c846 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555c84a *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555c850 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rbx)                        #! EA = L0x7fffffffd8c0; PC = 0x55555555c856 *)
mov L0x7fffffffd8c0 ymm5_0; mov L0x7fffffffd8c4 ymm5_1;
mov L0x7fffffffd8c8 ymm5_2; mov L0x7fffffffd8cc ymm5_3;
mov L0x7fffffffd8d0 ymm5_4; mov L0x7fffffffd8d4 ymm5_5;
mov L0x7fffffffd8d8 ymm5_6; mov L0x7fffffffd8dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555c85b *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555c860 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c866 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555c86a *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555d1c0; Value = 0xf40e3585f40e3585; PC = 0x55555555c870 *)
adds dc ymm5_0 ymm5_0 L0x55555555d1c0; adds dc ymm5_1 ymm5_1 L0x55555555d1c4;
adds dc ymm5_2 ymm5_2 L0x55555555d1c8; adds dc ymm5_3 ymm5_3 L0x55555555d1cc;
adds dc ymm5_4 ymm5_4 L0x55555555d1d0; adds dc ymm5_5 ymm5_5 L0x55555555d1d4;
adds dc ymm5_6 ymm5_6 L0x55555555d1d8; adds dc ymm5_7 ymm5_7 L0x55555555d1dc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c875 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555c879 *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c87f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555c883 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555c889 *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555c88e *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c893 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555c897 *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c89d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555c8a1 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c8a7 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555c8ab *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555c8b0 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c8b4 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555c8b8 *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c8be *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c8c4 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c8c8 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c8cc *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c8d0 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c8da *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c8e0 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c8e4 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c8e8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8ec *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c8f0 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c8f4 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rax),%ymm5                       #! EA = L0x7fffffffd700; Value = 0x528ad2af528ad2af; PC = 0x55555555c8f8 *)
mov ymm5_0 L0x7fffffffd700; mov ymm5_1 L0x7fffffffd704;
mov ymm5_2 L0x7fffffffd708; mov ymm5_3 L0x7fffffffd70c;
mov ymm5_4 L0x7fffffffd710; mov ymm5_5 L0x7fffffffd714;
mov ymm5_6 L0x7fffffffd718; mov ymm5_7 L0x7fffffffd71c;
(* vpaddd -0x80(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd800; Value = 0x3dbb53ee3dbb53ee; PC = 0x55555555c8fd *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd800; adds dc ymm6_1 ymm6_1 L0x7fffffffd804;
adds dc ymm6_2 ymm6_2 L0x7fffffffd808; adds dc ymm6_3 ymm6_3 L0x7fffffffd80c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd810; adds dc ymm6_5 ymm6_5 L0x7fffffffd814;
adds dc ymm6_6 ymm6_6 L0x7fffffffd818; adds dc ymm6_7 ymm6_7 L0x7fffffffd81c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c902 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c907 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c90c *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c911 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c915 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c91a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c91e *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rbx),%ymm0                        #! EA = L0x7fffffffd8a0; Value = 0x54dd515a54dd515a; PC = 0x55555555c923 *)
mov ymm0_0 L0x7fffffffd8a0; mov ymm0_1 L0x7fffffffd8a4;
mov ymm0_2 L0x7fffffffd8a8; mov ymm0_3 L0x7fffffffd8ac;
mov ymm0_4 L0x7fffffffd8b0; mov ymm0_5 L0x7fffffffd8b4;
mov ymm0_6 L0x7fffffffd8b8; mov ymm0_7 L0x7fffffffd8bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c928 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c92d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c931 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c936 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c93a *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c93f *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c943 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c947 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c94c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c950 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c955 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c959 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c95d *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c961 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c967 *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rbx)                        #! EA = L0x7fffffffd8e0; PC = 0x55555555c96d *)
mov L0x7fffffffd8e0 ymm6_0; mov L0x7fffffffd8e4 ymm6_1;
mov L0x7fffffffd8e8 ymm6_2; mov L0x7fffffffd8ec ymm6_3;
mov L0x7fffffffd8f0 ymm6_4; mov L0x7fffffffd8f4 ymm6_5;
mov L0x7fffffffd8f8 ymm6_6; mov L0x7fffffffd8fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c972 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c977 *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c97d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c981 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d1e0; Value = 0x106aa070106aa070; PC = 0x55555555c987 *)
adds dc ymm6_0 ymm6_0 L0x55555555d1e0; adds dc ymm6_1 ymm6_1 L0x55555555d1e4;
adds dc ymm6_2 ymm6_2 L0x55555555d1e8; adds dc ymm6_3 ymm6_3 L0x55555555d1ec;
adds dc ymm6_4 ymm6_4 L0x55555555d1f0; adds dc ymm6_5 ymm6_5 L0x55555555d1f4;
adds dc ymm6_6 ymm6_6 L0x55555555d1f8; adds dc ymm6_7 ymm6_7 L0x55555555d1fc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c98c *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c990 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c996 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c99a *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c9a0 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c9a5 *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9aa *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c9ae *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9b4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c9b8 *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c9be *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c9c2 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c9c7 *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c9cb *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c9cf *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c9d5 *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c9db *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c9df *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c9e3 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c9e7 *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c9f1 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c9f7 *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c9fb *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9ff *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ca03 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555ca07 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555ca0b *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555ca0f *)
(* add 0x100, rbp *)
nop;
(* dec    %ecx                                     #! PC = 0x55555555ca16 *)
(* dec ecx *)
nop;
(* #jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! PC = 0x55555555ca18 *)
#jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! 0x55555555ca18 = 0x55555555ca18;
(* vmovdqu -0x60(%rax),%ymm6                       #! EA = L0x7fffffffd720; Value = 0x3e1198e03e1198e0; PC = 0x55555555b8a0 *)
mov ymm6_0 L0x7fffffffd720; mov ymm6_1 L0x7fffffffd724;
mov ymm6_2 L0x7fffffffd728; mov ymm6_3 L0x7fffffffd72c;
mov ymm6_4 L0x7fffffffd730; mov ymm6_5 L0x7fffffffd734;
mov ymm6_6 L0x7fffffffd738; mov ymm6_7 L0x7fffffffd73c;
(* vpaddd -0x60(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd820; Value = 0xff244931ff244931; PC = 0x55555555b8a5 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd820; adds dc ymm5_1 ymm5_1 L0x7fffffffd824;
adds dc ymm5_2 ymm5_2 L0x7fffffffd828; adds dc ymm5_3 ymm5_3 L0x7fffffffd82c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd830; adds dc ymm5_5 ymm5_5 L0x7fffffffd834;
adds dc ymm5_6 ymm5_6 L0x7fffffffd838; adds dc ymm5_7 ymm5_7 L0x7fffffffd83c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555b8aa *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555b8af *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555b8b4 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8b9 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555b8bd *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555b8c6 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rbx),%ymm0                        #! EA = L0x7fffffffd8c0; Value = 0x71176fd571176fd5; PC = 0x55555555b8cb *)
mov ymm0_0 L0x7fffffffd8c0; mov ymm0_1 L0x7fffffffd8c4;
mov ymm0_2 L0x7fffffffd8c8; mov ymm0_3 L0x7fffffffd8cc;
mov ymm0_4 L0x7fffffffd8d0; mov ymm0_5 L0x7fffffffd8d4;
mov ymm0_6 L0x7fffffffd8d8; mov ymm0_7 L0x7fffffffd8dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555b8d0 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8d5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b8d9 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8de *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b8e2 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b8e7 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555b8eb *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555b8ef *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b8f4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555b8f8 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b8fd *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b901 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b905 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555b909 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555b90f *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rax)                       #! EA = L0x7fffffffd700; PC = 0x55555555b915 *)
mov L0x7fffffffd700 ymm5_0; mov L0x7fffffffd704 ymm5_1;
mov L0x7fffffffd708 ymm5_2; mov L0x7fffffffd70c ymm5_3;
mov L0x7fffffffd710 ymm5_4; mov L0x7fffffffd714 ymm5_5;
mov L0x7fffffffd718 ymm5_6; mov L0x7fffffffd71c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555b91a *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555b91f *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b925 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555b929 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d200; Value = 0x19a4c11619a4c116; PC = 0x55555555b92f *)
adds dc ymm5_0 ymm5_0 L0x55555555d200; adds dc ymm5_1 ymm5_1 L0x55555555d204;
adds dc ymm5_2 ymm5_2 L0x55555555d208; adds dc ymm5_3 ymm5_3 L0x55555555d20c;
adds dc ymm5_4 ymm5_4 L0x55555555d210; adds dc ymm5_5 ymm5_5 L0x55555555d214;
adds dc ymm5_6 ymm5_6 L0x55555555d218; adds dc ymm5_7 ymm5_7 L0x55555555d21c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b934 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555b938 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b93e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555b942 *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555b948 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555b94d *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b952 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555b956 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b95c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555b960 *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555b966 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555b96a *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555b96f *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555b973 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555b977 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555b97d *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555b983 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555b987 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555b98b *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555b98f *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b995 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555b999 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555b99f *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555b9a3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555b9af *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555b9b3 *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rax),%ymm5                       #! EA = L0x7fffffffd740; Value = 0xc5b05ff6c5b05ff6; PC = 0x55555555b9b7 *)
mov ymm5_0 L0x7fffffffd740; mov ymm5_1 L0x7fffffffd744;
mov ymm5_2 L0x7fffffffd748; mov ymm5_3 L0x7fffffffd74c;
mov ymm5_4 L0x7fffffffd750; mov ymm5_5 L0x7fffffffd754;
mov ymm5_6 L0x7fffffffd758; mov ymm5_7 L0x7fffffffd75c;
(* vpaddd -0x40(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd840; Value = 0x64ee162664ee1626; PC = 0x55555555b9bc *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd840; adds dc ymm6_1 ymm6_1 L0x7fffffffd844;
adds dc ymm6_2 ymm6_2 L0x7fffffffd848; adds dc ymm6_3 ymm6_3 L0x7fffffffd84c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd850; adds dc ymm6_5 ymm6_5 L0x7fffffffd854;
adds dc ymm6_6 ymm6_6 L0x7fffffffd858; adds dc ymm6_7 ymm6_7 L0x7fffffffd85c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555b9c1 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555b9c6 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555b9cb *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9d0 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555b9d4 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9d9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555b9dd *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rbx),%ymm0                        #! EA = L0x7fffffffd8e0; Value = 0xd8ad8d21d8ad8d21; PC = 0x55555555b9e2 *)
mov ymm0_0 L0x7fffffffd8e0; mov ymm0_1 L0x7fffffffd8e4;
mov ymm0_2 L0x7fffffffd8e8; mov ymm0_3 L0x7fffffffd8ec;
mov ymm0_4 L0x7fffffffd8f0; mov ymm0_5 L0x7fffffffd8f4;
mov ymm0_6 L0x7fffffffd8f8; mov ymm0_7 L0x7fffffffd8fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555b9e7 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555b9ec *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555b9f0 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555b9f5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555b9f9 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555b9fe *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555ba02 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555ba06 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba0b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555ba0f *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba14 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba18 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba1c *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555ba20 *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555ba26 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rax)                       #! EA = L0x7fffffffd720; PC = 0x55555555ba2c *)
mov L0x7fffffffd720 ymm6_0; mov L0x7fffffffd724 ymm6_1;
mov L0x7fffffffd728 ymm6_2; mov L0x7fffffffd72c ymm6_3;
mov L0x7fffffffd730 ymm6_4; mov L0x7fffffffd734 ymm6_5;
mov L0x7fffffffd738 ymm6_6; mov L0x7fffffffd73c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555ba31 *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555ba36 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba3c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555ba40 *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d220; Value = 0x1e376c081e376c08; PC = 0x55555555ba46 *)
adds dc ymm6_0 ymm6_0 L0x55555555d220; adds dc ymm6_1 ymm6_1 L0x55555555d224;
adds dc ymm6_2 ymm6_2 L0x55555555d228; adds dc ymm6_3 ymm6_3 L0x55555555d22c;
adds dc ymm6_4 ymm6_4 L0x55555555d230; adds dc ymm6_5 ymm6_5 L0x55555555d234;
adds dc ymm6_6 ymm6_6 L0x55555555d238; adds dc ymm6_7 ymm6_7 L0x55555555d23c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba4b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555ba4f *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba55 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555ba59 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555ba5f *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555ba64 *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555ba69 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555ba6d *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ba73 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555ba77 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555ba7d *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555ba81 *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555ba86 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555ba8a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555ba8e *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555ba94 *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555ba9a *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555ba9e *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555baa2 *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555baa6 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baac *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555bab0 *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555bab6 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555baba *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555babe *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bac2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bac6 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555baca *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rax),%ymm6                       #! EA = L0x7fffffffd760; Value = 0xd6f67228d6f67228; PC = 0x55555555bace *)
mov ymm6_0 L0x7fffffffd760; mov ymm6_1 L0x7fffffffd764;
mov ymm6_2 L0x7fffffffd768; mov ymm6_3 L0x7fffffffd76c;
mov ymm6_4 L0x7fffffffd770; mov ymm6_5 L0x7fffffffd774;
mov ymm6_6 L0x7fffffffd778; mov ymm6_7 L0x7fffffffd77c;
(* vpaddd -0x20(%rbx),%ymm5,%ymm5                  #! EA = L0x7fffffffd860; Value = 0x87b1857987b18579; PC = 0x55555555bad3 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd860; adds dc ymm5_1 ymm5_1 L0x7fffffffd864;
adds dc ymm5_2 ymm5_2 L0x7fffffffd868; adds dc ymm5_3 ymm5_3 L0x7fffffffd86c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd870; adds dc ymm5_5 ymm5_5 L0x7fffffffd874;
adds dc ymm5_6 ymm5_6 L0x7fffffffd878; adds dc ymm5_7 ymm5_7 L0x7fffffffd87c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bad8 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555badd *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bae2 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bae7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555baeb *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555baf0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555baf4 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rax),%ymm0                       #! EA = L0x7fffffffd700; Value = 0x4d418efb4d418efb; PC = 0x55555555baf9 *)
mov ymm0_0 L0x7fffffffd700; mov ymm0_1 L0x7fffffffd704;
mov ymm0_2 L0x7fffffffd708; mov ymm0_3 L0x7fffffffd70c;
mov ymm0_4 L0x7fffffffd710; mov ymm0_5 L0x7fffffffd714;
mov ymm0_6 L0x7fffffffd718; mov ymm0_7 L0x7fffffffd71c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bafe *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb03 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bb07 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb0c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bb10 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb15 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bb19 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bb1d *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb22 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bb26 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb2b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb2f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bb33 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555bb37 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555bb3d *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rax)                       #! EA = L0x7fffffffd740; PC = 0x55555555bb43 *)
mov L0x7fffffffd740 ymm5_0; mov L0x7fffffffd744 ymm5_1;
mov L0x7fffffffd748 ymm5_2; mov L0x7fffffffd74c ymm5_3;
mov L0x7fffffffd750 ymm5_4; mov L0x7fffffffd754 ymm5_5;
mov L0x7fffffffd758 ymm5_6; mov L0x7fffffffd75c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555bb48 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555bb4d *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb53 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555bb57 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d240; Value = 0x2748774c2748774c; PC = 0x55555555bb5d *)
adds dc ymm5_0 ymm5_0 L0x55555555d240; adds dc ymm5_1 ymm5_1 L0x55555555d244;
adds dc ymm5_2 ymm5_2 L0x55555555d248; adds dc ymm5_3 ymm5_3 L0x55555555d24c;
adds dc ymm5_4 ymm5_4 L0x55555555d250; adds dc ymm5_5 ymm5_5 L0x55555555d254;
adds dc ymm5_6 ymm5_6 L0x55555555d258; adds dc ymm5_7 ymm5_7 L0x55555555d25c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb62 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555bb66 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb6c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555bb70 *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555bb76 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555bb7b *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bb80 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555bb84 *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bb8a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555bb8e *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bb94 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555bb98 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555bb9d *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bba1 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555bba5 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555bbab *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bbb1 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bbb5 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555bbb9 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555bbbd *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbc3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555bbc7 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555bbcd *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555bbd1 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbd5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bbd9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555bbdd *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555bbe1 *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rax),%ymm5                            #! EA = L0x7fffffffd780; Value = 0xf5714d7df5714d7d; PC = 0x55555555bbe5 *)
mov ymm5_0 L0x7fffffffd780; mov ymm5_1 L0x7fffffffd784;
mov ymm5_2 L0x7fffffffd788; mov ymm5_3 L0x7fffffffd78c;
mov ymm5_4 L0x7fffffffd790; mov ymm5_5 L0x7fffffffd794;
mov ymm5_6 L0x7fffffffd798; mov ymm5_7 L0x7fffffffd79c;
(* vpaddd (%rbx),%ymm6,%ymm6                       #! EA = L0x7fffffffd880; Value = 0x68ea39c368ea39c3; PC = 0x55555555bbe9 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd880; adds dc ymm6_1 ymm6_1 L0x7fffffffd884;
adds dc ymm6_2 ymm6_2 L0x7fffffffd888; adds dc ymm6_3 ymm6_3 L0x7fffffffd88c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd890; adds dc ymm6_5 ymm6_5 L0x7fffffffd894;
adds dc ymm6_6 ymm6_6 L0x7fffffffd898; adds dc ymm6_7 ymm6_7 L0x7fffffffd89c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555bbed *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555bbf2 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555bbf7 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bbfc *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555bc00 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555bc09 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rax),%ymm0                       #! EA = L0x7fffffffd720; Value = 0xfcc38553fcc38553; PC = 0x55555555bc0e *)
mov ymm0_0 L0x7fffffffd720; mov ymm0_1 L0x7fffffffd724;
mov ymm0_2 L0x7fffffffd728; mov ymm0_3 L0x7fffffffd72c;
mov ymm0_4 L0x7fffffffd730; mov ymm0_5 L0x7fffffffd734;
mov ymm0_6 L0x7fffffffd738; mov ymm0_7 L0x7fffffffd73c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555bc13 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc18 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bc1c *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc21 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bc25 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc2a *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555bc2e *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bc32 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc37 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bc3b *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc44 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bc48 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555bc4c *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555bc52 *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rax)                       #! EA = L0x7fffffffd760; PC = 0x55555555bc58 *)
mov L0x7fffffffd760 ymm6_0; mov L0x7fffffffd764 ymm6_1;
mov L0x7fffffffd768 ymm6_2; mov L0x7fffffffd76c ymm6_3;
mov L0x7fffffffd770 ymm6_4; mov L0x7fffffffd774 ymm6_5;
mov L0x7fffffffd778 ymm6_6; mov L0x7fffffffd77c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555bc5d *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555bc62 *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc68 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555bc6c *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d260; Value = 0x34b0bcb534b0bcb5; PC = 0x55555555bc72 *)
adds dc ymm6_0 ymm6_0 L0x55555555d260; adds dc ymm6_1 ymm6_1 L0x55555555d264;
adds dc ymm6_2 ymm6_2 L0x55555555d268; adds dc ymm6_3 ymm6_3 L0x55555555d26c;
adds dc ymm6_4 ymm6_4 L0x55555555d270; adds dc ymm6_5 ymm6_5 L0x55555555d274;
adds dc ymm6_6 ymm6_6 L0x55555555d278; adds dc ymm6_7 ymm6_7 L0x55555555d27c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc77 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555bc7b *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc81 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555bc85 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555bc8b *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555bc90 *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bc95 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555bc99 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bc9f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555bca3 *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bca9 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555bcad *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555bcb2 *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bcb6 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555bcba *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555bcc0 *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bcc6 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bcca *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555bcce *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555bcd2 *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcd8 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555bcdc *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555bce2 *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555bce6 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bcea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bcee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555bcf2 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555bcf6 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rax),%ymm6                        #! EA = L0x7fffffffd7a0; Value = 0x0ed1cd750ed1cd75; PC = 0x55555555bcfa *)
mov ymm6_0 L0x7fffffffd7a0; mov ymm6_1 L0x7fffffffd7a4;
mov ymm6_2 L0x7fffffffd7a8; mov ymm6_3 L0x7fffffffd7ac;
mov ymm6_4 L0x7fffffffd7b0; mov ymm6_5 L0x7fffffffd7b4;
mov ymm6_6 L0x7fffffffd7b8; mov ymm6_7 L0x7fffffffd7bc;
(* vpaddd 0x20(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8a0; Value = 0x54dd515a54dd515a; PC = 0x55555555bcff *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bd04 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bd09 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bd0e *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd13 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bd17 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd1c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bd20 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rax),%ymm0                       #! EA = L0x7fffffffd740; Value = 0x1c0c9bf61c0c9bf6; PC = 0x55555555bd25 *)
mov ymm0_0 L0x7fffffffd740; mov ymm0_1 L0x7fffffffd744;
mov ymm0_2 L0x7fffffffd748; mov ymm0_3 L0x7fffffffd74c;
mov ymm0_4 L0x7fffffffd750; mov ymm0_5 L0x7fffffffd754;
mov ymm0_6 L0x7fffffffd758; mov ymm0_7 L0x7fffffffd75c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bd2a *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd2f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bd33 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd38 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bd3c *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd41 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bd45 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bd49 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bd52 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd57 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd5b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bd5f *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555bd63 *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555bd69 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rax)                            #! EA = L0x7fffffffd780; PC = 0x55555555bd6f *)
mov L0x7fffffffd780 ymm5_0; mov L0x7fffffffd784 ymm5_1;
mov L0x7fffffffd788 ymm5_2; mov L0x7fffffffd78c ymm5_3;
mov L0x7fffffffd790 ymm5_4; mov L0x7fffffffd794 ymm5_5;
mov L0x7fffffffd798 ymm5_6; mov L0x7fffffffd79c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555bd73 *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555bd78 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd7e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555bd82 *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555d280; Value = 0x391c0cb3391c0cb3; PC = 0x55555555bd88 *)
adds dc ymm5_0 ymm5_0 L0x55555555d280; adds dc ymm5_1 ymm5_1 L0x55555555d284;
adds dc ymm5_2 ymm5_2 L0x55555555d288; adds dc ymm5_3 ymm5_3 L0x55555555d28c;
adds dc ymm5_4 ymm5_4 L0x55555555d290; adds dc ymm5_5 ymm5_5 L0x55555555d294;
adds dc ymm5_6 ymm5_6 L0x55555555d298; adds dc ymm5_7 ymm5_7 L0x55555555d29c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bd8d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555bd91 *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bd97 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555bd9b *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555bda1 *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555bda6 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bdab *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555bdaf *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdb5 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555bdb9 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bdbf *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555bdc3 *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555bdc8 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bdcc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555bdd0 *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555bdd6 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555bddc *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555bde0 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555bde4 *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555bde8 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bdee *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555bdf2 *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555bdf8 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555bdfc *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be00 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be04 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555be08 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555be0c *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rax),%ymm5                        #! EA = L0x7fffffffd7c0; Value = 0xa63d12b6a63d12b6; PC = 0x55555555be10 *)
mov ymm5_0 L0x7fffffffd7c0; mov ymm5_1 L0x7fffffffd7c4;
mov ymm5_2 L0x7fffffffd7c8; mov ymm5_3 L0x7fffffffd7cc;
mov ymm5_4 L0x7fffffffd7d0; mov ymm5_5 L0x7fffffffd7d4;
mov ymm5_6 L0x7fffffffd7d8; mov ymm5_7 L0x7fffffffd7dc;
(* vpaddd 0x40(%rbx),%ymm6,%ymm6                   #! EA = L0x7fffffffd8c0; Value = 0x71176fd571176fd5; PC = 0x55555555be15 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd8c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd8c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd8c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd8cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd8d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd8d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd8d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd8dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555be1a *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555be1f *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555be24 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be29 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555be2d *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be32 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555be36 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rax),%ymm0                       #! EA = L0x7fffffffd760; Value = 0xa839136ca839136c; PC = 0x55555555be3b *)
mov ymm0_0 L0x7fffffffd760; mov ymm0_1 L0x7fffffffd764;
mov ymm0_2 L0x7fffffffd768; mov ymm0_3 L0x7fffffffd76c;
mov ymm0_4 L0x7fffffffd770; mov ymm0_5 L0x7fffffffd774;
mov ymm0_6 L0x7fffffffd778; mov ymm0_7 L0x7fffffffd77c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555be40 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be45 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555be49 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be4e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555be52 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be57 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555be5b *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555be5f *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555be68 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555be6d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be71 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555be75 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555be79 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555be7f *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rax)                        #! EA = L0x7fffffffd7a0; PC = 0x55555555be85 *)
mov L0x7fffffffd7a0 ymm6_0; mov L0x7fffffffd7a4 ymm6_1;
mov L0x7fffffffd7a8 ymm6_2; mov L0x7fffffffd7ac ymm6_3;
mov L0x7fffffffd7b0 ymm6_4; mov L0x7fffffffd7b4 ymm6_5;
mov L0x7fffffffd7b8 ymm6_6; mov L0x7fffffffd7bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555be8a *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555be8f *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555be95 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555be99 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d2a0; Value = 0x4ed8aa4a4ed8aa4a; PC = 0x55555555be9f *)
adds dc ymm6_0 ymm6_0 L0x55555555d2a0; adds dc ymm6_1 ymm6_1 L0x55555555d2a4;
adds dc ymm6_2 ymm6_2 L0x55555555d2a8; adds dc ymm6_3 ymm6_3 L0x55555555d2ac;
adds dc ymm6_4 ymm6_4 L0x55555555d2b0; adds dc ymm6_5 ymm6_5 L0x55555555d2b4;
adds dc ymm6_6 ymm6_6 L0x55555555d2b8; adds dc ymm6_7 ymm6_7 L0x55555555d2bc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bea4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555bea8 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555beae *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555beb2 *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555beb8 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555bebd *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bec2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555bec6 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555becc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555bed0 *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555bed6 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555beda *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555bedf *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555bee3 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555bee7 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555beed *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555bef3 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555bef7 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555befb *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555beff *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf05 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555bf09 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555bf0f *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555bf13 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf17 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf1b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555bf1f *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555bf23 *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rax),%ymm6                        #! EA = L0x7fffffffd7e0; Value = 0xba9bac76ba9bac76; PC = 0x55555555bf27 *)
mov ymm6_0 L0x7fffffffd7e0; mov ymm6_1 L0x7fffffffd7e4;
mov ymm6_2 L0x7fffffffd7e8; mov ymm6_3 L0x7fffffffd7ec;
mov ymm6_4 L0x7fffffffd7f0; mov ymm6_5 L0x7fffffffd7f4;
mov ymm6_6 L0x7fffffffd7f8; mov ymm6_7 L0x7fffffffd7fc;
(* vpaddd 0x60(%rbx),%ymm5,%ymm5                   #! EA = L0x7fffffffd8e0; Value = 0xd8ad8d21d8ad8d21; PC = 0x55555555bf2c *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd8e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd8e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd8e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd8ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd8f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd8f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd8f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd8fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555bf31 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555bf36 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555bf3b *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf40 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555bf44 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf49 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555bf4d *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rax),%ymm0                            #! EA = L0x7fffffffd780; Value = 0xc16c46f8c16c46f8; PC = 0x55555555bf52 *)
mov ymm0_0 L0x7fffffffd780; mov ymm0_1 L0x7fffffffd784;
mov ymm0_2 L0x7fffffffd788; mov ymm0_3 L0x7fffffffd78c;
mov ymm0_4 L0x7fffffffd790; mov ymm0_5 L0x7fffffffd794;
mov ymm0_6 L0x7fffffffd798; mov ymm0_7 L0x7fffffffd79c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555bf56 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf5b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555bf5f *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf64 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555bf68 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf6d *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555bf71 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555bf75 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf7a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555bf7e *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bf83 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bf87 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bf8b *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555bf8f *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555bf95 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rax)                        #! EA = L0x7fffffffd7c0; PC = 0x55555555bf9b *)
mov L0x7fffffffd7c0 ymm5_0; mov L0x7fffffffd7c4 ymm5_1;
mov L0x7fffffffd7c8 ymm5_2; mov L0x7fffffffd7cc ymm5_3;
mov L0x7fffffffd7d0 ymm5_4; mov L0x7fffffffd7d4 ymm5_5;
mov L0x7fffffffd7d8 ymm5_6; mov L0x7fffffffd7dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555bfa0 *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555bfa5 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555bfaf *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555d2c0; Value = 0x5b9cca4f5b9cca4f; PC = 0x55555555bfb5 *)
adds dc ymm5_0 ymm5_0 L0x55555555d2c0; adds dc ymm5_1 ymm5_1 L0x55555555d2c4;
adds dc ymm5_2 ymm5_2 L0x55555555d2c8; adds dc ymm5_3 ymm5_3 L0x55555555d2cc;
adds dc ymm5_4 ymm5_4 L0x55555555d2d0; adds dc ymm5_5 ymm5_5 L0x55555555d2d4;
adds dc ymm5_6 ymm5_6 L0x55555555d2d8; adds dc ymm5_7 ymm5_7 L0x55555555d2dc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfba *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555bfbe *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfc4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555bfc8 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555bfce *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555bfd3 *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555bfd8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555bfdc *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555bfe2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555bfe6 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555bfec *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555bff0 *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555bff5 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555bff9 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555bffd *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c003 *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c009 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c00d *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c011 *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c015 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c01b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c01f *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c025 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c029 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c02d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c031 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c035 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c039 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rbx),%ymm5                       #! EA = L0x7fffffffd800; Value = 0x3dbb53ee3dbb53ee; PC = 0x55555555c03d *)
mov ymm5_0 L0x7fffffffd800; mov ymm5_1 L0x7fffffffd804;
mov ymm5_2 L0x7fffffffd808; mov ymm5_3 L0x7fffffffd80c;
mov ymm5_4 L0x7fffffffd810; mov ymm5_5 L0x7fffffffd814;
mov ymm5_6 L0x7fffffffd818; mov ymm5_7 L0x7fffffffd81c;
(* vpaddd -0x80(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd700; Value = 0x4d418efb4d418efb; PC = 0x55555555c042 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd700; adds dc ymm6_1 ymm6_1 L0x7fffffffd704;
adds dc ymm6_2 ymm6_2 L0x7fffffffd708; adds dc ymm6_3 ymm6_3 L0x7fffffffd70c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd710; adds dc ymm6_5 ymm6_5 L0x7fffffffd714;
adds dc ymm6_6 ymm6_6 L0x7fffffffd718; adds dc ymm6_7 ymm6_7 L0x7fffffffd71c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c047 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c04c *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c051 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c056 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c05a *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c05f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c063 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rax),%ymm0                        #! EA = L0x7fffffffd7a0; Value = 0x69017ea569017ea5; PC = 0x55555555c068 *)
mov ymm0_0 L0x7fffffffd7a0; mov ymm0_1 L0x7fffffffd7a4;
mov ymm0_2 L0x7fffffffd7a8; mov ymm0_3 L0x7fffffffd7ac;
mov ymm0_4 L0x7fffffffd7b0; mov ymm0_5 L0x7fffffffd7b4;
mov ymm0_6 L0x7fffffffd7b8; mov ymm0_7 L0x7fffffffd7bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c06d *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c072 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c076 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c07b *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c07f *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c084 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c088 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c08c *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c091 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c095 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c09a *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c09e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c0a2 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c0a6 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c0ac *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rax)                        #! EA = L0x7fffffffd7e0; PC = 0x55555555c0b2 *)
mov L0x7fffffffd7e0 ymm6_0; mov L0x7fffffffd7e4 ymm6_1;
mov L0x7fffffffd7e8 ymm6_2; mov L0x7fffffffd7ec ymm6_3;
mov L0x7fffffffd7f0 ymm6_4; mov L0x7fffffffd7f4 ymm6_5;
mov L0x7fffffffd7f8 ymm6_6; mov L0x7fffffffd7fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c0b7 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c0bc *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0c2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c0c6 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d2e0; Value = 0x682e6ff3682e6ff3; PC = 0x55555555c0cc *)
adds dc ymm6_0 ymm6_0 L0x55555555d2e0; adds dc ymm6_1 ymm6_1 L0x55555555d2e4;
adds dc ymm6_2 ymm6_2 L0x55555555d2e8; adds dc ymm6_3 ymm6_3 L0x55555555d2ec;
adds dc ymm6_4 ymm6_4 L0x55555555d2f0; adds dc ymm6_5 ymm6_5 L0x55555555d2f4;
adds dc ymm6_6 ymm6_6 L0x55555555d2f8; adds dc ymm6_7 ymm6_7 L0x55555555d2fc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0d1 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c0d5 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0db *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c0df *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c0e5 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c0ea *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c0ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c0f3 *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c0f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c0fd *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c103 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c107 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c10c *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c110 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c114 *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c11a *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c120 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c124 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c128 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c12c *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c132 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c136 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c13c *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c140 *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c144 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c148 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c14c *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555c150 *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555c154 *)
(* add 0x100, rbp *)
nop;
(* vmovdqu -0x60(%rbx),%ymm6                       #! EA = L0x7fffffffd820; Value = 0xff244931ff244931; PC = 0x55555555c15b *)
mov ymm6_0 L0x7fffffffd820; mov ymm6_1 L0x7fffffffd824;
mov ymm6_2 L0x7fffffffd828; mov ymm6_3 L0x7fffffffd82c;
mov ymm6_4 L0x7fffffffd830; mov ymm6_5 L0x7fffffffd834;
mov ymm6_6 L0x7fffffffd838; mov ymm6_7 L0x7fffffffd83c;
(* vpaddd -0x60(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd720; Value = 0xfcc38553fcc38553; PC = 0x55555555c160 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd720; adds dc ymm5_1 ymm5_1 L0x7fffffffd724;
adds dc ymm5_2 ymm5_2 L0x7fffffffd728; adds dc ymm5_3 ymm5_3 L0x7fffffffd72c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd730; adds dc ymm5_5 ymm5_5 L0x7fffffffd734;
adds dc ymm5_6 ymm5_6 L0x7fffffffd738; adds dc ymm5_7 ymm5_7 L0x7fffffffd73c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c165 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c16a *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c16f *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c174 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c178 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c17d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c181 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x40(%rax),%ymm0                        #! EA = L0x7fffffffd7c0; Value = 0x3bb9afd13bb9afd1; PC = 0x55555555c186 *)
mov ymm0_0 L0x7fffffffd7c0; mov ymm0_1 L0x7fffffffd7c4;
mov ymm0_2 L0x7fffffffd7c8; mov ymm0_3 L0x7fffffffd7cc;
mov ymm0_4 L0x7fffffffd7d0; mov ymm0_5 L0x7fffffffd7d4;
mov ymm0_6 L0x7fffffffd7d8; mov ymm0_7 L0x7fffffffd7dc;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c18b *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c190 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c194 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c199 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c19d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1a2 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c1a6 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c1aa *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1af *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c1b3 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1b8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1bc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c1c0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm12,%ymm7                        #! PC = 0x55555555c1c4 *)
split ymm7_0 dc ymm12_0 0x6; split ymm7_1 dc ymm12_1 0x6;
split ymm7_2 dc ymm12_2 0x6; split ymm7_3 dc ymm12_3 0x6;
split ymm7_4 dc ymm12_4 0x6; split ymm7_5 dc ymm12_5 0x6;
split ymm7_6 dc ymm12_6 0x6; split ymm7_7 dc ymm12_7 0x6;
(* vpslld $0x1a,%ymm12,%ymm2                       #! PC = 0x55555555c1ca *)
split dc ymm2_0 ymm12_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm12_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm12_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm12_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm12_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm12_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm12_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm12_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x80(%rbx)                       #! EA = L0x7fffffffd800; PC = 0x55555555c1d0 *)
mov L0x7fffffffd800 ymm5_0; mov L0x7fffffffd804 ymm5_1;
mov L0x7fffffffd808 ymm5_2; mov L0x7fffffffd80c ymm5_3;
mov L0x7fffffffd810 ymm5_4; mov L0x7fffffffd814 ymm5_5;
mov L0x7fffffffd818 ymm5_6; mov L0x7fffffffd81c ymm5_7;
(* vpaddd %ymm15,%ymm5,%ymm5                       #! PC = 0x55555555c1d5 *)
adds dc ymm5_0 ymm5_0 ymm15_0; adds dc ymm5_1 ymm5_1 ymm15_1;
adds dc ymm5_2 ymm5_2 ymm15_2; adds dc ymm5_3 ymm5_3 ymm15_3;
adds dc ymm5_4 ymm5_4 ymm15_4; adds dc ymm5_5 ymm5_5 ymm15_5;
adds dc ymm5_6 ymm5_6 ymm15_6; adds dc ymm5_7 ymm5_7 ymm15_7;
(* vpsrld $0xb,%ymm12,%ymm1                        #! PC = 0x55555555c1da *)
split ymm1_0 dc ymm12_0 0xb; split ymm1_1 dc ymm12_1 0xb;
split ymm1_2 dc ymm12_2 0xb; split ymm1_3 dc ymm12_3 0xb;
split ymm1_4 dc ymm12_4 0xb; split ymm1_5 dc ymm12_5 0xb;
split ymm1_6 dc ymm12_6 0xb; split ymm1_7 dc ymm12_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1e0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm12,%ymm2                       #! PC = 0x55555555c1e4 *)
split dc ymm2_0 ymm12_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm12_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm12_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm12_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm12_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm12_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm12_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm12_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x80(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d300; Value = 0x748f82ee748f82ee; PC = 0x55555555c1ea *)
adds dc ymm5_0 ymm5_0 L0x55555555d300; adds dc ymm5_1 ymm5_1 L0x55555555d304;
adds dc ymm5_2 ymm5_2 L0x55555555d308; adds dc ymm5_3 ymm5_3 L0x55555555d30c;
adds dc ymm5_4 ymm5_4 L0x55555555d310; adds dc ymm5_5 ymm5_5 L0x55555555d314;
adds dc ymm5_6 ymm5_6 L0x55555555d318; adds dc ymm5_7 ymm5_7 L0x55555555d31c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c1ef *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm12,%ymm1                       #! PC = 0x55555555c1f3 *)
split ymm1_0 dc ymm12_0 0x19; split ymm1_1 dc ymm12_1 0x19;
split ymm1_2 dc ymm12_2 0x19; split ymm1_3 dc ymm12_3 0x19;
split ymm1_4 dc ymm12_4 0x19; split ymm1_5 dc ymm12_5 0x19;
split ymm1_6 dc ymm12_6 0x19; split ymm1_7 dc ymm12_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c1f9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm12,%ymm2                        #! PC = 0x55555555c1fd *)
split dc ymm2_0 ymm12_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm12_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm12_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm12_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm12_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm12_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm12_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm12_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm14,%ymm12,%ymm0                      #! PC = 0x55555555c203 *)
not ymm12_0n@uint32 ymm12_0; and ymm0_0@uint32 ymm12_0n ymm14_0;
not ymm12_1n@uint32 ymm12_1; and ymm0_1@uint32 ymm12_1n ymm14_1;
not ymm12_2n@uint32 ymm12_2; and ymm0_2@uint32 ymm12_2n ymm14_2;
not ymm12_3n@uint32 ymm12_3; and ymm0_3@uint32 ymm12_3n ymm14_3;
not ymm12_4n@uint32 ymm12_4; and ymm0_4@uint32 ymm12_4n ymm14_4;
not ymm12_5n@uint32 ymm12_5; and ymm0_5@uint32 ymm12_5n ymm14_5;
not ymm12_6n@uint32 ymm12_6; and ymm0_6@uint32 ymm12_6n ymm14_6;
not ymm12_7n@uint32 ymm12_7; and ymm0_7@uint32 ymm12_7n ymm14_7;
(* vpand  %ymm13,%ymm12,%ymm3                      #! PC = 0x55555555c208 *)
and ymm3_0@uint32 ymm12_0 ymm13_0; and ymm3_1@uint32 ymm12_1 ymm13_1;
and ymm3_2@uint32 ymm12_2 ymm13_2; and ymm3_3@uint32 ymm12_3 ymm13_3;
and ymm3_4@uint32 ymm12_4 ymm13_4; and ymm3_5@uint32 ymm12_5 ymm13_5;
and ymm3_6@uint32 ymm12_6 ymm13_6; and ymm3_7@uint32 ymm12_7 ymm13_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c20d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm8,%ymm15                        #! PC = 0x55555555c211 *)
split ymm15_0 dc ymm8_0 0x2; split ymm15_1 dc ymm8_1 0x2;
split ymm15_2 dc ymm8_2 0x2; split ymm15_3 dc ymm8_3 0x2;
split ymm15_4 dc ymm8_4 0x2; split ymm15_5 dc ymm8_5 0x2;
split ymm15_6 dc ymm8_6 0x2; split ymm15_7 dc ymm8_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c217 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm8,%ymm1                        #! PC = 0x55555555c21b *)
split dc ymm1_0 ymm8_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm8_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm8_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm8_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm8_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm8_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm8_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm8_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c221 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm8,%ymm9,%ymm3                        #! PC = 0x55555555c225 *)
xor ymm3_0@uint32 ymm9_0 ymm8_0; xor ymm3_1@uint32 ymm9_1 ymm8_1;
xor ymm3_2@uint32 ymm9_2 ymm8_2; xor ymm3_3@uint32 ymm9_3 ymm8_3;
xor ymm3_4@uint32 ymm9_4 ymm8_4; xor ymm3_5@uint32 ymm9_5 ymm8_5;
xor ymm3_6@uint32 ymm9_6 ymm8_6; xor ymm3_7@uint32 ymm9_7 ymm8_7;
(* vpxor  %ymm1,%ymm15,%ymm15                      #! PC = 0x55555555c22a *)
xor ymm15_0@uint32 ymm15_0 ymm1_0; xor ymm15_1@uint32 ymm15_1 ymm1_1;
xor ymm15_2@uint32 ymm15_2 ymm1_2; xor ymm15_3@uint32 ymm15_3 ymm1_3;
xor ymm15_4@uint32 ymm15_4 ymm1_4; xor ymm15_5@uint32 ymm15_5 ymm1_5;
xor ymm15_6@uint32 ymm15_6 ymm1_6; xor ymm15_7@uint32 ymm15_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c22e *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm8,%ymm1                         #! PC = 0x55555555c232 *)
split ymm1_0 dc ymm8_0 0xd; split ymm1_1 dc ymm8_1 0xd;
split ymm1_2 dc ymm8_2 0xd; split ymm1_3 dc ymm8_3 0xd;
split ymm1_4 dc ymm8_4 0xd; split ymm1_5 dc ymm8_5 0xd;
split ymm1_6 dc ymm8_6 0xd; split ymm1_7 dc ymm8_7 0xd;
(* vpslld $0x13,%ymm8,%ymm2                        #! PC = 0x55555555c238 *)
split dc ymm2_0 ymm8_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm8_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm8_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm8_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm8_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm8_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm8_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm8_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c23e *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c242 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm15,%ymm7                       #! PC = 0x55555555c246 *)
xor ymm7_0@uint32 ymm15_0 ymm1_0; xor ymm7_1@uint32 ymm15_1 ymm1_1;
xor ymm7_2@uint32 ymm15_2 ymm1_2; xor ymm7_3@uint32 ymm15_3 ymm1_3;
xor ymm7_4@uint32 ymm15_4 ymm1_4; xor ymm7_5@uint32 ymm15_5 ymm1_5;
xor ymm7_6@uint32 ymm15_6 ymm1_6; xor ymm7_7@uint32 ymm15_7 ymm1_7;
(* vpsrld $0x16,%ymm8,%ymm1                        #! PC = 0x55555555c24a *)
split ymm1_0 dc ymm8_0 0x16; split ymm1_1 dc ymm8_1 0x16;
split ymm1_2 dc ymm8_2 0x16; split ymm1_3 dc ymm8_3 0x16;
split ymm1_4 dc ymm8_4 0x16; split ymm1_5 dc ymm8_5 0x16;
split ymm1_6 dc ymm8_6 0x16; split ymm1_7 dc ymm8_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c250 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm8,%ymm2                         #! PC = 0x55555555c254 *)
split dc ymm2_0 ymm8_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm8_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm8_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm8_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm8_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm8_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm8_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm8_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm9,%ymm15                       #! PC = 0x55555555c25a *)
xor ymm15_0@uint32 ymm9_0 ymm4_0; xor ymm15_1@uint32 ymm9_1 ymm4_1;
xor ymm15_2@uint32 ymm9_2 ymm4_2; xor ymm15_3@uint32 ymm9_3 ymm4_3;
xor ymm15_4@uint32 ymm9_4 ymm4_4; xor ymm15_5@uint32 ymm9_5 ymm4_5;
xor ymm15_6@uint32 ymm9_6 ymm4_6; xor ymm15_7@uint32 ymm9_7 ymm4_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c25e *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c262 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c266 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c26a *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpaddd %ymm7,%ymm15,%ymm15                      #! PC = 0x55555555c26e *)
adds dc ymm15_0 ymm15_0 ymm7_0; adds dc ymm15_1 ymm15_1 ymm7_1;
adds dc ymm15_2 ymm15_2 ymm7_2; adds dc ymm15_3 ymm15_3 ymm7_3;
adds dc ymm15_4 ymm15_4 ymm7_4; adds dc ymm15_5 ymm15_5 ymm7_5;
adds dc ymm15_6 ymm15_6 ymm7_6; adds dc ymm15_7 ymm15_7 ymm7_7;
(* vmovdqu -0x40(%rbx),%ymm5                       #! EA = L0x7fffffffd840; Value = 0x64ee162664ee1626; PC = 0x55555555c272 *)
mov ymm5_0 L0x7fffffffd840; mov ymm5_1 L0x7fffffffd844;
mov ymm5_2 L0x7fffffffd848; mov ymm5_3 L0x7fffffffd84c;
mov ymm5_4 L0x7fffffffd850; mov ymm5_5 L0x7fffffffd854;
mov ymm5_6 L0x7fffffffd858; mov ymm5_7 L0x7fffffffd85c;
(* vpaddd -0x40(%rax),%ymm6,%ymm6                  #! EA = L0x7fffffffd740; Value = 0x1c0c9bf61c0c9bf6; PC = 0x55555555c277 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd740; adds dc ymm6_1 ymm6_1 L0x7fffffffd744;
adds dc ymm6_2 ymm6_2 L0x7fffffffd748; adds dc ymm6_3 ymm6_3 L0x7fffffffd74c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd750; adds dc ymm6_5 ymm6_5 L0x7fffffffd754;
adds dc ymm6_6 ymm6_6 L0x7fffffffd758; adds dc ymm6_7 ymm6_7 L0x7fffffffd75c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c27c *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c281 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c286 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c28b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c28f *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c294 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c298 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x60(%rax),%ymm0                        #! EA = L0x7fffffffd7e0; Value = 0xa7b12924a7b12924; PC = 0x55555555c29d *)
mov ymm0_0 L0x7fffffffd7e0; mov ymm0_1 L0x7fffffffd7e4;
mov ymm0_2 L0x7fffffffd7e8; mov ymm0_3 L0x7fffffffd7ec;
mov ymm0_4 L0x7fffffffd7f0; mov ymm0_5 L0x7fffffffd7f4;
mov ymm0_6 L0x7fffffffd7f8; mov ymm0_7 L0x7fffffffd7fc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c2a2 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2a7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c2ab *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2b0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c2b4 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2b9 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c2bd *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c2c1 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2c6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c2ca *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c2cf *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2d3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c2d7 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm11,%ymm7                        #! PC = 0x55555555c2db *)
split ymm7_0 dc ymm11_0 0x6; split ymm7_1 dc ymm11_1 0x6;
split ymm7_2 dc ymm11_2 0x6; split ymm7_3 dc ymm11_3 0x6;
split ymm7_4 dc ymm11_4 0x6; split ymm7_5 dc ymm11_5 0x6;
split ymm7_6 dc ymm11_6 0x6; split ymm7_7 dc ymm11_7 0x6;
(* vpslld $0x1a,%ymm11,%ymm2                       #! PC = 0x55555555c2e1 *)
split dc ymm2_0 ymm11_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm11_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm11_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm11_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm11_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm11_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm11_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm11_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x60(%rbx)                       #! EA = L0x7fffffffd820; PC = 0x55555555c2e7 *)
mov L0x7fffffffd820 ymm6_0; mov L0x7fffffffd824 ymm6_1;
mov L0x7fffffffd828 ymm6_2; mov L0x7fffffffd82c ymm6_3;
mov L0x7fffffffd830 ymm6_4; mov L0x7fffffffd834 ymm6_5;
mov L0x7fffffffd838 ymm6_6; mov L0x7fffffffd83c ymm6_7;
(* vpaddd %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555c2ec *)
adds dc ymm6_0 ymm6_0 ymm14_0; adds dc ymm6_1 ymm6_1 ymm14_1;
adds dc ymm6_2 ymm6_2 ymm14_2; adds dc ymm6_3 ymm6_3 ymm14_3;
adds dc ymm6_4 ymm6_4 ymm14_4; adds dc ymm6_5 ymm6_5 ymm14_5;
adds dc ymm6_6 ymm6_6 ymm14_6; adds dc ymm6_7 ymm6_7 ymm14_7;
(* vpsrld $0xb,%ymm11,%ymm1                        #! PC = 0x55555555c2f1 *)
split ymm1_0 dc ymm11_0 0xb; split ymm1_1 dc ymm11_1 0xb;
split ymm1_2 dc ymm11_2 0xb; split ymm1_3 dc ymm11_3 0xb;
split ymm1_4 dc ymm11_4 0xb; split ymm1_5 dc ymm11_5 0xb;
split ymm1_6 dc ymm11_6 0xb; split ymm1_7 dc ymm11_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c2f7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm11,%ymm2                       #! PC = 0x55555555c2fb *)
split dc ymm2_0 ymm11_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm11_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm11_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm11_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm11_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm11_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm11_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm11_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x60(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d320; Value = 0x78a5636f78a5636f; PC = 0x55555555c301 *)
adds dc ymm6_0 ymm6_0 L0x55555555d320; adds dc ymm6_1 ymm6_1 L0x55555555d324;
adds dc ymm6_2 ymm6_2 L0x55555555d328; adds dc ymm6_3 ymm6_3 L0x55555555d32c;
adds dc ymm6_4 ymm6_4 L0x55555555d330; adds dc ymm6_5 ymm6_5 L0x55555555d334;
adds dc ymm6_6 ymm6_6 L0x55555555d338; adds dc ymm6_7 ymm6_7 L0x55555555d33c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c306 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm11,%ymm1                       #! PC = 0x55555555c30a *)
split ymm1_0 dc ymm11_0 0x19; split ymm1_1 dc ymm11_1 0x19;
split ymm1_2 dc ymm11_2 0x19; split ymm1_3 dc ymm11_3 0x19;
split ymm1_4 dc ymm11_4 0x19; split ymm1_5 dc ymm11_5 0x19;
split ymm1_6 dc ymm11_6 0x19; split ymm1_7 dc ymm11_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c310 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm11,%ymm2                        #! PC = 0x55555555c314 *)
split dc ymm2_0 ymm11_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm11_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm11_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm11_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm11_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm11_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm11_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm11_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm13,%ymm11,%ymm0                      #! PC = 0x55555555c31a *)
not ymm11_0n@uint32 ymm11_0; and ymm0_0@uint32 ymm11_0n ymm13_0;
not ymm11_1n@uint32 ymm11_1; and ymm0_1@uint32 ymm11_1n ymm13_1;
not ymm11_2n@uint32 ymm11_2; and ymm0_2@uint32 ymm11_2n ymm13_2;
not ymm11_3n@uint32 ymm11_3; and ymm0_3@uint32 ymm11_3n ymm13_3;
not ymm11_4n@uint32 ymm11_4; and ymm0_4@uint32 ymm11_4n ymm13_4;
not ymm11_5n@uint32 ymm11_5; and ymm0_5@uint32 ymm11_5n ymm13_5;
not ymm11_6n@uint32 ymm11_6; and ymm0_6@uint32 ymm11_6n ymm13_6;
not ymm11_7n@uint32 ymm11_7; and ymm0_7@uint32 ymm11_7n ymm13_7;
(* vpand  %ymm12,%ymm11,%ymm4                      #! PC = 0x55555555c31f *)
and ymm4_0@uint32 ymm11_0 ymm12_0; and ymm4_1@uint32 ymm11_1 ymm12_1;
and ymm4_2@uint32 ymm11_2 ymm12_2; and ymm4_3@uint32 ymm11_3 ymm12_3;
and ymm4_4@uint32 ymm11_4 ymm12_4; and ymm4_5@uint32 ymm11_5 ymm12_5;
and ymm4_6@uint32 ymm11_6 ymm12_6; and ymm4_7@uint32 ymm11_7 ymm12_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c324 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm15,%ymm14                       #! PC = 0x55555555c328 *)
split ymm14_0 dc ymm15_0 0x2; split ymm14_1 dc ymm15_1 0x2;
split ymm14_2 dc ymm15_2 0x2; split ymm14_3 dc ymm15_3 0x2;
split ymm14_4 dc ymm15_4 0x2; split ymm14_5 dc ymm15_5 0x2;
split ymm14_6 dc ymm15_6 0x2; split ymm14_7 dc ymm15_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c32e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm15,%ymm1                       #! PC = 0x55555555c332 *)
split dc ymm1_0 ymm15_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm15_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm15_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm15_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm15_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm15_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm15_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm15_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c338 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm15,%ymm8,%ymm4                       #! PC = 0x55555555c33c *)
xor ymm4_0@uint32 ymm8_0 ymm15_0; xor ymm4_1@uint32 ymm8_1 ymm15_1;
xor ymm4_2@uint32 ymm8_2 ymm15_2; xor ymm4_3@uint32 ymm8_3 ymm15_3;
xor ymm4_4@uint32 ymm8_4 ymm15_4; xor ymm4_5@uint32 ymm8_5 ymm15_5;
xor ymm4_6@uint32 ymm8_6 ymm15_6; xor ymm4_7@uint32 ymm8_7 ymm15_7;
(* vpxor  %ymm1,%ymm14,%ymm14                      #! PC = 0x55555555c341 *)
xor ymm14_0@uint32 ymm14_0 ymm1_0; xor ymm14_1@uint32 ymm14_1 ymm1_1;
xor ymm14_2@uint32 ymm14_2 ymm1_2; xor ymm14_3@uint32 ymm14_3 ymm1_3;
xor ymm14_4@uint32 ymm14_4 ymm1_4; xor ymm14_5@uint32 ymm14_5 ymm1_5;
xor ymm14_6@uint32 ymm14_6 ymm1_6; xor ymm14_7@uint32 ymm14_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c345 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm15,%ymm1                        #! PC = 0x55555555c349 *)
split ymm1_0 dc ymm15_0 0xd; split ymm1_1 dc ymm15_1 0xd;
split ymm1_2 dc ymm15_2 0xd; split ymm1_3 dc ymm15_3 0xd;
split ymm1_4 dc ymm15_4 0xd; split ymm1_5 dc ymm15_5 0xd;
split ymm1_6 dc ymm15_6 0xd; split ymm1_7 dc ymm15_7 0xd;
(* vpslld $0x13,%ymm15,%ymm2                       #! PC = 0x55555555c34f *)
split dc ymm2_0 ymm15_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm15_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm15_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm15_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm15_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm15_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm15_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm15_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c355 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c359 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm14,%ymm7                       #! PC = 0x55555555c35d *)
xor ymm7_0@uint32 ymm14_0 ymm1_0; xor ymm7_1@uint32 ymm14_1 ymm1_1;
xor ymm7_2@uint32 ymm14_2 ymm1_2; xor ymm7_3@uint32 ymm14_3 ymm1_3;
xor ymm7_4@uint32 ymm14_4 ymm1_4; xor ymm7_5@uint32 ymm14_5 ymm1_5;
xor ymm7_6@uint32 ymm14_6 ymm1_6; xor ymm7_7@uint32 ymm14_7 ymm1_7;
(* vpsrld $0x16,%ymm15,%ymm1                       #! PC = 0x55555555c361 *)
split ymm1_0 dc ymm15_0 0x16; split ymm1_1 dc ymm15_1 0x16;
split ymm1_2 dc ymm15_2 0x16; split ymm1_3 dc ymm15_3 0x16;
split ymm1_4 dc ymm15_4 0x16; split ymm1_5 dc ymm15_5 0x16;
split ymm1_6 dc ymm15_6 0x16; split ymm1_7 dc ymm15_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c367 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm15,%ymm2                        #! PC = 0x55555555c36b *)
split dc ymm2_0 ymm15_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm15_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm15_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm15_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm15_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm15_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm15_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm15_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm8,%ymm14                       #! PC = 0x55555555c371 *)
xor ymm14_0@uint32 ymm8_0 ymm3_0; xor ymm14_1@uint32 ymm8_1 ymm3_1;
xor ymm14_2@uint32 ymm8_2 ymm3_2; xor ymm14_3@uint32 ymm8_3 ymm3_3;
xor ymm14_4@uint32 ymm8_4 ymm3_4; xor ymm14_5@uint32 ymm8_5 ymm3_5;
xor ymm14_6@uint32 ymm8_6 ymm3_6; xor ymm14_7@uint32 ymm8_7 ymm3_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c375 *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c379 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c37d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c381 *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpaddd %ymm7,%ymm14,%ymm14                      #! PC = 0x55555555c385 *)
adds dc ymm14_0 ymm14_0 ymm7_0; adds dc ymm14_1 ymm14_1 ymm7_1;
adds dc ymm14_2 ymm14_2 ymm7_2; adds dc ymm14_3 ymm14_3 ymm7_3;
adds dc ymm14_4 ymm14_4 ymm7_4; adds dc ymm14_5 ymm14_5 ymm7_5;
adds dc ymm14_6 ymm14_6 ymm7_6; adds dc ymm14_7 ymm14_7 ymm7_7;
(* vmovdqu -0x20(%rbx),%ymm6                       #! EA = L0x7fffffffd860; Value = 0x87b1857987b18579; PC = 0x55555555c389 *)
mov ymm6_0 L0x7fffffffd860; mov ymm6_1 L0x7fffffffd864;
mov ymm6_2 L0x7fffffffd868; mov ymm6_3 L0x7fffffffd86c;
mov ymm6_4 L0x7fffffffd870; mov ymm6_5 L0x7fffffffd874;
mov ymm6_6 L0x7fffffffd878; mov ymm6_7 L0x7fffffffd87c;
(* vpaddd -0x20(%rax),%ymm5,%ymm5                  #! EA = L0x7fffffffd760; Value = 0xa839136ca839136c; PC = 0x55555555c38e *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd760; adds dc ymm5_1 ymm5_1 L0x7fffffffd764;
adds dc ymm5_2 ymm5_2 L0x7fffffffd768; adds dc ymm5_3 ymm5_3 L0x7fffffffd76c;
adds dc ymm5_4 ymm5_4 L0x7fffffffd770; adds dc ymm5_5 ymm5_5 L0x7fffffffd774;
adds dc ymm5_6 ymm5_6 L0x7fffffffd778; adds dc ymm5_7 ymm5_7 L0x7fffffffd77c;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c393 *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c398 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c39d *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3a2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c3a6 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ab *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c3af *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x80(%rbx),%ymm0                       #! EA = L0x7fffffffd800; Value = 0x8af1ec7e8af1ec7e; PC = 0x55555555c3b4 *)
mov ymm0_0 L0x7fffffffd800; mov ymm0_1 L0x7fffffffd804;
mov ymm0_2 L0x7fffffffd808; mov ymm0_3 L0x7fffffffd80c;
mov ymm0_4 L0x7fffffffd810; mov ymm0_5 L0x7fffffffd814;
mov ymm0_6 L0x7fffffffd818; mov ymm0_7 L0x7fffffffd81c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c3b9 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3be *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c3c2 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3c7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c3cb *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3d0 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c3d4 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c3d8 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3dd *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c3e1 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c3e6 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c3ea *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c3ee *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm10,%ymm7                        #! PC = 0x55555555c3f2 *)
split ymm7_0 dc ymm10_0 0x6; split ymm7_1 dc ymm10_1 0x6;
split ymm7_2 dc ymm10_2 0x6; split ymm7_3 dc ymm10_3 0x6;
split ymm7_4 dc ymm10_4 0x6; split ymm7_5 dc ymm10_5 0x6;
split ymm7_6 dc ymm10_6 0x6; split ymm7_7 dc ymm10_7 0x6;
(* vpslld $0x1a,%ymm10,%ymm2                       #! PC = 0x55555555c3f8 *)
split dc ymm2_0 ymm10_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm10_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm10_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm10_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm10_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm10_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm10_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm10_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,-0x40(%rbx)                       #! EA = L0x7fffffffd840; PC = 0x55555555c3fe *)
mov L0x7fffffffd840 ymm5_0; mov L0x7fffffffd844 ymm5_1;
mov L0x7fffffffd848 ymm5_2; mov L0x7fffffffd84c ymm5_3;
mov L0x7fffffffd850 ymm5_4; mov L0x7fffffffd854 ymm5_5;
mov L0x7fffffffd858 ymm5_6; mov L0x7fffffffd85c ymm5_7;
(* vpaddd %ymm13,%ymm5,%ymm5                       #! PC = 0x55555555c403 *)
adds dc ymm5_0 ymm5_0 ymm13_0; adds dc ymm5_1 ymm5_1 ymm13_1;
adds dc ymm5_2 ymm5_2 ymm13_2; adds dc ymm5_3 ymm5_3 ymm13_3;
adds dc ymm5_4 ymm5_4 ymm13_4; adds dc ymm5_5 ymm5_5 ymm13_5;
adds dc ymm5_6 ymm5_6 ymm13_6; adds dc ymm5_7 ymm5_7 ymm13_7;
(* vpsrld $0xb,%ymm10,%ymm1                        #! PC = 0x55555555c408 *)
split ymm1_0 dc ymm10_0 0xb; split ymm1_1 dc ymm10_1 0xb;
split ymm1_2 dc ymm10_2 0xb; split ymm1_3 dc ymm10_3 0xb;
split ymm1_4 dc ymm10_4 0xb; split ymm1_5 dc ymm10_5 0xb;
split ymm1_6 dc ymm10_6 0xb; split ymm1_7 dc ymm10_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c40e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm10,%ymm2                       #! PC = 0x55555555c412 *)
split dc ymm2_0 ymm10_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm10_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm10_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm10_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm10_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm10_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm10_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm10_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x40(%rbp),%ymm5,%ymm5                  #! EA = L0x55555555d340; Value = 0x84c8781484c87814; PC = 0x55555555c418 *)
adds dc ymm5_0 ymm5_0 L0x55555555d340; adds dc ymm5_1 ymm5_1 L0x55555555d344;
adds dc ymm5_2 ymm5_2 L0x55555555d348; adds dc ymm5_3 ymm5_3 L0x55555555d34c;
adds dc ymm5_4 ymm5_4 L0x55555555d350; adds dc ymm5_5 ymm5_5 L0x55555555d354;
adds dc ymm5_6 ymm5_6 L0x55555555d358; adds dc ymm5_7 ymm5_7 L0x55555555d35c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c41d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm10,%ymm1                       #! PC = 0x55555555c421 *)
split ymm1_0 dc ymm10_0 0x19; split ymm1_1 dc ymm10_1 0x19;
split ymm1_2 dc ymm10_2 0x19; split ymm1_3 dc ymm10_3 0x19;
split ymm1_4 dc ymm10_4 0x19; split ymm1_5 dc ymm10_5 0x19;
split ymm1_6 dc ymm10_6 0x19; split ymm1_7 dc ymm10_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c427 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm10,%ymm2                        #! PC = 0x55555555c42b *)
split dc ymm2_0 ymm10_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm10_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm10_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm10_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm10_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm10_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm10_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm10_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm12,%ymm10,%ymm0                      #! PC = 0x55555555c431 *)
not ymm10_0n@uint32 ymm10_0; and ymm0_0@uint32 ymm10_0n ymm12_0;
not ymm10_1n@uint32 ymm10_1; and ymm0_1@uint32 ymm10_1n ymm12_1;
not ymm10_2n@uint32 ymm10_2; and ymm0_2@uint32 ymm10_2n ymm12_2;
not ymm10_3n@uint32 ymm10_3; and ymm0_3@uint32 ymm10_3n ymm12_3;
not ymm10_4n@uint32 ymm10_4; and ymm0_4@uint32 ymm10_4n ymm12_4;
not ymm10_5n@uint32 ymm10_5; and ymm0_5@uint32 ymm10_5n ymm12_5;
not ymm10_6n@uint32 ymm10_6; and ymm0_6@uint32 ymm10_6n ymm12_6;
not ymm10_7n@uint32 ymm10_7; and ymm0_7@uint32 ymm10_7n ymm12_7;
(* vpand  %ymm11,%ymm10,%ymm3                      #! PC = 0x55555555c436 *)
and ymm3_0@uint32 ymm10_0 ymm11_0; and ymm3_1@uint32 ymm10_1 ymm11_1;
and ymm3_2@uint32 ymm10_2 ymm11_2; and ymm3_3@uint32 ymm10_3 ymm11_3;
and ymm3_4@uint32 ymm10_4 ymm11_4; and ymm3_5@uint32 ymm10_5 ymm11_5;
and ymm3_6@uint32 ymm10_6 ymm11_6; and ymm3_7@uint32 ymm10_7 ymm11_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c43b *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm14,%ymm13                       #! PC = 0x55555555c43f *)
split ymm13_0 dc ymm14_0 0x2; split ymm13_1 dc ymm14_1 0x2;
split ymm13_2 dc ymm14_2 0x2; split ymm13_3 dc ymm14_3 0x2;
split ymm13_4 dc ymm14_4 0x2; split ymm13_5 dc ymm14_5 0x2;
split ymm13_6 dc ymm14_6 0x2; split ymm13_7 dc ymm14_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c445 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm14,%ymm1                       #! PC = 0x55555555c449 *)
split dc ymm1_0 ymm14_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm14_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm14_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm14_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm14_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm14_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm14_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm14_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c44f *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm14,%ymm15,%ymm3                      #! PC = 0x55555555c453 *)
xor ymm3_0@uint32 ymm15_0 ymm14_0; xor ymm3_1@uint32 ymm15_1 ymm14_1;
xor ymm3_2@uint32 ymm15_2 ymm14_2; xor ymm3_3@uint32 ymm15_3 ymm14_3;
xor ymm3_4@uint32 ymm15_4 ymm14_4; xor ymm3_5@uint32 ymm15_5 ymm14_5;
xor ymm3_6@uint32 ymm15_6 ymm14_6; xor ymm3_7@uint32 ymm15_7 ymm14_7;
(* vpxor  %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555c458 *)
xor ymm13_0@uint32 ymm13_0 ymm1_0; xor ymm13_1@uint32 ymm13_1 ymm1_1;
xor ymm13_2@uint32 ymm13_2 ymm1_2; xor ymm13_3@uint32 ymm13_3 ymm1_3;
xor ymm13_4@uint32 ymm13_4 ymm1_4; xor ymm13_5@uint32 ymm13_5 ymm1_5;
xor ymm13_6@uint32 ymm13_6 ymm1_6; xor ymm13_7@uint32 ymm13_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c45c *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm14,%ymm1                        #! PC = 0x55555555c460 *)
split ymm1_0 dc ymm14_0 0xd; split ymm1_1 dc ymm14_1 0xd;
split ymm1_2 dc ymm14_2 0xd; split ymm1_3 dc ymm14_3 0xd;
split ymm1_4 dc ymm14_4 0xd; split ymm1_5 dc ymm14_5 0xd;
split ymm1_6 dc ymm14_6 0xd; split ymm1_7 dc ymm14_7 0xd;
(* vpslld $0x13,%ymm14,%ymm2                       #! PC = 0x55555555c466 *)
split dc ymm2_0 ymm14_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm14_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm14_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm14_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm14_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm14_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm14_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm14_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c46c *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c470 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm13,%ymm7                       #! PC = 0x55555555c474 *)
xor ymm7_0@uint32 ymm13_0 ymm1_0; xor ymm7_1@uint32 ymm13_1 ymm1_1;
xor ymm7_2@uint32 ymm13_2 ymm1_2; xor ymm7_3@uint32 ymm13_3 ymm1_3;
xor ymm7_4@uint32 ymm13_4 ymm1_4; xor ymm7_5@uint32 ymm13_5 ymm1_5;
xor ymm7_6@uint32 ymm13_6 ymm1_6; xor ymm7_7@uint32 ymm13_7 ymm1_7;
(* vpsrld $0x16,%ymm14,%ymm1                       #! PC = 0x55555555c478 *)
split ymm1_0 dc ymm14_0 0x16; split ymm1_1 dc ymm14_1 0x16;
split ymm1_2 dc ymm14_2 0x16; split ymm1_3 dc ymm14_3 0x16;
split ymm1_4 dc ymm14_4 0x16; split ymm1_5 dc ymm14_5 0x16;
split ymm1_6 dc ymm14_6 0x16; split ymm1_7 dc ymm14_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c47e *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm14,%ymm2                        #! PC = 0x55555555c482 *)
split dc ymm2_0 ymm14_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm14_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm14_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm14_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm14_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm14_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm14_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm14_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm15,%ymm13                      #! PC = 0x55555555c488 *)
xor ymm13_0@uint32 ymm15_0 ymm4_0; xor ymm13_1@uint32 ymm15_1 ymm4_1;
xor ymm13_2@uint32 ymm15_2 ymm4_2; xor ymm13_3@uint32 ymm15_3 ymm4_3;
xor ymm13_4@uint32 ymm15_4 ymm4_4; xor ymm13_5@uint32 ymm15_5 ymm4_5;
xor ymm13_6@uint32 ymm15_6 ymm4_6; xor ymm13_7@uint32 ymm15_7 ymm4_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c48c *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c490 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c494 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c498 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpaddd %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555c49c *)
adds dc ymm13_0 ymm13_0 ymm7_0; adds dc ymm13_1 ymm13_1 ymm7_1;
adds dc ymm13_2 ymm13_2 ymm7_2; adds dc ymm13_3 ymm13_3 ymm7_3;
adds dc ymm13_4 ymm13_4 ymm7_4; adds dc ymm13_5 ymm13_5 ymm7_5;
adds dc ymm13_6 ymm13_6 ymm7_6; adds dc ymm13_7 ymm13_7 ymm7_7;
(* vmovdqu (%rbx),%ymm5                            #! EA = L0x7fffffffd880; Value = 0x68ea39c368ea39c3; PC = 0x55555555c4a0 *)
mov ymm5_0 L0x7fffffffd880; mov ymm5_1 L0x7fffffffd884;
mov ymm5_2 L0x7fffffffd888; mov ymm5_3 L0x7fffffffd88c;
mov ymm5_4 L0x7fffffffd890; mov ymm5_5 L0x7fffffffd894;
mov ymm5_6 L0x7fffffffd898; mov ymm5_7 L0x7fffffffd89c;
(* vpaddd (%rax),%ymm6,%ymm6                       #! EA = L0x7fffffffd780; Value = 0xc16c46f8c16c46f8; PC = 0x55555555c4a4 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd780; adds dc ymm6_1 ymm6_1 L0x7fffffffd784;
adds dc ymm6_2 ymm6_2 L0x7fffffffd788; adds dc ymm6_3 ymm6_3 L0x7fffffffd78c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd790; adds dc ymm6_5 ymm6_5 L0x7fffffffd794;
adds dc ymm6_6 ymm6_6 L0x7fffffffd798; adds dc ymm6_7 ymm6_7 L0x7fffffffd79c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c4a8 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c4ad *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c4b2 *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4b7 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c4bb *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c4c4 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x60(%rbx),%ymm0                       #! EA = L0x7fffffffd820; Value = 0x92ad985e92ad985e; PC = 0x55555555c4c9 *)
mov ymm0_0 L0x7fffffffd820; mov ymm0_1 L0x7fffffffd824;
mov ymm0_2 L0x7fffffffd828; mov ymm0_3 L0x7fffffffd82c;
mov ymm0_4 L0x7fffffffd830; mov ymm0_5 L0x7fffffffd834;
mov ymm0_6 L0x7fffffffd838; mov ymm0_7 L0x7fffffffd83c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c4ce *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4d3 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c4d7 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4dc *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c4e0 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c4e5 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c4e9 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c4ed *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4f2 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c4f6 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c4fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c4ff *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c503 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm9,%ymm7                         #! PC = 0x55555555c507 *)
split ymm7_0 dc ymm9_0 0x6; split ymm7_1 dc ymm9_1 0x6;
split ymm7_2 dc ymm9_2 0x6; split ymm7_3 dc ymm9_3 0x6;
split ymm7_4 dc ymm9_4 0x6; split ymm7_5 dc ymm9_5 0x6;
split ymm7_6 dc ymm9_6 0x6; split ymm7_7 dc ymm9_7 0x6;
(* vpslld $0x1a,%ymm9,%ymm2                        #! PC = 0x55555555c50d *)
split dc ymm2_0 ymm9_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm9_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm9_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm9_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm9_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm9_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm9_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm9_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,-0x20(%rbx)                       #! EA = L0x7fffffffd860; PC = 0x55555555c513 *)
mov L0x7fffffffd860 ymm6_0; mov L0x7fffffffd864 ymm6_1;
mov L0x7fffffffd868 ymm6_2; mov L0x7fffffffd86c ymm6_3;
mov L0x7fffffffd870 ymm6_4; mov L0x7fffffffd874 ymm6_5;
mov L0x7fffffffd878 ymm6_6; mov L0x7fffffffd87c ymm6_7;
(* vpaddd %ymm12,%ymm6,%ymm6                       #! PC = 0x55555555c518 *)
adds dc ymm6_0 ymm6_0 ymm12_0; adds dc ymm6_1 ymm6_1 ymm12_1;
adds dc ymm6_2 ymm6_2 ymm12_2; adds dc ymm6_3 ymm6_3 ymm12_3;
adds dc ymm6_4 ymm6_4 ymm12_4; adds dc ymm6_5 ymm6_5 ymm12_5;
adds dc ymm6_6 ymm6_6 ymm12_6; adds dc ymm6_7 ymm6_7 ymm12_7;
(* vpsrld $0xb,%ymm9,%ymm1                         #! PC = 0x55555555c51d *)
split ymm1_0 dc ymm9_0 0xb; split ymm1_1 dc ymm9_1 0xb;
split ymm1_2 dc ymm9_2 0xb; split ymm1_3 dc ymm9_3 0xb;
split ymm1_4 dc ymm9_4 0xb; split ymm1_5 dc ymm9_5 0xb;
split ymm1_6 dc ymm9_6 0xb; split ymm1_7 dc ymm9_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c523 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm9,%ymm2                        #! PC = 0x55555555c527 *)
split dc ymm2_0 ymm9_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm9_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm9_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm9_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm9_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm9_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm9_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm9_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd -0x20(%rbp),%ymm6,%ymm6                  #! EA = L0x55555555d360; Value = 0x8cc702088cc70208; PC = 0x55555555c52d *)
adds dc ymm6_0 ymm6_0 L0x55555555d360; adds dc ymm6_1 ymm6_1 L0x55555555d364;
adds dc ymm6_2 ymm6_2 L0x55555555d368; adds dc ymm6_3 ymm6_3 L0x55555555d36c;
adds dc ymm6_4 ymm6_4 L0x55555555d370; adds dc ymm6_5 ymm6_5 L0x55555555d374;
adds dc ymm6_6 ymm6_6 L0x55555555d378; adds dc ymm6_7 ymm6_7 L0x55555555d37c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c532 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm9,%ymm1                        #! PC = 0x55555555c536 *)
split ymm1_0 dc ymm9_0 0x19; split ymm1_1 dc ymm9_1 0x19;
split ymm1_2 dc ymm9_2 0x19; split ymm1_3 dc ymm9_3 0x19;
split ymm1_4 dc ymm9_4 0x19; split ymm1_5 dc ymm9_5 0x19;
split ymm1_6 dc ymm9_6 0x19; split ymm1_7 dc ymm9_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c53c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm9,%ymm2                         #! PC = 0x55555555c540 *)
split dc ymm2_0 ymm9_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm9_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm9_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm9_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm9_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm9_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm9_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm9_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm11,%ymm9,%ymm0                       #! PC = 0x55555555c546 *)
not ymm9_0n@uint32 ymm9_0; and ymm0_0@uint32 ymm9_0n ymm11_0;
not ymm9_1n@uint32 ymm9_1; and ymm0_1@uint32 ymm9_1n ymm11_1;
not ymm9_2n@uint32 ymm9_2; and ymm0_2@uint32 ymm9_2n ymm11_2;
not ymm9_3n@uint32 ymm9_3; and ymm0_3@uint32 ymm9_3n ymm11_3;
not ymm9_4n@uint32 ymm9_4; and ymm0_4@uint32 ymm9_4n ymm11_4;
not ymm9_5n@uint32 ymm9_5; and ymm0_5@uint32 ymm9_5n ymm11_5;
not ymm9_6n@uint32 ymm9_6; and ymm0_6@uint32 ymm9_6n ymm11_6;
not ymm9_7n@uint32 ymm9_7; and ymm0_7@uint32 ymm9_7n ymm11_7;
(* vpand  %ymm10,%ymm9,%ymm4                       #! PC = 0x55555555c54b *)
and ymm4_0@uint32 ymm9_0 ymm10_0; and ymm4_1@uint32 ymm9_1 ymm10_1;
and ymm4_2@uint32 ymm9_2 ymm10_2; and ymm4_3@uint32 ymm9_3 ymm10_3;
and ymm4_4@uint32 ymm9_4 ymm10_4; and ymm4_5@uint32 ymm9_5 ymm10_5;
and ymm4_6@uint32 ymm9_6 ymm10_6; and ymm4_7@uint32 ymm9_7 ymm10_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c550 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm13,%ymm12                       #! PC = 0x55555555c554 *)
split ymm12_0 dc ymm13_0 0x2; split ymm12_1 dc ymm13_1 0x2;
split ymm12_2 dc ymm13_2 0x2; split ymm12_3 dc ymm13_3 0x2;
split ymm12_4 dc ymm13_4 0x2; split ymm12_5 dc ymm13_5 0x2;
split ymm12_6 dc ymm13_6 0x2; split ymm12_7 dc ymm13_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c55a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm13,%ymm1                       #! PC = 0x55555555c55e *)
split dc ymm1_0 ymm13_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm13_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm13_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm13_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm13_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm13_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm13_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm13_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c564 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm13,%ymm14,%ymm4                      #! PC = 0x55555555c568 *)
xor ymm4_0@uint32 ymm14_0 ymm13_0; xor ymm4_1@uint32 ymm14_1 ymm13_1;
xor ymm4_2@uint32 ymm14_2 ymm13_2; xor ymm4_3@uint32 ymm14_3 ymm13_3;
xor ymm4_4@uint32 ymm14_4 ymm13_4; xor ymm4_5@uint32 ymm14_5 ymm13_5;
xor ymm4_6@uint32 ymm14_6 ymm13_6; xor ymm4_7@uint32 ymm14_7 ymm13_7;
(* vpxor  %ymm1,%ymm12,%ymm12                      #! PC = 0x55555555c56d *)
xor ymm12_0@uint32 ymm12_0 ymm1_0; xor ymm12_1@uint32 ymm12_1 ymm1_1;
xor ymm12_2@uint32 ymm12_2 ymm1_2; xor ymm12_3@uint32 ymm12_3 ymm1_3;
xor ymm12_4@uint32 ymm12_4 ymm1_4; xor ymm12_5@uint32 ymm12_5 ymm1_5;
xor ymm12_6@uint32 ymm12_6 ymm1_6; xor ymm12_7@uint32 ymm12_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c571 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm13,%ymm1                        #! PC = 0x55555555c575 *)
split ymm1_0 dc ymm13_0 0xd; split ymm1_1 dc ymm13_1 0xd;
split ymm1_2 dc ymm13_2 0xd; split ymm1_3 dc ymm13_3 0xd;
split ymm1_4 dc ymm13_4 0xd; split ymm1_5 dc ymm13_5 0xd;
split ymm1_6 dc ymm13_6 0xd; split ymm1_7 dc ymm13_7 0xd;
(* vpslld $0x13,%ymm13,%ymm2                       #! PC = 0x55555555c57b *)
split dc ymm2_0 ymm13_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm13_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm13_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm13_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm13_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm13_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm13_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm13_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c581 *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c585 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm12,%ymm7                       #! PC = 0x55555555c589 *)
xor ymm7_0@uint32 ymm12_0 ymm1_0; xor ymm7_1@uint32 ymm12_1 ymm1_1;
xor ymm7_2@uint32 ymm12_2 ymm1_2; xor ymm7_3@uint32 ymm12_3 ymm1_3;
xor ymm7_4@uint32 ymm12_4 ymm1_4; xor ymm7_5@uint32 ymm12_5 ymm1_5;
xor ymm7_6@uint32 ymm12_6 ymm1_6; xor ymm7_7@uint32 ymm12_7 ymm1_7;
(* vpsrld $0x16,%ymm13,%ymm1                       #! PC = 0x55555555c58d *)
split ymm1_0 dc ymm13_0 0x16; split ymm1_1 dc ymm13_1 0x16;
split ymm1_2 dc ymm13_2 0x16; split ymm1_3 dc ymm13_3 0x16;
split ymm1_4 dc ymm13_4 0x16; split ymm1_5 dc ymm13_5 0x16;
split ymm1_6 dc ymm13_6 0x16; split ymm1_7 dc ymm13_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c593 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm13,%ymm2                        #! PC = 0x55555555c597 *)
split dc ymm2_0 ymm13_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm13_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm13_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm13_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm13_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm13_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm13_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm13_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm14,%ymm12                      #! PC = 0x55555555c59d *)
xor ymm12_0@uint32 ymm14_0 ymm3_0; xor ymm12_1@uint32 ymm14_1 ymm3_1;
xor ymm12_2@uint32 ymm14_2 ymm3_2; xor ymm12_3@uint32 ymm14_3 ymm3_3;
xor ymm12_4@uint32 ymm14_4 ymm3_4; xor ymm12_5@uint32 ymm14_5 ymm3_5;
xor ymm12_6@uint32 ymm14_6 ymm3_6; xor ymm12_7@uint32 ymm14_7 ymm3_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c5a1 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5a5 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c5ad *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpaddd %ymm7,%ymm12,%ymm12                      #! PC = 0x55555555c5b1 *)
adds dc ymm12_0 ymm12_0 ymm7_0; adds dc ymm12_1 ymm12_1 ymm7_1;
adds dc ymm12_2 ymm12_2 ymm7_2; adds dc ymm12_3 ymm12_3 ymm7_3;
adds dc ymm12_4 ymm12_4 ymm7_4; adds dc ymm12_5 ymm12_5 ymm7_5;
adds dc ymm12_6 ymm12_6 ymm7_6; adds dc ymm12_7 ymm12_7 ymm7_7;
(* vmovdqu 0x20(%rbx),%ymm6                        #! EA = L0x7fffffffd8a0; Value = 0x54dd515a54dd515a; PC = 0x55555555c5b5 *)
mov ymm6_0 L0x7fffffffd8a0; mov ymm6_1 L0x7fffffffd8a4;
mov ymm6_2 L0x7fffffffd8a8; mov ymm6_3 L0x7fffffffd8ac;
mov ymm6_4 L0x7fffffffd8b0; mov ymm6_5 L0x7fffffffd8b4;
mov ymm6_6 L0x7fffffffd8b8; mov ymm6_7 L0x7fffffffd8bc;
(* vpaddd 0x20(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7a0; Value = 0x69017ea569017ea5; PC = 0x55555555c5ba *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7a0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7a4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7a8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ac;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7b0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7b4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7b8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7bc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c5bf *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c5c4 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c5c9 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ce *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c5d2 *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5d7 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c5db *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x40(%rbx),%ymm0                       #! EA = L0x7fffffffd840; Value = 0x5b6084385b608438; PC = 0x55555555c5e0 *)
mov ymm0_0 L0x7fffffffd840; mov ymm0_1 L0x7fffffffd844;
mov ymm0_2 L0x7fffffffd848; mov ymm0_3 L0x7fffffffd84c;
mov ymm0_4 L0x7fffffffd850; mov ymm0_5 L0x7fffffffd854;
mov ymm0_6 L0x7fffffffd858; mov ymm0_7 L0x7fffffffd85c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c5e5 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c5ea *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c5ee *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c5f3 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c5f7 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c5fc *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c600 *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c604 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c609 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c60d *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c612 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c616 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c61a *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm8,%ymm7                         #! PC = 0x55555555c61e *)
split ymm7_0 dc ymm8_0 0x6; split ymm7_1 dc ymm8_1 0x6;
split ymm7_2 dc ymm8_2 0x6; split ymm7_3 dc ymm8_3 0x6;
split ymm7_4 dc ymm8_4 0x6; split ymm7_5 dc ymm8_5 0x6;
split ymm7_6 dc ymm8_6 0x6; split ymm7_7 dc ymm8_7 0x6;
(* vpslld $0x1a,%ymm8,%ymm2                        #! PC = 0x55555555c624 *)
split dc ymm2_0 ymm8_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm8_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm8_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm8_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm8_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm8_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm8_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm8_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,(%rbx)                            #! EA = L0x7fffffffd880; PC = 0x55555555c62a *)
mov L0x7fffffffd880 ymm5_0; mov L0x7fffffffd884 ymm5_1;
mov L0x7fffffffd888 ymm5_2; mov L0x7fffffffd88c ymm5_3;
mov L0x7fffffffd890 ymm5_4; mov L0x7fffffffd894 ymm5_5;
mov L0x7fffffffd898 ymm5_6; mov L0x7fffffffd89c ymm5_7;
(* vpaddd %ymm11,%ymm5,%ymm5                       #! PC = 0x55555555c62e *)
adds dc ymm5_0 ymm5_0 ymm11_0; adds dc ymm5_1 ymm5_1 ymm11_1;
adds dc ymm5_2 ymm5_2 ymm11_2; adds dc ymm5_3 ymm5_3 ymm11_3;
adds dc ymm5_4 ymm5_4 ymm11_4; adds dc ymm5_5 ymm5_5 ymm11_5;
adds dc ymm5_6 ymm5_6 ymm11_6; adds dc ymm5_7 ymm5_7 ymm11_7;
(* vpsrld $0xb,%ymm8,%ymm1                         #! PC = 0x55555555c633 *)
split ymm1_0 dc ymm8_0 0xb; split ymm1_1 dc ymm8_1 0xb;
split ymm1_2 dc ymm8_2 0xb; split ymm1_3 dc ymm8_3 0xb;
split ymm1_4 dc ymm8_4 0xb; split ymm1_5 dc ymm8_5 0xb;
split ymm1_6 dc ymm8_6 0xb; split ymm1_7 dc ymm8_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c639 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm8,%ymm2                        #! PC = 0x55555555c63d *)
split dc ymm2_0 ymm8_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm8_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm8_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm8_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm8_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm8_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm8_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm8_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x0(%rbp),%ymm5,%ymm5                    #! EA = L0x55555555d380; Value = 0x90befffa90befffa; PC = 0x55555555c643 *)
adds dc ymm5_0 ymm5_0 L0x55555555d380; adds dc ymm5_1 ymm5_1 L0x55555555d384;
adds dc ymm5_2 ymm5_2 L0x55555555d388; adds dc ymm5_3 ymm5_3 L0x55555555d38c;
adds dc ymm5_4 ymm5_4 L0x55555555d390; adds dc ymm5_5 ymm5_5 L0x55555555d394;
adds dc ymm5_6 ymm5_6 L0x55555555d398; adds dc ymm5_7 ymm5_7 L0x55555555d39c;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c648 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm8,%ymm1                        #! PC = 0x55555555c64c *)
split ymm1_0 dc ymm8_0 0x19; split ymm1_1 dc ymm8_1 0x19;
split ymm1_2 dc ymm8_2 0x19; split ymm1_3 dc ymm8_3 0x19;
split ymm1_4 dc ymm8_4 0x19; split ymm1_5 dc ymm8_5 0x19;
split ymm1_6 dc ymm8_6 0x19; split ymm1_7 dc ymm8_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c652 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm8,%ymm2                         #! PC = 0x55555555c656 *)
split dc ymm2_0 ymm8_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm8_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm8_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm8_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm8_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm8_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm8_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm8_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm10,%ymm8,%ymm0                       #! PC = 0x55555555c65c *)
not ymm8_0n@uint32 ymm8_0; and ymm0_0@uint32 ymm8_0n ymm10_0;
not ymm8_1n@uint32 ymm8_1; and ymm0_1@uint32 ymm8_1n ymm10_1;
not ymm8_2n@uint32 ymm8_2; and ymm0_2@uint32 ymm8_2n ymm10_2;
not ymm8_3n@uint32 ymm8_3; and ymm0_3@uint32 ymm8_3n ymm10_3;
not ymm8_4n@uint32 ymm8_4; and ymm0_4@uint32 ymm8_4n ymm10_4;
not ymm8_5n@uint32 ymm8_5; and ymm0_5@uint32 ymm8_5n ymm10_5;
not ymm8_6n@uint32 ymm8_6; and ymm0_6@uint32 ymm8_6n ymm10_6;
not ymm8_7n@uint32 ymm8_7; and ymm0_7@uint32 ymm8_7n ymm10_7;
(* vpand  %ymm9,%ymm8,%ymm3                        #! PC = 0x55555555c661 *)
and ymm3_0@uint32 ymm8_0 ymm9_0; and ymm3_1@uint32 ymm8_1 ymm9_1;
and ymm3_2@uint32 ymm8_2 ymm9_2; and ymm3_3@uint32 ymm8_3 ymm9_3;
and ymm3_4@uint32 ymm8_4 ymm9_4; and ymm3_5@uint32 ymm8_5 ymm9_5;
and ymm3_6@uint32 ymm8_6 ymm9_6; and ymm3_7@uint32 ymm8_7 ymm9_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c666 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm12,%ymm11                       #! PC = 0x55555555c66a *)
split ymm11_0 dc ymm12_0 0x2; split ymm11_1 dc ymm12_1 0x2;
split ymm11_2 dc ymm12_2 0x2; split ymm11_3 dc ymm12_3 0x2;
split ymm11_4 dc ymm12_4 0x2; split ymm11_5 dc ymm12_5 0x2;
split ymm11_6 dc ymm12_6 0x2; split ymm11_7 dc ymm12_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c670 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm12,%ymm1                       #! PC = 0x55555555c674 *)
split dc ymm1_0 ymm12_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm12_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm12_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm12_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm12_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm12_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm12_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm12_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c67a *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm12,%ymm13,%ymm3                      #! PC = 0x55555555c67e *)
xor ymm3_0@uint32 ymm13_0 ymm12_0; xor ymm3_1@uint32 ymm13_1 ymm12_1;
xor ymm3_2@uint32 ymm13_2 ymm12_2; xor ymm3_3@uint32 ymm13_3 ymm12_3;
xor ymm3_4@uint32 ymm13_4 ymm12_4; xor ymm3_5@uint32 ymm13_5 ymm12_5;
xor ymm3_6@uint32 ymm13_6 ymm12_6; xor ymm3_7@uint32 ymm13_7 ymm12_7;
(* vpxor  %ymm1,%ymm11,%ymm11                      #! PC = 0x55555555c683 *)
xor ymm11_0@uint32 ymm11_0 ymm1_0; xor ymm11_1@uint32 ymm11_1 ymm1_1;
xor ymm11_2@uint32 ymm11_2 ymm1_2; xor ymm11_3@uint32 ymm11_3 ymm1_3;
xor ymm11_4@uint32 ymm11_4 ymm1_4; xor ymm11_5@uint32 ymm11_5 ymm1_5;
xor ymm11_6@uint32 ymm11_6 ymm1_6; xor ymm11_7@uint32 ymm11_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c687 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm12,%ymm1                        #! PC = 0x55555555c68b *)
split ymm1_0 dc ymm12_0 0xd; split ymm1_1 dc ymm12_1 0xd;
split ymm1_2 dc ymm12_2 0xd; split ymm1_3 dc ymm12_3 0xd;
split ymm1_4 dc ymm12_4 0xd; split ymm1_5 dc ymm12_5 0xd;
split ymm1_6 dc ymm12_6 0xd; split ymm1_7 dc ymm12_7 0xd;
(* vpslld $0x13,%ymm12,%ymm2                       #! PC = 0x55555555c691 *)
split dc ymm2_0 ymm12_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm12_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm12_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm12_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm12_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm12_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm12_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm12_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c697 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c69b *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm11,%ymm7                       #! PC = 0x55555555c69f *)
xor ymm7_0@uint32 ymm11_0 ymm1_0; xor ymm7_1@uint32 ymm11_1 ymm1_1;
xor ymm7_2@uint32 ymm11_2 ymm1_2; xor ymm7_3@uint32 ymm11_3 ymm1_3;
xor ymm7_4@uint32 ymm11_4 ymm1_4; xor ymm7_5@uint32 ymm11_5 ymm1_5;
xor ymm7_6@uint32 ymm11_6 ymm1_6; xor ymm7_7@uint32 ymm11_7 ymm1_7;
(* vpsrld $0x16,%ymm12,%ymm1                       #! PC = 0x55555555c6a3 *)
split ymm1_0 dc ymm12_0 0x16; split ymm1_1 dc ymm12_1 0x16;
split ymm1_2 dc ymm12_2 0x16; split ymm1_3 dc ymm12_3 0x16;
split ymm1_4 dc ymm12_4 0x16; split ymm1_5 dc ymm12_5 0x16;
split ymm1_6 dc ymm12_6 0x16; split ymm1_7 dc ymm12_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6a9 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm12,%ymm2                        #! PC = 0x55555555c6ad *)
split dc ymm2_0 ymm12_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm12_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm12_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm12_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm12_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm12_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm12_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm12_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm13,%ymm11                      #! PC = 0x55555555c6b3 *)
xor ymm11_0@uint32 ymm13_0 ymm4_0; xor ymm11_1@uint32 ymm13_1 ymm4_1;
xor ymm11_2@uint32 ymm13_2 ymm4_2; xor ymm11_3@uint32 ymm13_3 ymm4_3;
xor ymm11_4@uint32 ymm13_4 ymm4_4; xor ymm11_5@uint32 ymm13_5 ymm4_5;
xor ymm11_6@uint32 ymm13_6 ymm4_6; xor ymm11_7@uint32 ymm13_7 ymm4_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555c6b7 *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6bb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6bf *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555c6c3 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vpaddd %ymm7,%ymm11,%ymm11                      #! PC = 0x55555555c6c7 *)
adds dc ymm11_0 ymm11_0 ymm7_0; adds dc ymm11_1 ymm11_1 ymm7_1;
adds dc ymm11_2 ymm11_2 ymm7_2; adds dc ymm11_3 ymm11_3 ymm7_3;
adds dc ymm11_4 ymm11_4 ymm7_4; adds dc ymm11_5 ymm11_5 ymm7_5;
adds dc ymm11_6 ymm11_6 ymm7_6; adds dc ymm11_7 ymm11_7 ymm7_7;
(* vmovdqu 0x40(%rbx),%ymm5                        #! EA = L0x7fffffffd8c0; Value = 0x71176fd571176fd5; PC = 0x55555555c6cb *)
mov ymm5_0 L0x7fffffffd8c0; mov ymm5_1 L0x7fffffffd8c4;
mov ymm5_2 L0x7fffffffd8c8; mov ymm5_3 L0x7fffffffd8cc;
mov ymm5_4 L0x7fffffffd8d0; mov ymm5_5 L0x7fffffffd8d4;
mov ymm5_6 L0x7fffffffd8d8; mov ymm5_7 L0x7fffffffd8dc;
(* vpaddd 0x40(%rax),%ymm6,%ymm6                   #! EA = L0x7fffffffd7c0; Value = 0x3bb9afd13bb9afd1; PC = 0x55555555c6d0 *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd7c0; adds dc ymm6_1 ymm6_1 L0x7fffffffd7c4;
adds dc ymm6_2 ymm6_2 L0x7fffffffd7c8; adds dc ymm6_3 ymm6_3 L0x7fffffffd7cc;
adds dc ymm6_4 ymm6_4 L0x7fffffffd7d0; adds dc ymm6_5 ymm6_5 L0x7fffffffd7d4;
adds dc ymm6_6 ymm6_6 L0x7fffffffd7d8; adds dc ymm6_7 ymm6_7 L0x7fffffffd7dc;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c6d5 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c6da *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c6df *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c6e4 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c6e8 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c6ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c6f1 *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu -0x20(%rbx),%ymm0                       #! EA = L0x7fffffffd860; Value = 0xcdda4647cdda4647; PC = 0x55555555c6f6 *)
mov ymm0_0 L0x7fffffffd860; mov ymm0_1 L0x7fffffffd864;
mov ymm0_2 L0x7fffffffd868; mov ymm0_3 L0x7fffffffd86c;
mov ymm0_4 L0x7fffffffd870; mov ymm0_5 L0x7fffffffd874;
mov ymm0_6 L0x7fffffffd878; mov ymm0_7 L0x7fffffffd87c;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c6fb *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c700 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c704 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c709 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c70d *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c712 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c716 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c71a *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c71f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c723 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c728 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c72c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c730 *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm15,%ymm7                        #! PC = 0x55555555c734 *)
split ymm7_0 dc ymm15_0 0x6; split ymm7_1 dc ymm15_1 0x6;
split ymm7_2 dc ymm15_2 0x6; split ymm7_3 dc ymm15_3 0x6;
split ymm7_4 dc ymm15_4 0x6; split ymm7_5 dc ymm15_5 0x6;
split ymm7_6 dc ymm15_6 0x6; split ymm7_7 dc ymm15_7 0x6;
(* vpslld $0x1a,%ymm15,%ymm2                       #! PC = 0x55555555c73a *)
split dc ymm2_0 ymm15_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm15_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm15_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm15_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm15_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm15_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm15_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm15_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x20(%rbx)                        #! EA = L0x7fffffffd8a0; PC = 0x55555555c740 *)
mov L0x7fffffffd8a0 ymm6_0; mov L0x7fffffffd8a4 ymm6_1;
mov L0x7fffffffd8a8 ymm6_2; mov L0x7fffffffd8ac ymm6_3;
mov L0x7fffffffd8b0 ymm6_4; mov L0x7fffffffd8b4 ymm6_5;
mov L0x7fffffffd8b8 ymm6_6; mov L0x7fffffffd8bc ymm6_7;
(* vpaddd %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555c745 *)
adds dc ymm6_0 ymm6_0 ymm10_0; adds dc ymm6_1 ymm6_1 ymm10_1;
adds dc ymm6_2 ymm6_2 ymm10_2; adds dc ymm6_3 ymm6_3 ymm10_3;
adds dc ymm6_4 ymm6_4 ymm10_4; adds dc ymm6_5 ymm6_5 ymm10_5;
adds dc ymm6_6 ymm6_6 ymm10_6; adds dc ymm6_7 ymm6_7 ymm10_7;
(* vpsrld $0xb,%ymm15,%ymm1                        #! PC = 0x55555555c74a *)
split ymm1_0 dc ymm15_0 0xb; split ymm1_1 dc ymm15_1 0xb;
split ymm1_2 dc ymm15_2 0xb; split ymm1_3 dc ymm15_3 0xb;
split ymm1_4 dc ymm15_4 0xb; split ymm1_5 dc ymm15_5 0xb;
split ymm1_6 dc ymm15_6 0xb; split ymm1_7 dc ymm15_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c750 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm15,%ymm2                       #! PC = 0x55555555c754 *)
split dc ymm2_0 ymm15_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm15_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm15_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm15_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm15_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm15_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm15_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm15_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x20(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d3a0; Value = 0xa4506ceba4506ceb; PC = 0x55555555c75a *)
adds dc ymm6_0 ymm6_0 L0x55555555d3a0; adds dc ymm6_1 ymm6_1 L0x55555555d3a4;
adds dc ymm6_2 ymm6_2 L0x55555555d3a8; adds dc ymm6_3 ymm6_3 L0x55555555d3ac;
adds dc ymm6_4 ymm6_4 L0x55555555d3b0; adds dc ymm6_5 ymm6_5 L0x55555555d3b4;
adds dc ymm6_6 ymm6_6 L0x55555555d3b8; adds dc ymm6_7 ymm6_7 L0x55555555d3bc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c75f *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm15,%ymm1                       #! PC = 0x55555555c763 *)
split ymm1_0 dc ymm15_0 0x19; split ymm1_1 dc ymm15_1 0x19;
split ymm1_2 dc ymm15_2 0x19; split ymm1_3 dc ymm15_3 0x19;
split ymm1_4 dc ymm15_4 0x19; split ymm1_5 dc ymm15_5 0x19;
split ymm1_6 dc ymm15_6 0x19; split ymm1_7 dc ymm15_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c769 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm15,%ymm2                        #! PC = 0x55555555c76d *)
split dc ymm2_0 ymm15_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm15_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm15_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm15_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm15_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm15_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm15_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm15_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm9,%ymm15,%ymm0                       #! PC = 0x55555555c773 *)
not ymm15_0n@uint32 ymm15_0; and ymm0_0@uint32 ymm15_0n ymm9_0;
not ymm15_1n@uint32 ymm15_1; and ymm0_1@uint32 ymm15_1n ymm9_1;
not ymm15_2n@uint32 ymm15_2; and ymm0_2@uint32 ymm15_2n ymm9_2;
not ymm15_3n@uint32 ymm15_3; and ymm0_3@uint32 ymm15_3n ymm9_3;
not ymm15_4n@uint32 ymm15_4; and ymm0_4@uint32 ymm15_4n ymm9_4;
not ymm15_5n@uint32 ymm15_5; and ymm0_5@uint32 ymm15_5n ymm9_5;
not ymm15_6n@uint32 ymm15_6; and ymm0_6@uint32 ymm15_6n ymm9_6;
not ymm15_7n@uint32 ymm15_7; and ymm0_7@uint32 ymm15_7n ymm9_7;
(* vpand  %ymm8,%ymm15,%ymm4                       #! PC = 0x55555555c778 *)
and ymm4_0@uint32 ymm15_0 ymm8_0; and ymm4_1@uint32 ymm15_1 ymm8_1;
and ymm4_2@uint32 ymm15_2 ymm8_2; and ymm4_3@uint32 ymm15_3 ymm8_3;
and ymm4_4@uint32 ymm15_4 ymm8_4; and ymm4_5@uint32 ymm15_5 ymm8_5;
and ymm4_6@uint32 ymm15_6 ymm8_6; and ymm4_7@uint32 ymm15_7 ymm8_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c77d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm11,%ymm10                       #! PC = 0x55555555c781 *)
split ymm10_0 dc ymm11_0 0x2; split ymm10_1 dc ymm11_1 0x2;
split ymm10_2 dc ymm11_2 0x2; split ymm10_3 dc ymm11_3 0x2;
split ymm10_4 dc ymm11_4 0x2; split ymm10_5 dc ymm11_5 0x2;
split ymm10_6 dc ymm11_6 0x2; split ymm10_7 dc ymm11_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c787 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm11,%ymm1                       #! PC = 0x55555555c78b *)
split dc ymm1_0 ymm11_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm11_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm11_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm11_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm11_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm11_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm11_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm11_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c791 *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm11,%ymm12,%ymm4                      #! PC = 0x55555555c795 *)
xor ymm4_0@uint32 ymm12_0 ymm11_0; xor ymm4_1@uint32 ymm12_1 ymm11_1;
xor ymm4_2@uint32 ymm12_2 ymm11_2; xor ymm4_3@uint32 ymm12_3 ymm11_3;
xor ymm4_4@uint32 ymm12_4 ymm11_4; xor ymm4_5@uint32 ymm12_5 ymm11_5;
xor ymm4_6@uint32 ymm12_6 ymm11_6; xor ymm4_7@uint32 ymm12_7 ymm11_7;
(* vpxor  %ymm1,%ymm10,%ymm10                      #! PC = 0x55555555c79a *)
xor ymm10_0@uint32 ymm10_0 ymm1_0; xor ymm10_1@uint32 ymm10_1 ymm1_1;
xor ymm10_2@uint32 ymm10_2 ymm1_2; xor ymm10_3@uint32 ymm10_3 ymm1_3;
xor ymm10_4@uint32 ymm10_4 ymm1_4; xor ymm10_5@uint32 ymm10_5 ymm1_5;
xor ymm10_6@uint32 ymm10_6 ymm1_6; xor ymm10_7@uint32 ymm10_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c79e *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm11,%ymm1                        #! PC = 0x55555555c7a2 *)
split ymm1_0 dc ymm11_0 0xd; split ymm1_1 dc ymm11_1 0xd;
split ymm1_2 dc ymm11_2 0xd; split ymm1_3 dc ymm11_3 0xd;
split ymm1_4 dc ymm11_4 0xd; split ymm1_5 dc ymm11_5 0xd;
split ymm1_6 dc ymm11_6 0xd; split ymm1_7 dc ymm11_7 0xd;
(* vpslld $0x13,%ymm11,%ymm2                       #! PC = 0x55555555c7a8 *)
split dc ymm2_0 ymm11_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm11_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm11_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm11_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm11_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm11_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm11_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm11_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c7ae *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c7b2 *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm10,%ymm7                       #! PC = 0x55555555c7b6 *)
xor ymm7_0@uint32 ymm10_0 ymm1_0; xor ymm7_1@uint32 ymm10_1 ymm1_1;
xor ymm7_2@uint32 ymm10_2 ymm1_2; xor ymm7_3@uint32 ymm10_3 ymm1_3;
xor ymm7_4@uint32 ymm10_4 ymm1_4; xor ymm7_5@uint32 ymm10_5 ymm1_5;
xor ymm7_6@uint32 ymm10_6 ymm1_6; xor ymm7_7@uint32 ymm10_7 ymm1_7;
(* vpsrld $0x16,%ymm11,%ymm1                       #! PC = 0x55555555c7ba *)
split ymm1_0 dc ymm11_0 0x16; split ymm1_1 dc ymm11_1 0x16;
split ymm1_2 dc ymm11_2 0x16; split ymm1_3 dc ymm11_3 0x16;
split ymm1_4 dc ymm11_4 0x16; split ymm1_5 dc ymm11_5 0x16;
split ymm1_6 dc ymm11_6 0x16; split ymm1_7 dc ymm11_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7c0 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm11,%ymm2                        #! PC = 0x55555555c7c4 *)
split dc ymm2_0 ymm11_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm11_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm11_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm11_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm11_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm11_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm11_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm11_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm12,%ymm10                      #! PC = 0x55555555c7ca *)
xor ymm10_0@uint32 ymm12_0 ymm3_0; xor ymm10_1@uint32 ymm12_1 ymm3_1;
xor ymm10_2@uint32 ymm12_2 ymm3_2; xor ymm10_3@uint32 ymm12_3 ymm3_3;
xor ymm10_4@uint32 ymm12_4 ymm3_4; xor ymm10_5@uint32 ymm12_5 ymm3_5;
xor ymm10_6@uint32 ymm12_6 ymm3_6; xor ymm10_7@uint32 ymm12_7 ymm3_7;
(* vpaddd %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555c7ce *)
adds dc ymm14_0 ymm14_0 ymm6_0; adds dc ymm14_1 ymm14_1 ymm6_1;
adds dc ymm14_2 ymm14_2 ymm6_2; adds dc ymm14_3 ymm14_3 ymm6_3;
adds dc ymm14_4 ymm14_4 ymm6_4; adds dc ymm14_5 ymm14_5 ymm6_5;
adds dc ymm14_6 ymm14_6 ymm6_6; adds dc ymm14_7 ymm14_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7d2 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c7d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c7da *)
adds dc ymm10_0 ymm10_0 ymm6_0; adds dc ymm10_1 ymm10_1 ymm6_1;
adds dc ymm10_2 ymm10_2 ymm6_2; adds dc ymm10_3 ymm10_3 ymm6_3;
adds dc ymm10_4 ymm10_4 ymm6_4; adds dc ymm10_5 ymm10_5 ymm6_5;
adds dc ymm10_6 ymm10_6 ymm6_6; adds dc ymm10_7 ymm10_7 ymm6_7;
(* vpaddd %ymm7,%ymm10,%ymm10                      #! PC = 0x55555555c7de *)
adds dc ymm10_0 ymm10_0 ymm7_0; adds dc ymm10_1 ymm10_1 ymm7_1;
adds dc ymm10_2 ymm10_2 ymm7_2; adds dc ymm10_3 ymm10_3 ymm7_3;
adds dc ymm10_4 ymm10_4 ymm7_4; adds dc ymm10_5 ymm10_5 ymm7_5;
adds dc ymm10_6 ymm10_6 ymm7_6; adds dc ymm10_7 ymm10_7 ymm7_7;
(* vmovdqu 0x60(%rbx),%ymm6                        #! EA = L0x7fffffffd8e0; Value = 0xd8ad8d21d8ad8d21; PC = 0x55555555c7e2 *)
mov ymm6_0 L0x7fffffffd8e0; mov ymm6_1 L0x7fffffffd8e4;
mov ymm6_2 L0x7fffffffd8e8; mov ymm6_3 L0x7fffffffd8ec;
mov ymm6_4 L0x7fffffffd8f0; mov ymm6_5 L0x7fffffffd8f4;
mov ymm6_6 L0x7fffffffd8f8; mov ymm6_7 L0x7fffffffd8fc;
(* vpaddd 0x60(%rax),%ymm5,%ymm5                   #! EA = L0x7fffffffd7e0; Value = 0xa7b12924a7b12924; PC = 0x55555555c7e7 *)
adds dc ymm5_0 ymm5_0 L0x7fffffffd7e0; adds dc ymm5_1 ymm5_1 L0x7fffffffd7e4;
adds dc ymm5_2 ymm5_2 L0x7fffffffd7e8; adds dc ymm5_3 ymm5_3 L0x7fffffffd7ec;
adds dc ymm5_4 ymm5_4 L0x7fffffffd7f0; adds dc ymm5_5 ymm5_5 L0x7fffffffd7f4;
adds dc ymm5_6 ymm5_6 L0x7fffffffd7f8; adds dc ymm5_7 ymm5_7 L0x7fffffffd7fc;
(* vpsrld $0x3,%ymm6,%ymm7                         #! PC = 0x55555555c7ec *)
split ymm7_0 dc ymm6_0 0x3; split ymm7_1 dc ymm6_1 0x3;
split ymm7_2 dc ymm6_2 0x3; split ymm7_3 dc ymm6_3 0x3;
split ymm7_4 dc ymm6_4 0x3; split ymm7_5 dc ymm6_5 0x3;
split ymm7_6 dc ymm6_6 0x3; split ymm7_7 dc ymm6_7 0x3;
(* vpsrld $0x7,%ymm6,%ymm1                         #! PC = 0x55555555c7f1 *)
split ymm1_0 dc ymm6_0 0x7; split ymm1_1 dc ymm6_1 0x7;
split ymm1_2 dc ymm6_2 0x7; split ymm1_3 dc ymm6_3 0x7;
split ymm1_4 dc ymm6_4 0x7; split ymm1_5 dc ymm6_5 0x7;
split ymm1_6 dc ymm6_6 0x7; split ymm1_7 dc ymm6_7 0x7;
(* vpslld $0x19,%ymm6,%ymm2                        #! PC = 0x55555555c7f6 *)
split dc ymm2_0 ymm6_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm6_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm6_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm6_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm6_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm6_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm6_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm6_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c7fb *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm6,%ymm1                        #! PC = 0x55555555c7ff *)
split ymm1_0 dc ymm6_0 0x12; split ymm1_1 dc ymm6_1 0x12;
split ymm1_2 dc ymm6_2 0x12; split ymm1_3 dc ymm6_3 0x12;
split ymm1_4 dc ymm6_4 0x12; split ymm1_5 dc ymm6_5 0x12;
split ymm1_6 dc ymm6_6 0x12; split ymm1_7 dc ymm6_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c804 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm6,%ymm2                         #! PC = 0x55555555c808 *)
split dc ymm2_0 ymm6_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm6_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm6_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm6_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm6_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm6_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm6_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm6_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu (%rbx),%ymm0                            #! EA = L0x7fffffffd880; Value = 0x0ede3d230ede3d23; PC = 0x55555555c80d *)
mov ymm0_0 L0x7fffffffd880; mov ymm0_1 L0x7fffffffd884;
mov ymm0_2 L0x7fffffffd888; mov ymm0_3 L0x7fffffffd88c;
mov ymm0_4 L0x7fffffffd890; mov ymm0_5 L0x7fffffffd894;
mov ymm0_6 L0x7fffffffd898; mov ymm0_7 L0x7fffffffd89c;
(* vpsrld $0xa,%ymm0,%ymm3                         #! PC = 0x55555555c811 *)
split ymm3_0 dc ymm0_0 0xa; split ymm3_1 dc ymm0_1 0xa;
split ymm3_2 dc ymm0_2 0xa; split ymm3_3 dc ymm0_3 0xa;
split ymm3_4 dc ymm0_4 0xa; split ymm3_5 dc ymm0_5 0xa;
split ymm3_6 dc ymm0_6 0xa; split ymm3_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c816 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c81a *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c81f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c823 *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c828 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpxor  %ymm1,%ymm3,%ymm7                        #! PC = 0x55555555c82c *)
xor ymm7_0@uint32 ymm3_0 ymm1_0; xor ymm7_1@uint32 ymm3_1 ymm1_1;
xor ymm7_2@uint32 ymm3_2 ymm1_2; xor ymm7_3@uint32 ymm3_3 ymm1_3;
xor ymm7_4@uint32 ymm3_4 ymm1_4; xor ymm7_5@uint32 ymm3_5 ymm1_5;
xor ymm7_6@uint32 ymm3_6 ymm1_6; xor ymm7_7@uint32 ymm3_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c830 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c835 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c839 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c83e *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c842 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c846 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0x6,%ymm14,%ymm7                        #! PC = 0x55555555c84a *)
split ymm7_0 dc ymm14_0 0x6; split ymm7_1 dc ymm14_1 0x6;
split ymm7_2 dc ymm14_2 0x6; split ymm7_3 dc ymm14_3 0x6;
split ymm7_4 dc ymm14_4 0x6; split ymm7_5 dc ymm14_5 0x6;
split ymm7_6 dc ymm14_6 0x6; split ymm7_7 dc ymm14_7 0x6;
(* vpslld $0x1a,%ymm14,%ymm2                       #! PC = 0x55555555c850 *)
split dc ymm2_0 ymm14_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm14_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm14_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm14_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm14_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm14_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm14_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm14_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm5,0x40(%rbx)                        #! EA = L0x7fffffffd8c0; PC = 0x55555555c856 *)
mov L0x7fffffffd8c0 ymm5_0; mov L0x7fffffffd8c4 ymm5_1;
mov L0x7fffffffd8c8 ymm5_2; mov L0x7fffffffd8cc ymm5_3;
mov L0x7fffffffd8d0 ymm5_4; mov L0x7fffffffd8d4 ymm5_5;
mov L0x7fffffffd8d8 ymm5_6; mov L0x7fffffffd8dc ymm5_7;
(* vpaddd %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555c85b *)
adds dc ymm5_0 ymm5_0 ymm9_0; adds dc ymm5_1 ymm5_1 ymm9_1;
adds dc ymm5_2 ymm5_2 ymm9_2; adds dc ymm5_3 ymm5_3 ymm9_3;
adds dc ymm5_4 ymm5_4 ymm9_4; adds dc ymm5_5 ymm5_5 ymm9_5;
adds dc ymm5_6 ymm5_6 ymm9_6; adds dc ymm5_7 ymm5_7 ymm9_7;
(* vpsrld $0xb,%ymm14,%ymm1                        #! PC = 0x55555555c860 *)
split ymm1_0 dc ymm14_0 0xb; split ymm1_1 dc ymm14_1 0xb;
split ymm1_2 dc ymm14_2 0xb; split ymm1_3 dc ymm14_3 0xb;
split ymm1_4 dc ymm14_4 0xb; split ymm1_5 dc ymm14_5 0xb;
split ymm1_6 dc ymm14_6 0xb; split ymm1_7 dc ymm14_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c866 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm14,%ymm2                       #! PC = 0x55555555c86a *)
split dc ymm2_0 ymm14_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm14_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm14_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm14_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm14_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm14_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm14_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm14_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x40(%rbp),%ymm5,%ymm5                   #! EA = L0x55555555d3c0; Value = 0xbef9a3f7bef9a3f7; PC = 0x55555555c870 *)
adds dc ymm5_0 ymm5_0 L0x55555555d3c0; adds dc ymm5_1 ymm5_1 L0x55555555d3c4;
adds dc ymm5_2 ymm5_2 L0x55555555d3c8; adds dc ymm5_3 ymm5_3 L0x55555555d3cc;
adds dc ymm5_4 ymm5_4 L0x55555555d3d0; adds dc ymm5_5 ymm5_5 L0x55555555d3d4;
adds dc ymm5_6 ymm5_6 L0x55555555d3d8; adds dc ymm5_7 ymm5_7 L0x55555555d3dc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c875 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm14,%ymm1                       #! PC = 0x55555555c879 *)
split ymm1_0 dc ymm14_0 0x19; split ymm1_1 dc ymm14_1 0x19;
split ymm1_2 dc ymm14_2 0x19; split ymm1_3 dc ymm14_3 0x19;
split ymm1_4 dc ymm14_4 0x19; split ymm1_5 dc ymm14_5 0x19;
split ymm1_6 dc ymm14_6 0x19; split ymm1_7 dc ymm14_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c87f *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm14,%ymm2                        #! PC = 0x55555555c883 *)
split dc ymm2_0 ymm14_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm14_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm14_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm14_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm14_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm14_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm14_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm14_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm8,%ymm14,%ymm0                       #! PC = 0x55555555c889 *)
not ymm14_0n@uint32 ymm14_0; and ymm0_0@uint32 ymm14_0n ymm8_0;
not ymm14_1n@uint32 ymm14_1; and ymm0_1@uint32 ymm14_1n ymm8_1;
not ymm14_2n@uint32 ymm14_2; and ymm0_2@uint32 ymm14_2n ymm8_2;
not ymm14_3n@uint32 ymm14_3; and ymm0_3@uint32 ymm14_3n ymm8_3;
not ymm14_4n@uint32 ymm14_4; and ymm0_4@uint32 ymm14_4n ymm8_4;
not ymm14_5n@uint32 ymm14_5; and ymm0_5@uint32 ymm14_5n ymm8_5;
not ymm14_6n@uint32 ymm14_6; and ymm0_6@uint32 ymm14_6n ymm8_6;
not ymm14_7n@uint32 ymm14_7; and ymm0_7@uint32 ymm14_7n ymm8_7;
(* vpand  %ymm15,%ymm14,%ymm3                      #! PC = 0x55555555c88e *)
and ymm3_0@uint32 ymm14_0 ymm15_0; and ymm3_1@uint32 ymm14_1 ymm15_1;
and ymm3_2@uint32 ymm14_2 ymm15_2; and ymm3_3@uint32 ymm14_3 ymm15_3;
and ymm3_4@uint32 ymm14_4 ymm15_4; and ymm3_5@uint32 ymm14_5 ymm15_5;
and ymm3_6@uint32 ymm14_6 ymm15_6; and ymm3_7@uint32 ymm14_7 ymm15_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c893 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm10,%ymm9                        #! PC = 0x55555555c897 *)
split ymm9_0 dc ymm10_0 0x2; split ymm9_1 dc ymm10_1 0x2;
split ymm9_2 dc ymm10_2 0x2; split ymm9_3 dc ymm10_3 0x2;
split ymm9_4 dc ymm10_4 0x2; split ymm9_5 dc ymm10_5 0x2;
split ymm9_6 dc ymm10_6 0x2; split ymm9_7 dc ymm10_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c89d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm10,%ymm1                       #! PC = 0x55555555c8a1 *)
split dc ymm1_0 ymm10_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm10_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm10_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm10_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm10_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm10_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm10_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm10_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm3,%ymm0,%ymm0                        #! PC = 0x55555555c8a7 *)
xor ymm0_0@uint32 ymm0_0 ymm3_0; xor ymm0_1@uint32 ymm0_1 ymm3_1;
xor ymm0_2@uint32 ymm0_2 ymm3_2; xor ymm0_3@uint32 ymm0_3 ymm3_3;
xor ymm0_4@uint32 ymm0_4 ymm3_4; xor ymm0_5@uint32 ymm0_5 ymm3_5;
xor ymm0_6@uint32 ymm0_6 ymm3_6; xor ymm0_7@uint32 ymm0_7 ymm3_7;
(* vpxor  %ymm10,%ymm11,%ymm3                      #! PC = 0x55555555c8ab *)
xor ymm3_0@uint32 ymm11_0 ymm10_0; xor ymm3_1@uint32 ymm11_1 ymm10_1;
xor ymm3_2@uint32 ymm11_2 ymm10_2; xor ymm3_3@uint32 ymm11_3 ymm10_3;
xor ymm3_4@uint32 ymm11_4 ymm10_4; xor ymm3_5@uint32 ymm11_5 ymm10_5;
xor ymm3_6@uint32 ymm11_6 ymm10_6; xor ymm3_7@uint32 ymm11_7 ymm10_7;
(* vpxor  %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555c8b0 *)
xor ymm9_0@uint32 ymm9_0 ymm1_0; xor ymm9_1@uint32 ymm9_1 ymm1_1;
xor ymm9_2@uint32 ymm9_2 ymm1_2; xor ymm9_3@uint32 ymm9_3 ymm1_3;
xor ymm9_4@uint32 ymm9_4 ymm1_4; xor ymm9_5@uint32 ymm9_5 ymm1_5;
xor ymm9_6@uint32 ymm9_6 ymm1_6; xor ymm9_7@uint32 ymm9_7 ymm1_7;
(* vpaddd %ymm7,%ymm5,%ymm5                        #! PC = 0x55555555c8b4 *)
adds dc ymm5_0 ymm5_0 ymm7_0; adds dc ymm5_1 ymm5_1 ymm7_1;
adds dc ymm5_2 ymm5_2 ymm7_2; adds dc ymm5_3 ymm5_3 ymm7_3;
adds dc ymm5_4 ymm5_4 ymm7_4; adds dc ymm5_5 ymm5_5 ymm7_5;
adds dc ymm5_6 ymm5_6 ymm7_6; adds dc ymm5_7 ymm5_7 ymm7_7;
(* vpsrld $0xd,%ymm10,%ymm1                        #! PC = 0x55555555c8b8 *)
split ymm1_0 dc ymm10_0 0xd; split ymm1_1 dc ymm10_1 0xd;
split ymm1_2 dc ymm10_2 0xd; split ymm1_3 dc ymm10_3 0xd;
split ymm1_4 dc ymm10_4 0xd; split ymm1_5 dc ymm10_5 0xd;
split ymm1_6 dc ymm10_6 0xd; split ymm1_7 dc ymm10_7 0xd;
(* vpslld $0x13,%ymm10,%ymm2                       #! PC = 0x55555555c8be *)
split dc ymm2_0 ymm10_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm10_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm10_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm10_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm10_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm10_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm10_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm10_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm5,%ymm5                        #! PC = 0x55555555c8c4 *)
adds dc ymm5_0 ymm5_0 ymm0_0; adds dc ymm5_1 ymm5_1 ymm0_1;
adds dc ymm5_2 ymm5_2 ymm0_2; adds dc ymm5_3 ymm5_3 ymm0_3;
adds dc ymm5_4 ymm5_4 ymm0_4; adds dc ymm5_5 ymm5_5 ymm0_5;
adds dc ymm5_6 ymm5_6 ymm0_6; adds dc ymm5_7 ymm5_7 ymm0_7;
(* vpand  %ymm3,%ymm4,%ymm4                        #! PC = 0x55555555c8c8 *)
and ymm4_0@uint32 ymm4_0 ymm3_0; and ymm4_1@uint32 ymm4_1 ymm3_1;
and ymm4_2@uint32 ymm4_2 ymm3_2; and ymm4_3@uint32 ymm4_3 ymm3_3;
and ymm4_4@uint32 ymm4_4 ymm3_4; and ymm4_5@uint32 ymm4_5 ymm3_5;
and ymm4_6@uint32 ymm4_6 ymm3_6; and ymm4_7@uint32 ymm4_7 ymm3_7;
(* vpxor  %ymm1,%ymm9,%ymm7                        #! PC = 0x55555555c8cc *)
xor ymm7_0@uint32 ymm9_0 ymm1_0; xor ymm7_1@uint32 ymm9_1 ymm1_1;
xor ymm7_2@uint32 ymm9_2 ymm1_2; xor ymm7_3@uint32 ymm9_3 ymm1_3;
xor ymm7_4@uint32 ymm9_4 ymm1_4; xor ymm7_5@uint32 ymm9_5 ymm1_5;
xor ymm7_6@uint32 ymm9_6 ymm1_6; xor ymm7_7@uint32 ymm9_7 ymm1_7;
(* vpsrld $0x16,%ymm10,%ymm1                       #! PC = 0x55555555c8d0 *)
split ymm1_0 dc ymm10_0 0x16; split ymm1_1 dc ymm10_1 0x16;
split ymm1_2 dc ymm10_2 0x16; split ymm1_3 dc ymm10_3 0x16;
split ymm1_4 dc ymm10_4 0x16; split ymm1_5 dc ymm10_5 0x16;
split ymm1_6 dc ymm10_6 0x16; split ymm1_7 dc ymm10_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8d6 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm10,%ymm2                        #! PC = 0x55555555c8da *)
split dc ymm2_0 ymm10_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm10_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm10_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm10_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm10_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm10_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm10_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm10_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm4,%ymm11,%ymm9                       #! PC = 0x55555555c8e0 *)
xor ymm9_0@uint32 ymm11_0 ymm4_0; xor ymm9_1@uint32 ymm11_1 ymm4_1;
xor ymm9_2@uint32 ymm11_2 ymm4_2; xor ymm9_3@uint32 ymm11_3 ymm4_3;
xor ymm9_4@uint32 ymm11_4 ymm4_4; xor ymm9_5@uint32 ymm11_5 ymm4_5;
xor ymm9_6@uint32 ymm11_6 ymm4_6; xor ymm9_7@uint32 ymm11_7 ymm4_7;
(* vpaddd %ymm5,%ymm13,%ymm13                      #! PC = 0x55555555c8e4 *)
adds dc ymm13_0 ymm13_0 ymm5_0; adds dc ymm13_1 ymm13_1 ymm5_1;
adds dc ymm13_2 ymm13_2 ymm5_2; adds dc ymm13_3 ymm13_3 ymm5_3;
adds dc ymm13_4 ymm13_4 ymm5_4; adds dc ymm13_5 ymm13_5 ymm5_5;
adds dc ymm13_6 ymm13_6 ymm5_6; adds dc ymm13_7 ymm13_7 ymm5_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c8e8 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c8ec *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm5,%ymm9,%ymm9                        #! PC = 0x55555555c8f0 *)
adds dc ymm9_0 ymm9_0 ymm5_0; adds dc ymm9_1 ymm9_1 ymm5_1;
adds dc ymm9_2 ymm9_2 ymm5_2; adds dc ymm9_3 ymm9_3 ymm5_3;
adds dc ymm9_4 ymm9_4 ymm5_4; adds dc ymm9_5 ymm9_5 ymm5_5;
adds dc ymm9_6 ymm9_6 ymm5_6; adds dc ymm9_7 ymm9_7 ymm5_7;
(* vpaddd %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c8f4 *)
adds dc ymm9_0 ymm9_0 ymm7_0; adds dc ymm9_1 ymm9_1 ymm7_1;
adds dc ymm9_2 ymm9_2 ymm7_2; adds dc ymm9_3 ymm9_3 ymm7_3;
adds dc ymm9_4 ymm9_4 ymm7_4; adds dc ymm9_5 ymm9_5 ymm7_5;
adds dc ymm9_6 ymm9_6 ymm7_6; adds dc ymm9_7 ymm9_7 ymm7_7;
(* vmovdqu -0x80(%rax),%ymm5                       #! EA = L0x7fffffffd700; Value = 0x4d418efb4d418efb; PC = 0x55555555c8f8 *)
mov ymm5_0 L0x7fffffffd700; mov ymm5_1 L0x7fffffffd704;
mov ymm5_2 L0x7fffffffd708; mov ymm5_3 L0x7fffffffd70c;
mov ymm5_4 L0x7fffffffd710; mov ymm5_5 L0x7fffffffd714;
mov ymm5_6 L0x7fffffffd718; mov ymm5_7 L0x7fffffffd71c;
(* vpaddd -0x80(%rbx),%ymm6,%ymm6                  #! EA = L0x7fffffffd800; Value = 0x8af1ec7e8af1ec7e; PC = 0x55555555c8fd *)
adds dc ymm6_0 ymm6_0 L0x7fffffffd800; adds dc ymm6_1 ymm6_1 L0x7fffffffd804;
adds dc ymm6_2 ymm6_2 L0x7fffffffd808; adds dc ymm6_3 ymm6_3 L0x7fffffffd80c;
adds dc ymm6_4 ymm6_4 L0x7fffffffd810; adds dc ymm6_5 ymm6_5 L0x7fffffffd814;
adds dc ymm6_6 ymm6_6 L0x7fffffffd818; adds dc ymm6_7 ymm6_7 L0x7fffffffd81c;
(* vpsrld $0x3,%ymm5,%ymm7                         #! PC = 0x55555555c902 *)
split ymm7_0 dc ymm5_0 0x3; split ymm7_1 dc ymm5_1 0x3;
split ymm7_2 dc ymm5_2 0x3; split ymm7_3 dc ymm5_3 0x3;
split ymm7_4 dc ymm5_4 0x3; split ymm7_5 dc ymm5_5 0x3;
split ymm7_6 dc ymm5_6 0x3; split ymm7_7 dc ymm5_7 0x3;
(* vpsrld $0x7,%ymm5,%ymm1                         #! PC = 0x55555555c907 *)
split ymm1_0 dc ymm5_0 0x7; split ymm1_1 dc ymm5_1 0x7;
split ymm1_2 dc ymm5_2 0x7; split ymm1_3 dc ymm5_3 0x7;
split ymm1_4 dc ymm5_4 0x7; split ymm1_5 dc ymm5_5 0x7;
split ymm1_6 dc ymm5_6 0x7; split ymm1_7 dc ymm5_7 0x7;
(* vpslld $0x19,%ymm5,%ymm2                        #! PC = 0x55555555c90c *)
split dc ymm2_0 ymm5_0 (32-0x19); shl ymm2_0 ymm2_0 0x19@uint32;
split dc ymm2_1 ymm5_1 (32-0x19); shl ymm2_1 ymm2_1 0x19@uint32;
split dc ymm2_2 ymm5_2 (32-0x19); shl ymm2_2 ymm2_2 0x19@uint32;
split dc ymm2_3 ymm5_3 (32-0x19); shl ymm2_3 ymm2_3 0x19@uint32;
split dc ymm2_4 ymm5_4 (32-0x19); shl ymm2_4 ymm2_4 0x19@uint32;
split dc ymm2_5 ymm5_5 (32-0x19); shl ymm2_5 ymm2_5 0x19@uint32;
split dc ymm2_6 ymm5_6 (32-0x19); shl ymm2_6 ymm2_6 0x19@uint32;
split dc ymm2_7 ymm5_7 (32-0x19); shl ymm2_7 ymm2_7 0x19@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c911 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x12,%ymm5,%ymm1                        #! PC = 0x55555555c915 *)
split ymm1_0 dc ymm5_0 0x12; split ymm1_1 dc ymm5_1 0x12;
split ymm1_2 dc ymm5_2 0x12; split ymm1_3 dc ymm5_3 0x12;
split ymm1_4 dc ymm5_4 0x12; split ymm1_5 dc ymm5_5 0x12;
split ymm1_6 dc ymm5_6 0x12; split ymm1_7 dc ymm5_7 0x12;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c91a *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xe,%ymm5,%ymm2                         #! PC = 0x55555555c91e *)
split dc ymm2_0 ymm5_0 (32-0xe); shl ymm2_0 ymm2_0 0xe@uint32;
split dc ymm2_1 ymm5_1 (32-0xe); shl ymm2_1 ymm2_1 0xe@uint32;
split dc ymm2_2 ymm5_2 (32-0xe); shl ymm2_2 ymm2_2 0xe@uint32;
split dc ymm2_3 ymm5_3 (32-0xe); shl ymm2_3 ymm2_3 0xe@uint32;
split dc ymm2_4 ymm5_4 (32-0xe); shl ymm2_4 ymm2_4 0xe@uint32;
split dc ymm2_5 ymm5_5 (32-0xe); shl ymm2_5 ymm2_5 0xe@uint32;
split dc ymm2_6 ymm5_6 (32-0xe); shl ymm2_6 ymm2_6 0xe@uint32;
split dc ymm2_7 ymm5_7 (32-0xe); shl ymm2_7 ymm2_7 0xe@uint32;
(* vmovdqu 0x20(%rbx),%ymm0                        #! EA = L0x7fffffffd8a0; Value = 0x7ba50a527ba50a52; PC = 0x55555555c923 *)
mov ymm0_0 L0x7fffffffd8a0; mov ymm0_1 L0x7fffffffd8a4;
mov ymm0_2 L0x7fffffffd8a8; mov ymm0_3 L0x7fffffffd8ac;
mov ymm0_4 L0x7fffffffd8b0; mov ymm0_5 L0x7fffffffd8b4;
mov ymm0_6 L0x7fffffffd8b8; mov ymm0_7 L0x7fffffffd8bc;
(* vpsrld $0xa,%ymm0,%ymm4                         #! PC = 0x55555555c928 *)
split ymm4_0 dc ymm0_0 0xa; split ymm4_1 dc ymm0_1 0xa;
split ymm4_2 dc ymm0_2 0xa; split ymm4_3 dc ymm0_3 0xa;
split ymm4_4 dc ymm0_4 0xa; split ymm4_5 dc ymm0_5 0xa;
split ymm4_6 dc ymm0_6 0xa; split ymm4_7 dc ymm0_7 0xa;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c92d *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x11,%ymm0,%ymm1                        #! PC = 0x55555555c931 *)
split ymm1_0 dc ymm0_0 0x11; split ymm1_1 dc ymm0_1 0x11;
split ymm1_2 dc ymm0_2 0x11; split ymm1_3 dc ymm0_3 0x11;
split ymm1_4 dc ymm0_4 0x11; split ymm1_5 dc ymm0_5 0x11;
split ymm1_6 dc ymm0_6 0x11; split ymm1_7 dc ymm0_7 0x11;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c936 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xf,%ymm0,%ymm2                         #! PC = 0x55555555c93a *)
split dc ymm2_0 ymm0_0 (32-0xf); shl ymm2_0 ymm2_0 0xf@uint32;
split dc ymm2_1 ymm0_1 (32-0xf); shl ymm2_1 ymm2_1 0xf@uint32;
split dc ymm2_2 ymm0_2 (32-0xf); shl ymm2_2 ymm2_2 0xf@uint32;
split dc ymm2_3 ymm0_3 (32-0xf); shl ymm2_3 ymm2_3 0xf@uint32;
split dc ymm2_4 ymm0_4 (32-0xf); shl ymm2_4 ymm2_4 0xf@uint32;
split dc ymm2_5 ymm0_5 (32-0xf); shl ymm2_5 ymm2_5 0xf@uint32;
split dc ymm2_6 ymm0_6 (32-0xf); shl ymm2_6 ymm2_6 0xf@uint32;
split dc ymm2_7 ymm0_7 (32-0xf); shl ymm2_7 ymm2_7 0xf@uint32;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c93f *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpxor  %ymm1,%ymm4,%ymm7                        #! PC = 0x55555555c943 *)
xor ymm7_0@uint32 ymm4_0 ymm1_0; xor ymm7_1@uint32 ymm4_1 ymm1_1;
xor ymm7_2@uint32 ymm4_2 ymm1_2; xor ymm7_3@uint32 ymm4_3 ymm1_3;
xor ymm7_4@uint32 ymm4_4 ymm1_4; xor ymm7_5@uint32 ymm4_5 ymm1_5;
xor ymm7_6@uint32 ymm4_6 ymm1_6; xor ymm7_7@uint32 ymm4_7 ymm1_7;
(* vpsrld $0x13,%ymm0,%ymm1                        #! PC = 0x55555555c947 *)
split ymm1_0 dc ymm0_0 0x13; split ymm1_1 dc ymm0_1 0x13;
split ymm1_2 dc ymm0_2 0x13; split ymm1_3 dc ymm0_3 0x13;
split ymm1_4 dc ymm0_4 0x13; split ymm1_5 dc ymm0_5 0x13;
split ymm1_6 dc ymm0_6 0x13; split ymm1_7 dc ymm0_7 0x13;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c94c *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xd,%ymm0,%ymm2                         #! PC = 0x55555555c950 *)
split dc ymm2_0 ymm0_0 (32-0xd); shl ymm2_0 ymm2_0 0xd@uint32;
split dc ymm2_1 ymm0_1 (32-0xd); shl ymm2_1 ymm2_1 0xd@uint32;
split dc ymm2_2 ymm0_2 (32-0xd); shl ymm2_2 ymm2_2 0xd@uint32;
split dc ymm2_3 ymm0_3 (32-0xd); shl ymm2_3 ymm2_3 0xd@uint32;
split dc ymm2_4 ymm0_4 (32-0xd); shl ymm2_4 ymm2_4 0xd@uint32;
split dc ymm2_5 ymm0_5 (32-0xd); shl ymm2_5 ymm2_5 0xd@uint32;
split dc ymm2_6 ymm0_6 (32-0xd); shl ymm2_6 ymm2_6 0xd@uint32;
split dc ymm2_7 ymm0_7 (32-0xd); shl ymm2_7 ymm2_7 0xd@uint32;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c955 *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c959 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c95d *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0x6,%ymm13,%ymm7                        #! PC = 0x55555555c961 *)
split ymm7_0 dc ymm13_0 0x6; split ymm7_1 dc ymm13_1 0x6;
split ymm7_2 dc ymm13_2 0x6; split ymm7_3 dc ymm13_3 0x6;
split ymm7_4 dc ymm13_4 0x6; split ymm7_5 dc ymm13_5 0x6;
split ymm7_6 dc ymm13_6 0x6; split ymm7_7 dc ymm13_7 0x6;
(* vpslld $0x1a,%ymm13,%ymm2                       #! PC = 0x55555555c967 *)
split dc ymm2_0 ymm13_0 (32-0x1a); shl ymm2_0 ymm2_0 0x1a@uint32;
split dc ymm2_1 ymm13_1 (32-0x1a); shl ymm2_1 ymm2_1 0x1a@uint32;
split dc ymm2_2 ymm13_2 (32-0x1a); shl ymm2_2 ymm2_2 0x1a@uint32;
split dc ymm2_3 ymm13_3 (32-0x1a); shl ymm2_3 ymm2_3 0x1a@uint32;
split dc ymm2_4 ymm13_4 (32-0x1a); shl ymm2_4 ymm2_4 0x1a@uint32;
split dc ymm2_5 ymm13_5 (32-0x1a); shl ymm2_5 ymm2_5 0x1a@uint32;
split dc ymm2_6 ymm13_6 (32-0x1a); shl ymm2_6 ymm2_6 0x1a@uint32;
split dc ymm2_7 ymm13_7 (32-0x1a); shl ymm2_7 ymm2_7 0x1a@uint32;
(* vmovdqu %ymm6,0x60(%rbx)                        #! EA = L0x7fffffffd8e0; PC = 0x55555555c96d *)
mov L0x7fffffffd8e0 ymm6_0; mov L0x7fffffffd8e4 ymm6_1;
mov L0x7fffffffd8e8 ymm6_2; mov L0x7fffffffd8ec ymm6_3;
mov L0x7fffffffd8f0 ymm6_4; mov L0x7fffffffd8f4 ymm6_5;
mov L0x7fffffffd8f8 ymm6_6; mov L0x7fffffffd8fc ymm6_7;
(* vpaddd %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c972 *)
adds dc ymm6_0 ymm6_0 ymm8_0; adds dc ymm6_1 ymm6_1 ymm8_1;
adds dc ymm6_2 ymm6_2 ymm8_2; adds dc ymm6_3 ymm6_3 ymm8_3;
adds dc ymm6_4 ymm6_4 ymm8_4; adds dc ymm6_5 ymm6_5 ymm8_5;
adds dc ymm6_6 ymm6_6 ymm8_6; adds dc ymm6_7 ymm6_7 ymm8_7;
(* vpsrld $0xb,%ymm13,%ymm1                        #! PC = 0x55555555c977 *)
split ymm1_0 dc ymm13_0 0xb; split ymm1_1 dc ymm13_1 0xb;
split ymm1_2 dc ymm13_2 0xb; split ymm1_3 dc ymm13_3 0xb;
split ymm1_4 dc ymm13_4 0xb; split ymm1_5 dc ymm13_5 0xb;
split ymm1_6 dc ymm13_6 0xb; split ymm1_7 dc ymm13_7 0xb;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c97d *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x15,%ymm13,%ymm2                       #! PC = 0x55555555c981 *)
split dc ymm2_0 ymm13_0 (32-0x15); shl ymm2_0 ymm2_0 0x15@uint32;
split dc ymm2_1 ymm13_1 (32-0x15); shl ymm2_1 ymm2_1 0x15@uint32;
split dc ymm2_2 ymm13_2 (32-0x15); shl ymm2_2 ymm2_2 0x15@uint32;
split dc ymm2_3 ymm13_3 (32-0x15); shl ymm2_3 ymm2_3 0x15@uint32;
split dc ymm2_4 ymm13_4 (32-0x15); shl ymm2_4 ymm2_4 0x15@uint32;
split dc ymm2_5 ymm13_5 (32-0x15); shl ymm2_5 ymm2_5 0x15@uint32;
split dc ymm2_6 ymm13_6 (32-0x15); shl ymm2_6 ymm2_6 0x15@uint32;
split dc ymm2_7 ymm13_7 (32-0x15); shl ymm2_7 ymm2_7 0x15@uint32;
(* vpaddd 0x60(%rbp),%ymm6,%ymm6                   #! EA = L0x55555555d3e0; Value = 0xc67178f2c67178f2; PC = 0x55555555c987 *)
adds dc ymm6_0 ymm6_0 L0x55555555d3e0; adds dc ymm6_1 ymm6_1 L0x55555555d3e4;
adds dc ymm6_2 ymm6_2 L0x55555555d3e8; adds dc ymm6_3 ymm6_3 L0x55555555d3ec;
adds dc ymm6_4 ymm6_4 L0x55555555d3f0; adds dc ymm6_5 ymm6_5 L0x55555555d3f4;
adds dc ymm6_6 ymm6_6 L0x55555555d3f8; adds dc ymm6_7 ymm6_7 L0x55555555d3fc;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c98c *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x19,%ymm13,%ymm1                       #! PC = 0x55555555c990 *)
split ymm1_0 dc ymm13_0 0x19; split ymm1_1 dc ymm13_1 0x19;
split ymm1_2 dc ymm13_2 0x19; split ymm1_3 dc ymm13_3 0x19;
split ymm1_4 dc ymm13_4 0x19; split ymm1_5 dc ymm13_5 0x19;
split ymm1_6 dc ymm13_6 0x19; split ymm1_7 dc ymm13_7 0x19;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c996 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x7,%ymm13,%ymm2                        #! PC = 0x55555555c99a *)
split dc ymm2_0 ymm13_0 (32-0x7); shl ymm2_0 ymm2_0 0x7@uint32;
split dc ymm2_1 ymm13_1 (32-0x7); shl ymm2_1 ymm2_1 0x7@uint32;
split dc ymm2_2 ymm13_2 (32-0x7); shl ymm2_2 ymm2_2 0x7@uint32;
split dc ymm2_3 ymm13_3 (32-0x7); shl ymm2_3 ymm2_3 0x7@uint32;
split dc ymm2_4 ymm13_4 (32-0x7); shl ymm2_4 ymm2_4 0x7@uint32;
split dc ymm2_5 ymm13_5 (32-0x7); shl ymm2_5 ymm2_5 0x7@uint32;
split dc ymm2_6 ymm13_6 (32-0x7); shl ymm2_6 ymm2_6 0x7@uint32;
split dc ymm2_7 ymm13_7 (32-0x7); shl ymm2_7 ymm2_7 0x7@uint32;
(* vpandn %ymm15,%ymm13,%ymm0                      #! PC = 0x55555555c9a0 *)
not ymm13_0n@uint32 ymm13_0; and ymm0_0@uint32 ymm13_0n ymm15_0;
not ymm13_1n@uint32 ymm13_1; and ymm0_1@uint32 ymm13_1n ymm15_1;
not ymm13_2n@uint32 ymm13_2; and ymm0_2@uint32 ymm13_2n ymm15_2;
not ymm13_3n@uint32 ymm13_3; and ymm0_3@uint32 ymm13_3n ymm15_3;
not ymm13_4n@uint32 ymm13_4; and ymm0_4@uint32 ymm13_4n ymm15_4;
not ymm13_5n@uint32 ymm13_5; and ymm0_5@uint32 ymm13_5n ymm15_5;
not ymm13_6n@uint32 ymm13_6; and ymm0_6@uint32 ymm13_6n ymm15_6;
not ymm13_7n@uint32 ymm13_7; and ymm0_7@uint32 ymm13_7n ymm15_7;
(* vpand  %ymm14,%ymm13,%ymm4                      #! PC = 0x55555555c9a5 *)
and ymm4_0@uint32 ymm13_0 ymm14_0; and ymm4_1@uint32 ymm13_1 ymm14_1;
and ymm4_2@uint32 ymm13_2 ymm14_2; and ymm4_3@uint32 ymm13_3 ymm14_3;
and ymm4_4@uint32 ymm13_4 ymm14_4; and ymm4_5@uint32 ymm13_5 ymm14_5;
and ymm4_6@uint32 ymm13_6 ymm14_6; and ymm4_7@uint32 ymm13_7 ymm14_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9aa *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpsrld $0x2,%ymm9,%ymm8                         #! PC = 0x55555555c9ae *)
split ymm8_0 dc ymm9_0 0x2; split ymm8_1 dc ymm9_1 0x2;
split ymm8_2 dc ymm9_2 0x2; split ymm8_3 dc ymm9_3 0x2;
split ymm8_4 dc ymm9_4 0x2; split ymm8_5 dc ymm9_5 0x2;
split ymm8_6 dc ymm9_6 0x2; split ymm8_7 dc ymm9_7 0x2;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9b4 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0x1e,%ymm9,%ymm1                        #! PC = 0x55555555c9b8 *)
split dc ymm1_0 ymm9_0 (32-0x1e); shl ymm1_0 ymm1_0 0x1e@uint32;
split dc ymm1_1 ymm9_1 (32-0x1e); shl ymm1_1 ymm1_1 0x1e@uint32;
split dc ymm1_2 ymm9_2 (32-0x1e); shl ymm1_2 ymm1_2 0x1e@uint32;
split dc ymm1_3 ymm9_3 (32-0x1e); shl ymm1_3 ymm1_3 0x1e@uint32;
split dc ymm1_4 ymm9_4 (32-0x1e); shl ymm1_4 ymm1_4 0x1e@uint32;
split dc ymm1_5 ymm9_5 (32-0x1e); shl ymm1_5 ymm1_5 0x1e@uint32;
split dc ymm1_6 ymm9_6 (32-0x1e); shl ymm1_6 ymm1_6 0x1e@uint32;
split dc ymm1_7 ymm9_7 (32-0x1e); shl ymm1_7 ymm1_7 0x1e@uint32;
(* vpxor  %ymm4,%ymm0,%ymm0                        #! PC = 0x55555555c9be *)
xor ymm0_0@uint32 ymm0_0 ymm4_0; xor ymm0_1@uint32 ymm0_1 ymm4_1;
xor ymm0_2@uint32 ymm0_2 ymm4_2; xor ymm0_3@uint32 ymm0_3 ymm4_3;
xor ymm0_4@uint32 ymm0_4 ymm4_4; xor ymm0_5@uint32 ymm0_5 ymm4_5;
xor ymm0_6@uint32 ymm0_6 ymm4_6; xor ymm0_7@uint32 ymm0_7 ymm4_7;
(* vpxor  %ymm9,%ymm10,%ymm4                       #! PC = 0x55555555c9c2 *)
xor ymm4_0@uint32 ymm10_0 ymm9_0; xor ymm4_1@uint32 ymm10_1 ymm9_1;
xor ymm4_2@uint32 ymm10_2 ymm9_2; xor ymm4_3@uint32 ymm10_3 ymm9_3;
xor ymm4_4@uint32 ymm10_4 ymm9_4; xor ymm4_5@uint32 ymm10_5 ymm9_5;
xor ymm4_6@uint32 ymm10_6 ymm9_6; xor ymm4_7@uint32 ymm10_7 ymm9_7;
(* vpxor  %ymm1,%ymm8,%ymm8                        #! PC = 0x55555555c9c7 *)
xor ymm8_0@uint32 ymm8_0 ymm1_0; xor ymm8_1@uint32 ymm8_1 ymm1_1;
xor ymm8_2@uint32 ymm8_2 ymm1_2; xor ymm8_3@uint32 ymm8_3 ymm1_3;
xor ymm8_4@uint32 ymm8_4 ymm1_4; xor ymm8_5@uint32 ymm8_5 ymm1_5;
xor ymm8_6@uint32 ymm8_6 ymm1_6; xor ymm8_7@uint32 ymm8_7 ymm1_7;
(* vpaddd %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555c9cb *)
adds dc ymm6_0 ymm6_0 ymm7_0; adds dc ymm6_1 ymm6_1 ymm7_1;
adds dc ymm6_2 ymm6_2 ymm7_2; adds dc ymm6_3 ymm6_3 ymm7_3;
adds dc ymm6_4 ymm6_4 ymm7_4; adds dc ymm6_5 ymm6_5 ymm7_5;
adds dc ymm6_6 ymm6_6 ymm7_6; adds dc ymm6_7 ymm6_7 ymm7_7;
(* vpsrld $0xd,%ymm9,%ymm1                         #! PC = 0x55555555c9cf *)
split ymm1_0 dc ymm9_0 0xd; split ymm1_1 dc ymm9_1 0xd;
split ymm1_2 dc ymm9_2 0xd; split ymm1_3 dc ymm9_3 0xd;
split ymm1_4 dc ymm9_4 0xd; split ymm1_5 dc ymm9_5 0xd;
split ymm1_6 dc ymm9_6 0xd; split ymm1_7 dc ymm9_7 0xd;
(* vpslld $0x13,%ymm9,%ymm2                        #! PC = 0x55555555c9d5 *)
split dc ymm2_0 ymm9_0 (32-0x13); shl ymm2_0 ymm2_0 0x13@uint32;
split dc ymm2_1 ymm9_1 (32-0x13); shl ymm2_1 ymm2_1 0x13@uint32;
split dc ymm2_2 ymm9_2 (32-0x13); shl ymm2_2 ymm2_2 0x13@uint32;
split dc ymm2_3 ymm9_3 (32-0x13); shl ymm2_3 ymm2_3 0x13@uint32;
split dc ymm2_4 ymm9_4 (32-0x13); shl ymm2_4 ymm2_4 0x13@uint32;
split dc ymm2_5 ymm9_5 (32-0x13); shl ymm2_5 ymm2_5 0x13@uint32;
split dc ymm2_6 ymm9_6 (32-0x13); shl ymm2_6 ymm2_6 0x13@uint32;
split dc ymm2_7 ymm9_7 (32-0x13); shl ymm2_7 ymm2_7 0x13@uint32;
(* vpaddd %ymm0,%ymm6,%ymm6                        #! PC = 0x55555555c9db *)
adds dc ymm6_0 ymm6_0 ymm0_0; adds dc ymm6_1 ymm6_1 ymm0_1;
adds dc ymm6_2 ymm6_2 ymm0_2; adds dc ymm6_3 ymm6_3 ymm0_3;
adds dc ymm6_4 ymm6_4 ymm0_4; adds dc ymm6_5 ymm6_5 ymm0_5;
adds dc ymm6_6 ymm6_6 ymm0_6; adds dc ymm6_7 ymm6_7 ymm0_7;
(* vpand  %ymm4,%ymm3,%ymm3                        #! PC = 0x55555555c9df *)
and ymm3_0@uint32 ymm3_0 ymm4_0; and ymm3_1@uint32 ymm3_1 ymm4_1;
and ymm3_2@uint32 ymm3_2 ymm4_2; and ymm3_3@uint32 ymm3_3 ymm4_3;
and ymm3_4@uint32 ymm3_4 ymm4_4; and ymm3_5@uint32 ymm3_5 ymm4_5;
and ymm3_6@uint32 ymm3_6 ymm4_6; and ymm3_7@uint32 ymm3_7 ymm4_7;
(* vpxor  %ymm1,%ymm8,%ymm7                        #! PC = 0x55555555c9e3 *)
xor ymm7_0@uint32 ymm8_0 ymm1_0; xor ymm7_1@uint32 ymm8_1 ymm1_1;
xor ymm7_2@uint32 ymm8_2 ymm1_2; xor ymm7_3@uint32 ymm8_3 ymm1_3;
xor ymm7_4@uint32 ymm8_4 ymm1_4; xor ymm7_5@uint32 ymm8_5 ymm1_5;
xor ymm7_6@uint32 ymm8_6 ymm1_6; xor ymm7_7@uint32 ymm8_7 ymm1_7;
(* vpsrld $0x16,%ymm9,%ymm1                        #! PC = 0x55555555c9e7 *)
split ymm1_0 dc ymm9_0 0x16; split ymm1_1 dc ymm9_1 0x16;
split ymm1_2 dc ymm9_2 0x16; split ymm1_3 dc ymm9_3 0x16;
split ymm1_4 dc ymm9_4 0x16; split ymm1_5 dc ymm9_5 0x16;
split ymm1_6 dc ymm9_6 0x16; split ymm1_7 dc ymm9_7 0x16;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555c9ed *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpslld $0xa,%ymm9,%ymm2                         #! PC = 0x55555555c9f1 *)
split dc ymm2_0 ymm9_0 (32-0xa); shl ymm2_0 ymm2_0 0xa@uint32;
split dc ymm2_1 ymm9_1 (32-0xa); shl ymm2_1 ymm2_1 0xa@uint32;
split dc ymm2_2 ymm9_2 (32-0xa); shl ymm2_2 ymm2_2 0xa@uint32;
split dc ymm2_3 ymm9_3 (32-0xa); shl ymm2_3 ymm2_3 0xa@uint32;
split dc ymm2_4 ymm9_4 (32-0xa); shl ymm2_4 ymm2_4 0xa@uint32;
split dc ymm2_5 ymm9_5 (32-0xa); shl ymm2_5 ymm2_5 0xa@uint32;
split dc ymm2_6 ymm9_6 (32-0xa); shl ymm2_6 ymm2_6 0xa@uint32;
split dc ymm2_7 ymm9_7 (32-0xa); shl ymm2_7 ymm2_7 0xa@uint32;
(* vpxor  %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c9f7 *)
xor ymm8_0@uint32 ymm10_0 ymm3_0; xor ymm8_1@uint32 ymm10_1 ymm3_1;
xor ymm8_2@uint32 ymm10_2 ymm3_2; xor ymm8_3@uint32 ymm10_3 ymm3_3;
xor ymm8_4@uint32 ymm10_4 ymm3_4; xor ymm8_5@uint32 ymm10_5 ymm3_5;
xor ymm8_6@uint32 ymm10_6 ymm3_6; xor ymm8_7@uint32 ymm10_7 ymm3_7;
(* vpaddd %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555c9fb *)
adds dc ymm12_0 ymm12_0 ymm6_0; adds dc ymm12_1 ymm12_1 ymm6_1;
adds dc ymm12_2 ymm12_2 ymm6_2; adds dc ymm12_3 ymm12_3 ymm6_3;
adds dc ymm12_4 ymm12_4 ymm6_4; adds dc ymm12_5 ymm12_5 ymm6_5;
adds dc ymm12_6 ymm12_6 ymm6_6; adds dc ymm12_7 ymm12_7 ymm6_7;
(* vpxor  %ymm1,%ymm7,%ymm7                        #! PC = 0x55555555c9ff *)
xor ymm7_0@uint32 ymm7_0 ymm1_0; xor ymm7_1@uint32 ymm7_1 ymm1_1;
xor ymm7_2@uint32 ymm7_2 ymm1_2; xor ymm7_3@uint32 ymm7_3 ymm1_3;
xor ymm7_4@uint32 ymm7_4 ymm1_4; xor ymm7_5@uint32 ymm7_5 ymm1_5;
xor ymm7_6@uint32 ymm7_6 ymm1_6; xor ymm7_7@uint32 ymm7_7 ymm1_7;
(* vpxor  %ymm2,%ymm7,%ymm7                        #! PC = 0x55555555ca03 *)
xor ymm7_0@uint32 ymm7_0 ymm2_0; xor ymm7_1@uint32 ymm7_1 ymm2_1;
xor ymm7_2@uint32 ymm7_2 ymm2_2; xor ymm7_3@uint32 ymm7_3 ymm2_3;
xor ymm7_4@uint32 ymm7_4 ymm2_4; xor ymm7_5@uint32 ymm7_5 ymm2_5;
xor ymm7_6@uint32 ymm7_6 ymm2_6; xor ymm7_7@uint32 ymm7_7 ymm2_7;
(* vpaddd %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555ca07 *)
adds dc ymm8_0 ymm8_0 ymm6_0; adds dc ymm8_1 ymm8_1 ymm6_1;
adds dc ymm8_2 ymm8_2 ymm6_2; adds dc ymm8_3 ymm8_3 ymm6_3;
adds dc ymm8_4 ymm8_4 ymm6_4; adds dc ymm8_5 ymm8_5 ymm6_5;
adds dc ymm8_6 ymm8_6 ymm6_6; adds dc ymm8_7 ymm8_7 ymm6_7;
(* vpaddd %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555ca0b *)
adds dc ymm8_0 ymm8_0 ymm7_0; adds dc ymm8_1 ymm8_1 ymm7_1;
adds dc ymm8_2 ymm8_2 ymm7_2; adds dc ymm8_3 ymm8_3 ymm7_3;
adds dc ymm8_4 ymm8_4 ymm7_4; adds dc ymm8_5 ymm8_5 ymm7_5;
adds dc ymm8_6 ymm8_6 ymm7_6; adds dc ymm8_7 ymm8_7 ymm7_7;
(* add    $0x100,%rbp                              #! PC = 0x55555555ca0f *)
(* add 0x100, rbp *)
nop;
(* dec    %ecx                                     #! PC = 0x55555555ca16 *)
(* dec ecx *)
nop;
(* #jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! PC = 0x55555555ca18 *)
#jne    0x55555555b8a0 <sha256_multi_block_avx2+4352>#! 0x55555555ca18 = 0x55555555ca18;
(* mov    $0x1,%ecx                                #! PC = 0x55555555ca1e *)
mov ecx 0x1@uint32;
(* lea    0x200(%rsp),%rbx                         #! PC = 0x55555555ca23 *)
(* lea 0x200(%rsp), rbx *)
nop;
(* lea    0x24e(%rip),%rbp        # 0x55555555cc80 <K256+128>#! PC = 0x55555555ca2b *)
(* lea XXX, rbp *)
nop;
(* cmp    (%rbx),%ecx                              #! EA = L0x7fffffffd900; Value = 0x0000000100000001; PC = 0x55555555ca32 *)
(* cmp L0x7fffffffd900, ecx *)
nop;
(* cmovge %rbp,%r12                                #! PC = 0x55555555ca34 *)
(* cmovge rbp, r12 *)
nop;
(* cmp    0x4(%rbx),%ecx                           #! EA = L0x7fffffffd904; Value = 0x0000000100000001; PC = 0x55555555ca38 *)
(* cmp L0x7fffffffd904, ecx *)
nop;
(* cmovge %rbp,%r13                                #! PC = 0x55555555ca3b *)
(* cmovge rbp, r13 *)
nop;
(* cmp    0x8(%rbx),%ecx                           #! EA = L0x7fffffffd908; Value = 0x0000000100000001; PC = 0x55555555ca3f *)
(* cmp L0x7fffffffd908, ecx *)
nop;
(* cmovge %rbp,%r14                                #! PC = 0x55555555ca42 *)
(* cmovge rbp, r14 *)
nop;
(* cmp    0xc(%rbx),%ecx                           #! EA = L0x7fffffffd90c; Value = 0x0000000100000001; PC = 0x55555555ca46 *)
(* cmp L0x7fffffffd90c, ecx *)
nop;
(* cmovge %rbp,%r15                                #! PC = 0x55555555ca49 *)
(* cmovge rbp, r15 *)
nop;
(* cmp    0x10(%rbx),%ecx                          #! EA = L0x7fffffffd910; Value = 0x0000000100000001; PC = 0x55555555ca4d *)
(* cmp L0x7fffffffd910, ecx *)
nop;
(* cmovge %rbp,%r8                                 #! PC = 0x55555555ca50 *)
(* cmovge rbp, r8 *)
nop;
(* cmp    0x14(%rbx),%ecx                          #! EA = L0x7fffffffd914; Value = 0x0000000100000001; PC = 0x55555555ca54 *)
(* cmp L0x7fffffffd914, ecx *)
nop;
(* cmovge %rbp,%r9                                 #! PC = 0x55555555ca57 *)
(* cmovge rbp, r9 *)
nop;
(* cmp    0x18(%rbx),%ecx                          #! EA = L0x7fffffffd918; Value = 0x0000000100000001; PC = 0x55555555ca5b *)
(* cmp L0x7fffffffd918, ecx *)
nop;
(* cmovge %rbp,%r10                                #! PC = 0x55555555ca5e *)
(* cmovge rbp, r10 *)
nop;
(* cmp    0x1c(%rbx),%ecx                          #! EA = L0x7fffffffd91c; Value = 0xffffd9c800000001; PC = 0x55555555ca62 *)
(* cmp L0x7fffffffd91c, ecx *)
nop;
(* cmovge %rbp,%r11                                #! PC = 0x55555555ca65 *)
(* cmovge rbp, r11 *)
nop;
(* vmovdqa (%rbx),%ymm7                            #! EA = L0x7fffffffd900; Value = 0x0000000100000001; PC = 0x55555555ca69 *)
mov ymm7_0 L0x7fffffffd900; mov ymm7_1 L0x7fffffffd904;
mov ymm7_2 L0x7fffffffd908; mov ymm7_3 L0x7fffffffd90c;
mov ymm7_4 L0x7fffffffd910; mov ymm7_5 L0x7fffffffd914;
mov ymm7_6 L0x7fffffffd918; mov ymm7_7 L0x7fffffffd91c;
(* vpxor  %ymm0,%ymm0,%ymm0                        #! PC = 0x55555555ca6d *)
mov ymm0_0 0@uint32; mov ymm0_1 0@uint32; mov ymm0_2 0@uint32; mov ymm0_3 0@uint32;
mov ymm0_4 0@uint32; mov ymm0_5 0@uint32; mov ymm0_6 0@uint32; mov ymm0_7 0@uint32;
(* vmovdqa %ymm7,%ymm6                             #! PC = 0x55555555ca71 *)
mov ymm6_0 ymm7_0; mov ymm6_1 ymm7_1; mov ymm6_2 ymm7_2; mov ymm6_3 ymm7_3;
mov ymm6_4 ymm7_4; mov ymm6_5 ymm7_5; mov ymm6_6 ymm7_6; mov ymm6_7 ymm7_7;
(* vpcmpgtd %ymm0,%ymm6,%ymm6                      #! PC = 0x55555555ca75 *)
subb c0 dc ymm0_0 ymm6_0; cmov ymm6_0 c0 0xffffffff@uint32 0@uint32;
subb c1 dc ymm0_1 ymm6_1; cmov ymm6_1 c1 0xffffffff@uint32 0@uint32;
subb c2 dc ymm0_2 ymm6_2; cmov ymm6_2 c2 0xffffffff@uint32 0@uint32;
subb c3 dc ymm0_3 ymm6_3; cmov ymm6_3 c3 0xffffffff@uint32 0@uint32;
subb c4 dc ymm0_4 ymm6_4; cmov ymm6_4 c4 0xffffffff@uint32 0@uint32;
subb c5 dc ymm0_5 ymm6_5; cmov ymm6_5 c5 0xffffffff@uint32 0@uint32;
subb c6 dc ymm0_6 ymm6_6; cmov ymm6_6 c6 0xffffffff@uint32 0@uint32;
subb c7 dc ymm0_7 ymm6_7; cmov ymm6_7 c7 0xffffffff@uint32 0@uint32;
(* vpaddd %ymm6,%ymm7,%ymm7                        #! PC = 0x55555555ca79 *)
adds dc ymm7_0 ymm7_0 ymm6_0; adds dc ymm7_1 ymm7_1 ymm6_1;
adds dc ymm7_2 ymm7_2 ymm6_2; adds dc ymm7_3 ymm7_3 ymm6_3;
adds dc ymm7_4 ymm7_4 ymm6_4; adds dc ymm7_5 ymm7_5 ymm6_5;
adds dc ymm7_6 ymm7_6 ymm6_6; adds dc ymm7_7 ymm7_7 ymm6_7;
(* vmovdqu -0x80(%rdi),%ymm0                       #! EA = L0x7fffffffda60; Value = 0x5d957ea7303f3328; PC = 0x55555555ca7d *)
mov ymm0_0 L0x7fffffffda60; mov ymm0_1 L0x7fffffffda64;
mov ymm0_2 L0x7fffffffda68; mov ymm0_3 L0x7fffffffda6c;
mov ymm0_4 L0x7fffffffda70; mov ymm0_5 L0x7fffffffda74;
mov ymm0_6 L0x7fffffffda78; mov ymm0_7 L0x7fffffffda7c;
(* vpand  %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555ca82 *)
and ymm8_0@uint32 ymm8_0 ymm6_0; and ymm8_1@uint32 ymm8_1 ymm6_1;
and ymm8_2@uint32 ymm8_2 ymm6_2; and ymm8_3@uint32 ymm8_3 ymm6_3;
and ymm8_4@uint32 ymm8_4 ymm6_4; and ymm8_5@uint32 ymm8_5 ymm6_5;
and ymm8_6@uint32 ymm8_6 ymm6_6; and ymm8_7@uint32 ymm8_7 ymm6_7;
(* vmovdqu -0x60(%rdi),%ymm1                       #! EA = L0x7fffffffda80; Value = 0xad718c55d64e2fdf; PC = 0x55555555ca86 *)
mov ymm1_0 L0x7fffffffda80; mov ymm1_1 L0x7fffffffda84;
mov ymm1_2 L0x7fffffffda88; mov ymm1_3 L0x7fffffffda8c;
mov ymm1_4 L0x7fffffffda90; mov ymm1_5 L0x7fffffffda94;
mov ymm1_6 L0x7fffffffda98; mov ymm1_7 L0x7fffffffda9c;
(* vpand  %ymm6,%ymm9,%ymm9                        #! PC = 0x55555555ca8b *)
and ymm9_0@uint32 ymm9_0 ymm6_0; and ymm9_1@uint32 ymm9_1 ymm6_1;
and ymm9_2@uint32 ymm9_2 ymm6_2; and ymm9_3@uint32 ymm9_3 ymm6_3;
and ymm9_4@uint32 ymm9_4 ymm6_4; and ymm9_5@uint32 ymm9_5 ymm6_5;
and ymm9_6@uint32 ymm9_6 ymm6_6; and ymm9_7@uint32 ymm9_7 ymm6_7;
(* vmovdqu -0x40(%rdi),%ymm2                       #! EA = L0x7fffffffdaa0; Value = 0xcf6b2c6eafede3dd; PC = 0x55555555ca8f *)
mov ymm2_0 L0x7fffffffdaa0; mov ymm2_1 L0x7fffffffdaa4;
mov ymm2_2 L0x7fffffffdaa8; mov ymm2_3 L0x7fffffffdaac;
mov ymm2_4 L0x7fffffffdab0; mov ymm2_5 L0x7fffffffdab4;
mov ymm2_6 L0x7fffffffdab8; mov ymm2_7 L0x7fffffffdabc;
(* vpand  %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555ca94 *)
and ymm10_0@uint32 ymm10_0 ymm6_0; and ymm10_1@uint32 ymm10_1 ymm6_1;
and ymm10_2@uint32 ymm10_2 ymm6_2; and ymm10_3@uint32 ymm10_3 ymm6_3;
and ymm10_4@uint32 ymm10_4 ymm6_4; and ymm10_5@uint32 ymm10_5 ymm6_5;
and ymm10_6@uint32 ymm10_6 ymm6_6; and ymm10_7@uint32 ymm10_7 ymm6_7;
(* vmovdqu -0x20(%rdi),%ymm5                       #! EA = L0x7fffffffdac0; Value = 0x1a1f1d310b8d50eb; PC = 0x55555555ca98 *)
mov ymm5_0 L0x7fffffffdac0; mov ymm5_1 L0x7fffffffdac4;
mov ymm5_2 L0x7fffffffdac8; mov ymm5_3 L0x7fffffffdacc;
mov ymm5_4 L0x7fffffffdad0; mov ymm5_5 L0x7fffffffdad4;
mov ymm5_6 L0x7fffffffdad8; mov ymm5_7 L0x7fffffffdadc;
(* vpand  %ymm6,%ymm11,%ymm11                      #! PC = 0x55555555ca9d *)
and ymm11_0@uint32 ymm11_0 ymm6_0; and ymm11_1@uint32 ymm11_1 ymm6_1;
and ymm11_2@uint32 ymm11_2 ymm6_2; and ymm11_3@uint32 ymm11_3 ymm6_3;
and ymm11_4@uint32 ymm11_4 ymm6_4; and ymm11_5@uint32 ymm11_5 ymm6_5;
and ymm11_6@uint32 ymm11_6 ymm6_6; and ymm11_7@uint32 ymm11_7 ymm6_7;
(* vpaddd %ymm0,%ymm8,%ymm8                        #! PC = 0x55555555caa1 *)
adds dc ymm8_0 ymm8_0 ymm0_0; adds dc ymm8_1 ymm8_1 ymm0_1;
adds dc ymm8_2 ymm8_2 ymm0_2; adds dc ymm8_3 ymm8_3 ymm0_3;
adds dc ymm8_4 ymm8_4 ymm0_4; adds dc ymm8_5 ymm8_5 ymm0_5;
adds dc ymm8_6 ymm8_6 ymm0_6; adds dc ymm8_7 ymm8_7 ymm0_7;
(* vmovdqu (%rdi),%ymm0                            #! EA = L0x7fffffffdae0; Value = 0xb19133cc5f7f3e1d; PC = 0x55555555caa5 *)
mov ymm0_0 L0x7fffffffdae0; mov ymm0_1 L0x7fffffffdae4;
mov ymm0_2 L0x7fffffffdae8; mov ymm0_3 L0x7fffffffdaec;
mov ymm0_4 L0x7fffffffdaf0; mov ymm0_5 L0x7fffffffdaf4;
mov ymm0_6 L0x7fffffffdaf8; mov ymm0_7 L0x7fffffffdafc;
(* vpand  %ymm6,%ymm12,%ymm12                      #! PC = 0x55555555caa9 *)
and ymm12_0@uint32 ymm12_0 ymm6_0; and ymm12_1@uint32 ymm12_1 ymm6_1;
and ymm12_2@uint32 ymm12_2 ymm6_2; and ymm12_3@uint32 ymm12_3 ymm6_3;
and ymm12_4@uint32 ymm12_4 ymm6_4; and ymm12_5@uint32 ymm12_5 ymm6_5;
and ymm12_6@uint32 ymm12_6 ymm6_6; and ymm12_7@uint32 ymm12_7 ymm6_7;
(* vpaddd %ymm1,%ymm9,%ymm9                        #! PC = 0x55555555caad *)
adds dc ymm9_0 ymm9_0 ymm1_0; adds dc ymm9_1 ymm9_1 ymm1_1;
adds dc ymm9_2 ymm9_2 ymm1_2; adds dc ymm9_3 ymm9_3 ymm1_3;
adds dc ymm9_4 ymm9_4 ymm1_4; adds dc ymm9_5 ymm9_5 ymm1_5;
adds dc ymm9_6 ymm9_6 ymm1_6; adds dc ymm9_7 ymm9_7 ymm1_7;
(* vmovdqu 0x20(%rdi),%ymm1                        #! EA = L0x7fffffffdb00; Value = 0xeeb5f5f16975682e; PC = 0x55555555cab1 *)
mov ymm1_0 L0x7fffffffdb00; mov ymm1_1 L0x7fffffffdb04;
mov ymm1_2 L0x7fffffffdb08; mov ymm1_3 L0x7fffffffdb0c;
mov ymm1_4 L0x7fffffffdb10; mov ymm1_5 L0x7fffffffdb14;
mov ymm1_6 L0x7fffffffdb18; mov ymm1_7 L0x7fffffffdb1c;
(* vpand  %ymm6,%ymm13,%ymm13                      #! PC = 0x55555555cab6 *)
and ymm13_0@uint32 ymm13_0 ymm6_0; and ymm13_1@uint32 ymm13_1 ymm6_1;
and ymm13_2@uint32 ymm13_2 ymm6_2; and ymm13_3@uint32 ymm13_3 ymm6_3;
and ymm13_4@uint32 ymm13_4 ymm6_4; and ymm13_5@uint32 ymm13_5 ymm6_5;
and ymm13_6@uint32 ymm13_6 ymm6_6; and ymm13_7@uint32 ymm13_7 ymm6_7;
(* vpaddd %ymm2,%ymm10,%ymm10                      #! PC = 0x55555555caba *)
adds dc ymm10_0 ymm10_0 ymm2_0; adds dc ymm10_1 ymm10_1 ymm2_1;
adds dc ymm10_2 ymm10_2 ymm2_2; adds dc ymm10_3 ymm10_3 ymm2_3;
adds dc ymm10_4 ymm10_4 ymm2_4; adds dc ymm10_5 ymm10_5 ymm2_5;
adds dc ymm10_6 ymm10_6 ymm2_6; adds dc ymm10_7 ymm10_7 ymm2_7;
(* vmovdqu 0x40(%rdi),%ymm2                        #! EA = L0x7fffffffdb20; Value = 0x462ac18168fd9a41; PC = 0x55555555cabe *)
mov ymm2_0 L0x7fffffffdb20; mov ymm2_1 L0x7fffffffdb24;
mov ymm2_2 L0x7fffffffdb28; mov ymm2_3 L0x7fffffffdb2c;
mov ymm2_4 L0x7fffffffdb30; mov ymm2_5 L0x7fffffffdb34;
mov ymm2_6 L0x7fffffffdb38; mov ymm2_7 L0x7fffffffdb3c;
(* vpand  %ymm6,%ymm14,%ymm14                      #! PC = 0x55555555cac3 *)
and ymm14_0@uint32 ymm14_0 ymm6_0; and ymm14_1@uint32 ymm14_1 ymm6_1;
and ymm14_2@uint32 ymm14_2 ymm6_2; and ymm14_3@uint32 ymm14_3 ymm6_3;
and ymm14_4@uint32 ymm14_4 ymm6_4; and ymm14_5@uint32 ymm14_5 ymm6_5;
and ymm14_6@uint32 ymm14_6 ymm6_6; and ymm14_7@uint32 ymm14_7 ymm6_7;
(* vpaddd %ymm5,%ymm11,%ymm11                      #! PC = 0x55555555cac7 *)
adds dc ymm11_0 ymm11_0 ymm5_0; adds dc ymm11_1 ymm11_1 ymm5_1;
adds dc ymm11_2 ymm11_2 ymm5_2; adds dc ymm11_3 ymm11_3 ymm5_3;
adds dc ymm11_4 ymm11_4 ymm5_4; adds dc ymm11_5 ymm11_5 ymm5_5;
adds dc ymm11_6 ymm11_6 ymm5_6; adds dc ymm11_7 ymm11_7 ymm5_7;
(* vmovdqu 0x60(%rdi),%ymm5                        #! EA = L0x7fffffffdb40; Value = 0x67feae026b8ea1e8; PC = 0x55555555cacb *)
mov ymm5_0 L0x7fffffffdb40; mov ymm5_1 L0x7fffffffdb44;
mov ymm5_2 L0x7fffffffdb48; mov ymm5_3 L0x7fffffffdb4c;
mov ymm5_4 L0x7fffffffdb50; mov ymm5_5 L0x7fffffffdb54;
mov ymm5_6 L0x7fffffffdb58; mov ymm5_7 L0x7fffffffdb5c;
(* vpand  %ymm6,%ymm15,%ymm15                      #! PC = 0x55555555cad0 *)
and ymm15_0@uint32 ymm15_0 ymm6_0; and ymm15_1@uint32 ymm15_1 ymm6_1;
and ymm15_2@uint32 ymm15_2 ymm6_2; and ymm15_3@uint32 ymm15_3 ymm6_3;
and ymm15_4@uint32 ymm15_4 ymm6_4; and ymm15_5@uint32 ymm15_5 ymm6_5;
and ymm15_6@uint32 ymm15_6 ymm6_6; and ymm15_7@uint32 ymm15_7 ymm6_7;
(* vpaddd %ymm0,%ymm12,%ymm12                      #! PC = 0x55555555cad4 *)
adds dc ymm12_0 ymm12_0 ymm0_0; adds dc ymm12_1 ymm12_1 ymm0_1;
adds dc ymm12_2 ymm12_2 ymm0_2; adds dc ymm12_3 ymm12_3 ymm0_3;
adds dc ymm12_4 ymm12_4 ymm0_4; adds dc ymm12_5 ymm12_5 ymm0_5;
adds dc ymm12_6 ymm12_6 ymm0_6; adds dc ymm12_7 ymm12_7 ymm0_7;
(* vpaddd %ymm1,%ymm13,%ymm13                      #! PC = 0x55555555cad8 *)
adds dc ymm13_0 ymm13_0 ymm1_0; adds dc ymm13_1 ymm13_1 ymm1_1;
adds dc ymm13_2 ymm13_2 ymm1_2; adds dc ymm13_3 ymm13_3 ymm1_3;
adds dc ymm13_4 ymm13_4 ymm1_4; adds dc ymm13_5 ymm13_5 ymm1_5;
adds dc ymm13_6 ymm13_6 ymm1_6; adds dc ymm13_7 ymm13_7 ymm1_7;
(* vmovdqu %ymm8,-0x80(%rdi)                       #! EA = L0x7fffffffda60; PC = 0x55555555cadc *)
mov L0x7fffffffda60 ymm8_0; mov L0x7fffffffda64 ymm8_1;
mov L0x7fffffffda68 ymm8_2; mov L0x7fffffffda6c ymm8_3;
mov L0x7fffffffda70 ymm8_4; mov L0x7fffffffda74 ymm8_5;
mov L0x7fffffffda78 ymm8_6; mov L0x7fffffffda7c ymm8_7;
(* vpaddd %ymm2,%ymm14,%ymm14                      #! PC = 0x55555555cae1 *)
adds dc ymm14_0 ymm14_0 ymm2_0; adds dc ymm14_1 ymm14_1 ymm2_1;
adds dc ymm14_2 ymm14_2 ymm2_2; adds dc ymm14_3 ymm14_3 ymm2_3;
adds dc ymm14_4 ymm14_4 ymm2_4; adds dc ymm14_5 ymm14_5 ymm2_5;
adds dc ymm14_6 ymm14_6 ymm2_6; adds dc ymm14_7 ymm14_7 ymm2_7;
(* vmovdqu %ymm9,-0x60(%rdi)                       #! EA = L0x7fffffffda80; PC = 0x55555555cae5 *)
mov L0x7fffffffda80 ymm9_0; mov L0x7fffffffda84 ymm9_1;
mov L0x7fffffffda88 ymm9_2; mov L0x7fffffffda8c ymm9_3;
mov L0x7fffffffda90 ymm9_4; mov L0x7fffffffda94 ymm9_5;
mov L0x7fffffffda98 ymm9_6; mov L0x7fffffffda9c ymm9_7;
(* vpaddd %ymm5,%ymm15,%ymm15                      #! PC = 0x55555555caea *)
adds dc ymm15_0 ymm15_0 ymm5_0; adds dc ymm15_1 ymm15_1 ymm5_1;
adds dc ymm15_2 ymm15_2 ymm5_2; adds dc ymm15_3 ymm15_3 ymm5_3;
adds dc ymm15_4 ymm15_4 ymm5_4; adds dc ymm15_5 ymm15_5 ymm5_5;
adds dc ymm15_6 ymm15_6 ymm5_6; adds dc ymm15_7 ymm15_7 ymm5_7;
(* vmovdqu %ymm10,-0x40(%rdi)                      #! EA = L0x7fffffffdaa0; PC = 0x55555555caee *)
mov L0x7fffffffdaa0 ymm10_0; mov L0x7fffffffdaa4 ymm10_1;
mov L0x7fffffffdaa8 ymm10_2; mov L0x7fffffffdaac ymm10_3;
mov L0x7fffffffdab0 ymm10_4; mov L0x7fffffffdab4 ymm10_5;
mov L0x7fffffffdab8 ymm10_6; mov L0x7fffffffdabc ymm10_7;
(* vmovdqu %ymm11,-0x20(%rdi)                      #! EA = L0x7fffffffdac0; PC = 0x55555555caf3 *)
mov L0x7fffffffdac0 ymm11_0; mov L0x7fffffffdac4 ymm11_1;
mov L0x7fffffffdac8 ymm11_2; mov L0x7fffffffdacc ymm11_3;
mov L0x7fffffffdad0 ymm11_4; mov L0x7fffffffdad4 ymm11_5;
mov L0x7fffffffdad8 ymm11_6; mov L0x7fffffffdadc ymm11_7;
(* vmovdqu %ymm12,(%rdi)                           #! EA = L0x7fffffffdae0; PC = 0x55555555caf8 *)
mov L0x7fffffffdae0 ymm12_0; mov L0x7fffffffdae4 ymm12_1;
mov L0x7fffffffdae8 ymm12_2; mov L0x7fffffffdaec ymm12_3;
mov L0x7fffffffdaf0 ymm12_4; mov L0x7fffffffdaf4 ymm12_5;
mov L0x7fffffffdaf8 ymm12_6; mov L0x7fffffffdafc ymm12_7;
(* vmovdqu %ymm13,0x20(%rdi)                       #! EA = L0x7fffffffdb00; PC = 0x55555555cafc *)
mov L0x7fffffffdb00 ymm13_0; mov L0x7fffffffdb04 ymm13_1;
mov L0x7fffffffdb08 ymm13_2; mov L0x7fffffffdb0c ymm13_3;
mov L0x7fffffffdb10 ymm13_4; mov L0x7fffffffdb14 ymm13_5;
mov L0x7fffffffdb18 ymm13_6; mov L0x7fffffffdb1c ymm13_7;
(* vmovdqu %ymm14,0x40(%rdi)                       #! EA = L0x7fffffffdb20; PC = 0x55555555cb01 *)
mov L0x7fffffffdb20 ymm14_0; mov L0x7fffffffdb24 ymm14_1;
mov L0x7fffffffdb28 ymm14_2; mov L0x7fffffffdb2c ymm14_3;
mov L0x7fffffffdb30 ymm14_4; mov L0x7fffffffdb34 ymm14_5;
mov L0x7fffffffdb38 ymm14_6; mov L0x7fffffffdb3c ymm14_7;
(* vmovdqu %ymm15,0x60(%rdi)                       #! EA = L0x7fffffffdb40; PC = 0x55555555cb06 *)
mov L0x7fffffffdb40 ymm15_0; mov L0x7fffffffdb44 ymm15_1;
mov L0x7fffffffdb48 ymm15_2; mov L0x7fffffffdb4c ymm15_3;
mov L0x7fffffffdb50 ymm15_4; mov L0x7fffffffdb54 ymm15_5;
mov L0x7fffffffdb58 ymm15_6; mov L0x7fffffffdb5c ymm15_7;
(* vmovdqu %ymm7,(%rbx)                            #! EA = L0x7fffffffd900; PC = 0x55555555cb0b *)
mov L0x7fffffffd900 ymm7_0; mov L0x7fffffffd904 ymm7_1;
mov L0x7fffffffd908 ymm7_2; mov L0x7fffffffd90c ymm7_3;
mov L0x7fffffffd910 ymm7_4; mov L0x7fffffffd914 ymm7_5;
mov L0x7fffffffd918 ymm7_6; mov L0x7fffffffd91c ymm7_7;
(* lea    0x180(%rsp),%rbx                         #! PC = 0x55555555cb0f *)
(* lea 0x180(%rsp), rbx *)
nop;
(* vmovdqu 0x8e1(%rip),%ymm6        # 0x55555555d400 <K256+2048>#! EA = L0x55555555d400; Value = 0x0405060700010203; PC = 0x55555555cb17 *)
mov ymm6_0 L0x55555555d400; mov ymm6_1 L0x55555555d404;
mov ymm6_2 L0x55555555d408; mov ymm6_3 L0x55555555d40c;
mov ymm6_4 L0x55555555d410; mov ymm6_5 L0x55555555d414;
mov ymm6_6 L0x55555555d418; mov ymm6_7 L0x55555555d41c;
(* dec    %edx                                     #! PC = 0x55555555cb1f *)
(* dec edx *)
nop;
(* #jne    0x55555555a8e0 <sha256_multi_block_avx2+320>#! PC = 0x55555555cb21 *)
#jne    0x55555555a8e0 <sha256_multi_block_avx2+320>#! 0x55555555cb21 = 0x55555555cb21;
(* mov    0x220(%rsp),%rax                         #! EA = L0x7fffffffd920; Value = 0x00007fffffffd9c8; PC = 0x55555555cb27 *)
(* mov 0x220(%rsp), rax *)
nop;
(* vzeroupper                                      #! PC = 0x55555555cb2f *)
(* vzeroupper *)
nop;
(* mov    -0x30(%rax),%r15                         #! EA = L0x7fffffffd998; Value = 0x00007ffff7ffd040; PC = 0x55555555cb32 *)
mov r15 L0x7fffffffd998;
(* mov    -0x28(%rax),%r14                         #! EA = L0x7fffffffd9a0; Value = 0x000055555555fdb0; PC = 0x55555555cb36 *)
mov r14 L0x7fffffffd9a0;
(* mov    -0x20(%rax),%r13                         #! EA = L0x7fffffffd9a8; Value = 0x00005555555551e9; PC = 0x55555555cb3a *)
mov r13 L0x7fffffffd9a8;
(* mov    -0x18(%rax),%r12                         #! EA = L0x7fffffffd9b0; Value = 0x00007fffffffdc88; PC = 0x55555555cb3e *)
mov r12 L0x7fffffffd9b0;
(* mov    -0x10(%rax),%rbp                         #! EA = L0x7fffffffd9b8; Value = 0x00007fffffffdb70; PC = 0x55555555cb42 *)
mov rbp L0x7fffffffd9b8;
(* mov    -0x8(%rax),%rbx                          #! EA = L0x7fffffffd9c0; Value = 0x0000000000000000; PC = 0x55555555cb46 *)
mov rbx L0x7fffffffd9c0;
(* lea    (%rax),%rsp                              #! PC = 0x55555555cb4a *)
(* lea XXX, %rsp *)
nop;
(* #! <- SP = 0x7fffffffd9c8 *)
#! 0x7fffffffd9c8 = 0x7fffffffd9c8;
(* #repz ret                                       #! PC = 0x55555555cb4d *)
#repz ret                                       #! 0x55555555cb4d = 0x55555555cb4d;

mov a0 L0x7fffffffda60; mov a1 L0x7fffffffda80;
mov a2 L0x7fffffffdaa0; mov a3 L0x7fffffffdac0;
mov a4 L0x7fffffffdae0; mov a5 L0x7fffffffdb00;
mov a6 L0x7fffffffdb20; mov a7 L0x7fffffffdb40;
mov b0 L0x7fffffffda64; mov b1 L0x7fffffffda84;
mov b2 L0x7fffffffdaa4; mov b3 L0x7fffffffdac4;
mov b4 L0x7fffffffdae4; mov b5 L0x7fffffffdb04;
mov b6 L0x7fffffffdb24; mov b7 L0x7fffffffdb44;
mov c0 L0x7fffffffda68; mov c1 L0x7fffffffda88;
mov c2 L0x7fffffffdaa8; mov c3 L0x7fffffffdac8;
mov c4 L0x7fffffffdae8; mov c5 L0x7fffffffdb08;
mov c6 L0x7fffffffdb28; mov c7 L0x7fffffffdb48;
mov d0 L0x7fffffffda6c; mov d1 L0x7fffffffda8c;
mov d2 L0x7fffffffdaac; mov d3 L0x7fffffffdacc;
mov d4 L0x7fffffffdaec; mov d5 L0x7fffffffdb0c;
mov d6 L0x7fffffffdb2c; mov d7 L0x7fffffffdb4c;
mov e0 L0x7fffffffda70; mov e1 L0x7fffffffda90;
mov e2 L0x7fffffffdab0; mov e3 L0x7fffffffdad0;
mov e4 L0x7fffffffdaf0; mov e5 L0x7fffffffdb10;
mov e6 L0x7fffffffdb30; mov e7 L0x7fffffffdb50;
mov f0 L0x7fffffffda74; mov f1 L0x7fffffffda94;
mov f2 L0x7fffffffdab4; mov f3 L0x7fffffffdad4;
mov f4 L0x7fffffffdaf4; mov f5 L0x7fffffffdb14;
mov f6 L0x7fffffffdb34; mov f7 L0x7fffffffdb54;
mov g0 L0x7fffffffda78; mov g1 L0x7fffffffda98;
mov g2 L0x7fffffffdab8; mov g3 L0x7fffffffdad8;
mov g4 L0x7fffffffdaf8; mov g5 L0x7fffffffdb18;
mov g6 L0x7fffffffdb38; mov g7 L0x7fffffffdb58;
mov h0 L0x7fffffffda7c; mov h1 L0x7fffffffda9c;
mov h2 L0x7fffffffdabc; mov h3 L0x7fffffffdadc;
mov h4 L0x7fffffffdafc; mov h5 L0x7fffffffdb1c;
mov h6 L0x7fffffffdb3c; mov h7 L0x7fffffffdb5c;

{
  true
  &&
  true
}

