#! $1c(%rdi) = %%EA
#! (%rdi) = %%EA
#! $1c(%rsi) = %%EA
#! (%rsi) = %%EA
#! $1c(%rdx) = %%EA
#! (%rdx) = %%EA
#! $1c(%rbx) = %%EA
#! (%rbx) = %%EA
#! -$1c(%rip) = %%EA
#! %r$1c = %%r$1c
#! %rax = %%rax
#! %rbx = %%rbx
#! %rcx = %%rcx
#! %rdx = %%rdx
#! %rbp = %%rbp
#! %rsi = %%rsi
#! %eax = %%eax

# x86_64 conventions
#! add $1v, $2v -> adds carry $2v $2v $1v
#! adc $1v, $2v -> adcs carry $2v $2v $1v carry
#! adc $1c, $2v -> adc $2v $2v $1c@uint64 carry
#! adcx $1v, $2v -> adcs carry $2v $2v $1v carry
#! adox $1v, $2v -> adcs overflow $2v $2v $1v overflow

#! cmovb $1v, $2v -> cmov $2v carry $1v $2v
#! mov $1c, $2v -> mov $2v $1c@uint64
#! mov $1c, $2ea -> mov $2ea $1c@uint64
#! mov $1v, $2v -> mov $2v $1v
#! mov $1ea, $2v -> mov $2v $1ea
#! mov $1v, $2ea -> mov $2ea $1v
#! mulx $1v, $2v, $3v -> mull $3v $2v rdx $1v
#! sbb $1v, $2v -> sbbs carry $2v $2v $1v carry
#! sbb $1c, $2v -> sbbs carry $2v $2v $1c@uint64 carry
#! shlx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit ddc $3v $2v 32;\nshl $3v $3v 32
#! shrx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit $3v dc $2v 32
#! xor $1v, $1v -> mov $1v 0@uint64;\nclear carry;\nclear overflow

#! sub $1ea, $2v -> subb carry $2v $2v $1ea
#! sub $1c, $2v -> subb carry $2v $2v $1c@uint64
#! test $1v, $1v -> subb zero dontcare $1v 1@uint64
#! lea $1ea, $2v -> mov $2v, $1ea

ecp_nistz256_mul_by_3:
# %rdi = 0x7fffffffdc90
# %rsi = 0x7fffffffdc50
# %rdx = 0x7fffffffdc50
# %rcx = 0x-136effffe700
# %r8  = 0x1900000019a0
# %r9  = 0xd2f00000902
	#! -> SP = 0x7fffffffdc38
	push   %r12                                     #! EA = L0x7fffffffdc30; PC = 0x55555557c240
	push   %r13                                     #! EA = L0x7fffffffdc28; PC = 0x55555557c242
	mov    (%rsi),%r8                               #! EA = L0x7fffffffdc50; Value = 0x0000000080000002; PC = 0x55555557c244
	xor    %r13,%r13                                #! PC = 0x55555557c247
	mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffdc58; Value = 0x6b80000000000000; PC = 0x55555557c24a
	add    %r8,%r8                                  #! PC = 0x55555557c24e
	mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffdc60; Value = 0x0000000000000000; PC = 0x55555557c251
	adc    %r9,%r9                                  #! PC = 0x55555557c255
	mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffdc68; Value = 0x0000000000000000; PC = 0x55555557c258
	mov    %r8,%rax                                 #! PC = 0x55555557c25c
	adc    %r10,%r10                                #! PC = 0x55555557c25f
	adc    %r11,%r11                                #! PC = 0x55555557c262
	mov    %r9,%rdx                                 #! PC = 0x55555557c265
	adc    $0x0,%r13                                #! PC = 0x55555557c268
	sub    $0xffffffffffffffff,%r8                  #! PC = 0x55555557c26c
	mov    %r10,%rcx                                #! PC = 0x55555557c270
	sbb    -0x272(%rip),%r9        # 0x55555557c008 #! EA = L0x55555557c008; Value = 0x00000000ffffffff; PC = 0x55555557c273
	sbb    $0x0,%r10                                #! PC = 0x55555557c27a
	mov    %r11,%r12                                #! PC = 0x55555557c27e
	sbb    -0x270(%rip),%r11        # 0x55555557c018#! EA = L0x55555557c018; Value = 0xffffffff00000001; PC = 0x55555557c281
	sbb    $0x0,%r13                                #! PC = 0x55555557c288
	cmovb  %rax,%r8                                 #! PC = 0x55555557c28c
	cmovb  %rdx,%r9                                 #! PC = 0x55555557c290
	cmovb  %rcx,%r10                                #! PC = 0x55555557c294
	cmovb  %r12,%r11                                #! PC = 0x55555557c298
	xor    %r13,%r13                                #! PC = 0x55555557c29c
	add    (%rsi),%r8                               #! EA = L0x7fffffffdc50; Value = 0x0000000080000002; PC = 0x55555557c29f
	adc    0x8(%rsi),%r9                            #! EA = L0x7fffffffdc58; Value = 0x6b80000000000000; PC = 0x55555557c2a2
	mov    %r8,%rax                                 #! PC = 0x55555557c2a6
	adc    0x10(%rsi),%r10                          #! EA = L0x7fffffffdc60; Value = 0x0000000000000000; PC = 0x55555557c2a9
	adc    0x18(%rsi),%r11                          #! EA = L0x7fffffffdc68; Value = 0x0000000000000000; PC = 0x55555557c2ad
	mov    %r9,%rdx                                 #! PC = 0x55555557c2b1
	adc    $0x0,%r13                                #! PC = 0x55555557c2b4
	sub    $0xffffffffffffffff,%r8                  #! PC = 0x55555557c2b8
	mov    %r10,%rcx                                #! PC = 0x55555557c2bc
	sbb    -0x2be(%rip),%r9        # 0x55555557c008 #! EA = L0x55555557c008; Value = 0x00000000ffffffff; PC = 0x55555557c2bf
	sbb    $0x0,%r10                                #! PC = 0x55555557c2c6
	mov    %r11,%r12                                #! PC = 0x55555557c2ca
	sbb    -0x2bc(%rip),%r11        # 0x55555557c018#! EA = L0x55555557c018; Value = 0xffffffff00000001; PC = 0x55555557c2cd
	sbb    $0x0,%r13                                #! PC = 0x55555557c2d4
	cmovb  %rax,%r8                                 #! PC = 0x55555557c2d8
	cmovb  %rdx,%r9                                 #! PC = 0x55555557c2dc
	mov    %r8,(%rdi)                               #! EA = L0x7fffffffdc90; PC = 0x55555557c2e0
	cmovb  %rcx,%r10                                #! PC = 0x55555557c2e3
	mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdc98; PC = 0x55555557c2e7
	cmovb  %r12,%r11                                #! PC = 0x55555557c2eb
	mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdca0; PC = 0x55555557c2ef
	mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdca8; PC = 0x55555557c2f3
	mov    (%rsp),%r13                              #! EA = L0x7fffffffdc28; Value = 0x00007fffffffdde8; PC = 0x55555557c2f7
	mov    0x8(%rsp),%r12                           #! EA = L0x7fffffffdc30; Value = 0x0000000000000000; PC = 0x55555557c2fb
	lea    0x10(%rsp),%rsp                          #! PC = 0x55555557c300
	#! <- SP = 0x7fffffffdc38
	#repz ret                                       #! PC = 0x55555557c305
