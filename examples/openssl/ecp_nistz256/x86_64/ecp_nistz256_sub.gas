#! $1c(%rdi) = %%EA
#! (%rdi) = %%EA
#! $1c(%rsi) = %%EA
#! (%rsi) = %%EA
#! $1c(%rdx) = %%EA
#! (%rdx) = %%EA
#! $1c(%rbx) = %%EA
#! (%rbx) = %%EA
#! -$1c(%rip) = %%EA
#! $1c(%rip) = %%EA
#! %r$1c = %%r$1c
#! %rax = %%rax
#! %rbx = %%rbx
#! %rcx = %%rcx
#! %rdx = %%rdx
#! %rbp = %%rbp
#! %rsi = %%rsi
#! %eax = %%eax
#! %rdi = %%rdi
#! %edi = %%edi
#! %edx = %%edx
#! $1c(%rsp) = %%EA
#! (%rcx) = %%EA


#! add $1v, $2v -> adds carry $2v $2v $1v
#! adc $1v, $2v -> adcs carry $2v $2v $1v carry
#! adc $1c, $2v -> adcs carry $2v $2v $1c@uint64 carry
#! adc $1c, $2v -> adcs carry $2v $2v $1c@uint64 carry
#! adcx $1v, $2v -> adcs carry $2v $2v $1v carry
#! adox $1v, $2v -> adcs overflow $2v $2v $1v overflow
#! mov $1c, $2v -> mov $2v $1c@uint64
#! mov $1c, $2ea -> mov $2ea $1c@uint64
#! mov $1v, $2v -> mov $2v $1v
#! mov $1ea, $2v -> mov $2v $1ea
#! mov $1v, $2ea -> mov $2ea $1v
#! sub $1ea, $2v -> subb carry $2v $2v $1ea
#! sub $1v, $2ea -> subb carry $2ea $2ea $1v
#! sub $1v, $2v -> subb carry $2v $2v $1v
#! sbb $1v, $1v -> sbbs carry $1v $1v $1v carry;\nmov overflow carry;\nnot zero@bit carry
#! sub $1c, $2v -> subb carry $2v $2v $1c@uint64
#! sbb $1v, $2v -> sbbs carry $2v $2v $1v carry
#! sbb $1c, $2v -> sbbs carry $2v $2v $1c@uint64 carry
#! shlx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit ddc $3v $2v 32;\nshl $3v $3v 32
#! shrx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit $3v dc $2v 32
#! lea $1ea, $2v -> mov $2v $1ea
#! test $1v, $1v -> subb zero dontcare $1v 1@uint64
#! test \$0x1, $1v -> and tmp@uint64 0x1@uint64 $1v;\nsubb zero dontcare tmp 0x1@uint64
#! or $1v, $2v -> or $2v@uint64 $1v $2v;\nclear carry;\nclear overflow
#! shl \$0x3f, $1v -> split ddc $1v $1v 1;\nshl $1v $1v 63
#! shl \$0x20, $1v -> split ddc $1v $1v 32;\nshl $1v $1v 32
#! shr $1v -> split $1v dontcare $1v 1
#! shr \$0x20, $1v -> split $1v ddc $1v 32
#! cmovb $1v, $2v -> cmov $2v carry $1v $2v
#! cmove $1v, $2v -> cmov $2v zero $1v $2v
#! cmovne $1v, $2v -> cmov $2v zero $2v $1v
#! and $1c, $2v -> and $2v@uint64 $2v $1c@uint64
#! xor $1v, $1v -> mov $1v 0@uint64;\nclear carry;\nclear overflow
#! imul $1v, $2v -> mull dontcare $2v $1v $2v
#! mul $1v -> mull rdx rax rax $1v;\nsubb tmp dontcare rdx 1@uint64;\nnot carry@bit tmp;\nnot overflow@bit tmp
#! mulx $1v, $2v, $3v -> mull $3v $2v rdx $1v
#! mulq $1ea -> mull rdx rax rax $1ea
#! dec $1v -> subb overflow $1v $1v 1@uint64

ecp_nistz256_sub:
# %rdi = 0x7fffffffdc20
# %rsi = 0x7fffffffdbe0
# %rdx = 0x7fffffffdc00
# %rcx = 0x7fffffffdbe0
# %r8  = 0x0
# %r9  = 0x5000000019
	#! -> SP = 0x7fffffffdbd8
	push   %r12                                     #! EA = L0x7fffffffdbd0; PC = 0x55555557c3a0
	push   %r13                                     #! EA = L0x7fffffffdbc8; PC = 0x55555557c3a2
	mov    (%rsi),%r8                               #! EA = L0x7fffffffdbe0; Value = 0x0000000000000000; PC = 0x55555557c3a4
	xor    %r13,%r13                                #! PC = 0x55555557c3a7
	mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffdbe8; Value = 0x0000005000000019; PC = 0x55555557c3aa
	mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffdbf0; Value = 0x0000001000000000; PC = 0x55555557c3ae
	mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffdbf8; Value = 0x0000000000000000; PC = 0x55555557c3b2
	lea    -0x3bd(%rip),%rsi        # 0x55555557c000#! PC = 0x55555557c3b6
	sub    (%rdx),%r8                               #! EA = L0x7fffffffdc00; Value = 0x0000000000000000; PC = 0x55555557c3bd
	sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffdc08; Value = 0x0000000000000000; PC = 0x55555557c3c0
	mov    %r8,%rax                                 #! PC = 0x55555557c3c4
	sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffdc10; Value = 0x0000000000000000; PC = 0x55555557c3c7
	sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffdc18; Value = 0x0000000000000000; PC = 0x55555557c3cb
	mov    %r9,%rdx                                 #! PC = 0x55555557c3cf
	sbb    $0x0,%r13                                #! PC = 0x55555557c3d2
	add    (%rsi),%r8                               #! EA = L0x55555557c000; Value = 0xffffffffffffffff; PC = 0x55555557c3d6
	mov    %r10,%rcx                                #! PC = 0x55555557c3d9
	adc    0x8(%rsi),%r9                            #! EA = L0x55555557c008; Value = 0x00000000ffffffff; PC = 0x55555557c3dc
	adc    0x10(%rsi),%r10                          #! EA = L0x55555557c010; Value = 0x0000000000000000; PC = 0x55555557c3e0
	mov    %r11,%r12                                #! PC = 0x55555557c3e4
	adc    0x18(%rsi),%r11                          #! EA = L0x55555557c018; Value = 0xffffffff00000001; PC = 0x55555557c3e7
	test   %r13,%r13                                #! PC = 0x55555557c3eb
	cmove  %rax,%r8                                 #! PC = 0x55555557c3ee
	cmove  %rdx,%r9                                 #! PC = 0x55555557c3f2
	mov    %r8,(%rdi)                               #! EA = L0x7fffffffdc20; PC = 0x55555557c3f6
	cmove  %rcx,%r10                                #! PC = 0x55555557c3f9
	mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdc28; PC = 0x55555557c3fd
	cmove  %r12,%r11                                #! PC = 0x55555557c401
	mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdc30; PC = 0x55555557c405
	mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdc38; PC = 0x55555557c409
	mov    (%rsp),%r13                              #! EA = L0x7fffffffdbc8; Value = 0x00007fffffffdd78; PC = 0x55555557c40d
	mov    0x8(%rsp),%r12                           #! EA = L0x7fffffffdbd0; Value = 0x0000000000000000; PC = 0x55555557c411
	lea    0x10(%rsp),%rsp                          #! PC = 0x55555557c416
	#! <- SP = 0x7fffffffdbd8
	#repz ret                                       #! PC = 0x55555557c41b
