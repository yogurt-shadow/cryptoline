#! $1c(%rdi) = %%EA
#! (%rdi) = %%EA
#! $1c(%rsi) = %%EA
#! (%rsi) = %%EA
#! $1c(%rdx) = %%EA
#! (%rdx) = %%EA
#! $1c(%rbx) = %%EA
#! (%rbx) = %%EA
#! -$1c(%rip) = %%EA
#! %r$1c = %%r$1c
#! %rax = %%rax
#! %rbx = %%rbx
#! %rcx = %%rcx
#! %rdx = %%rdx
#! %rbp = %%rbp
#! %rsi = %%rsi
#! %eax = %%eax

# x86_64 conventions
#! add $1v, $2v -> adds carry $2v $2v $1v
#! adc $1v, $2v -> adcs carry $2v $2v $1v carry
#! adc $1c, $2v -> adc $2v $2v $1c@uint64 carry
#! adcx $1v, $2v -> adcs carry $2v $2v $1v carry
#! adox $1v, $2v -> adcs overflow $2v $2v $1v overflow

#! cmovb $1v, $2v -> cmov $2v carry $1v $2v
#! mov $1c, $2v -> mov $2v $1c@uint64
#! mov $1c, $2ea -> mov $2ea $1c@uint64
#! mov $1v, $2v -> mov $2v $1v
#! mov $1ea, $2v -> mov $2v $1ea
#! mov $1v, $2ea -> mov $2ea $1v
#! mulx $1v, $2v, $3v -> mull $3v $2v rdx $1v
#! sbb $1v, $2v -> sbbs carry $2v $2v $1v carry
#! sbb $1c, $2v -> sbbs carry $2v $2v $1c@uint64 carry
#! shlx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit ddc $3v $2v 32;\nshl $3v $3v 32
#! shrx $1v, $2v, $3v -> assert $1v=32 && true;\nsplit $3v dc $2v 32
#! xor $1v, $1v -> mov $1v 0@uint64;\nclear carry;\nclear overflow

#! sub $1ea, $2v -> subb carry $2v $2v $1ea
#! sub $1c, $2v -> subb carry $2v $2v $1c@uint64
#! test $1v, $1v -> subb zero dontcare $1v 1@uint64
#! lea $1ea, $2v -> mov $2v $1ea

#! test \$0x1, $1v -> and tmp@uint64 0x1@uint64 $1v;\nsubb zero dontcare tmp 0x1@uint64
#! or $1v, $2v -> or $2v@uint64 $1v $2v;\nclear carry;\nclear overflow
#! shl \$0x3f, $1v -> split ddc $1v $1v 1;\nshl $1v $1v 63
#! shr $1v -> split $1v dontcare $1v 1
#! cmove $1v, $2v -> cmov $2v zero $1v $2v

ecp_nistz256_div_by_2:
# %rdi = 0x7fffffffdc10
# %rsi = 0x7fffffffdbd0
# %rdx = 0x7fffffffdbd0
# %rcx = 0x2000000000
# %r8  = 0x0
# %r9  = 0xa000000032
	#! -> SP = 0x7fffffffdbb8
	push   %r12                                     #! EA = L0x7fffffffdbb0; PC = 0x55555557c180
	push   %r13                                     #! EA = L0x7fffffffdba8; PC = 0x55555557c182
	mov    (%rsi),%r8                               #! EA = L0x7fffffffdbd0; Value = 0x0000000000000000; PC = 0x55555557c184
	mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffdbd8; Value = 0x0000005000000019; PC = 0x55555557c187
	mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffdbe0; Value = 0x0000001000000000; PC = 0x55555557c18b
	mov    %r8,%rax                                 #! PC = 0x55555557c18f
	mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffdbe8; Value = 0x0000000000000000; PC = 0x55555557c192
	lea    -0x19d(%rip),%rsi        # 0x55555557c000#! PC = 0x55555557c196
	mov    %r9,%rdx                                 #! PC = 0x55555557c19d
	xor    %r13,%r13                                #! PC = 0x55555557c1a0
	add    (%rsi),%r8                               #! EA = L0x55555557c000; Value = 0xffffffffffffffff; PC = 0x55555557c1a3
	mov    %r10,%rcx                                #! PC = 0x55555557c1a6
	adc    0x8(%rsi),%r9                            #! EA = L0x55555557c008; Value = 0x00000000ffffffff; PC = 0x55555557c1a9
	adc    0x10(%rsi),%r10                          #! EA = L0x55555557c010; Value = 0x0000000000000000; PC = 0x55555557c1ad
	mov    %r11,%r12                                #! PC = 0x55555557c1b1
	adc    0x18(%rsi),%r11                          #! EA = L0x55555557c018; Value = 0xffffffff00000001; PC = 0x55555557c1b4
	adc    $0x0,%r13                                #! PC = 0x55555557c1b8
	xor    %rsi,%rsi                                #! PC = 0x55555557c1bc
	test   $0x1,%rax                                #! PC = 0x55555557c1bf
	cmove  %rax,%r8                                 #! PC = 0x55555557c1c5
	cmove  %rdx,%r9                                 #! PC = 0x55555557c1c9
	cmove  %rcx,%r10                                #! PC = 0x55555557c1cd
	cmove  %r12,%r11                                #! PC = 0x55555557c1d1
	cmove  %rsi,%r13                                #! PC = 0x55555557c1d5
	mov    %r9,%rax                                 #! PC = 0x55555557c1d9
	shr    %r8                                      #! PC = 0x55555557c1dc
	shl    $0x3f,%rax                               #! PC = 0x55555557c1df
	mov    %r10,%rdx                                #! PC = 0x55555557c1e3
	shr    %r9                                      #! PC = 0x55555557c1e6
	or     %rax,%r8                                 #! PC = 0x55555557c1e9
	shl    $0x3f,%rdx                               #! PC = 0x55555557c1ec
	mov    %r11,%rcx                                #! PC = 0x55555557c1f0
	shr    %r10                                     #! PC = 0x55555557c1f3
	or     %rdx,%r9                                 #! PC = 0x55555557c1f6
	shl    $0x3f,%rcx                               #! PC = 0x55555557c1f9
	shr    %r11                                     #! PC = 0x55555557c1fd
	shl    $0x3f,%r13                               #! PC = 0x55555557c200
	or     %rcx,%r10                                #! PC = 0x55555557c204
	or     %r13,%r11                                #! PC = 0x55555557c207
	mov    %r8,(%rdi)                               #! EA = L0x7fffffffdc10; PC = 0x55555557c20a
	mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdc18; PC = 0x55555557c20d
	mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdc20; PC = 0x55555557c211
	mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdc28; PC = 0x55555557c215
	mov    (%rsp),%r13                              #! EA = L0x7fffffffdba8; Value = 0x00007fffffffdd68; PC = 0x55555557c219
	mov    0x8(%rsp),%r12                           #! EA = L0x7fffffffdbb0; Value = 0x0000000000000000; PC = 0x55555557c21d
	lea    0x10(%rsp),%rsp                          #! PC = 0x55555557c222
	#! <- SP = 0x7fffffffdbb8
	#repz ret                                       #! PC = 0x55555557c227
