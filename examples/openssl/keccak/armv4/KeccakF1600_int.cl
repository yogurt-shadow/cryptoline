(* popper: cv_cec.exe -v -ov a00,a01,a02,a03,a04,a10,a11,a12,a13,a14,a20,a21,a22,a23,a24,a30,a31,a32,a33,a34,a40,a41,a42,a43,a44 KeccakF1600_int.cl ../KeccakP-1600-reference_KeccakP1600_Permute_24rounds.cl
Parsing CryptoLine file:                [OK]            0.075474 seconds
Checking well-formedness:               [OK]            0.020248 seconds
Parsing CryptoLine file:                [OK]            0.014289 seconds
Checking well-formedness:               [OK]            0.006641 seconds
Equivalence of output group #0:         [OK]            110.950038 seconds
Final result:                           [OK]            111.874648 seconds
*)
(* csweep popper: cv_cec.exe -v -ov a00,a01,a02,a03,a04,a10,a11,a12,a13,a14,a20,a21,a22,a23,a24,a30,a31,a32,a33,a34,a40,a41,a42,a43,a44 KeccakF1600_int.cl ../KeccakP-1600-reference_KeccakP1600_Permute_24rounds.cl
Parsing CryptoLine file:                [OK]            0.076375 seconds
Checking well-formedness:               [OK]            0.020614 seconds
Parsing CryptoLine file:                [OK]            0.014597 seconds
Checking well-formedness:               [OK]            0.006690 seconds
Equivalence of output group #0:         [OK]            91.619454 seconds
Final result:                           [OK]            92.547300 seconds
*)
(* quine: ~/Work/code/cryptoline/_build/default/cv_cec.exe -v -ov a00,a01,a02,a03,a04,a10,a11,a12,a13,a14,a20,a21,a22,a23,a24,a30,a31,a32,a33,a34,a40,a41,a42,a43,a44 KeccakF1600_int.cl ../x86_64/KeccakF1600.cl
Parsing CryptoLine file:                [OK]            0.142316 seconds
Checking well-formedness:               [OK]            0.024500 seconds
Parsing CryptoLine file:                [OK]            0.115970 seconds
Checking well-formedness:               [OK]            0.007211 seconds
Equivalence of output group #0:         [OK]            1236.715391 seconds
Final result:                           [OK]            1238.603029 seconds
*)

proc main (
uint64 A00, uint64 A01, uint64 A02, uint64 A03, uint64 A04, uint64 A10,
uint64 A11, uint64 A12, uint64 A13, uint64 A14, uint64 A20, uint64 A21,
uint64 A22, uint64 A23, uint64 A24, uint64 A30, uint64 A31, uint64 A32,
uint64 A33, uint64 A34, uint64 A40, uint64 A41, uint64 A42, uint64 A43,
uint64 A44
) =
{
  true
  &&
  true
}

nondet pc@uint32; nondet sp@uint32; nondet lr@uint32; nondet r11@uint32; 


(* initialization *)


mov d00 A00;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffef90 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffef94 c00;
mov d00 A01;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffef98 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffef9c c00;
mov d00 A02;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefa0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefa4 c00;
mov d00 A03;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefa8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefac c00;
mov d00 A04;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefb0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefb4 c00;
mov d00 A10;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefb8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefbc c00;
mov d00 A11;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefc0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefc4 c00;
mov d00 A12;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefc8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefcc c00;
mov d00 A13;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefd0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefd4 c00;
mov d00 A14;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefd8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefdc c00;
mov d00 A20;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefe0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefe4 c00;
mov d00 A21;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffefe8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffefec c00;
mov d00 A22;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffeff0 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffeff4 c00;
mov d00 A23;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbeffeff8 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbeffeffc c00;
mov d00 A24;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff000 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff004 c00;
mov d00 A30;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff008 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff00c c00;
mov d00 A31;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff010 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff014 c00;
mov d00 A32;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff018 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff01c c00;
mov d00 A33;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff020 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff024 c00;
mov d00 A34;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff028 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff02c c00;
mov d00 A40;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff030 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff034 c00;
mov d00 A41;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff038 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff03c c00;
mov d00 A42;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff040 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff044 c00;
mov d00 A43;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff048 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff04c c00;
mov d00 A44;
spl d20 d00 d00 32;
spl d10 d00 d00 16;spl d30 d20 d20 16;
spl d08 d00 d00  8;spl d18 d10 d10  8;spl d28 d20 d20  8;spl d38 d30 d30  8;
spl d04 d00 d00  4;spl d0c d08 d08  4;spl d14 d10 d10  4;spl d1c d18 d18  4;
spl d24 d20 d20  4;spl d2c d28 d28  4;spl d34 d30 d30  4;spl d3c d38 d38  4;
spl d02 d00 d00  2;spl d06 d04 d04  2;spl d0a d08 d08  2;spl d0e d0c d0c  2;
spl d12 d10 d10  2;spl d16 d14 d14  2;spl d1a d18 d18  2;spl d1e d1c d1c  2;
spl d22 d20 d20  2;spl d26 d24 d24  2;spl d2a d28 d28  2;spl d2e d2c d2c  2;
spl d32 d30 d30  2;spl d36 d34 d34  2;spl d3a d38 d38  2;spl d3e d3c d3c  2;
spl d01 d00 d00  1;spl d03 d02 d02  1;spl d05 d04 d04  1;spl d07 d06 d06  1;
spl d09 d08 d08  1;spl d0b d0a d0a  1;spl d0d d0c d0c  1;spl d0f d0e d0e  1;
spl d11 d10 d10  1;spl d13 d12 d12  1;spl d15 d14 d14  1;spl d17 d16 d16  1;
spl d19 d18 d18  1;spl d1b d1a d1a  1;spl d1d d1c d1c  1;spl d1f d1e d1e  1;
spl d21 d20 d20  1;spl d23 d22 d22  1;spl d25 d24 d24  1;spl d27 d26 d26  1;
spl d29 d28 d28  1;spl d2b d2a d2a  1;spl d2d d2c d2c  1;spl d2f d2e d2e  1;
spl d31 d30 d30  1;spl d33 d32 d32  1;spl d35 d34 d34  1;spl d37 d36 d36  1;
spl d39 d38 d38  1;spl d3b d3a d3a  1;spl d3d d3c d3c  1;spl d3f d3e d3e  1;
mov b00 d00;mov c00 d01;mov b01 d02;mov c01 d03;mov b02 d04;mov c02 d05;
mov b03 d06;mov c03 d07;mov b04 d08;mov c04 d09;mov b05 d0a;mov c05 d0b;
mov b06 d0c;mov c06 d0d;mov b07 d0e;mov c07 d0f;mov b08 d10;mov c08 d11;
mov b09 d12;mov c09 d13;mov b0a d14;mov c0a d15;mov b0b d16;mov c0b d17;
mov b0c d18;mov c0c d19;mov b0d d1a;mov c0d d1b;mov b0e d1c;mov c0e d1d;
mov b0f d1e;mov c0f d1f;mov b10 d20;mov c10 d21;mov b11 d22;mov c11 d23;
mov b12 d24;mov c12 d25;mov b13 d26;mov c13 d27;mov b14 d28;mov c14 d29;
mov b15 d2a;mov c15 d2b;mov b16 d2c;mov c16 d2d;mov b17 d2e;mov c17 d2f;
mov b18 d30;mov c18 d31;mov b19 d32;mov c19 d33;mov b1a d34;mov c1a d35;
mov b1b d36;mov c1b d37;mov b1c d38;mov c1c d39;mov b1d d3a;mov c1d d3b;
mov b1e d3c;mov c1e d3d;mov b1f d3e;mov c1f d3f;
join b00 b01 b00; join b02 b03 b02; join b04 b05 b04; join b06 b07 b06;
join b08 b09 b08; join b0a b0b b0a; join b0c b0d b0c; join b0e b0f b0e;
join b10 b11 b10; join b12 b13 b12; join b14 b15 b14; join b16 b17 b16;
join b18 b19 b18; join b1a b1b b1a; join b1c b1d b1c; join b1e b1f b1e;
join b00 b02 b00; join b04 b06 b04; join b08 b0a b08; join b0c b0e b0c;
join b10 b12 b10; join b14 b16 b14; join b18 b1a b18; join b1c b1e b1c;
join b00 b04 b00; join b08 b0c b08; join b10 b14 b10; join b18 b1c b18;
join b00 b08 b00; join b10 b18 b10;
join b00 b10 b00;
mov L0xbefff050 b00;
join c00 c01 c00; join c02 c03 c02; join c04 c05 c04; join c06 c07 c06;
join c08 c09 c08; join c0a c0b c0a; join c0c c0d c0c; join c0e c0f c0e;
join c10 c11 c10; join c12 c13 c12; join c14 c15 c14; join c16 c17 c16;
join c18 c19 c18; join c1a c1b c1a; join c1c c1d c1c; join c1e c1f c1e;
join c00 c02 c00; join c04 c06 c04; join c08 c0a c08; join c0c c0e c0c;
join c10 c12 c10; join c14 c16 c14; join c18 c1a c18; join c1c c1e c1c;
join c00 c04 c00; join c08 c0c c08; join c10 c14 c10; join c18 c1c c18;
join c00 c08 c00; join c10 c18 c10;
join c00 c10 c00;
mov L0xbefff054 c00;


(* iotas32 *)


mov L0x7f555520 0x00000001@uint32; mov L0x7f555524 0x00000000@uint32;
mov L0x7f555528 0x00000000@uint32; mov L0x7f55552c 0x00000089@uint32;
mov L0x7f555530 0x00000000@uint32; mov L0x7f555534 0x8000008b@uint32;
mov L0x7f555538 0x00000000@uint32; mov L0x7f55553c 0x80008080@uint32;
mov L0x7f555540 0x00000001@uint32; mov L0x7f555544 0x0000008b@uint32;
mov L0x7f555548 0x00000001@uint32; mov L0x7f55554c 0x00008000@uint32;
mov L0x7f555550 0x00000001@uint32; mov L0x7f555554 0x80008088@uint32;
mov L0x7f555558 0x00000001@uint32; mov L0x7f55555c 0x80000082@uint32;
mov L0x7f555560 0x00000000@uint32; mov L0x7f555564 0x0000000b@uint32;
mov L0x7f555568 0x00000000@uint32; mov L0x7f55556c 0x0000000a@uint32;
mov L0x7f555570 0x00000001@uint32; mov L0x7f555574 0x00008082@uint32;
mov L0x7f555578 0x00000000@uint32; mov L0x7f55557c 0x00008003@uint32;
mov L0x7f555580 0x00000001@uint32; mov L0x7f555584 0x0000808b@uint32;
mov L0x7f555588 0x00000001@uint32; mov L0x7f55558c 0x8000000b@uint32;
mov L0x7f555590 0x00000001@uint32; mov L0x7f555594 0x8000008a@uint32;
mov L0x7f555598 0x00000001@uint32; mov L0x7f55559c 0x80000081@uint32;
mov L0x7f5555a0 0x00000000@uint32; mov L0x7f5555a4 0x80000081@uint32;
mov L0x7f5555a8 0x00000000@uint32; mov L0x7f5555ac 0x80000008@uint32;
mov L0x7f5555b0 0x00000000@uint32; mov L0x7f5555b4 0x00000083@uint32;
mov L0x7f5555b8 0x00000000@uint32; mov L0x7f5555bc 0x80008003@uint32;
mov L0x7f5555c0 0x00000001@uint32; mov L0x7f5555c4 0x80008088@uint32;
mov L0x7f5555c8 0x00000000@uint32; mov L0x7f5555cc 0x80000088@uint32;
mov L0x7f5555d0 0x00000001@uint32; mov L0x7f5555d4 0x00008000@uint32;
mov L0x7f5555d8 0x00000000@uint32; mov L0x7f5555dc 0x80008082@uint32;



(* #! -> SP = 0xbeffef90 *)
#! 0xbeffef90 = 0xbeffef90;
(* #add.w	r9, sp, #176	; 0xb0                       #! PC = 0x7f5555e0 *)
#add.w	%%r9, %%sp, #176	; 0xb0                       #! 0x7f5555e0 = 0x7f5555e0;
(* #add.w	r12, sp, #0                               #! PC = 0x7f5555e4 *)
#add.w	%%r12, %%sp, #0                               #! 0x7f5555e4 = 0x7f5555e4;
(* #add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f5555e8 *)
#add.w	%%r10, %%sp, #40	; 0x28                       #! 0x7f5555e8 = 0x7f5555e8;
(* ldmia.w	r9, {r4, r5, r6, r7, r8, r9}            #! EA = L0xbefff040; Value = 0x00000000; PC = 0x7f5555ec *)
mov r4 L0xbefff040; mov r5 L0xbefff044; mov r6 L0xbefff048;
mov r7 L0xbefff04c; mov r8 L0xbefff050; mov r9 L0xbefff054;
(* str.w	lr, [sp, #440]	; 0x1b8                    #! EA = L0xbefff148; PC = 0x7f5555f0 *)
mov L0xbefff148 lr;
(* eor.w	r11, r11, r11                             #! PC = 0x7f5555f4 *)
xor r11@uint32 r11 r11;
(* str.w	r11, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f5555f8 *)
mov L0xbefff14c r11;
(* #b.n	0x7f555600 <KeccakF1600_int+32>            #! PC = 0x7f5555fc *)
#b.n	0x7f555600 <KeccakF1600_int+32>            #! 0x7f5555fc = 0x7f5555fc;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x00000000; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x6fd00000; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x6fe26fec; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x00006fe0; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xa9140000; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x6fe06fd4; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x1c746d26; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x6b326f64; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x6f543996; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x6ada6f54; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x001a6d32; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x6d006dd8; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x6a376e6b; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0xff916d56; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x00006d56; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x6d00ff93; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x00000000; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x6fe06fec; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x6fee0001; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x6fc96ff4; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0xff916d56; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x00000000; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x00000000; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x6b326f64; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x6fd40001; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000000; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555520; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555520; mov r11 L0x7f555524;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x6fee0001; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xe35efe6b; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x79536f49; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xa9140000; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x6d006dd8; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x6fe06fd4; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xd13a0c41; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x00000000; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x6ff20000; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x6eccfc59; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x6fe26fec; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xe35efe6b; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x6f543996; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x00006d56; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x79536f49; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x6d00ff93; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x6fc96ff4; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x407bdb4c; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x79536f49; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x6eccfc59; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x6fd00000; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x1c746d26; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x6a376e6b; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xe35efe6b; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0x00000000; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x6fe06fec; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xd13a0c41; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x00006fe0; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x407bdb4c; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x6ada6f54; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x79536f49; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x001a6d32; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x6eccfc59; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x00000000; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x1161ce08; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x7f8a2326; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x7c108b07; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x689a95d7; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x8aa58dbe; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x4be2e070; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0xf0587ccd; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe9609a47; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x477923f6; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x1320a925; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xc3299d04; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x95c11a0d; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xc702a6ca; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x6fef76ca; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x8231adef; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xdf6d0796; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x7b7f402e; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x445bc779; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x45868fa5; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x3beda616; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x6fef76ca; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0xfd0bb09a; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x1161ce08; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe9609a47; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xbeed0775; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000000; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555528; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f555528; mov r11 L0x7f55552c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x45868fa5; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xcc1c8366; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xd3539356; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x8aa58dbe; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x95c11a0d; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x4be2e070; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xd479ae15; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x8657c6f0; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x178446bb; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x02b3d38a; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x7c108b07; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xcc1c8366; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x477923f6; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x8231adef; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xd3539356; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xdf6d0796; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x3beda616; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x243fa02f; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xd3539356; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x02b3d38a; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x7f8a2326; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0xf0587ccd; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xc702a6ca; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xcc1c8366; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x13840e00; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x445bc779; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xd479ae15; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x689a95d7; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x243fa02f; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x1320a925; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xd3539356; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xc3299d04; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x02b3d38a; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x7b7f402e; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x82321514; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x1031e362; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x47c3970d; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x09092ad8; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xfc45fca3; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x164b7310; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x43a9f497; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xf31e023d; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0xe2b4ad2a; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x3c29889d; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xc5a35aea; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x61cab166; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x55f56068; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x657f3048; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x6db929d2; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x8c511eae; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x1bbe5480; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x4b641127; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0xa57f3582; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xa7c5584d; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x657f3048; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xe137e649; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x82321514; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xf31e023d; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x608e6e2a; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000010; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555530; Value = 0x00000000; PC = 0x7f55577c *)
mov r10 L0x7f555530; mov r11 L0x7f555534;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0xa57f3582; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x26290aaf; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x5b129d1b; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xfc45fca3; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x61cab166; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x164b7310; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xed647875; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x36ea78d8; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x9be63725; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xf2d1151d; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x47c3970d; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x26290aaf; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0xe2b4ad2a; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x6db929d2; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x5b129d1b; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x8c511eae; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xa7c5584d; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x822ab6a4; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x5b129d1b; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xf2d1151d; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x1031e362; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x43a9f497; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x55f56068; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x26290aaf; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0x0789e589; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x4b641127; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xed647875; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x09092ad8; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x822ab6a4; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x3c29889d; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x5b129d1b; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xc5a35aea; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xf2d1151d; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x1bbe5480; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0xe929c02e; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0xcddb00d3; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x4e6079a5; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0xda2fdd24; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x6f559d1f; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x744e0c46; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x143e1caf; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xb83e9005; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xa171732e; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x8636182f; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x3cf629c6; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xa9452024; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x2d063344; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x68440de9; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0xa31b0afb; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x512a3049; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x45d0f80c; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x7121d944; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xc2306e42; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x8a6c6161; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x68440de9; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0xda0ec83f; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0xe929c02e; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xb83e9005; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xadad99b9; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000010; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555538; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f555538; mov r11 L0x7f55553c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xc2306e42; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x7e487457; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x29b9ed54; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x6f559d1f; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xa9452024; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x744e0c46; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x76ede547; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x81b414df; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x4ff4b1d6; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x380a4629; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x4e6079a5; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x7e487457; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xa171732e; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0xa31b0afb; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x29b9ed54; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x512a3049; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x8a6c6161; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x1b495dc3; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x29b9ed54; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x380a4629; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0xcddb00d3; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x143e1caf; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x2d063344; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x7e487457; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x1d30b78c; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x7121d944; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x76ede547; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0xda2fdd24; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x1b495dc3; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x8636182f; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x29b9ed54; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x3cf629c6; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x380a4629; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x45d0f80c; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0xd150a97a; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x02b9e33a; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x273f8826; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x7138a0ec; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x6320253a; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x5eb715cb; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0xc149e798; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xea487722; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0xd5207683; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0xa7f2d8e1; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xd9772a98; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x8e0f98ab; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x86add4d8; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0xf7d93b20; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x903f1d3e; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x15ee1989; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x08e5f866; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x51008885; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x5b3fbb91; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x87efbee5; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0xf7d93b20; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x93b51c3c; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0xd150a97a; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xea487722; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x23831318; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000020; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555540; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555540; mov r11 L0x7f555544;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x5b3fbb91; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x014e285e; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x27dca304; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x6320253a; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x8e0f98ab; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x5eb715cb; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xa7ebd38d; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x0ff837ee; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xee0a5bfd; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xf57fb260; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x273f8826; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x014e285e; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0xd5207683; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x903f1d3e; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x27dca304; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x15ee1989; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x87efbee5; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x3acc6ecd; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x27dca304; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xf57fb260; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x02b9e33a; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0xc149e798; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x86add4d8; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x014e285e; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0x6aebb77a; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x51008885; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xa7ebd38d; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x7138a0ec; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x3acc6ecd; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0xa7f2d8e1; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x27dca304; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xd9772a98; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xf57fb260; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x08e5f866; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0xd64c4abd; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x2ae3d69c; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0xbb11f4c7; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x8ae1111d; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x7d637083; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0xd39372d8; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x2686e464; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x8f9bc642; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xb5bd5fa0; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x61559760; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xb6581833; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x78e895a4; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x8060e7c6; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0xc8508332; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x461adc76; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x3950bda0; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x9c986fc9; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0xa6e9657a; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x63e2644e; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0xb488cdd4; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0xc8508332; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x7bbcd654; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0xd64c4abd; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x8f9bc642; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xb14fde67; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000020; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555548; Value = 0x00000001; PC = 0x7f555ca8 *)
mov r10 L0x7f555548; mov r11 L0x7f55554c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x63e2644e; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xc131bb6a; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x413286c5; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x7d637083; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x78e895a4; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0xd39372d8; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xf1085991; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x3899746d; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x5f33bd2c; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x074499dc; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0xbb11f4c7; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xc131bb6a; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xb5bd5fa0; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x461adc76; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x413286c5; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x3950bda0; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0xb488cdd4; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x673e68eb; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x413286c5; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x074499dc; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x2ae3d69c; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x2686e464; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x8060e7c6; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xc131bb6a; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x0551d99d; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0xa6e9657a; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xf1085991; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x8ae1111d; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x673e68eb; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x61559760; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x413286c5; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xb6581833; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x074499dc; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x9c986fc9; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x976edc55; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0xff4135b4; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x8ceafd20; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x552dafdb; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x854fef29; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xa0c9b754; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x408d6be2; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xe38bfcab; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x11c268df; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x94728252; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x8ddd3682; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x42f5e71c; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x440fb126; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x820f48dd; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x3c668f6a; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0xb258bcf0; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x8251c912; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0xce449dff; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0xa1af720d; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x29de5d0f; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x820f48dd; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x33baad23; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x976edc55; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xe38bfcab; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x5764a226; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000030; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555550; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555550; mov r11 L0x7f555554;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0xa1af720d; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x5e92b059; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x1aa9e0d2; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x854fef29; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x42f5e71c; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xa0c9b754; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xb4fb1bc7; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x0918ee95; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xdf66e0d1; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x2393389b; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x8ceafd20; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x5e92b059; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x11c268df; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x3c668f6a; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x1aa9e0d2; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0xb258bcf0; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x29de5d0f; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x150ad1f7; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x1aa9e0d2; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x2393389b; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0xff4135b4; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x408d6be2; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x440fb126; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x5e92b059; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0x254a782b; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0xce449dff; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xb4fb1bc7; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x552dafdb; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x150ad1f7; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x94728252; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x1aa9e0d2; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x8ddd3682; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x2393389b; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x8251c912; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0xddc53e9e; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x50953f7d; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x242a631a; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0xce77ec42; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x986163e9; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x65459e04; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x424a9ee9; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x15185207; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x868073d0; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x62326468; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x273acf49; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xcd9a17f1; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x647667a9; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0xf843a432; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x773c9c25; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xe71d065e; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x24b130b8; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x7106028c; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x5fbeff4d; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x7a266b73; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0xf843a432; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x4325fbb2; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0xddc53e9e; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x15185207; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0x9e3aea05; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000030; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555558; Value = 0x00000001; PC = 0x7f555ca8 *)
mov r10 L0x7f555558; mov r11 L0x7f55555c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x5fbeff4d; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x2384465b; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xa591cfbc; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x986163e9; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xcd9a17f1; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x65459e04; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x3f5c1092; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x996315f8; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x2524d4a7; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x4eefdcd1; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x242a631a; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x2384465b; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x868073d0; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x773c9c25; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xa591cfbc; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xe71d065e; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x7a266b73; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x490e452c; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xa591cfbc; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x4eefdcd1; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x50953f7d; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x424a9ee9; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x647667a9; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x2384465b; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x08162fd5; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x7106028c; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x3f5c1092; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0xce77ec42; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x490e452c; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x62326468; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xa591cfbc; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x273acf49; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x4eefdcd1; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x24b130b8; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x301c7981; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0xaf25ff1e; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x8d617109; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0xf52c5e46; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x25b5011a; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xe4c2f990; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x99920cd3; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xa14c2444; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x27218983; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x02a2c0c5; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x2cb89d6c; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x8811dc51; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x34896399; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x539ed227; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x21be668b; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0xe7af1b0f; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x3d35cd5e; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x7847bca7; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x15c0cb4c; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x90ff4b48; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x539ed227; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xccfd58a2; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x301c7981; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xa14c2444; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0xce979707; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000040; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555560; Value = 0x00000000; PC = 0x7f55577c *)
mov r10 L0x7f555560; mov r11 L0x7f555564;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x15c0cb4c; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xfe55c924; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xa8f03fd6; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x25b5011a; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x8811dc51; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xe4c2f990; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xed306921; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0xe8869ac6; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xb0b47605; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x6d4a3de3; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x8d617109; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xfe55c924; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x27218983; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x21be668b; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xa8f03fd6; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0xe7af1b0f; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x90ff4b48; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x6a5f2f12; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xa8f03fd6; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x6d4a3de3; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0xaf25ff1e; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x99920cd3; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x34896399; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xfe55c924; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xc8d8d72d; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x7847bca7; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xed306921; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0xf52c5e46; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x6a5f2f12; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x02a2c0c5; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xa8f03fd6; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x2cb89d6c; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x6d4a3de3; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x3d35cd5e; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0xd83d46c6; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x449af225; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x0da9c9cb; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0xb6467dc1; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x27b349d2; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0xd7b468b7; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x1e8c40d3; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe3117845; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xbeb0d9b5; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0xbe4133de; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xde8b7d82; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x67a9ce96; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x9966263e; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0xb10cfbcb; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x9248d3b5; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x42bfc2c7; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0xd0b88372; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x69fb85c2; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xcbbd8f00; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x703b697b; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0xb10cfbcb; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x04ffe062; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0xd83d46c6; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe3117845; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0x5afe271b; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000040; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555568; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f555568; mov r11 L0x7f55556c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xcbbd8f00; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x9ec6428c; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xdd869c40; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x27b349d2; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x67a9ce96; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0xd7b468b7; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x5fefa642; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x88e2c956; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0xbb28ff6e; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x2962261f; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x0da9c9cb; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x9ec6428c; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xbeb0d9b5; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x9248d3b5; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xdd869c40; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x42bfc2c7; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x703b697b; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x900b3ecc; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xdd869c40; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x2962261f; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x449af225; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x1e8c40d3; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x9966263e; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x9ec6428c; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x3c398aad; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x69fb85c2; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x5fefa642; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0xb6467dc1; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x900b3ecc; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0xbe4133de; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xdd869c40; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xde8b7d82; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x2962261f; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0xd0b88372; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0xa9f9ca93; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0xf562105f; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x26c57eb7; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x98ef9407; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x78685ffe; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x05a32435; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0xb63ffe5a; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x9af25d82; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x297cf711; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0xe0ad5774; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xe2be09e8; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0xbbb64408; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xedc3c586; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0xaf30e093; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x032f9893; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x530bb140; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x375e497d; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x9d2b531d; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x8b82d662; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x3a6b724a; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0xaf30e093; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x57f106f6; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0xa9f9ca93; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x9af25d82; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0xf8f4fade; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000050; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555570; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555570; mov r11 L0x7f555574;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x8b82d662; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x1c63c20e; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x4aa583fd; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x78685ffe; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0xbbb64408; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x05a32435; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x3d8c82a7; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x7eaceb6f; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x430cebe2; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x179c7774; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x26c57eb7; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x1c63c20e; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x297cf711; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x032f9893; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x4aa583fd; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x530bb140; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x3a6b724a; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x672a37bf; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x4aa583fd; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x179c7774; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0xf562105f; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0xb63ffe5a; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xedc3c586; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x1c63c20e; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xd01a6c58; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x9d2b531d; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x3d8c82a7; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x98ef9407; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x672a37bf; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0xe0ad5774; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x4aa583fd; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0xe2be09e8; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x179c7774; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x375e497d; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x665849eb; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x7705b5fa; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x3b3d0d0b; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0xf14c44b0; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x51e6d9b4; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0xb60ae0fe; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x9a053244; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x39312d0a; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xc3407702; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x14207a33; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x643fb5b1; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x4e863d3d; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x7cb23d10; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x2424c233; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x6647d0eb; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xf152eadd; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x16d66cce; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0xe1357e14; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xc196cb49; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x653b3699; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x2424c233; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x438c6830; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x665849eb; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x39312d0a; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xcde1648d; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000050; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555578; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f555578; mov r11 L0x7f55557c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xc196cb49; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xd540de6a; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xaf3248d7; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x51e6d9b4; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x4e863d3d; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0xb60ae0fe; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x79ac2430; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0xb2132a5e; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x68795a08; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x3da7d978; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x3b3d0d0b; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xd540de6a; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xc3407702; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x6647d0eb; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xaf3248d7; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xf152eadd; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x653b3699; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x401c8582; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xaf3248d7; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x3da7d978; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x7705b5fa; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x9a053244; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x7cb23d10; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xd540de6a; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0xc48c52ef; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0xe1357e14; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x79ac2430; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0xf14c44b0; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x401c8582; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x14207a33; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xaf3248d7; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x643fb5b1; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x3da7d978; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x16d66cce; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0xc9eb696c; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x91cce585; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0xbfa420dd; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0xa5462711; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x4614b329; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xaeafff4f; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x11b90fda; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xea859197; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x611e3dd0; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0xd144142c; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x2188497d; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0xffb7f8dd; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xb45127dc; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x1fd19fa7; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x852be84a; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x3c8c2d56; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x0f275f8b; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x6de93078; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x8bc38457; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xfc62c982; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x1fd19fa7; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xd7d079c5; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0xc9eb696c; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0xea859197; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0xe97a9b47; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000060; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555580; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555580; mov r11 L0x7f555584;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x8bc38457; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x51a15643; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xb1798baa; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x4614b329; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0xffb7f8dd; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xaeafff4f; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x7e96bc8c; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x2946968f; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xff7e95ac; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x94f484c6; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0xbfa420dd; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x51a15643; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x611e3dd0; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x852be84a; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xb1798baa; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x3c8c2d56; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xfc62c982; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xa3c75977; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xb1798baa; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x94f484c6; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x91cce585; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x11b90fda; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xb45127dc; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x51a15643; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xae5265ac; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x6de93078; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x7e96bc8c; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0xa5462711; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xa3c75977; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0xd144142c; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xb1798baa; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x2188497d; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x94f484c6; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x0f275f8b; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x79b2f6f7; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0xb4c73290; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0xe262f61a; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x4ef45524; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0xe8c4b202; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0xf68d1173; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x6b9cf08e; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x0cc321d2; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x7e4913f2; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0xe25d1b97; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x282f08f9; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xfef8169e; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xb92b43a4; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0xef65df8a; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x6f6fb13a; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x99f3cf78; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x0f32f491; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x29ad3585; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xb317ff0d; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x8bdd583b; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0xef65df8a; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x33a7a69e; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x79b2f6f7; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x0cc321d2; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0x573c7a33; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000060; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555588; Value = 0x00000001; PC = 0x7f555ca8 *)
mov r10 L0x7f555588; mov r11 L0x7f55558c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xb317ff0d; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x9dd040b3; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x08f3e7cf; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0xe8c4b202; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xfef8169e; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0xf68d1173; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x21dd8cbf; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0xa1dc8d03; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x224f2bcf; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x8e4d9e95; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0xe262f61a; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x9dd040b3; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x7e4913f2; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x6f6fb13a; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x08f3e7cf; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x99f3cf78; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x8bdd583b; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x9250fab1; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x08f3e7cf; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x8e4d9e95; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0xb4c73290; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x6b9cf08e; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xb92b43a4; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x9dd040b3; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x0b052fdf; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x29ad3585; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x21dd8cbf; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x4ef45524; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x9250fab1; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0xe25d1b97; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x08f3e7cf; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x282f08f9; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x8e4d9e95; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x0f32f491; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0xf141b33d; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0xe1a29bb5; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x34de8e84; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0xd56ea4a9; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0x2b9732a1; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xed0a7279; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0xdcbff589; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x12b39c58; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x3cfea8b6; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x10a0ea24; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x5c999c96; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x112ce4d1; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x3b05c1ac; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x6ac7dc26; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0xc80b36b7; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x14795c98; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0xcd3ad5da; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0xb306f46c; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0xc95ff9db; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xf3185b91; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x6ac7dc26; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x4b785749; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0xf141b33d; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x12b39c58; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x5022ecd3; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000070; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f555590; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f555590; mov r11 L0x7f555594;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0xc95ff9db; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x0efb36d7; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xbad1a3f7; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0x2b9732a1; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x112ce4d1; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xed0a7279; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x2116d80f; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x5313055c; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x61ae55ea; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x9e82c3a2; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x34de8e84; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x0efb36d7; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x3cfea8b6; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0xc80b36b7; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xbad1a3f7; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x14795c98; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xf3185b91; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x55fa6cee; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xbad1a3f7; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x9e82c3a2; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0xe1a29bb5; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0xdcbff589; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x3b05c1ac; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x0efb36d7; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xd4ad4f0e; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0xb306f46c; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x2116d80f; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0xd56ea4a9; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x55fa6cee; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x10a0ea24; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xbad1a3f7; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x5c999c96; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x9e82c3a2; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0xcd3ad5da; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x499c414f; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x314133eb; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0xa3e30295; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x858c4a01; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0xb5906e0e; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x79d1cfa3; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0xb846b5c0; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe953f643; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xf715a539; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0xd7fcef05; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x2da2d976; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xc91955de; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xd287c6ed; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x4a946418; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x5dac4315; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xd5b7161d; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0xe1401ec3; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x0364428f; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xf49540cd; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0xd57e7b8e; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x4a946418; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x8730a432; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x499c414f; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe953f643; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xb1756499; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000070; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f555598; Value = 0x00000001; PC = 0x7f555ca8 *)
mov r10 L0x7f555598; mov r11 L0x7f55559c;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xf49540cd; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xccde47a7; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x00ffc7dd; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0xb5906e0e; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xc91955de; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x79d1cfa3; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xe947b7eb; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x5a8f2cbe; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x2062a80b; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x52ae4245; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0xa3e30295; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xccde47a7; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xf715a539; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x5dac4315; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x00ffc7dd; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xd5b7161d; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0xd57e7b8e; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x68fe6c58; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x00ffc7dd; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x52ae4245; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x314133eb; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0xb846b5c0; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xd287c6ed; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xccde47a7; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0xd00096a7; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x0364428f; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xe947b7eb; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x858c4a01; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x68fe6c58; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0xd7fcef05; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x00ffc7dd; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x2da2d976; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x52ae4245; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0xe1401ec3; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x092687b3; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x875c2e12; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0xcebf2a21; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0xc2c25619; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xf2389419; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x519a0dcd; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x0505eb33; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x870ab71e; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x1732ec92; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x95862398; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x68778e16; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0xd038c2f9; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x5d1b59bd; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x29da46bd; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x9145adf9; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0x7e11eaa6; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x94f2e7e9; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0xf71d7178; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0xc0267d2f; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0x517c453e; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x29da46bd; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0x67b6bd44; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x092687b3; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x870ab71e; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0xb9090f6f; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000080; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f5555a0; Value = 0x00000000; PC = 0x7f55577c *)
mov r10 L0x7f5555a0; mov r11 L0x7f5555a4;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0xc0267d2f; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x3a31432f; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x98ddb85e; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xf2389419; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0xd038c2f9; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x519a0dcd; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x516ba4b4; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x0e2422f8; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xbf18784e; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xfef09206; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0xcebf2a21; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x3a31432f; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x1732ec92; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x9145adf9; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x98ddb85e; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0x7e11eaa6; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0x517c453e; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x1170da14; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x98ddb85e; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xfef09206; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x875c2e12; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x0505eb33; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x5d1b59bd; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x3a31432f; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xf2b9eb6a; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0xf71d7178; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x516ba4b4; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0xc2c25619; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x1170da14; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x95862398; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x98ddb85e; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x68778e16; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xfef09206; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x94f2e7e9; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x90fd3ee5; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0xdd83f6b5; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x430376be; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x87bb4078; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0xd409dabf; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x2de6c084; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0xfff11abc; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xf60211ce; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x26177eda; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x4aa5c5e5; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x5b2839a9; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xd870a606; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x222f263b; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x824bef00; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x5c98cc82; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x0712c6e3; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0xaad243ea; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x7a77111b; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x00978609; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x29336839; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x824bef00; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0xfcc0fad6; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x90fd3ee5; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xf60211ce; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xad0037cd; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000080; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f5555a8; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f5555a8; mov r11 L0x7f5555ac;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x00978609; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x913d9da8; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x9354e419; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0xd409dabf; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xd870a606; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x2de6c084; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xcc80a2ec; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x26b98e79; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0xda597ea3; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xc7792fc5; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x430376be; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x913d9da8; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x26177eda; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x5c98cc82; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x9354e419; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x0712c6e3; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x29336839; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xcb73b462; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x9354e419; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xc7792fc5; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0xdd83f6b5; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0xfff11abc; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x222f263b; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x913d9da8; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0xa7be9e80; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x7a77111b; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xcc80a2ec; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x87bb4078; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xcb73b462; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x4aa5c5e5; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x9354e419; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x5b2839a9; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xc7792fc5; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0xaad243ea; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x42edbb4c; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x96ecefea; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0xf13ebf10; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x8cf1dd61; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xac4ad49c; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xf94c3402; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0x6a29ac9d; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x69c0e026; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x0e3f8e09; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x885777bc; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x22d46da8; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x60f82b04; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x9126af27; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x1bd970f7; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0xcb492266; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0xcb5bdf3b; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0x8386c13d; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x1bfd6fbe; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x81046af1; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xd9b55e19; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x1bd970f7; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xffd2d85a; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x42edbb4c; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x69c0e026; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0xe7fa347e; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000090; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f5555b0; Value = 0x00000000; PC = 0x7f55577c *)
mov r10 L0x7f5555b0; mov r11 L0x7f5555b4;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x81046af1; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xcf354287; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x8dd37a57; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xac4ad49c; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x60f82b04; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xf94c3402; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xb0cda1b7; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x10a60ea2; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x821a1e47; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x453b5418; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0xf13ebf10; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xcf354287; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x0e3f8e09; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0xcb492266; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x8dd37a57; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0xcb5bdf3b; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xd9b55e19; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xe4510240; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x8dd37a57; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x453b5418; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x96ecefea; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0x6a29ac9d; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x9126af27; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xcf354287; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xfe5794a8; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x1bfd6fbe; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xb0cda1b7; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x8cf1dd61; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xe4510240; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x885777bc; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x8dd37a57; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x22d46da8; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x453b5418; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0x8386c13d; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x8b3881b9; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x4abd1f96; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x67a95eda; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x3d357c1e; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x1336a6ce; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0xa096d116; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0xbe1af738; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x481c08f9; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x11120330; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0x1e42fca5; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x6d0075ec; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x5fd466be; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x305b3587; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x257b5ac9; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0xe1e22570; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0x45896794; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x2fa2bd2b; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x942ec5f7; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x3a4deafa; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0xd16d3d4d; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x257b5ac9; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0xaf7bba20; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x8b3881b9; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x481c08f9; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0x7f4f5024; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x00000090; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f5555b8; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f5555b8; mov r11 L0x7f5555bc;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x3a4deafa; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xfb5c99d3; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xd3689d62; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x1336a6ce; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x5fd466be; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0xa096d116; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x1ab16890; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x11d813bb; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x39f99a50; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xcfda973e; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x67a95eda; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xfb5c99d3; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x11120330; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0xe1e22570; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xd3689d62; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0x45896794; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0xd16d3d4d; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x69f3d3d3; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xd3689d62; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xcfda973e; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x4abd1f96; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0xbe1af738; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x305b3587; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xfb5c99d3; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x59b2787b; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x942ec5f7; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x1ab16890; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x3d357c1e; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x69f3d3d3; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0x1e42fca5; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xd3689d62; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0x6d0075ec; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xcfda973e; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x2fa2bd2b; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x61429e57; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0x34cb7a40; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0xddd74b0d; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x4768cec9; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xb3cef600; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0xd3d9b430; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0xe8cbfa63; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x85b5230a; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0x95177a28; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0xebf5ef6e; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x64e37d6a; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x48929b76; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xb82202d6; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0x3f81edc2; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x813eec0e; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0xd7cbd6f3; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0xec38fbab; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x3d9ad75e; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x3ff3892d; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xc298d8c3; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0x3f81edc2; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xe0c05d23; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x61429e57; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x85b5230a; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x17fcf16b; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x000000a0; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f5555c0; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f5555c0; mov r11 L0x7f5555c4;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x3ff3892d; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xbf726152; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x45b25739; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xb3cef600; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x48929b76; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0xd3d9b430; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x9c15038e; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x70544a4a; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0xc48d2d50; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0xf31b816a; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0xddd74b0d; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xbf726152; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0x95177a28; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x813eec0e; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x45b25739; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0xd7cbd6f3; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xc298d8c3; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xdc6b906a; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x45b25739; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0xf31b816a; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0x34cb7a40; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0xe8cbfa63; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0xb82202d6; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xbf726152; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0xea1dfce2; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x3d9ad75e; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x9c15038e; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x4768cec9; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xdc6b906a; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0xebf5ef6e; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x45b25739; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x64e37d6a; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0xf31b816a; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0xec38fbab; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0x73724b4f; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x7a3bf021; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0xb0fcb091; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x4ebb294e; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x726808ca; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x291ab064; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x1e16405b; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe7fbc386; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0xdda7e485; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0xf503d13e; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xcb20d16b; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0x30e5cfe8; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x7a5db0f1; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x552c2a2d; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x3193fd5f; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xc08ef160; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x2f34e437; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x02bf9370; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0xa08bb6ca; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x55ef940e; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x552c2a2d; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0x1046f105; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0x73724b4f; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0xe7fbc386; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0xd399e0d0; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x000000a0; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f5555c8; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f5555c8; mov r11 L0x7f5555cc;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0xa08bb6ca; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xb9536db4; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x7e272015; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x726808ca; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0x30e5cfe8; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x291ab064; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xfae6be5b; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x900f5f2f; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0x80795556; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x78d0e7da; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0xb0fcb091; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xb9536db4; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0xdda7e485; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x3193fd5f; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x7e272015; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xc08ef160; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x55ef940e; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0x5e6f1b22; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x7e272015; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x78d0e7da; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x7a3bf021; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x1e16405b; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0x7a5db0f1; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xb9536db4; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0x51357792; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x02bf9370; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xfae6be5b; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x4ebb294e; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0x5e6f1b22; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0xf503d13e; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x7e272015; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xcb20d16b; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x78d0e7da; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x2f34e437; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbeffef90; Value = 0x31556b66; PC = 0x7f555600 *)
mov r0 L0xbeffef90; mov r1 L0xbeffef94;
mov r2 L0xbeffef98; mov r3 L0xbeffef9c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbeffefb8; Value = 0xb7ff8234; PC = 0x7f555604 *)
mov r10 L0xbeffefb8; mov r11 L0xbeffefbc;
mov r12 L0xbeffefc0; mov lr L0xbeffefc4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555608 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f55560c *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555610 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; Value = 0x38efb55f; PC = 0x7f555614 *)
mov r10 L0xbeffefc8; mov r11 L0xbeffefcc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555618 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; Value = 0x4046cac2; PC = 0x7f55561c *)
mov r12 L0xbeffefd0; mov lr L0xbeffefd4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555620 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555624 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555628 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; Value = 0xadca51ed; PC = 0x7f55562c *)
mov r10 L0xbeffefd8; mov r11 L0xbeffefdc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555630 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #80]	; 0x50                  #! EA = L0xbeffefe0; Value = 0x51b0c391; PC = 0x7f555634 *)
mov r12 L0xbeffefe0; mov lr L0xbeffefe4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555638 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f55563c *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555640 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #88]	; 0x58                 #! EA = L0xbeffefe8; Value = 0xf91e1412; PC = 0x7f555644 *)
mov r10 L0xbeffefe8; mov r11 L0xbeffefec;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555648 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x56108596; PC = 0x7f55564c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555650 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555654 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555658 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #104]	; 0x68                #! EA = L0xbeffeff8; Value = 0xfbde67d6; PC = 0x7f55565c *)
mov r10 L0xbeffeff8; mov r11 L0xbeffeffc;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555660 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #112]	; 0x70                 #! EA = L0xbefff000; Value = 0x53e2df3f; PC = 0x7f555664 *)
mov r12 L0xbefff000; mov lr L0xbefff004;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555668 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f55566c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555670 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x972b6e8d; PC = 0x7f555674 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555678 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; Value = 0x62d11661; PC = 0x7f55567c *)
mov r12 L0xbefff010; mov lr L0xbefff014;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555680 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555684 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555688 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x9c5291ac; PC = 0x7f55568c *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555690 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; Value = 0xbb381837; PC = 0x7f555694 *)
mov r12 L0xbefff020; mov lr L0xbefff024;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555698 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f55569c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f5556a0 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x2e5671d0; PC = 0x7f5556a4 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f5556a8 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #160]	; 0xa0                 #! EA = L0xbefff030; Value = 0xb82e1634; PC = 0x7f5556ac *)
mov r12 L0xbefff030; mov lr L0xbefff034;
(* eor.w	r8, r8, r10                               #! PC = 0x7f5556b0 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f5556b4 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f5556b8 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #168]	; 0xa8                #! EA = L0xbefff038; Value = 0xbb9d6608; PC = 0x7f5556bc *)
mov r10 L0xbefff038; mov r11 L0xbefff03c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f5556c0 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #16]                         #! EA = L0xbeffefa0; Value = 0x38290298; PC = 0x7f5556c4 *)
mov r12 L0xbeffefa0; mov lr L0xbeffefa4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f5556c8 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f5556cc *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f5556d0 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #24]                        #! EA = L0xbeffefa8; Value = 0x985ce112; PC = 0x7f5556d4 *)
mov r10 L0xbeffefa8; mov r11 L0xbeffefac;
(* eor.w	r5, r5, lr                                #! PC = 0x7f5556d8 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #32]                         #! EA = L0xbeffefb0; Value = 0xd65f83a6; PC = 0x7f5556dc *)
mov r12 L0xbeffefb0; mov lr L0xbeffefb4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f5556e0 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f5556e4 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f5556e8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f5556ec *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f5556f0 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f5556f4 *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f5556f8 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f5556fc *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555700 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555704 *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555708 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f55570c *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555710 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555714 *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555718 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #144]	; 0x90                  #! EA = L0xbefff020; Value = 0xbb381837; PC = 0x7f55571c *)
mov r7 L0xbefff020; mov r6 L0xbefff024;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555720 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555724 *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555728 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; Value = 0xae186792; PC = 0x7f55572c *)
mov r8 L0xbefff050; mov r9 L0xbefff054;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555730 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555734 *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555738 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp]                               #! EA = L0xbeffef90; Value = 0x31556b66; PC = 0x7f55573c *)
mov r4 L0xbeffef90; mov r5 L0xbeffef94;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555740 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555744 *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555748 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #96]	; 0x60                  #! EA = L0xbeffeff0; Value = 0x56108596; PC = 0x7f55574c *)
mov r12 L0xbeffeff0; mov lr L0xbeffeff4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555750 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555754 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555758 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #48]	; 0x30                   #! EA = L0xbeffefc0; Value = 0x5e5fe830; PC = 0x7f55575c *)
mov r2 L0xbeffefc0; mov r3 L0xbeffefc4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555760 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x000000b0; PC = 0x7f555764 *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555768 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #592	; 0x250                      #! PC = 0x7f55576c *)
subc dc r10 pc 592@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555770 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555774 *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555778 *)
xor r3@uint32 r3 r11;
(* ldmia.w	lr, {r10, r11}                          #! EA = L0x7f5555d0; Value = 0x00000001; PC = 0x7f55577c *)
mov r10 L0x7f5555d0; mov r11 L0x7f5555d4;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555780 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555784 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555788 *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f55578c *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555790 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555794 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555798 *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f55579c *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f5557a0 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #240]	; 0xf0                #! EA = L0xbefff080; PC = 0x7f5557a4 *)
mov L0xbefff080 r10; mov L0xbefff084 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f5557a8 *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f5557ac *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f5557b0 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f5557b4 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f5557b8 *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #248]	; 0xf8                 #! EA = L0xbefff088; PC = 0x7f5557bc *)
mov L0xbefff088 r12; mov L0xbefff08c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f5557c0 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f5557c4 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f5557c8 *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #256]	; 0x100               #! EA = L0xbefff090; PC = 0x7f5557cc *)
mov L0xbefff090 r10; mov L0xbefff094 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f5557d0 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f5557d4 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f5557d8 *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #264]	; 0x108                #! EA = L0xbefff098; PC = 0x7f5557dc *)
mov L0xbefff098 r12; mov L0xbefff09c lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f5557e0 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f5557e4 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f5557e8 *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #24]                          #! EA = L0xbeffefa8; Value = 0x985ce112; PC = 0x7f5557ec *)
mov r0 L0xbeffefa8; mov r1 L0xbeffefac;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f5557f0 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f5557f4 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f5557f8 *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #272]	; 0x110               #! EA = L0xbefff0a0; PC = 0x7f5557fc *)
mov L0xbefff0a0 r10; mov L0xbefff0a4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0x32fc7f62; PC = 0x7f555800 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0xe8faa60a; PC = 0x7f555804 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555808 *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #72]	; 0x48                   #! EA = L0xbeffefd8; Value = 0xadca51ed; PC = 0x7f55580c *)
mov r2 L0xbeffefd8; mov r3 L0xbeffefdc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555810 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #128]	; 0x80                #! EA = L0xbefff010; Value = 0x62d11661; PC = 0x7f555814 *)
mov r10 L0xbefff010; mov r11 L0xbefff014;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555818 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f55581c *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #80]	; 0x50                   #! EA = L0xbeffefe0; Value = 0x51b0c391; PC = 0x7f555820 *)
mov r4 L0xbeffefe0; mov r5 L0xbeffefe4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555824 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555828 *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0x62fcb965; PC = 0x7f55582c *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555830 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555834 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555838 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f55583c *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; Value = 0x7916e733; PC = 0x7f555840 *)
mov r8 L0xbefff040; mov r9 L0xbefff044;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555844 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555848 *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f55584c *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555850 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555854 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555858 *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f55585c *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555860 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555864 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555868 *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f55586c *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #280]	; 0x118               #! EA = L0xbefff0a8; PC = 0x7f555870 *)
mov L0xbefff0a8 r10; mov L0xbefff0ac r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555874 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555878 *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f55587c *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #288]	; 0x120                #! EA = L0xbefff0b0; PC = 0x7f555880 *)
mov L0xbefff0b0 r12; mov L0xbefff0b4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555884 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555888 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f55588c *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555890 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555894 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555898 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f55589c *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; PC = 0x7f5558a0 *)
mov L0xbefff0b8 r10; mov L0xbefff0bc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f5558a4 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f5558a8 *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f5558ac *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; PC = 0x7f5558b0 *)
mov L0xbefff0c0 r12; mov L0xbefff0c4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f5558b4 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f5558b8 *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #8]                           #! EA = L0xbeffef98; Value = 0x43fe5b03; PC = 0x7f5558bc *)
mov r1 L0xbeffef98; mov r0 L0xbeffef9c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f5558c0 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; PC = 0x7f5558c4 *)
mov L0xbefff0c8 r10; mov L0xbefff0cc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f5558c8 *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x44d42660; PC = 0x7f5558cc *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #56]	; 0x38                   #! EA = L0xbeffefc8; Value = 0x38efb55f; PC = 0x7f5558d0 *)
mov r2 L0xbeffefc8; mov r3 L0xbeffefcc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0x32fc7f62; PC = 0x7f5558d4 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f5558d8 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5558dc *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #104]	; 0x68                  #! EA = L0xbeffeff8; Value = 0xfbde67d6; PC = 0x7f5558e0 *)
mov r4 L0xbeffeff8; mov r5 L0xbeffeffc;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f5558e4 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5558e8 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5558ec *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; Value = 0x2e5671d0; PC = 0x7f5558f0 *)
mov r10 L0xbefff028; mov r11 L0xbefff02c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xe8faa60a; PC = 0x7f5558f4 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f5558f8 *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f5558fc *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555900 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555904 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #160]	; 0xa0                  #! EA = L0xbefff030; Value = 0xb82e1634; PC = 0x7f555908 *)
mov r8 L0xbefff030; mov r9 L0xbefff034;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f55590c *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555910 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555914 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555918 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f55591c *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555920 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555924 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555928 *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f55592c *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555930 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555934 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555938 *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f55593c *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #320]	; 0x140               #! EA = L0xbefff0d0; PC = 0x7f555940 *)
mov L0xbefff0d0 r10; mov L0xbefff0d4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555944 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555948 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f55594c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #328]	; 0x148                #! EA = L0xbefff0d8; PC = 0x7f555950 *)
mov L0xbefff0d8 r12; mov L0xbefff0dc lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555954 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555958 *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f55595c *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #336]	; 0x150               #! EA = L0xbefff0e0; PC = 0x7f555960 *)
mov L0xbefff0e0 r10; mov L0xbefff0e4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555964 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555968 *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f55596c *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555970 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #344]	; 0x158                #! EA = L0xbefff0e8; PC = 0x7f555974 *)
mov L0xbefff0e8 r12; mov L0xbefff0ec lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555978 *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f55597c *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #32]                          #! EA = L0xbeffefb0; Value = 0xd65f83a6; PC = 0x7f555980 *)
mov r1 L0xbeffefb0; mov r0 L0xbeffefb4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555984 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555988 *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #352]	; 0x160               #! EA = L0xbefff0f0; PC = 0x7f55598c *)
mov L0xbefff0f0 r10; mov L0xbefff0f4 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xf6f90650; PC = 0x7f555990 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0xe8faa60a; PC = 0x7f555994 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x44d42660; PC = 0x7f555998 *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f55599c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f5559a0 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #40]	; 0x28                   #! EA = L0xbeffefb8; Value = 0xb7ff8234; PC = 0x7f5559a4 *)
mov r2 L0xbeffefb8; mov r3 L0xbeffefbc;
(* ldrd	r4, r5, [sp, #88]	; 0x58                   #! EA = L0xbeffefe8; Value = 0xf91e1412; PC = 0x7f5559a8 *)
mov r4 L0xbeffefe8; mov r5 L0xbeffefec;
(* eor.w	r2, r2, r12                               #! PC = 0x7f5559ac *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f5559b0 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; Value = 0x9c5291ac; PC = 0x7f5559b4 *)
mov r10 L0xbefff018; mov r11 L0xbefff01c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0x32fc7f62; PC = 0x7f5559b8 *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f5559bc *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f5559c0 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f5559c4 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f5559c8 *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f5559cc *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f5559d0 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; Value = 0x4b6bd444; PC = 0x7f5559d4 *)
mov r8 L0xbefff048; mov r9 L0xbefff04c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f5559d8 *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f5559dc *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f5559e0 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f5559e4 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f5559e8 *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f5559ec *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f5559f0 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f5559f4 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f5559f8 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f5559fc *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555a00 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; PC = 0x7f555a04 *)
mov L0xbefff0f8 r10; mov L0xbefff0fc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555a08 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555a0c *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555a10 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; PC = 0x7f555a14 *)
mov L0xbefff100 r12; mov L0xbefff104 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555a18 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555a1c *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555a20 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555a24 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555a28 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555a2c *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555a30 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; PC = 0x7f555a34 *)
mov L0xbefff108 r10; mov L0xbefff10c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555a38 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555a3c *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555a40 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; PC = 0x7f555a44 *)
mov L0xbefff110 r12; mov L0xbefff114 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555a48 *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555a4c *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #16]                          #! EA = L0xbeffefa0; Value = 0x38290298; PC = 0x7f555a50 *)
mov r0 L0xbeffefa0; mov r1 L0xbeffefa4;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555a54 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; PC = 0x7f555a58 *)
mov L0xbefff118 r10; mov L0xbefff11c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0x62fcb965; PC = 0x7f555a5c *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #64]	; 0x40                   #! EA = L0xbeffefd0; Value = 0x4046cac2; PC = 0x7f555a60 *)
mov r2 L0xbeffefd0; mov r3 L0xbeffefd4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xf6f90650; PC = 0x7f555a64 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555a68 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555a6c *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #112]	; 0x70                  #! EA = L0xbefff000; Value = 0x53e2df3f; PC = 0x7f555a70 *)
mov r4 L0xbefff000; mov r5 L0xbefff004;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0xe8faa60a; PC = 0x7f555a74 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555a78 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555a7c *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; Value = 0x972b6e8d; PC = 0x7f555a80 *)
mov r10 L0xbefff008; mov r11 L0xbefff00c;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555a84 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555a88 *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x44d42660; PC = 0x7f555a8c *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555a90 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555a94 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555a98 *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555a9c *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555aa0 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555aa4 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #168]	; 0xa8                  #! EA = L0xbefff038; Value = 0xbb9d6608; PC = 0x7f555aa8 *)
mov r8 L0xbefff038; mov r9 L0xbefff03c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555aac *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555ab0 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555ab4 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ab8 *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555abc *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ac0 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ac4 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ac8 *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #400]	; 0x190               #! EA = L0xbefff120; PC = 0x7f555acc *)
mov L0xbefff120 r10; mov L0xbefff124 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555ad0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555ad4 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555ad8 *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555adc *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f555ae0 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #408]	; 0x198                #! EA = L0xbefff128; PC = 0x7f555ae4 *)
mov L0xbefff128 r12; mov L0xbefff12c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f555ae8 *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f555aec *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f555af0 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f555af4 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f555af8 *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; PC = 0x7f555afc *)
mov L0xbefff130 r4; mov L0xbefff134 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f555b00 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f555b04 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f555b08 *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; PC = 0x7f555b0c *)
mov L0xbefff138 r6; mov L0xbefff13c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f555b10 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #240	; 0xf0                      #! PC = 0x7f555b14 *)
adds dc r12 sp 240@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f555b18 *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #280	; 0x118                     #! PC = 0x7f555b1c *)
adds dc r10 sp 280@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f555b20 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; PC = 0x7f555b24 *)
mov L0xbefff140 r8; mov L0xbefff144 r9;
(* ldmia.w	r12, {r0, r1, r2, r3}                   #! EA = L0xbefff080; Value = 0xf8979469; PC = 0x7f555b28 *)
mov r0 L0xbefff080; mov r1 L0xbefff084;
mov r2 L0xbefff088; mov r3 L0xbefff08c;
(* ldmia.w	r10, {r10, r11, r12, lr}                #! EA = L0xbefff0a8; Value = 0x353d2aab; PC = 0x7f555b2c *)
mov r10 L0xbefff0a8; mov r11 L0xbefff0ac;
mov r12 L0xbefff0b0; mov lr L0xbefff0b4;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555b30 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555b34 *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555b38 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #296]	; 0x128               #! EA = L0xbefff0b8; Value = 0x96b073ef; PC = 0x7f555b3c *)
mov r10 L0xbefff0b8; mov r11 L0xbefff0bc;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555b40 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #304]	; 0x130                #! EA = L0xbefff0c0; Value = 0x68b63563; PC = 0x7f555b44 *)
mov r12 L0xbefff0c0; mov lr L0xbefff0c4;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555b48 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555b4c *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555b50 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #312]	; 0x138               #! EA = L0xbefff0c8; Value = 0x49c31282; PC = 0x7f555b54 *)
mov r10 L0xbefff0c8; mov r11 L0xbefff0cc;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555b58 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #320]	; 0x140                #! EA = L0xbefff0d0; Value = 0x94709f04; PC = 0x7f555b5c *)
mov r12 L0xbefff0d0; mov lr L0xbefff0d4;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555b60 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555b64 *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555b68 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #328]	; 0x148               #! EA = L0xbefff0d8; Value = 0x5a6931db; PC = 0x7f555b6c *)
mov r10 L0xbefff0d8; mov r11 L0xbefff0dc;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555b70 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x000e2dc4; PC = 0x7f555b74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555b78 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555b7c *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555b80 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #344]	; 0x158               #! EA = L0xbefff0e8; Value = 0x9ee1fb0d; PC = 0x7f555b84 *)
mov r10 L0xbefff0e8; mov r11 L0xbefff0ec;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555b88 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #352]	; 0x160                #! EA = L0xbefff0f0; Value = 0xe9e81c73; PC = 0x7f555b8c *)
mov r12 L0xbefff0f0; mov lr L0xbefff0f4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555b90 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555b94 *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555b98 *)
xor r8@uint32 r8 r12;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xd27acfdf; PC = 0x7f555b9c *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555ba0 *)
xor r9@uint32 r9 lr;
(* ldrd	r12, lr, [sp, #368]	; 0x170                #! EA = L0xbefff100; Value = 0xd479cd14; PC = 0x7f555ba4 *)
mov r12 L0xbefff100; mov lr L0xbefff104;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555ba8 *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555bac *)
xor r1@uint32 r1 r11;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555bb0 *)
xor r2@uint32 r2 r12;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xba5f04f7; PC = 0x7f555bb4 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555bb8 *)
xor r3@uint32 r3 lr;
(* ldrd	r12, lr, [sp, #384]	; 0x180                #! EA = L0xbefff110; Value = 0x7ca6305e; PC = 0x7f555bbc *)
mov r12 L0xbefff110; mov lr L0xbefff114;
(* eor.w	r4, r4, r10                               #! PC = 0x7f555bc0 *)
xor r4@uint32 r4 r10;
(* eor.w	r5, r5, r11                               #! PC = 0x7f555bc4 *)
xor r5@uint32 r5 r11;
(* eor.w	r6, r6, r12                               #! PC = 0x7f555bc8 *)
xor r6@uint32 r6 r12;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x67184ab2; PC = 0x7f555bcc *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* eor.w	r7, r7, lr                                #! PC = 0x7f555bd0 *)
xor r7@uint32 r7 lr;
(* ldrd	r12, lr, [sp, #400]	; 0x190                #! EA = L0xbefff120; Value = 0xcf29d1f4; PC = 0x7f555bd4 *)
mov r12 L0xbefff120; mov lr L0xbefff124;
(* eor.w	r8, r8, r10                               #! PC = 0x7f555bd8 *)
xor r8@uint32 r8 r10;
(* eor.w	r9, r9, r11                               #! PC = 0x7f555bdc *)
xor r9@uint32 r9 r11;
(* eor.w	r0, r0, r12                               #! PC = 0x7f555be0 *)
xor r0@uint32 r0 r12;
(* ldrd	r10, r11, [sp, #408]	; 0x198               #! EA = L0xbefff128; Value = 0x8d3cb2f5; PC = 0x7f555be4 *)
mov r10 L0xbefff128; mov r11 L0xbefff12c;
(* eor.w	r1, r1, lr                                #! PC = 0x7f555be8 *)
xor r1@uint32 r1 lr;
(* ldrd	r12, lr, [sp, #256]	; 0x100                #! EA = L0xbefff090; Value = 0x812ef976; PC = 0x7f555bec *)
mov r12 L0xbefff090; mov lr L0xbefff094;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555bf0 *)
xor r2@uint32 r2 r10;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555bf4 *)
xor r3@uint32 r3 r11;
(* eor.w	r4, r4, r12                               #! PC = 0x7f555bf8 *)
xor r4@uint32 r4 r12;
(* ldrd	r10, r11, [sp, #264]	; 0x108               #! EA = L0xbefff098; Value = 0x56a5511c; PC = 0x7f555bfc *)
mov r10 L0xbefff098; mov r11 L0xbefff09c;
(* eor.w	r5, r5, lr                                #! PC = 0x7f555c00 *)
xor r5@uint32 r5 lr;
(* ldrd	r12, lr, [sp, #272]	; 0x110                #! EA = L0xbefff0a0; Value = 0x74b0c3bf; PC = 0x7f555c04 *)
mov r12 L0xbefff0a0; mov lr L0xbefff0a4;
(* eor.w	r6, r6, r10                               #! PC = 0x7f555c08 *)
xor r6@uint32 r6 r10;
(* eor.w	r7, r7, r11                               #! PC = 0x7f555c0c *)
xor r7@uint32 r7 r11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c10 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c14 *)
xor r9@uint32 r9 lr;
(* eor.w	r10, r0, r5, ror #31                      #! PC = 0x7f555c18 *)
ror r5_r r5 31; xor r10@uint32 r0 r5_r;
(* eor.w	r11, r1, r4                               #! PC = 0x7f555c1c *)
xor r11@uint32 r1 r4;
(* strd	r10, r11, [sp, #208]	; 0xd0                #! EA = L0xbefff060; PC = 0x7f555c20 *)
mov L0xbefff060 r10; mov L0xbefff064 r11;
(* eor.w	r12, r6, r1, ror #31                      #! PC = 0x7f555c24 *)
ror r1_r r1 31; xor r12@uint32 r6 r1_r;
(* eor.w	lr, r7, r0                                #! PC = 0x7f555c28 *)
xor lr@uint32 r7 r0;
(* eor.w	r0, r8, r3, ror #31                       #! PC = 0x7f555c2c *)
ror r3_r r3 31; xor r0@uint32 r8 r3_r;
(* strd	r12, lr, [sp, #232]	; 0xe8                 #! EA = L0xbefff078; PC = 0x7f555c30 *)
mov L0xbefff078 r12; mov L0xbefff07c lr;
(* eor.w	r1, r9, r2                                #! PC = 0x7f555c34 *)
xor r1@uint32 r9 r2;
(* eor.w	r2, r2, r7, ror #31                       #! PC = 0x7f555c38 *)
ror r7_r r7 31; xor r2@uint32 r2 r7_r;
(* eor.w	r3, r3, r6                                #! PC = 0x7f555c3c *)
xor r3@uint32 r3 r6;
(* strd	r0, r1, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; PC = 0x7f555c40 *)
mov L0xbefff058 r0; mov L0xbefff05c r1;
(* ldrd	r7, r6, [sp, #384]	; 0x180                 #! EA = L0xbefff110; Value = 0x7ca6305e; PC = 0x7f555c44 *)
mov r7 L0xbefff110; mov r6 L0xbefff114;
(* eor.w	r4, r4, r9, ror #31                       #! PC = 0x7f555c48 *)
ror r9_r r9 31; xor r4@uint32 r4 r9_r;
(* strd	r2, r3, [sp, #216]	; 0xd8                  #! EA = L0xbefff068; PC = 0x7f555c4c *)
mov L0xbefff068 r2; mov L0xbefff06c r3;
(* eor.w	r5, r5, r8                                #! PC = 0x7f555c50 *)
xor r5@uint32 r5 r8;
(* ldrd	r8, r9, [sp, #432]	; 0x1b0                 #! EA = L0xbefff140; Value = 0xee02a2d0; PC = 0x7f555c54 *)
mov r8 L0xbefff140; mov r9 L0xbefff144;
(* eor.w	r7, r7, r4                                #! PC = 0x7f555c58 *)
xor r7@uint32 r7 r4;
(* strd	r4, r5, [sp, #224]	; 0xe0                  #! EA = L0xbefff070; PC = 0x7f555c5c *)
mov L0xbefff070 r4; mov L0xbefff074 r5;
(* eor.w	r6, r6, r5                                #! PC = 0x7f555c60 *)
xor r6@uint32 r6 r5;
(* ldrd	r4, r5, [sp, #240]	; 0xf0                  #! EA = L0xbefff080; Value = 0xf8979469; PC = 0x7f555c64 *)
mov r4 L0xbefff080; mov r5 L0xbefff084;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555c68 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555c6c *)
xor r9@uint32 r9 lr;
(* eor.w	r0, r0, r4                                #! PC = 0x7f555c70 *)
xor r0@uint32 r0 r4;
(* ldrd	r12, lr, [sp, #336]	; 0x150                #! EA = L0xbefff0e0; Value = 0x000e2dc4; PC = 0x7f555c74 *)
mov r12 L0xbefff0e0; mov lr L0xbefff0e4;
(* eor.w	r1, r1, r5                                #! PC = 0x7f555c78 *)
xor r1@uint32 r1 r5;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555c7c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555c80 *)
xor lr@uint32 lr r3;
(* ldrd	r2, r3, [sp, #288]	; 0x120                 #! EA = L0xbefff0b0; Value = 0x8554f96c; PC = 0x7f555c84 *)
mov r2 L0xbefff0b0; mov r3 L0xbefff0b4;
(* mov.w	r5, r12, ror #11                          #! PC = 0x7f555c88 *)
ror r5@uint32 r12 11;
(* ldr.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; Value = 0x000000b0; PC = 0x7f555c8c *)
mov r12 L0xbefff14c;
(* eor.w	r2, r2, r10                               #! PC = 0x7f555c90 *)
xor r2@uint32 r2 r10;
(* subw	r10, pc, #1912	; 0x778                     #! PC = 0x7f555c94 *)
subc dc r10 pc 1912@uint32;
(* mov.w	r4, lr, ror #10                           #! PC = 0x7f555c98 *)
ror r4@uint32 lr 10;
(* add.w	lr, r10, r12                              #! PC = 0x7f555c9c *)
adds dc lr r10 r12;
(* eor.w	r3, r3, r11                               #! PC = 0x7f555ca0 *)
xor r3@uint32 r3 r11;
(* add.w	r12, r12, #16                             #! PC = 0x7f555ca4 *)
adds dc r12 r12 16@uint32;
(* ldrd	r10, r11, [lr, #8]                         #! EA = L0x7f5555d8; Value = 0x00000000; PC = 0x7f555ca8 *)
mov r10 L0x7f5555d8; mov r11 L0x7f5555dc;
(* cmp.w	r12, #192	; 0xc0                          #! PC = 0x7f555cac *)
(* cmp.w r12, 192 *)
nop;
(* str.w	r12, [sp, #444]	; 0x1bc                   #! EA = L0xbefff14c; PC = 0x7f555cb0 *)
mov L0xbefff14c r12;
(* bic.w	r12, r4, r2, ror #10                     #! PC = 0x7f555cb4 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r12@uint32 r4 r2_n;
(* bic.w	lr, r5, r3, ror #10                      #! PC = 0x7f555cb8 *)
ror r3_r@uint32 r3 10; not r3_n@uint32 r3_r; and lr@uint32 r5 r3_n;
(* mov.w	r2, r2, ror #10                           #! PC = 0x7f555cbc *)
ror r2@uint32 r2 10;
(* mov.w	r3, r3, ror #10                           #! PC = 0x7f555cc0 *)
ror r3@uint32 r3 10;
(* eor.w	r12, r12, r0                              #! PC = 0x7f555cc4 *)
xor r12@uint32 r12 r0;
(* eor.w	lr, lr, r1                                #! PC = 0x7f555cc8 *)
xor lr@uint32 lr r1;
(* eor.w	r10, r10, r12                             #! PC = 0x7f555ccc *)
xor r10@uint32 r10 r12;
(* eor.w	r11, r11, lr                              #! PC = 0x7f555cd0 *)
xor r11@uint32 r11 lr;
(* bic.w	r12, r6, r4, ror #11                     #! PC = 0x7f555cd4 *)
ror r4_r@uint32 r4 11; not r4_n@uint32 r4_r; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp]                             #! EA = L0xbeffef90; PC = 0x7f555cd8 *)
mov L0xbeffef90 r10; mov L0xbeffef94 r11;
(* bic.w	lr, r7, r5, ror #10                      #! PC = 0x7f555cdc *)
ror r5_r@uint32 r5 10; not r5_n@uint32 r5_r; and lr@uint32 r7 r5_n;
(* bic.w	r10, r8, r6, ror #28                     #! PC = 0x7f555ce0 *)
ror r6_r@uint32 r6 28; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7, ror #29                     #! PC = 0x7f555ce4 *)
ror r7_r@uint32 r7 29; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* eor.w	r12, r2, r12, ror #21                     #! PC = 0x7f555ce8 *)
ror r12_r r12 21; xor r12@uint32 r2 r12_r;
(* eor.w	lr, r3, lr, ror #22                       #! PC = 0x7f555cec *)
ror lr_r lr 22; xor lr@uint32 r3 lr_r;
(* strd	r12, lr, [sp, #8]                          #! EA = L0xbeffef98; PC = 0x7f555cf0 *)
mov L0xbeffef98 r12; mov L0xbeffef9c lr;
(* eor.w	r10, r4, r10, ror #25                     #! PC = 0x7f555cf4 *)
ror r10_r r10 25; xor r10@uint32 r4 r10_r;
(* eor.w	r11, r5, r11, ror #25                     #! PC = 0x7f555cf8 *)
ror r11_r r11 25; xor r11@uint32 r5 r11_r;
(* bic.w	r12, r0, r8, ror #25                     #! PC = 0x7f555cfc *)
ror r8_r@uint32 r8 25; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #16]                        #! EA = L0xbeffefa0; PC = 0x7f555d00 *)
mov L0xbeffefa0 r10; mov L0xbeffefa4 r11;
(* bic.w	lr, r1, r9, ror #25                      #! PC = 0x7f555d04 *)
ror r9_r@uint32 r9 25; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6, ror #21                     #! PC = 0x7f555d08 *)
ror r6_r r6 21; xor r12@uint32 r12 r6_r;
(* eor.w	lr, lr, r7, ror #22                       #! PC = 0x7f555d0c *)
ror r7_r r7 22; xor lr@uint32 lr r7_r;
(* strd	r12, lr, [sp, #24]                         #! EA = L0xbeffefa8; PC = 0x7f555d10 *)
mov L0xbeffefa8 r12; mov L0xbeffefac lr;
(* bic.w	r10, r2, r0                              #! PC = 0x7f555d14 *)
not r0_n@uint32 r0; and r10@uint32 r2 r0_n;
(* add.w	lr, sp, #224	; 0xe0                       #! PC = 0x7f555d18 *)
adds dc lr sp 224@uint32;
(* bic.w	r11, r3, r1                              #! PC = 0x7f555d1c *)
not r1_n@uint32 r1; and r11@uint32 r3 r1_n;
(* ldrd	r0, r1, [sp, #264]	; 0x108                 #! EA = L0xbefff098; Value = 0x56a5511c; PC = 0x7f555d20 *)
mov r0 L0xbefff098; mov r1 L0xbefff09c;
(* eor.w	r10, r10, r8, ror #25                     #! PC = 0x7f555d24 *)
ror r8_r r8 25; xor r10@uint32 r10 r8_r;
(* eor.w	r11, r11, r9, ror #25                     #! PC = 0x7f555d28 *)
ror r9_r r9 25; xor r11@uint32 r11 r9_r;
(* add.w	r9, sp, #200	; 0xc8                       #! PC = 0x7f555d2c *)
adds dc r9 sp 200@uint32;
(* strd	r10, r11, [sp, #32]                        #! EA = L0xbeffefb0; PC = 0x7f555d30 *)
mov L0xbeffefb0 r10; mov L0xbeffefb4 r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff070; Value = 0xed236fae; PC = 0x7f555d34 *)
mov r10 L0xbefff070; mov r11 L0xbefff074;
mov r12 L0xbefff078; mov lr L0xbefff07c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff058; Value = 0x62a41ca3; PC = 0x7f555d38 *)
mov r6 L0xbefff058; mov r7 L0xbefff05c;
mov r8 L0xbefff060; mov r9 L0xbefff064;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555d3c *)
xor r0@uint32 r0 r10;
(* ldrd	r2, r3, [sp, #312]	; 0x138                 #! EA = L0xbefff0c8; Value = 0x49c31282; PC = 0x7f555d40 *)
mov r2 L0xbefff0c8; mov r3 L0xbefff0cc;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555d44 *)
xor r1@uint32 r1 r11;
(* ldrd	r10, r11, [sp, #368]	; 0x170               #! EA = L0xbefff100; Value = 0xd479cd14; PC = 0x7f555d48 *)
mov r10 L0xbefff100; mov r11 L0xbefff104;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555d4c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555d50 *)
xor r3@uint32 r3 lr;
(* ldrd	r4, r5, [sp, #320]	; 0x140                 #! EA = L0xbefff0d0; Value = 0x94709f04; PC = 0x7f555d54 *)
mov r4 L0xbefff0d0; mov r5 L0xbefff0d4;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555d58 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555d5c *)
xor r7@uint32 r7 r5;
(* ldrd	r12, lr, [sp, #216]	; 0xd8                 #! EA = L0xbefff068; Value = 0xec1a200a; PC = 0x7f555d60 *)
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* mov.w	r5, r6, ror #31                           #! PC = 0x7f555d64 *)
ror r5@uint32 r6 31;
(* mov.w	r4, r7, ror #30                           #! PC = 0x7f555d68 *)
ror r4@uint32 r7 30;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555d6c *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555d70 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #416]	; 0x1a0                 #! EA = L0xbefff130; Value = 0x6369be2e; PC = 0x7f555d74 *)
mov r8 L0xbefff130; mov r9 L0xbefff134;
(* mov.w	r7, r10, ror #10                          #! PC = 0x7f555d78 *)
ror r7@uint32 r10 10;
(* mov.w	r6, r11, ror #9                           #! PC = 0x7f555d7c *)
ror r6@uint32 r11 9;
(* bic.w	r10, r4, r2, ror #22                     #! PC = 0x7f555d80 *)
ror r2_r@uint32 r2 22; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #22                     #! PC = 0x7f555d84 *)
ror r3_r@uint32 r3 22; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555d88 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555d8c *)
xor lr@uint32 lr r9;
(* mov.w	r9, r12, ror #2                           #! PC = 0x7f555d90 *)
ror r9@uint32 r12 2;
(* mov.w	r8, lr, ror #1                            #! PC = 0x7f555d94 *)
ror r8@uint32 lr 1;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555d98 *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #18                     #! PC = 0x7f555d9c *)
ror r1_r r1 18; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555da0 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #40]	; 0x28                 #! EA = L0xbeffefb8; PC = 0x7f555da4 *)
mov L0xbeffefb8 r10; mov L0xbeffefbc r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555da8 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #22                     #! PC = 0x7f555dac *)
ror r2_r r2 22; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #22                       #! PC = 0x7f555db0 *)
ror r3_r r3 22; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #48]	; 0x30                  #! EA = L0xbeffefc0; PC = 0x7f555db4 *)
mov L0xbeffefc0 r12; mov L0xbeffefc4 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555db8 *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555dbc *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555dc0 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #14                      #! PC = 0x7f555dc4 *)
ror r9_r@uint32 r9 14; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555dc8 *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555dcc *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #28                      #! PC = 0x7f555dd0 *)
ror r0_r@uint32 r0 28; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #56]	; 0x38                 #! EA = L0xbeffefc8; PC = 0x7f555dd4 *)
mov L0xbeffefc8 r10; mov L0xbeffefcc r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555dd8 *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #28                     #! PC = 0x7f555ddc *)
ror r1_r@uint32 r1 28; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #18                       #! PC = 0x7f555de0 *)
ror lr_r lr 18; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #64]	; 0x40                  #! EA = L0xbeffefd0; PC = 0x7f555de4 *)
mov L0xbeffefd0 r12; mov L0xbeffefd4 lr;
(* add.w	r12, sp, #208	; 0xd0                      #! PC = 0x7f555de8 *)
adds dc r12 sp 208@uint32;
(* eor.w	r10, r8, r2, ror #22                      #! PC = 0x7f555dec *)
ror r2_r r2 22; xor r10@uint32 r8 r2_r;
(* ldrd	r1, r0, [sp, #248]	; 0xf8                  #! EA = L0xbefff088; Value = 0xca86a6fb; PC = 0x7f555df0 *)
mov r1 L0xbefff088; mov r0 L0xbefff08c;
(* eor.w	r11, r9, r11, ror #22                     #! PC = 0x7f555df4 *)
ror r11_r r11 22; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #72]	; 0x48                 #! EA = L0xbeffefd8; PC = 0x7f555df8 *)
mov L0xbeffefd8 r10; mov L0xbeffefdc r11;
(* add.w	r9, sp, #224	; 0xe0                       #! PC = 0x7f555dfc *)
adds dc r9 sp 224@uint32;
(* ldmia.w	r12, {r10, r11, r12, lr}                #! EA = L0xbefff060; Value = 0x8634354e; PC = 0x7f555e00 *)
mov r10 L0xbefff060; mov r11 L0xbefff064;
mov r12 L0xbefff068; mov lr L0xbefff06c;
(* ldrd	r2, r3, [sp, #296]	; 0x128                 #! EA = L0xbefff0b8; Value = 0x96b073ef; PC = 0x7f555e04 *)
mov r2 L0xbefff0b8; mov r3 L0xbefff0bc;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff070; Value = 0xed236fae; PC = 0x7f555e08 *)
mov r6 L0xbefff070; mov r7 L0xbefff074;
mov r8 L0xbefff078; mov r9 L0xbefff07c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555e0c *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555e10 *)
xor r0@uint32 r0 r11;
(* ldrd	r4, r5, [sp, #344]	; 0x158                 #! EA = L0xbefff0e8; Value = 0x9ee1fb0d; PC = 0x7f555e14 *)
mov r4 L0xbefff0e8; mov r5 L0xbefff0ec;
(* mov.w	r0, r0, ror #31                           #! PC = 0x7f555e18 *)
ror r0@uint32 r0 31;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555e1c *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555e20 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #392]	; 0x188               #! EA = L0xbefff118; Value = 0x67184ab2; PC = 0x7f555e24 *)
mov r10 L0xbefff118; mov r11 L0xbefff11c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x62a41ca3; PC = 0x7f555e28 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* eor.w	r4, r4, r6                                #! PC = 0x7f555e2c *)
xor r4@uint32 r4 r6;
(* eor.w	r5, r5, r7                                #! PC = 0x7f555e30 *)
xor r5@uint32 r5 r7;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555e34 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555e38 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #400]	; 0x190                 #! EA = L0xbefff120; Value = 0xcf29d1f4; PC = 0x7f555e3c *)
mov r8 L0xbefff120; mov r9 L0xbefff124;
(* mov.w	r6, r10, ror #28                          #! PC = 0x7f555e40 *)
ror r6@uint32 r10 28;
(* mov.w	r7, r11, ror #28                          #! PC = 0x7f555e44 *)
ror r7@uint32 r11 28;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555e48 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555e4c *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #23                          #! PC = 0x7f555e50 *)
ror r8@uint32 r12 23;
(* mov.w	r9, lr, ror #23                           #! PC = 0x7f555e54 *)
ror r9@uint32 lr 23;
(* bic.w	r10, r5, r2, ror #10                     #! PC = 0x7f555e58 *)
ror r2_r@uint32 r2 10; not r2_n@uint32 r2_r; and r10@uint32 r5 r2_n;
(* bic.w	r11, r4, r3, ror #9                      #! PC = 0x7f555e5c *)
ror r3_r@uint32 r3 9; not r3_n@uint32 r3_r; and r11@uint32 r4 r3_n;
(* bic.w	r12, r6, r5, ror #19                     #! PC = 0x7f555e60 *)
ror r5_r@uint32 r5 19; not r5_n@uint32 r5_r; and r12@uint32 r6 r5_n;
(* bic.w	lr, r7, r4, ror #20                      #! PC = 0x7f555e64 *)
ror r4_r@uint32 r4 20; not r4_n@uint32 r4_r; and lr@uint32 r7 r4_n;
(* eor.w	r10, r0, r10, ror #19                     #! PC = 0x7f555e68 *)
ror r10_r r10 19; xor r10@uint32 r0 r10_r;
(* eor.w	r11, r1, r11, ror #20                     #! PC = 0x7f555e6c *)
ror r11_r r11 20; xor r11@uint32 r1 r11_r;
(* eor.w	r12, r12, r2, ror #29                     #! PC = 0x7f555e70 *)
ror r2_r r2 29; xor r12@uint32 r12 r2_r;
(* strd	r10, r11, [sp, #80]	; 0x50                 #! EA = L0xbeffefe0; PC = 0x7f555e74 *)
mov L0xbeffefe0 r10; mov L0xbeffefe4 r11;
(* eor.w	lr, lr, r3, ror #29                       #! PC = 0x7f555e78 *)
ror r3_r r3 29; xor lr@uint32 lr r3_r;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555e7c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555e80 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* strd	r12, lr, [sp, #88]	; 0x58                  #! EA = L0xbeffefe8; PC = 0x7f555e84 *)
mov L0xbeffefe8 r12; mov L0xbeffefec lr;
(* eor.w	r10, r10, r5, ror #19                     #! PC = 0x7f555e88 *)
ror r5_r r5 19; xor r10@uint32 r10 r5_r;
(* eor.w	r11, r11, r4, ror #20                     #! PC = 0x7f555e8c *)
ror r4_r r4 20; xor r11@uint32 r11 r4_r;
(* bic.w	r12, r0, r8                              #! PC = 0x7f555e90 *)
not r8_n@uint32 r8; and r12@uint32 r0 r8_n;
(* strd	r10, r11, [sp, #96]	; 0x60                 #! EA = L0xbeffeff0; PC = 0x7f555e94 *)
mov L0xbeffeff0 r10; mov L0xbeffeff4 r11;
(* bic.w	lr, r1, r9                               #! PC = 0x7f555e98 *)
not r9_n@uint32 r9; and lr@uint32 r1 r9_n;
(* eor.w	r12, r12, r6                              #! PC = 0x7f555e9c *)
xor r12@uint32 r12 r6;
(* eor.w	lr, lr, r7                                #! PC = 0x7f555ea0 *)
xor lr@uint32 lr r7;
(* bic.w	r10, r2, r0, ror #3                      #! PC = 0x7f555ea4 *)
ror r0_r@uint32 r0 3; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r12, lr, [sp, #104]	; 0x68                 #! EA = L0xbeffeff8; PC = 0x7f555ea8 *)
mov L0xbeffeff8 r12; mov L0xbeffeffc lr;
(* bic.w	r11, r3, r1, ror #3                      #! PC = 0x7f555eac *)
ror r1_r@uint32 r1 3; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	r10, r8, r10, ror #29                     #! PC = 0x7f555eb0 *)
ror r10_r r10 29; xor r10@uint32 r8 r10_r;
(* ldrd	r1, r0, [sp, #272]	; 0x110                 #! EA = L0xbefff0a0; Value = 0x74b0c3bf; PC = 0x7f555eb4 *)
mov r1 L0xbefff0a0; mov r0 L0xbefff0a4;
(* eor.w	r11, r9, r11, ror #29                     #! PC = 0x7f555eb8 *)
ror r11_r r11 29; xor r11@uint32 r9 r11_r;
(* add.w	r9, sp, #208	; 0xd0                       #! PC = 0x7f555ebc *)
adds dc r9 sp 208@uint32;
(* strd	r10, r11, [sp, #112]	; 0x70                #! EA = L0xbefff000; PC = 0x7f555ec0 *)
mov L0xbefff000 r10; mov L0xbefff004 r11;
(* ldrd	r10, r11, [sp, #232]	; 0xe8                #! EA = L0xbefff078; Value = 0xe7895c6a; PC = 0x7f555ec4 *)
mov r10 L0xbefff078; mov r11 L0xbefff07c;
(* ldrd	r12, lr, [sp, #200]	; 0xc8                 #! EA = L0xbefff058; Value = 0x62a41ca3; PC = 0x7f555ec8 *)
mov r12 L0xbefff058; mov lr L0xbefff05c;
(* ldmia.w	r9, {r6, r7, r8, r9}                    #! EA = L0xbefff060; Value = 0x8634354e; PC = 0x7f555ecc *)
mov r6 L0xbefff060; mov r7 L0xbefff064;
mov r8 L0xbefff068; mov r9 L0xbefff06c;
(* eor.w	r1, r1, r10                               #! PC = 0x7f555ed0 *)
xor r1@uint32 r1 r10;
(* eor.w	r0, r0, r11                               #! PC = 0x7f555ed4 *)
xor r0@uint32 r0 r11;
(* ldrd	r2, r3, [sp, #280]	; 0x118                 #! EA = L0xbefff0a8; Value = 0x353d2aab; PC = 0x7f555ed8 *)
mov r2 L0xbefff0a8; mov r3 L0xbefff0ac;
(* ldrd	r4, r5, [sp, #328]	; 0x148                 #! EA = L0xbefff0d8; Value = 0x5a6931db; PC = 0x7f555edc *)
mov r4 L0xbefff0d8; mov r5 L0xbefff0dc;
(* eor.w	r2, r2, r12                               #! PC = 0x7f555ee0 *)
xor r2@uint32 r2 r12;
(* eor.w	r3, r3, lr                                #! PC = 0x7f555ee4 *)
xor r3@uint32 r3 lr;
(* ldrd	r10, r11, [sp, #376]	; 0x178               #! EA = L0xbefff108; Value = 0xba5f04f7; PC = 0x7f555ee8 *)
mov r10 L0xbefff108; mov r11 L0xbefff10c;
(* ldrd	r12, lr, [sp, #224]	; 0xe0                 #! EA = L0xbefff070; Value = 0xed236fae; PC = 0x7f555eec *)
mov r12 L0xbefff070; mov lr L0xbefff074;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555ef0 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555ef4 *)
xor r7@uint32 r7 r5;
(* mov.w	r4, r6, ror #27                           #! PC = 0x7f555ef8 *)
ror r4@uint32 r6 27;
(* mov.w	r5, r7, ror #27                           #! PC = 0x7f555efc *)
ror r5@uint32 r7 27;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555f00 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555f04 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #424]	; 0x1a8                 #! EA = L0xbefff138; Value = 0xfee58d02; PC = 0x7f555f08 *)
mov r8 L0xbefff138; mov r9 L0xbefff13c;
(* mov.w	r7, r10, ror #25                          #! PC = 0x7f555f0c *)
ror r7@uint32 r10 25;
(* mov.w	r6, r11, ror #24                          #! PC = 0x7f555f10 *)
ror r6@uint32 r11 24;
(* eor.w	r12, r12, r8                              #! PC = 0x7f555f14 *)
xor r12@uint32 r12 r8;
(* eor.w	lr, lr, r9                                #! PC = 0x7f555f18 *)
xor lr@uint32 lr r9;
(* mov.w	r8, r12, ror #4                           #! PC = 0x7f555f1c *)
ror r8@uint32 r12 4;
(* mov.w	r9, lr, ror #4                            #! PC = 0x7f555f20 *)
ror r9@uint32 lr 4;
(* bic.w	r10, r4, r2, ror #14                     #! PC = 0x7f555f24 *)
ror r2_r@uint32 r2 14; not r2_n@uint32 r2_r; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3, ror #14                     #! PC = 0x7f555f28 *)
ror r3_r@uint32 r3 14; not r3_n@uint32 r3_r; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #18                     #! PC = 0x7f555f2c *)
ror r0_r r0 18; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #19                     #! PC = 0x7f555f30 *)
ror r1_r r1 19; xor r11@uint32 r11 r1_r;
(* bic.w	r12, r6, r4                              #! PC = 0x7f555f34 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* strd	r10, r11, [sp, #120]	; 0x78                #! EA = L0xbefff008; PC = 0x7f555f38 *)
mov L0xbefff008 r10; mov L0xbefff00c r11;
(* bic.w	lr, r7, r5                               #! PC = 0x7f555f3c *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2, ror #14                     #! PC = 0x7f555f40 *)
ror r2_r r2 14; xor r12@uint32 r12 r2_r;
(* eor.w	lr, lr, r3, ror #14                       #! PC = 0x7f555f44 *)
ror r3_r r3 14; xor lr@uint32 lr r3_r;
(* strd	r12, lr, [sp, #128]	; 0x80                 #! EA = L0xbefff010; PC = 0x7f555f48 *)
mov L0xbefff010 r12; mov L0xbefff014 lr;
(* bic.w	r10, r8, r6                              #! PC = 0x7f555f4c *)
not r6_n@uint32 r6; and r10@uint32 r8 r6_n;
(* bic.w	r11, r9, r7                              #! PC = 0x7f555f50 *)
not r7_n@uint32 r7; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #14                     #! PC = 0x7f555f54 *)
ror r8_r@uint32 r8 14; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #13                      #! PC = 0x7f555f58 *)
ror r9_r@uint32 r9 13; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r10, r10, r4                              #! PC = 0x7f555f5c *)
xor r10@uint32 r10 r4;
(* eor.w	r11, r11, r5                              #! PC = 0x7f555f60 *)
xor r11@uint32 r11 r5;
(* bic.w	r2, r2, r0, ror #4                       #! PC = 0x7f555f64 *)
ror r0_r@uint32 r0 4; not r0_n@uint32 r0_r; and r2@uint32 r2 r0_n;
(* strd	r10, r11, [sp, #136]	; 0x88                #! EA = L0xbefff018; PC = 0x7f555f68 *)
mov L0xbefff018 r10; mov L0xbefff01c r11;
(* eor.w	r12, r6, r12, ror #18                     #! PC = 0x7f555f6c *)
ror r12_r r12 18; xor r12@uint32 r6 r12_r;
(* bic.w	r11, r3, r1, ror #5                      #! PC = 0x7f555f70 *)
ror r1_r@uint32 r1 5; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* eor.w	lr, r7, lr, ror #19                       #! PC = 0x7f555f74 *)
ror lr_r lr 19; xor lr@uint32 r7 lr_r;
(* strd	r12, lr, [sp, #144]	; 0x90                 #! EA = L0xbefff020; PC = 0x7f555f78 *)
mov L0xbefff020 r12; mov L0xbefff024 lr;
(* add.w	lr, sp, #216	; 0xd8                       #! PC = 0x7f555f7c *)
adds dc lr sp 216@uint32;
(* eor.w	r10, r8, r2, ror #14                      #! PC = 0x7f555f80 *)
ror r2_r r2 14; xor r10@uint32 r8 r2_r;
(* ldrd	r0, r1, [sp, #256]	; 0x100                 #! EA = L0xbefff090; Value = 0x812ef976; PC = 0x7f555f84 *)
mov r0 L0xbefff090; mov r1 L0xbefff094;
(* eor.w	r11, r9, r11, ror #14                     #! PC = 0x7f555f88 *)
ror r11_r r11 14; xor r11@uint32 r9 r11_r;
(* strd	r10, r11, [sp, #152]	; 0x98                #! EA = L0xbefff028; PC = 0x7f555f8c *)
mov L0xbefff028 r10; mov L0xbefff02c r11;
(* ldmia.w	lr, {r10, r11, r12, lr}                 #! EA = L0xbefff068; Value = 0xec1a200a; PC = 0x7f555f90 *)
mov r10 L0xbefff068; mov r11 L0xbefff06c;
mov r12 L0xbefff070; mov lr L0xbefff074;
(* ldrd	r2, r3, [sp, #304]	; 0x130                 #! EA = L0xbefff0c0; Value = 0x68b63563; PC = 0x7f555f94 *)
mov r2 L0xbefff0c0; mov r3 L0xbefff0c4;
(* ldrd	r6, r7, [sp, #232]	; 0xe8                  #! EA = L0xbefff078; Value = 0xe7895c6a; PC = 0x7f555f98 *)
mov r6 L0xbefff078; mov r7 L0xbefff07c;
(* eor.w	r0, r0, r10                               #! PC = 0x7f555f9c *)
xor r0@uint32 r0 r10;
(* eor.w	r1, r1, r11                               #! PC = 0x7f555fa0 *)
xor r1@uint32 r1 r11;
(* ldrd	r4, r5, [sp, #352]	; 0x160                 #! EA = L0xbefff0f0; Value = 0xe9e81c73; PC = 0x7f555fa4 *)
mov r4 L0xbefff0f0; mov r5 L0xbefff0f4;
(* ldrd	r8, r9, [sp, #200]	; 0xc8                  #! EA = L0xbefff058; Value = 0x62a41ca3; PC = 0x7f555fa8 *)
mov r8 L0xbefff058; mov r9 L0xbefff05c;
(* eor.w	r12, r12, r2                              #! PC = 0x7f555fac *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f555fb0 *)
xor lr@uint32 lr r3;
(* ldrd	r10, r11, [sp, #360]	; 0x168               #! EA = L0xbefff0f8; Value = 0xd27acfdf; PC = 0x7f555fb4 *)
mov r10 L0xbefff0f8; mov r11 L0xbefff0fc;
(* mov.w	r3, r12, ror #5                           #! PC = 0x7f555fb8 *)
ror r3@uint32 r12 5;
(* mov.w	r2, lr, ror #4                            #! PC = 0x7f555fbc *)
ror r2@uint32 lr 4;
(* ldrd	r12, lr, [sp, #208]	; 0xd0                 #! EA = L0xbefff060; Value = 0x8634354e; PC = 0x7f555fc0 *)
mov r12 L0xbefff060; mov lr L0xbefff064;
(* eor.w	r6, r6, r4                                #! PC = 0x7f555fc4 *)
xor r6@uint32 r6 r4;
(* eor.w	r7, r7, r5                                #! PC = 0x7f555fc8 *)
xor r7@uint32 r7 r5;
(* mov.w	r5, r6, ror #13                           #! PC = 0x7f555fcc *)
ror r5@uint32 r6 13;
(* mov.w	r4, r7, ror #12                           #! PC = 0x7f555fd0 *)
ror r4@uint32 r7 12;
(* eor.w	r10, r10, r8                              #! PC = 0x7f555fd4 *)
xor r10@uint32 r10 r8;
(* eor.w	r11, r11, r9                              #! PC = 0x7f555fd8 *)
xor r11@uint32 r11 r9;
(* ldrd	r8, r9, [sp, #408]	; 0x198                 #! EA = L0xbefff128; Value = 0x8d3cb2f5; PC = 0x7f555fdc *)
mov r8 L0xbefff128; mov r9 L0xbefff12c;
(* mov.w	r7, r10, ror #12                          #! PC = 0x7f555fe0 *)
ror r7@uint32 r10 12;
(* mov.w	r6, r11, ror #11                          #! PC = 0x7f555fe4 *)
ror r6@uint32 r11 11;
(* eor.w	r8, r8, r12                               #! PC = 0x7f555fe8 *)
xor r8@uint32 r8 r12;
(* eor.w	r9, r9, lr                                #! PC = 0x7f555fec *)
xor r9@uint32 r9 lr;
(* bic.w	r10, r4, r2                              #! PC = 0x7f555ff0 *)
not r2_n@uint32 r2; and r10@uint32 r4 r2_n;
(* bic.w	r11, r5, r3                              #! PC = 0x7f555ff4 *)
not r3_n@uint32 r3; and r11@uint32 r5 r3_n;
(* eor.w	r10, r10, r0, ror #1                      #! PC = 0x7f555ff8 *)
ror r0_r r0 1; xor r10@uint32 r10 r0_r;
(* eor.w	r11, r11, r1, ror #1                      #! PC = 0x7f555ffc *)
ror r1_r r1 1; xor r11@uint32 r11 r1_r;
(* strd	r10, r11, [sp, #160]	; 0xa0                #! EA = L0xbefff030; PC = 0x7f556000 *)
mov L0xbefff030 r10; mov L0xbefff034 r11;
(* bic.w	r12, r6, r4                              #! PC = 0x7f556004 *)
not r4_n@uint32 r4; and r12@uint32 r6 r4_n;
(* bic.w	lr, r7, r5                               #! PC = 0x7f556008 *)
not r5_n@uint32 r5; and lr@uint32 r7 r5_n;
(* eor.w	r12, r12, r2                              #! PC = 0x7f55600c *)
xor r12@uint32 r12 r2;
(* eor.w	lr, lr, r3                                #! PC = 0x7f556010 *)
xor lr@uint32 lr r3;
(* bic.w	r10, r8, r6, ror #1                      #! PC = 0x7f556014 *)
ror r6_r@uint32 r6 1; not r6_n@uint32 r6_r; and r10@uint32 r8 r6_n;
(* strd	r12, lr, [sp, #168]	; 0xa8                 #! EA = L0xbefff038; PC = 0x7f556018 *)
mov L0xbefff038 r12; mov L0xbefff03c lr;
(* bic.w	r11, r9, r7, ror #1                      #! PC = 0x7f55601c *)
ror r7_r@uint32 r7 1; not r7_n@uint32 r7_r; and r11@uint32 r9 r7_n;
(* bic.w	r12, r0, r8, ror #30                     #! PC = 0x7f556020 *)
ror r8_r@uint32 r8 30; not r8_n@uint32 r8_r; and r12@uint32 r0 r8_n;
(* bic.w	lr, r1, r9, ror #30                      #! PC = 0x7f556024 *)
ror r9_r@uint32 r9 30; not r9_n@uint32 r9_r; and lr@uint32 r1 r9_n;
(* eor.w	r4, r4, r10, ror #31                      #! PC = 0x7f556028 *)
ror r10_r r10 31; xor r4@uint32 r4 r10_r;
(* eor.w	r5, r5, r11, ror #31                      #! PC = 0x7f55602c *)
ror r11_r r11 31; xor r5@uint32 r5 r11_r;
(* strd	r4, r5, [sp, #176]	; 0xb0                  #! EA = L0xbefff040; PC = 0x7f556030 *)
mov L0xbefff040 r4; mov L0xbefff044 r5;
(* eor.w	r6, r6, r12, ror #1                       #! PC = 0x7f556034 *)
ror r12_r r12 1; xor r6@uint32 r6 r12_r;
(* eor.w	r7, r7, lr, ror #1                        #! PC = 0x7f556038 *)
ror lr_r lr 1; xor r7@uint32 r7 lr_r;
(* bic.w	r10, r2, r0, ror #1                      #! PC = 0x7f55603c *)
ror r0_r@uint32 r0 1; not r0_n@uint32 r0_r; and r10@uint32 r2 r0_n;
(* strd	r6, r7, [sp, #184]	; 0xb8                  #! EA = L0xbefff048; PC = 0x7f556040 *)
mov L0xbefff048 r6; mov L0xbefff04c r7;
(* bic.w	r11, r3, r1, ror #1                      #! PC = 0x7f556044 *)
ror r1_r@uint32 r1 1; not r1_n@uint32 r1_r; and r11@uint32 r3 r1_n;
(* add.w	r12, sp, #0                               #! PC = 0x7f556048 *)
adds dc r12 sp 0@uint32;
(* eor.w	r8, r10, r8, ror #31                      #! PC = 0x7f55604c *)
ror r8_r r8 31; xor r8@uint32 r10 r8_r;
(* add.w	r10, sp, #40	; 0x28                       #! PC = 0x7f556050 *)
adds dc r10 sp 40@uint32;
(* eor.w	r9, r11, r9, ror #31                      #! PC = 0x7f556054 *)
ror r9_r r9 31; xor r9@uint32 r11 r9_r;
(* strd	r8, r9, [sp, #192]	; 0xc0                  #! EA = L0xbefff050; PC = 0x7f556058 *)
mov L0xbefff050 r8; mov L0xbefff054 r9;
(* #bcc.w	0x7f555600 <KeccakF1600_int+32>          #! PC = 0x7f55605c *)
#bcc.w	0x7f555600 <KeccakF1600_int+32>          #! 0x7f55605c = 0x7f55605c;

(* outputs *)


mov b00 L0xbeffef90;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffef94;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a00 d00;
mov b00 L0xbeffef98;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffef9c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a01 d00;
mov b00 L0xbeffefa0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefa4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a02 d00;
mov b00 L0xbeffefa8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefac;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a03 d00;
mov b00 L0xbeffefb0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefb4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a04 d00;
mov b00 L0xbeffefb8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefbc;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a10 d00;
mov b00 L0xbeffefc0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefc4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a11 d00;
mov b00 L0xbeffefc8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefcc;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a12 d00;
mov b00 L0xbeffefd0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefd4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a13 d00;
mov b00 L0xbeffefd8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefdc;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a14 d00;
mov b00 L0xbeffefe0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefe4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a20 d00;
mov b00 L0xbeffefe8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffefec;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a21 d00;
mov b00 L0xbeffeff0;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffeff4;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a22 d00;
mov b00 L0xbeffeff8;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbeffeffc;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a23 d00;
mov b00 L0xbefff000;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff004;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a24 d00;
mov b00 L0xbefff008;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff00c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a30 d00;
mov b00 L0xbefff010;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff014;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a31 d00;
mov b00 L0xbefff018;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff01c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a32 d00;
mov b00 L0xbefff020;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff024;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a33 d00;
mov b00 L0xbefff028;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff02c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a34 d00;
mov b00 L0xbefff030;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff034;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a40 d00;
mov b00 L0xbefff038;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff03c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a41 d00;
mov b00 L0xbefff040;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff044;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a42 d00;
mov b00 L0xbefff048;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff04c;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a43 d00;
mov b00 L0xbefff050;
spl b10 b00 b00 16;
spl b08 b00 b00  8;spl b18 b10 b10  8;
spl b04 b00 b00  4;spl b0c b08 b08  4;spl b14 b10 b10  4;spl b1c b18 b18  4;
spl b02 b00 b00  2;spl b06 b04 b04  2;spl b0a b08 b08  2;spl b0e b0c b0c  2;
spl b12 b10 b10  2;spl b16 b14 b14  2;spl b1a b18 b18  2;spl b1e b1c b1c  2;
spl b01 b00 b00  1;spl b03 b02 b02  1;spl b05 b04 b04  1;spl b07 b06 b06  1;
spl b09 b08 b08  1;spl b0b b0a b0a  1;spl b0d b0c b0c  1;spl b0f b0e b0e  1;
spl b11 b10 b10  1;spl b13 b12 b12  1;spl b15 b14 b14  1;spl b17 b16 b16  1;
spl b19 b18 b18  1;spl b1b b1a b1a  1;spl b1d b1c b1c  1;spl b1f b1e b1e  1;
mov c00 L0xbefff054;
spl c10 c00 c00 16;
spl c08 c00 c00  8;spl c18 c10 c10  8;
spl c04 c00 c00  4;spl c0c c08 c08  4;spl c14 c10 c10  4;spl c1c c18 c18  4;
spl c02 c00 c00  2;spl c06 c04 c04  2;spl c0a c08 c08  2;spl c0e c0c c0c  2;
spl c12 c10 c10  2;spl c16 c14 c14  2;spl c1a c18 c18  2;spl c1e c1c c1c  2;
spl c01 c00 c00  1;spl c03 c02 c02  1;spl c05 c04 c04  1;spl c07 c06 c06  1;
spl c09 c08 c08  1;spl c0b c0a c0a  1;spl c0d c0c c0c  1;spl c0f c0e c0e  1;
spl c11 c10 c10  1;spl c13 c12 c12  1;spl c15 c14 c14  1;spl c17 c16 c16  1;
spl c19 c18 c18  1;spl c1b c1a c1a  1;spl c1d c1c c1c  1;spl c1f c1e c1e  1;
mov d00 b00;mov d01 c00;mov d02 b01;mov d03 c01;mov d04 b02;mov d05 c02;
mov d06 b03;mov d07 c03;mov d08 b04;mov d09 c04;mov d0a b05;mov d0b c05;
mov d0c b06;mov d0d c06;mov d0e b07;mov d0f c07;mov d10 b08;mov d11 c08;
mov d12 b09;mov d13 c09;mov d14 b0a;mov d15 c0a;mov d16 b0b;mov d17 c0b;
mov d18 b0c;mov d19 c0c;mov d1a b0d;mov d1b c0d;mov d1c b0e;mov d1d c0e;
mov d1e b0f;mov d1f c0f;mov d20 b10;mov d21 c10;mov d22 b11;mov d23 c11;
mov d24 b12;mov d25 c12;mov d26 b13;mov d27 c13;mov d28 b14;mov d29 c14;
mov d2a b15;mov d2b c15;mov d2c b16;mov d2d c16;mov d2e b17;mov d2f c17;
mov d30 b18;mov d31 c18;mov d32 b19;mov d33 c19;mov d34 b1a;mov d35 c1a;
mov d36 b1b;mov d37 c1b;mov d38 b1c;mov d39 c1c;mov d3a b1d;mov d3b c1d;
mov d3c b1e;mov d3d c1e;mov d3e b1f;mov d3f c1f;
join d00 d01 d00; join d02 d03 d02; join d04 d05 d04; join d06 d07 d06;
join d08 d09 d08; join d0a d0b d0a; join d0c d0d d0c; join d0e d0f d0e;
join d10 d11 d10; join d12 d13 d12; join d14 d15 d14; join d16 d17 d16;
join d18 d19 d18; join d1a d1b d1a; join d1c d1d d1c; join d1e d1f d1e;
join d20 d21 d20; join d22 d23 d22; join d24 d25 d24; join d26 d27 d26;
join d28 d29 d28; join d2a d2b d2a; join d2c d2d d2c; join d2e d2f d2e;
join d30 d31 d30; join d32 d33 d32; join d34 d35 d34; join d36 d37 d36;
join d38 d39 d38; join d3a d3b d3a; join d3c d3d d3c; join d3e d3f d3e;
join d00 d02 d00; join d04 d06 d04; join d08 d0a d08; join d0c d0e d0c;
join d10 d12 d10; join d14 d16 d14; join d18 d1a d18; join d1c d1e d1c;
join d20 d22 d20; join d24 d26 d24; join d28 d2a d28; join d2c d2e d2c;
join d30 d32 d30; join d34 d36 d34; join d38 d3a d38; join d3c d3e d3c;
join d00 d04 d00; join d08 d0c d08; join d10 d14 d10; join d18 d1c d18;
join d20 d24 d20; join d28 d2c d28; join d30 d34 d30; join d38 d3c d38;
join d00 d08 d00; join d10 d18 d10; join d20 d28 d20; join d30 d38 d30;
join d00 d10 d00; join d20 d30 d20;
join d00 d20 d00;
mov a44 d00;


{
  true
  &&
  true
}

