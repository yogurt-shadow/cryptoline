(* quine: -v -isafety -isafety_timeout 7200 -jobs 22 -slicing -no_carry_constraint nttmul_poly_invntt_tomont_new.cl
Parsing Cryptoline file:                [OK]            0.531205 seconds
Checking well-formedness:               [OK]            0.350043 seconds
Transforming to SSA form:               [OK]            0.148298 seconds
Rewriting assignments:                  [OK]            0.268222 seconds
Verifying program safety:               [OK]            17701.736405 seconds
                      Round 1 (10400 safety conditions, timeout = 3600 seconds)
*)


proc main (
bit x,
bit inp_poly000, bit inp_poly001, bit inp_poly002, bit inp_poly003,
bit inp_poly004, bit inp_poly005, bit inp_poly006, bit inp_poly007,
bit inp_poly008, bit inp_poly009, bit inp_poly00a, bit inp_poly00b,
bit inp_poly00c, bit inp_poly00d, bit inp_poly00e, bit inp_poly00f,
bit inp_poly010, bit inp_poly011, bit inp_poly012, bit inp_poly013,
bit inp_poly014, bit inp_poly015, bit inp_poly016, bit inp_poly017,
bit inp_poly018, bit inp_poly019, bit inp_poly01a, bit inp_poly01b,
bit inp_poly01c, bit inp_poly01d, bit inp_poly01e, bit inp_poly01f,
bit inp_poly020, bit inp_poly021, bit inp_poly022, bit inp_poly023,
bit inp_poly024, bit inp_poly025, bit inp_poly026, bit inp_poly027,
bit inp_poly028, bit inp_poly029, bit inp_poly02a, bit inp_poly02b,
bit inp_poly02c, bit inp_poly02d, bit inp_poly02e, bit inp_poly02f,
bit inp_poly030, bit inp_poly031, bit inp_poly032, bit inp_poly033,
bit inp_poly034, bit inp_poly035, bit inp_poly036, bit inp_poly037,
bit inp_poly038, bit inp_poly039, bit inp_poly03a, bit inp_poly03b,
bit inp_poly03c, bit inp_poly03d, bit inp_poly03e, bit inp_poly03f,
bit inp_poly040, bit inp_poly041, bit inp_poly042, bit inp_poly043,
bit inp_poly044, bit inp_poly045, bit inp_poly046, bit inp_poly047,
bit inp_poly048, bit inp_poly049, bit inp_poly04a, bit inp_poly04b,
bit inp_poly04c, bit inp_poly04d, bit inp_poly04e, bit inp_poly04f,
bit inp_poly050, bit inp_poly051, bit inp_poly052, bit inp_poly053,
bit inp_poly054, bit inp_poly055, bit inp_poly056, bit inp_poly057,
bit inp_poly058, bit inp_poly059, bit inp_poly05a, bit inp_poly05b,
bit inp_poly05c, bit inp_poly05d, bit inp_poly05e, bit inp_poly05f,
bit inp_poly060, bit inp_poly061, bit inp_poly062, bit inp_poly063,
bit inp_poly064, bit inp_poly065, bit inp_poly066, bit inp_poly067,
bit inp_poly068, bit inp_poly069, bit inp_poly06a, bit inp_poly06b,
bit inp_poly06c, bit inp_poly06d, bit inp_poly06e, bit inp_poly06f,
bit inp_poly070, bit inp_poly071, bit inp_poly072, bit inp_poly073,
bit inp_poly074, bit inp_poly075, bit inp_poly076, bit inp_poly077,
bit inp_poly078, bit inp_poly079, bit inp_poly07a, bit inp_poly07b,
bit inp_poly07c, bit inp_poly07d, bit inp_poly07e, bit inp_poly07f,
bit inp_poly080, bit inp_poly081, bit inp_poly082, bit inp_poly083,
bit inp_poly084, bit inp_poly085, bit inp_poly086, bit inp_poly087,
bit inp_poly088, bit inp_poly089, bit inp_poly08a, bit inp_poly08b,
bit inp_poly08c, bit inp_poly08d, bit inp_poly08e, bit inp_poly08f,
bit inp_poly090, bit inp_poly091, bit inp_poly092, bit inp_poly093,
bit inp_poly094, bit inp_poly095, bit inp_poly096, bit inp_poly097,
bit inp_poly098, bit inp_poly099, bit inp_poly09a, bit inp_poly09b,
bit inp_poly09c, bit inp_poly09d, bit inp_poly09e, bit inp_poly09f,
bit inp_poly0a0, bit inp_poly0a1, bit inp_poly0a2, bit inp_poly0a3,
bit inp_poly0a4, bit inp_poly0a5, bit inp_poly0a6, bit inp_poly0a7,
bit inp_poly0a8, bit inp_poly0a9, bit inp_poly0aa, bit inp_poly0ab,
bit inp_poly0ac, bit inp_poly0ad, bit inp_poly0ae, bit inp_poly0af,
bit inp_poly0b0, bit inp_poly0b1, bit inp_poly0b2, bit inp_poly0b3,
bit inp_poly0b4, bit inp_poly0b5, bit inp_poly0b6, bit inp_poly0b7,
bit inp_poly0b8, bit inp_poly0b9, bit inp_poly0ba, bit inp_poly0bb,
bit inp_poly0bc, bit inp_poly0bd, bit inp_poly0be, bit inp_poly0bf,
bit inp_poly0c0, bit inp_poly0c1, bit inp_poly0c2, bit inp_poly0c3,
bit inp_poly0c4, bit inp_poly0c5, bit inp_poly0c6, bit inp_poly0c7,
bit inp_poly0c8, bit inp_poly0c9, bit inp_poly0ca, bit inp_poly0cb,
bit inp_poly0cc, bit inp_poly0cd, bit inp_poly0ce, bit inp_poly0cf,
bit inp_poly0d0, bit inp_poly0d1, bit inp_poly0d2, bit inp_poly0d3,
bit inp_poly0d4, bit inp_poly0d5, bit inp_poly0d6, bit inp_poly0d7,
bit inp_poly0d8, bit inp_poly0d9, bit inp_poly0da, bit inp_poly0db,
bit inp_poly0dc, bit inp_poly0dd, bit inp_poly0de, bit inp_poly0df,
bit inp_poly0e0, bit inp_poly0e1, bit inp_poly0e2, bit inp_poly0e3,
bit inp_poly0e4, bit inp_poly0e5, bit inp_poly0e6, bit inp_poly0e7,
bit inp_poly0e8, bit inp_poly0e9, bit inp_poly0ea, bit inp_poly0eb,
bit inp_poly0ec, bit inp_poly0ed, bit inp_poly0ee, bit inp_poly0ef,
bit inp_poly0f0, bit inp_poly0f1, bit inp_poly0f2, bit inp_poly0f3,
bit inp_poly0f4, bit inp_poly0f5, bit inp_poly0f6, bit inp_poly0f7,
bit inp_poly0f8, bit inp_poly0f9, bit inp_poly0fa, bit inp_poly0fb,
bit inp_poly0fc, bit inp_poly0fd, bit inp_poly0fe, bit inp_poly0ff,
bit inp_poly100, bit inp_poly101, bit inp_poly102, bit inp_poly103,
bit inp_poly104, bit inp_poly105, bit inp_poly106, bit inp_poly107,
bit inp_poly108, bit inp_poly109, bit inp_poly10a, bit inp_poly10b,
bit inp_poly10c, bit inp_poly10d, bit inp_poly10e, bit inp_poly10f,
bit inp_poly110, bit inp_poly111, bit inp_poly112, bit inp_poly113,
bit inp_poly114, bit inp_poly115, bit inp_poly116, bit inp_poly117,
bit inp_poly118, bit inp_poly119, bit inp_poly11a, bit inp_poly11b,
bit inp_poly11c, bit inp_poly11d, bit inp_poly11e, bit inp_poly11f,
bit inp_poly120, bit inp_poly121, bit inp_poly122, bit inp_poly123,
bit inp_poly124, bit inp_poly125, bit inp_poly126, bit inp_poly127,
bit inp_poly128, bit inp_poly129, bit inp_poly12a, bit inp_poly12b,
bit inp_poly12c, bit inp_poly12d, bit inp_poly12e, bit inp_poly12f,
bit inp_poly130, bit inp_poly131, bit inp_poly132, bit inp_poly133,
bit inp_poly134, bit inp_poly135, bit inp_poly136, bit inp_poly137,
bit inp_poly138, bit inp_poly139, bit inp_poly13a, bit inp_poly13b,
bit inp_poly13c, bit inp_poly13d, bit inp_poly13e, bit inp_poly13f,
bit inp_poly140, bit inp_poly141, bit inp_poly142, bit inp_poly143,
bit inp_poly144, bit inp_poly145, bit inp_poly146, bit inp_poly147,
bit inp_poly148, bit inp_poly149, bit inp_poly14a, bit inp_poly14b,
bit inp_poly14c, bit inp_poly14d, bit inp_poly14e, bit inp_poly14f,
bit inp_poly150, bit inp_poly151, bit inp_poly152, bit inp_poly153,
bit inp_poly154, bit inp_poly155, bit inp_poly156, bit inp_poly157,
bit inp_poly158, bit inp_poly159, bit inp_poly15a, bit inp_poly15b,
bit inp_poly15c, bit inp_poly15d, bit inp_poly15e, bit inp_poly15f,
bit inp_poly160, bit inp_poly161, bit inp_poly162, bit inp_poly163,
bit inp_poly164, bit inp_poly165, bit inp_poly166, bit inp_poly167,
bit inp_poly168, bit inp_poly169, bit inp_poly16a, bit inp_poly16b,
bit inp_poly16c, bit inp_poly16d, bit inp_poly16e, bit inp_poly16f,
bit inp_poly170, bit inp_poly171, bit inp_poly172, bit inp_poly173,
bit inp_poly174, bit inp_poly175, bit inp_poly176, bit inp_poly177,
bit inp_poly178, bit inp_poly179, bit inp_poly17a, bit inp_poly17b,
bit inp_poly17c, bit inp_poly17d, bit inp_poly17e, bit inp_poly17f,
bit inp_poly180, bit inp_poly181, bit inp_poly182, bit inp_poly183,
bit inp_poly184, bit inp_poly185, bit inp_poly186, bit inp_poly187,
bit inp_poly188, bit inp_poly189, bit inp_poly18a, bit inp_poly18b,
bit inp_poly18c, bit inp_poly18d, bit inp_poly18e, bit inp_poly18f,
bit inp_poly190, bit inp_poly191, bit inp_poly192, bit inp_poly193,
bit inp_poly194, bit inp_poly195, bit inp_poly196, bit inp_poly197,
bit inp_poly198, bit inp_poly199, bit inp_poly19a, bit inp_poly19b,
bit inp_poly19c, bit inp_poly19d, bit inp_poly19e, bit inp_poly19f,
bit inp_poly1a0, bit inp_poly1a1, bit inp_poly1a2, bit inp_poly1a3,
bit inp_poly1a4, bit inp_poly1a5, bit inp_poly1a6, bit inp_poly1a7,
bit inp_poly1a8, bit inp_poly1a9, bit inp_poly1aa, bit inp_poly1ab,
bit inp_poly1ac, bit inp_poly1ad, bit inp_poly1ae, bit inp_poly1af,
bit inp_poly1b0, bit inp_poly1b1, bit inp_poly1b2, bit inp_poly1b3,
bit inp_poly1b4, bit inp_poly1b5, bit inp_poly1b6, bit inp_poly1b7,
bit inp_poly1b8, bit inp_poly1b9, bit inp_poly1ba, bit inp_poly1bb,
bit inp_poly1bc, bit inp_poly1bd, bit inp_poly1be, bit inp_poly1bf,
bit inp_poly1c0, bit inp_poly1c1, bit inp_poly1c2, bit inp_poly1c3,
bit inp_poly1c4, bit inp_poly1c5, bit inp_poly1c6, bit inp_poly1c7,
bit inp_poly1c8, bit inp_poly1c9, bit inp_poly1ca, bit inp_poly1cb,
bit inp_poly1cc, bit inp_poly1cd, bit inp_poly1ce, bit inp_poly1cf,
bit inp_poly1d0, bit inp_poly1d1, bit inp_poly1d2, bit inp_poly1d3,
bit inp_poly1d4, bit inp_poly1d5, bit inp_poly1d6, bit inp_poly1d7,
bit inp_poly1d8, bit inp_poly1d9, bit inp_poly1da, bit inp_poly1db,
bit inp_poly1dc, bit inp_poly1dd, bit inp_poly1de, bit inp_poly1df,
bit inp_poly1e0, bit inp_poly1e1, bit inp_poly1e2, bit inp_poly1e3,
bit inp_poly1e4, bit inp_poly1e5, bit inp_poly1e6, bit inp_poly1e7,
bit inp_poly1e8, bit inp_poly1e9, bit inp_poly1ea, bit inp_poly1eb,
bit inp_poly1ec, bit inp_poly1ed, bit inp_poly1ee, bit inp_poly1ef,
bit inp_poly1f0, bit inp_poly1f1, bit inp_poly1f2, bit inp_poly1f3,
bit inp_poly1f4, bit inp_poly1f5, bit inp_poly1f6, bit inp_poly1f7,
bit inp_poly1f8, bit inp_poly1f9, bit inp_poly1fa, bit inp_poly1fb,
bit inp_poly1fc, bit inp_poly1fd, bit inp_poly1fe, bit inp_poly1ff,
sint16 L0x7fffffffd2e0, sint16 L0x7fffffffd2e2, sint16 L0x7fffffffd2e4,
sint16 L0x7fffffffd2e6, sint16 L0x7fffffffd2e8, sint16 L0x7fffffffd2ea,
sint16 L0x7fffffffd2ec, sint16 L0x7fffffffd2ee, sint16 L0x7fffffffd2f0,
sint16 L0x7fffffffd2f2, sint16 L0x7fffffffd2f4, sint16 L0x7fffffffd2f6,
sint16 L0x7fffffffd2f8, sint16 L0x7fffffffd2fa, sint16 L0x7fffffffd2fc,
sint16 L0x7fffffffd2fe, sint16 L0x7fffffffd300, sint16 L0x7fffffffd302,
sint16 L0x7fffffffd304, sint16 L0x7fffffffd306, sint16 L0x7fffffffd308,
sint16 L0x7fffffffd30a, sint16 L0x7fffffffd30c, sint16 L0x7fffffffd30e,
sint16 L0x7fffffffd310, sint16 L0x7fffffffd312, sint16 L0x7fffffffd314,
sint16 L0x7fffffffd316, sint16 L0x7fffffffd318, sint16 L0x7fffffffd31a,
sint16 L0x7fffffffd31c, sint16 L0x7fffffffd31e, sint16 L0x7fffffffd320,
sint16 L0x7fffffffd322, sint16 L0x7fffffffd324, sint16 L0x7fffffffd326,
sint16 L0x7fffffffd328, sint16 L0x7fffffffd32a, sint16 L0x7fffffffd32c,
sint16 L0x7fffffffd32e, sint16 L0x7fffffffd330, sint16 L0x7fffffffd332,
sint16 L0x7fffffffd334, sint16 L0x7fffffffd336, sint16 L0x7fffffffd338,
sint16 L0x7fffffffd33a, sint16 L0x7fffffffd33c, sint16 L0x7fffffffd33e,
sint16 L0x7fffffffd340, sint16 L0x7fffffffd342, sint16 L0x7fffffffd344,
sint16 L0x7fffffffd346, sint16 L0x7fffffffd348, sint16 L0x7fffffffd34a,
sint16 L0x7fffffffd34c, sint16 L0x7fffffffd34e, sint16 L0x7fffffffd350,
sint16 L0x7fffffffd352, sint16 L0x7fffffffd354, sint16 L0x7fffffffd356,
sint16 L0x7fffffffd358, sint16 L0x7fffffffd35a, sint16 L0x7fffffffd35c,
sint16 L0x7fffffffd35e, sint16 L0x7fffffffd360, sint16 L0x7fffffffd362,
sint16 L0x7fffffffd364, sint16 L0x7fffffffd366, sint16 L0x7fffffffd368,
sint16 L0x7fffffffd36a, sint16 L0x7fffffffd36c, sint16 L0x7fffffffd36e,
sint16 L0x7fffffffd370, sint16 L0x7fffffffd372, sint16 L0x7fffffffd374,
sint16 L0x7fffffffd376, sint16 L0x7fffffffd378, sint16 L0x7fffffffd37a,
sint16 L0x7fffffffd37c, sint16 L0x7fffffffd37e, sint16 L0x7fffffffd380,
sint16 L0x7fffffffd382, sint16 L0x7fffffffd384, sint16 L0x7fffffffd386,
sint16 L0x7fffffffd388, sint16 L0x7fffffffd38a, sint16 L0x7fffffffd38c,
sint16 L0x7fffffffd38e, sint16 L0x7fffffffd390, sint16 L0x7fffffffd392,
sint16 L0x7fffffffd394, sint16 L0x7fffffffd396, sint16 L0x7fffffffd398,
sint16 L0x7fffffffd39a, sint16 L0x7fffffffd39c, sint16 L0x7fffffffd39e,
sint16 L0x7fffffffd3a0, sint16 L0x7fffffffd3a2, sint16 L0x7fffffffd3a4,
sint16 L0x7fffffffd3a6, sint16 L0x7fffffffd3a8, sint16 L0x7fffffffd3aa,
sint16 L0x7fffffffd3ac, sint16 L0x7fffffffd3ae, sint16 L0x7fffffffd3b0,
sint16 L0x7fffffffd3b2, sint16 L0x7fffffffd3b4, sint16 L0x7fffffffd3b6,
sint16 L0x7fffffffd3b8, sint16 L0x7fffffffd3ba, sint16 L0x7fffffffd3bc,
sint16 L0x7fffffffd3be, sint16 L0x7fffffffd3c0, sint16 L0x7fffffffd3c2,
sint16 L0x7fffffffd3c4, sint16 L0x7fffffffd3c6, sint16 L0x7fffffffd3c8,
sint16 L0x7fffffffd3ca, sint16 L0x7fffffffd3cc, sint16 L0x7fffffffd3ce,
sint16 L0x7fffffffd3d0, sint16 L0x7fffffffd3d2, sint16 L0x7fffffffd3d4,
sint16 L0x7fffffffd3d6, sint16 L0x7fffffffd3d8, sint16 L0x7fffffffd3da,
sint16 L0x7fffffffd3dc, sint16 L0x7fffffffd3de, sint16 L0x7fffffffd3e0,
sint16 L0x7fffffffd3e2, sint16 L0x7fffffffd3e4, sint16 L0x7fffffffd3e6,
sint16 L0x7fffffffd3e8, sint16 L0x7fffffffd3ea, sint16 L0x7fffffffd3ec,
sint16 L0x7fffffffd3ee, sint16 L0x7fffffffd3f0, sint16 L0x7fffffffd3f2,
sint16 L0x7fffffffd3f4, sint16 L0x7fffffffd3f6, sint16 L0x7fffffffd3f8,
sint16 L0x7fffffffd3fa, sint16 L0x7fffffffd3fc, sint16 L0x7fffffffd3fe,
sint16 L0x7fffffffd400, sint16 L0x7fffffffd402, sint16 L0x7fffffffd404,
sint16 L0x7fffffffd406, sint16 L0x7fffffffd408, sint16 L0x7fffffffd40a,
sint16 L0x7fffffffd40c, sint16 L0x7fffffffd40e, sint16 L0x7fffffffd410,
sint16 L0x7fffffffd412, sint16 L0x7fffffffd414, sint16 L0x7fffffffd416,
sint16 L0x7fffffffd418, sint16 L0x7fffffffd41a, sint16 L0x7fffffffd41c,
sint16 L0x7fffffffd41e, sint16 L0x7fffffffd420, sint16 L0x7fffffffd422,
sint16 L0x7fffffffd424, sint16 L0x7fffffffd426, sint16 L0x7fffffffd428,
sint16 L0x7fffffffd42a, sint16 L0x7fffffffd42c, sint16 L0x7fffffffd42e,
sint16 L0x7fffffffd430, sint16 L0x7fffffffd432, sint16 L0x7fffffffd434,
sint16 L0x7fffffffd436, sint16 L0x7fffffffd438, sint16 L0x7fffffffd43a,
sint16 L0x7fffffffd43c, sint16 L0x7fffffffd43e, sint16 L0x7fffffffd440,
sint16 L0x7fffffffd442, sint16 L0x7fffffffd444, sint16 L0x7fffffffd446,
sint16 L0x7fffffffd448, sint16 L0x7fffffffd44a, sint16 L0x7fffffffd44c,
sint16 L0x7fffffffd44e, sint16 L0x7fffffffd450, sint16 L0x7fffffffd452,
sint16 L0x7fffffffd454, sint16 L0x7fffffffd456, sint16 L0x7fffffffd458,
sint16 L0x7fffffffd45a, sint16 L0x7fffffffd45c, sint16 L0x7fffffffd45e,
sint16 L0x7fffffffd460, sint16 L0x7fffffffd462, sint16 L0x7fffffffd464,
sint16 L0x7fffffffd466, sint16 L0x7fffffffd468, sint16 L0x7fffffffd46a,
sint16 L0x7fffffffd46c, sint16 L0x7fffffffd46e, sint16 L0x7fffffffd470,
sint16 L0x7fffffffd472, sint16 L0x7fffffffd474, sint16 L0x7fffffffd476,
sint16 L0x7fffffffd478, sint16 L0x7fffffffd47a, sint16 L0x7fffffffd47c,
sint16 L0x7fffffffd47e, sint16 L0x7fffffffd480, sint16 L0x7fffffffd482,
sint16 L0x7fffffffd484, sint16 L0x7fffffffd486, sint16 L0x7fffffffd488,
sint16 L0x7fffffffd48a, sint16 L0x7fffffffd48c, sint16 L0x7fffffffd48e,
sint16 L0x7fffffffd490, sint16 L0x7fffffffd492, sint16 L0x7fffffffd494,
sint16 L0x7fffffffd496, sint16 L0x7fffffffd498, sint16 L0x7fffffffd49a,
sint16 L0x7fffffffd49c, sint16 L0x7fffffffd49e, sint16 L0x7fffffffd4a0,
sint16 L0x7fffffffd4a2, sint16 L0x7fffffffd4a4, sint16 L0x7fffffffd4a6,
sint16 L0x7fffffffd4a8, sint16 L0x7fffffffd4aa, sint16 L0x7fffffffd4ac,
sint16 L0x7fffffffd4ae, sint16 L0x7fffffffd4b0, sint16 L0x7fffffffd4b2,
sint16 L0x7fffffffd4b4, sint16 L0x7fffffffd4b6, sint16 L0x7fffffffd4b8,
sint16 L0x7fffffffd4ba, sint16 L0x7fffffffd4bc, sint16 L0x7fffffffd4be,
sint16 L0x7fffffffd4c0, sint16 L0x7fffffffd4c2, sint16 L0x7fffffffd4c4,
sint16 L0x7fffffffd4c6, sint16 L0x7fffffffd4c8, sint16 L0x7fffffffd4ca,
sint16 L0x7fffffffd4cc, sint16 L0x7fffffffd4ce, sint16 L0x7fffffffd4d0,
sint16 L0x7fffffffd4d2, sint16 L0x7fffffffd4d4, sint16 L0x7fffffffd4d6,
sint16 L0x7fffffffd4d8, sint16 L0x7fffffffd4da, sint16 L0x7fffffffd4dc,
sint16 L0x7fffffffd4de, sint16 L0x7fffffffd4e0, sint16 L0x7fffffffd4e2,
sint16 L0x7fffffffd4e4, sint16 L0x7fffffffd4e6, sint16 L0x7fffffffd4e8,
sint16 L0x7fffffffd4ea, sint16 L0x7fffffffd4ec, sint16 L0x7fffffffd4ee,
sint16 L0x7fffffffd4f0, sint16 L0x7fffffffd4f2, sint16 L0x7fffffffd4f4,
sint16 L0x7fffffffd4f6, sint16 L0x7fffffffd4f8, sint16 L0x7fffffffd4fa,
sint16 L0x7fffffffd4fc, sint16 L0x7fffffffd4fe, sint16 L0x7fffffffd500,
sint16 L0x7fffffffd502, sint16 L0x7fffffffd504, sint16 L0x7fffffffd506,
sint16 L0x7fffffffd508, sint16 L0x7fffffffd50a, sint16 L0x7fffffffd50c,
sint16 L0x7fffffffd50e, sint16 L0x7fffffffd510, sint16 L0x7fffffffd512,
sint16 L0x7fffffffd514, sint16 L0x7fffffffd516, sint16 L0x7fffffffd518,
sint16 L0x7fffffffd51a, sint16 L0x7fffffffd51c, sint16 L0x7fffffffd51e,
sint16 L0x7fffffffd520, sint16 L0x7fffffffd522, sint16 L0x7fffffffd524,
sint16 L0x7fffffffd526, sint16 L0x7fffffffd528, sint16 L0x7fffffffd52a,
sint16 L0x7fffffffd52c, sint16 L0x7fffffffd52e, sint16 L0x7fffffffd530,
sint16 L0x7fffffffd532, sint16 L0x7fffffffd534, sint16 L0x7fffffffd536,
sint16 L0x7fffffffd538, sint16 L0x7fffffffd53a, sint16 L0x7fffffffd53c,
sint16 L0x7fffffffd53e, sint16 L0x7fffffffd540, sint16 L0x7fffffffd542,
sint16 L0x7fffffffd544, sint16 L0x7fffffffd546, sint16 L0x7fffffffd548,
sint16 L0x7fffffffd54a, sint16 L0x7fffffffd54c, sint16 L0x7fffffffd54e,
sint16 L0x7fffffffd550, sint16 L0x7fffffffd552, sint16 L0x7fffffffd554,
sint16 L0x7fffffffd556, sint16 L0x7fffffffd558, sint16 L0x7fffffffd55a,
sint16 L0x7fffffffd55c, sint16 L0x7fffffffd55e, sint16 L0x7fffffffd560,
sint16 L0x7fffffffd562, sint16 L0x7fffffffd564, sint16 L0x7fffffffd566,
sint16 L0x7fffffffd568, sint16 L0x7fffffffd56a, sint16 L0x7fffffffd56c,
sint16 L0x7fffffffd56e, sint16 L0x7fffffffd570, sint16 L0x7fffffffd572,
sint16 L0x7fffffffd574, sint16 L0x7fffffffd576, sint16 L0x7fffffffd578,
sint16 L0x7fffffffd57a, sint16 L0x7fffffffd57c, sint16 L0x7fffffffd57e,
sint16 L0x7fffffffd580, sint16 L0x7fffffffd582, sint16 L0x7fffffffd584,
sint16 L0x7fffffffd586, sint16 L0x7fffffffd588, sint16 L0x7fffffffd58a,
sint16 L0x7fffffffd58c, sint16 L0x7fffffffd58e, sint16 L0x7fffffffd590,
sint16 L0x7fffffffd592, sint16 L0x7fffffffd594, sint16 L0x7fffffffd596,
sint16 L0x7fffffffd598, sint16 L0x7fffffffd59a, sint16 L0x7fffffffd59c,
sint16 L0x7fffffffd59e, sint16 L0x7fffffffd5a0, sint16 L0x7fffffffd5a2,
sint16 L0x7fffffffd5a4, sint16 L0x7fffffffd5a6, sint16 L0x7fffffffd5a8,
sint16 L0x7fffffffd5aa, sint16 L0x7fffffffd5ac, sint16 L0x7fffffffd5ae,
sint16 L0x7fffffffd5b0, sint16 L0x7fffffffd5b2, sint16 L0x7fffffffd5b4,
sint16 L0x7fffffffd5b6, sint16 L0x7fffffffd5b8, sint16 L0x7fffffffd5ba,
sint16 L0x7fffffffd5bc, sint16 L0x7fffffffd5be, sint16 L0x7fffffffd5c0,
sint16 L0x7fffffffd5c2, sint16 L0x7fffffffd5c4, sint16 L0x7fffffffd5c6,
sint16 L0x7fffffffd5c8, sint16 L0x7fffffffd5ca, sint16 L0x7fffffffd5cc,
sint16 L0x7fffffffd5ce, sint16 L0x7fffffffd5d0, sint16 L0x7fffffffd5d2,
sint16 L0x7fffffffd5d4, sint16 L0x7fffffffd5d6, sint16 L0x7fffffffd5d8,
sint16 L0x7fffffffd5da, sint16 L0x7fffffffd5dc, sint16 L0x7fffffffd5de,
sint16 L0x7fffffffd5e0, sint16 L0x7fffffffd5e2, sint16 L0x7fffffffd5e4,
sint16 L0x7fffffffd5e6, sint16 L0x7fffffffd5e8, sint16 L0x7fffffffd5ea,
sint16 L0x7fffffffd5ec, sint16 L0x7fffffffd5ee, sint16 L0x7fffffffd5f0,
sint16 L0x7fffffffd5f2, sint16 L0x7fffffffd5f4, sint16 L0x7fffffffd5f6,
sint16 L0x7fffffffd5f8, sint16 L0x7fffffffd5fa, sint16 L0x7fffffffd5fc,
sint16 L0x7fffffffd5fe, sint16 L0x7fffffffd600, sint16 L0x7fffffffd602,
sint16 L0x7fffffffd604, sint16 L0x7fffffffd606, sint16 L0x7fffffffd608,
sint16 L0x7fffffffd60a, sint16 L0x7fffffffd60c, sint16 L0x7fffffffd60e,
sint16 L0x7fffffffd610, sint16 L0x7fffffffd612, sint16 L0x7fffffffd614,
sint16 L0x7fffffffd616, sint16 L0x7fffffffd618, sint16 L0x7fffffffd61a,
sint16 L0x7fffffffd61c, sint16 L0x7fffffffd61e, sint16 L0x7fffffffd620,
sint16 L0x7fffffffd622, sint16 L0x7fffffffd624, sint16 L0x7fffffffd626,
sint16 L0x7fffffffd628, sint16 L0x7fffffffd62a, sint16 L0x7fffffffd62c,
sint16 L0x7fffffffd62e, sint16 L0x7fffffffd630, sint16 L0x7fffffffd632,
sint16 L0x7fffffffd634, sint16 L0x7fffffffd636, sint16 L0x7fffffffd638,
sint16 L0x7fffffffd63a, sint16 L0x7fffffffd63c, sint16 L0x7fffffffd63e,
sint16 L0x7fffffffd640, sint16 L0x7fffffffd642, sint16 L0x7fffffffd644,
sint16 L0x7fffffffd646, sint16 L0x7fffffffd648, sint16 L0x7fffffffd64a,
sint16 L0x7fffffffd64c, sint16 L0x7fffffffd64e, sint16 L0x7fffffffd650,
sint16 L0x7fffffffd652, sint16 L0x7fffffffd654, sint16 L0x7fffffffd656,
sint16 L0x7fffffffd658, sint16 L0x7fffffffd65a, sint16 L0x7fffffffd65c,
sint16 L0x7fffffffd65e, sint16 L0x7fffffffd660, sint16 L0x7fffffffd662,
sint16 L0x7fffffffd664, sint16 L0x7fffffffd666, sint16 L0x7fffffffd668,
sint16 L0x7fffffffd66a, sint16 L0x7fffffffd66c, sint16 L0x7fffffffd66e,
sint16 L0x7fffffffd670, sint16 L0x7fffffffd672, sint16 L0x7fffffffd674,
sint16 L0x7fffffffd676, sint16 L0x7fffffffd678, sint16 L0x7fffffffd67a,
sint16 L0x7fffffffd67c, sint16 L0x7fffffffd67e, sint16 L0x7fffffffd680,
sint16 L0x7fffffffd682, sint16 L0x7fffffffd684, sint16 L0x7fffffffd686,
sint16 L0x7fffffffd688, sint16 L0x7fffffffd68a, sint16 L0x7fffffffd68c,
sint16 L0x7fffffffd68e, sint16 L0x7fffffffd690, sint16 L0x7fffffffd692,
sint16 L0x7fffffffd694, sint16 L0x7fffffffd696, sint16 L0x7fffffffd698,
sint16 L0x7fffffffd69a, sint16 L0x7fffffffd69c, sint16 L0x7fffffffd69e,
sint16 L0x7fffffffd6a0, sint16 L0x7fffffffd6a2, sint16 L0x7fffffffd6a4,
sint16 L0x7fffffffd6a6, sint16 L0x7fffffffd6a8, sint16 L0x7fffffffd6aa,
sint16 L0x7fffffffd6ac, sint16 L0x7fffffffd6ae, sint16 L0x7fffffffd6b0,
sint16 L0x7fffffffd6b2, sint16 L0x7fffffffd6b4, sint16 L0x7fffffffd6b6,
sint16 L0x7fffffffd6b8, sint16 L0x7fffffffd6ba, sint16 L0x7fffffffd6bc,
sint16 L0x7fffffffd6be, sint16 L0x7fffffffd6c0, sint16 L0x7fffffffd6c2,
sint16 L0x7fffffffd6c4, sint16 L0x7fffffffd6c6, sint16 L0x7fffffffd6c8,
sint16 L0x7fffffffd6ca, sint16 L0x7fffffffd6cc, sint16 L0x7fffffffd6ce,
sint16 L0x7fffffffd6d0, sint16 L0x7fffffffd6d2, sint16 L0x7fffffffd6d4,
sint16 L0x7fffffffd6d6, sint16 L0x7fffffffd6d8, sint16 L0x7fffffffd6da,
sint16 L0x7fffffffd6dc, sint16 L0x7fffffffd6de, sint16 L0x7fffffffd6e0,
sint16 L0x7fffffffd6e2, sint16 L0x7fffffffd6e4, sint16 L0x7fffffffd6e6,
sint16 L0x7fffffffd6e8, sint16 L0x7fffffffd6ea, sint16 L0x7fffffffd6ec,
sint16 L0x7fffffffd6ee, sint16 L0x7fffffffd6f0, sint16 L0x7fffffffd6f2,
sint16 L0x7fffffffd6f4, sint16 L0x7fffffffd6f6, sint16 L0x7fffffffd6f8,
sint16 L0x7fffffffd6fa, sint16 L0x7fffffffd6fc, sint16 L0x7fffffffd6fe,
sint16 L0x7fffffffd700, sint16 L0x7fffffffd702, sint16 L0x7fffffffd704,
sint16 L0x7fffffffd706, sint16 L0x7fffffffd708, sint16 L0x7fffffffd70a,
sint16 L0x7fffffffd70c, sint16 L0x7fffffffd70e, sint16 L0x7fffffffd710,
sint16 L0x7fffffffd712, sint16 L0x7fffffffd714, sint16 L0x7fffffffd716,
sint16 L0x7fffffffd718, sint16 L0x7fffffffd71a, sint16 L0x7fffffffd71c,
sint16 L0x7fffffffd71e, sint16 L0x7fffffffd720, sint16 L0x7fffffffd722,
sint16 L0x7fffffffd724, sint16 L0x7fffffffd726, sint16 L0x7fffffffd728,
sint16 L0x7fffffffd72a, sint16 L0x7fffffffd72c, sint16 L0x7fffffffd72e,
sint16 L0x7fffffffd730, sint16 L0x7fffffffd732, sint16 L0x7fffffffd734,
sint16 L0x7fffffffd736, sint16 L0x7fffffffd738, sint16 L0x7fffffffd73a,
sint16 L0x7fffffffd73c, sint16 L0x7fffffffd73e, sint16 L0x7fffffffd740,
sint16 L0x7fffffffd742, sint16 L0x7fffffffd744, sint16 L0x7fffffffd746,
sint16 L0x7fffffffd748, sint16 L0x7fffffffd74a, sint16 L0x7fffffffd74c,
sint16 L0x7fffffffd74e, sint16 L0x7fffffffd750, sint16 L0x7fffffffd752,
sint16 L0x7fffffffd754, sint16 L0x7fffffffd756, sint16 L0x7fffffffd758,
sint16 L0x7fffffffd75a, sint16 L0x7fffffffd75c, sint16 L0x7fffffffd75e,
sint16 L0x7fffffffd760, sint16 L0x7fffffffd762, sint16 L0x7fffffffd764,
sint16 L0x7fffffffd766, sint16 L0x7fffffffd768, sint16 L0x7fffffffd76a,
sint16 L0x7fffffffd76c, sint16 L0x7fffffffd76e, sint16 L0x7fffffffd770,
sint16 L0x7fffffffd772, sint16 L0x7fffffffd774, sint16 L0x7fffffffd776,
sint16 L0x7fffffffd778, sint16 L0x7fffffffd77a, sint16 L0x7fffffffd77c,
sint16 L0x7fffffffd77e, sint16 L0x7fffffffd780, sint16 L0x7fffffffd782,
sint16 L0x7fffffffd784, sint16 L0x7fffffffd786, sint16 L0x7fffffffd788,
sint16 L0x7fffffffd78a, sint16 L0x7fffffffd78c, sint16 L0x7fffffffd78e,
sint16 L0x7fffffffd790, sint16 L0x7fffffffd792, sint16 L0x7fffffffd794,
sint16 L0x7fffffffd796, sint16 L0x7fffffffd798, sint16 L0x7fffffffd79a,
sint16 L0x7fffffffd79c, sint16 L0x7fffffffd79e, sint16 L0x7fffffffd7a0,
sint16 L0x7fffffffd7a2, sint16 L0x7fffffffd7a4, sint16 L0x7fffffffd7a6,
sint16 L0x7fffffffd7a8, sint16 L0x7fffffffd7aa, sint16 L0x7fffffffd7ac,
sint16 L0x7fffffffd7ae, sint16 L0x7fffffffd7b0, sint16 L0x7fffffffd7b2,
sint16 L0x7fffffffd7b4, sint16 L0x7fffffffd7b6, sint16 L0x7fffffffd7b8,
sint16 L0x7fffffffd7ba, sint16 L0x7fffffffd7bc, sint16 L0x7fffffffd7be,
sint16 L0x7fffffffd7c0, sint16 L0x7fffffffd7c2, sint16 L0x7fffffffd7c4,
sint16 L0x7fffffffd7c6, sint16 L0x7fffffffd7c8, sint16 L0x7fffffffd7ca,
sint16 L0x7fffffffd7cc, sint16 L0x7fffffffd7ce, sint16 L0x7fffffffd7d0,
sint16 L0x7fffffffd7d2, sint16 L0x7fffffffd7d4, sint16 L0x7fffffffd7d6,
sint16 L0x7fffffffd7d8, sint16 L0x7fffffffd7da, sint16 L0x7fffffffd7dc,
sint16 L0x7fffffffd7de, sint16 L0x7fffffffd7e0, sint16 L0x7fffffffd7e2,
sint16 L0x7fffffffd7e4, sint16 L0x7fffffffd7e6, sint16 L0x7fffffffd7e8,
sint16 L0x7fffffffd7ea, sint16 L0x7fffffffd7ec, sint16 L0x7fffffffd7ee,
sint16 L0x7fffffffd7f0, sint16 L0x7fffffffd7f2, sint16 L0x7fffffffd7f4,
sint16 L0x7fffffffd7f6, sint16 L0x7fffffffd7f8, sint16 L0x7fffffffd7fa,
sint16 L0x7fffffffd7fc, sint16 L0x7fffffffd7fe, sint16 L0x7fffffffd800,
sint16 L0x7fffffffd802, sint16 L0x7fffffffd804, sint16 L0x7fffffffd806,
sint16 L0x7fffffffd808, sint16 L0x7fffffffd80a, sint16 L0x7fffffffd80c,
sint16 L0x7fffffffd80e, sint16 L0x7fffffffd810, sint16 L0x7fffffffd812,
sint16 L0x7fffffffd814, sint16 L0x7fffffffd816, sint16 L0x7fffffffd818,
sint16 L0x7fffffffd81a, sint16 L0x7fffffffd81c, sint16 L0x7fffffffd81e,
sint16 L0x7fffffffd820, sint16 L0x7fffffffd822, sint16 L0x7fffffffd824,
sint16 L0x7fffffffd826, sint16 L0x7fffffffd828, sint16 L0x7fffffffd82a,
sint16 L0x7fffffffd82c, sint16 L0x7fffffffd82e, sint16 L0x7fffffffd830,
sint16 L0x7fffffffd832, sint16 L0x7fffffffd834, sint16 L0x7fffffffd836,
sint16 L0x7fffffffd838, sint16 L0x7fffffffd83a, sint16 L0x7fffffffd83c,
sint16 L0x7fffffffd83e, sint16 L0x7fffffffd840, sint16 L0x7fffffffd842,
sint16 L0x7fffffffd844, sint16 L0x7fffffffd846, sint16 L0x7fffffffd848,
sint16 L0x7fffffffd84a, sint16 L0x7fffffffd84c, sint16 L0x7fffffffd84e,
sint16 L0x7fffffffd850, sint16 L0x7fffffffd852, sint16 L0x7fffffffd854,
sint16 L0x7fffffffd856, sint16 L0x7fffffffd858, sint16 L0x7fffffffd85a,
sint16 L0x7fffffffd85c, sint16 L0x7fffffffd85e, sint16 L0x7fffffffd860,
sint16 L0x7fffffffd862, sint16 L0x7fffffffd864, sint16 L0x7fffffffd866,
sint16 L0x7fffffffd868, sint16 L0x7fffffffd86a, sint16 L0x7fffffffd86c,
sint16 L0x7fffffffd86e, sint16 L0x7fffffffd870, sint16 L0x7fffffffd872,
sint16 L0x7fffffffd874, sint16 L0x7fffffffd876, sint16 L0x7fffffffd878,
sint16 L0x7fffffffd87a, sint16 L0x7fffffffd87c, sint16 L0x7fffffffd87e,
sint16 L0x7fffffffd880, sint16 L0x7fffffffd882, sint16 L0x7fffffffd884,
sint16 L0x7fffffffd886, sint16 L0x7fffffffd888, sint16 L0x7fffffffd88a,
sint16 L0x7fffffffd88c, sint16 L0x7fffffffd88e, sint16 L0x7fffffffd890,
sint16 L0x7fffffffd892, sint16 L0x7fffffffd894, sint16 L0x7fffffffd896,
sint16 L0x7fffffffd898, sint16 L0x7fffffffd89a, sint16 L0x7fffffffd89c,
sint16 L0x7fffffffd89e, sint16 L0x7fffffffd8a0, sint16 L0x7fffffffd8a2,
sint16 L0x7fffffffd8a4, sint16 L0x7fffffffd8a6, sint16 L0x7fffffffd8a8,
sint16 L0x7fffffffd8aa, sint16 L0x7fffffffd8ac, sint16 L0x7fffffffd8ae,
sint16 L0x7fffffffd8b0, sint16 L0x7fffffffd8b2, sint16 L0x7fffffffd8b4,
sint16 L0x7fffffffd8b6, sint16 L0x7fffffffd8b8, sint16 L0x7fffffffd8ba,
sint16 L0x7fffffffd8bc, sint16 L0x7fffffffd8be, sint16 L0x7fffffffd8c0,
sint16 L0x7fffffffd8c2, sint16 L0x7fffffffd8c4, sint16 L0x7fffffffd8c6,
sint16 L0x7fffffffd8c8, sint16 L0x7fffffffd8ca, sint16 L0x7fffffffd8cc,
sint16 L0x7fffffffd8ce, sint16 L0x7fffffffd8d0, sint16 L0x7fffffffd8d2,
sint16 L0x7fffffffd8d4, sint16 L0x7fffffffd8d6, sint16 L0x7fffffffd8d8,
sint16 L0x7fffffffd8da, sint16 L0x7fffffffd8dc, sint16 L0x7fffffffd8de,
sint16 L0x7fffffffd8e0, sint16 L0x7fffffffd8e2, sint16 L0x7fffffffd8e4,
sint16 L0x7fffffffd8e6, sint16 L0x7fffffffd8e8, sint16 L0x7fffffffd8ea,
sint16 L0x7fffffffd8ec, sint16 L0x7fffffffd8ee, sint16 L0x7fffffffd8f0,
sint16 L0x7fffffffd8f2, sint16 L0x7fffffffd8f4, sint16 L0x7fffffffd8f6,
sint16 L0x7fffffffd8f8, sint16 L0x7fffffffd8fa, sint16 L0x7fffffffd8fc,
sint16 L0x7fffffffd8fe, sint16 L0x7fffffffd900, sint16 L0x7fffffffd902,
sint16 L0x7fffffffd904, sint16 L0x7fffffffd906, sint16 L0x7fffffffd908,
sint16 L0x7fffffffd90a, sint16 L0x7fffffffd90c, sint16 L0x7fffffffd90e,
sint16 L0x7fffffffd910, sint16 L0x7fffffffd912, sint16 L0x7fffffffd914,
sint16 L0x7fffffffd916, sint16 L0x7fffffffd918, sint16 L0x7fffffffd91a,
sint16 L0x7fffffffd91c, sint16 L0x7fffffffd91e, sint16 L0x7fffffffd920,
sint16 L0x7fffffffd922, sint16 L0x7fffffffd924, sint16 L0x7fffffffd926,
sint16 L0x7fffffffd928, sint16 L0x7fffffffd92a, sint16 L0x7fffffffd92c,
sint16 L0x7fffffffd92e, sint16 L0x7fffffffd930, sint16 L0x7fffffffd932,
sint16 L0x7fffffffd934, sint16 L0x7fffffffd936, sint16 L0x7fffffffd938,
sint16 L0x7fffffffd93a, sint16 L0x7fffffffd93c, sint16 L0x7fffffffd93e,
sint16 L0x7fffffffd940, sint16 L0x7fffffffd942, sint16 L0x7fffffffd944,
sint16 L0x7fffffffd946, sint16 L0x7fffffffd948, sint16 L0x7fffffffd94a,
sint16 L0x7fffffffd94c, sint16 L0x7fffffffd94e, sint16 L0x7fffffffd950,
sint16 L0x7fffffffd952, sint16 L0x7fffffffd954, sint16 L0x7fffffffd956,
sint16 L0x7fffffffd958, sint16 L0x7fffffffd95a, sint16 L0x7fffffffd95c,
sint16 L0x7fffffffd95e, sint16 L0x7fffffffd960, sint16 L0x7fffffffd962,
sint16 L0x7fffffffd964, sint16 L0x7fffffffd966, sint16 L0x7fffffffd968,
sint16 L0x7fffffffd96a, sint16 L0x7fffffffd96c, sint16 L0x7fffffffd96e,
sint16 L0x7fffffffd970, sint16 L0x7fffffffd972, sint16 L0x7fffffffd974,
sint16 L0x7fffffffd976, sint16 L0x7fffffffd978, sint16 L0x7fffffffd97a,
sint16 L0x7fffffffd97c, sint16 L0x7fffffffd97e, sint16 L0x7fffffffd980,
sint16 L0x7fffffffd982, sint16 L0x7fffffffd984, sint16 L0x7fffffffd986,
sint16 L0x7fffffffd988, sint16 L0x7fffffffd98a, sint16 L0x7fffffffd98c,
sint16 L0x7fffffffd98e, sint16 L0x7fffffffd990, sint16 L0x7fffffffd992,
sint16 L0x7fffffffd994, sint16 L0x7fffffffd996, sint16 L0x7fffffffd998,
sint16 L0x7fffffffd99a, sint16 L0x7fffffffd99c, sint16 L0x7fffffffd99e,
sint16 L0x7fffffffd9a0, sint16 L0x7fffffffd9a2, sint16 L0x7fffffffd9a4,
sint16 L0x7fffffffd9a6, sint16 L0x7fffffffd9a8, sint16 L0x7fffffffd9aa,
sint16 L0x7fffffffd9ac, sint16 L0x7fffffffd9ae, sint16 L0x7fffffffd9b0,
sint16 L0x7fffffffd9b2, sint16 L0x7fffffffd9b4, sint16 L0x7fffffffd9b6,
sint16 L0x7fffffffd9b8, sint16 L0x7fffffffd9ba, sint16 L0x7fffffffd9bc,
sint16 L0x7fffffffd9be, sint16 L0x7fffffffd9c0, sint16 L0x7fffffffd9c2,
sint16 L0x7fffffffd9c4, sint16 L0x7fffffffd9c6, sint16 L0x7fffffffd9c8,
sint16 L0x7fffffffd9ca, sint16 L0x7fffffffd9cc, sint16 L0x7fffffffd9ce,
sint16 L0x7fffffffd9d0, sint16 L0x7fffffffd9d2, sint16 L0x7fffffffd9d4,
sint16 L0x7fffffffd9d6, sint16 L0x7fffffffd9d8, sint16 L0x7fffffffd9da,
sint16 L0x7fffffffd9dc, sint16 L0x7fffffffd9de, sint16 L0x7fffffffd9e0,
sint16 L0x7fffffffd9e2, sint16 L0x7fffffffd9e4, sint16 L0x7fffffffd9e6,
sint16 L0x7fffffffd9e8, sint16 L0x7fffffffd9ea, sint16 L0x7fffffffd9ec,
sint16 L0x7fffffffd9ee, sint16 L0x7fffffffd9f0, sint16 L0x7fffffffd9f2,
sint16 L0x7fffffffd9f4, sint16 L0x7fffffffd9f6, sint16 L0x7fffffffd9f8,
sint16 L0x7fffffffd9fa, sint16 L0x7fffffffd9fc, sint16 L0x7fffffffd9fe,
sint16 L0x7fffffffda00, sint16 L0x7fffffffda02, sint16 L0x7fffffffda04,
sint16 L0x7fffffffda06, sint16 L0x7fffffffda08, sint16 L0x7fffffffda0a,
sint16 L0x7fffffffda0c, sint16 L0x7fffffffda0e, sint16 L0x7fffffffda10,
sint16 L0x7fffffffda12, sint16 L0x7fffffffda14, sint16 L0x7fffffffda16,
sint16 L0x7fffffffda18, sint16 L0x7fffffffda1a, sint16 L0x7fffffffda1c,
sint16 L0x7fffffffda1e, sint16 L0x7fffffffda20, sint16 L0x7fffffffda22,
sint16 L0x7fffffffda24, sint16 L0x7fffffffda26, sint16 L0x7fffffffda28,
sint16 L0x7fffffffda2a, sint16 L0x7fffffffda2c, sint16 L0x7fffffffda2e,
sint16 L0x7fffffffda30, sint16 L0x7fffffffda32, sint16 L0x7fffffffda34,
sint16 L0x7fffffffda36, sint16 L0x7fffffffda38, sint16 L0x7fffffffda3a,
sint16 L0x7fffffffda3c, sint16 L0x7fffffffda3e, sint16 L0x7fffffffda40,
sint16 L0x7fffffffda42, sint16 L0x7fffffffda44, sint16 L0x7fffffffda46,
sint16 L0x7fffffffda48, sint16 L0x7fffffffda4a, sint16 L0x7fffffffda4c,
sint16 L0x7fffffffda4e, sint16 L0x7fffffffda50, sint16 L0x7fffffffda52,
sint16 L0x7fffffffda54, sint16 L0x7fffffffda56, sint16 L0x7fffffffda58,
sint16 L0x7fffffffda5a, sint16 L0x7fffffffda5c, sint16 L0x7fffffffda5e,
sint16 L0x7fffffffda60, sint16 L0x7fffffffda62, sint16 L0x7fffffffda64,
sint16 L0x7fffffffda66, sint16 L0x7fffffffda68, sint16 L0x7fffffffda6a,
sint16 L0x7fffffffda6c, sint16 L0x7fffffffda6e, sint16 L0x7fffffffda70,
sint16 L0x7fffffffda72, sint16 L0x7fffffffda74, sint16 L0x7fffffffda76,
sint16 L0x7fffffffda78, sint16 L0x7fffffffda7a, sint16 L0x7fffffffda7c,
sint16 L0x7fffffffda7e, sint16 L0x7fffffffda80, sint16 L0x7fffffffda82,
sint16 L0x7fffffffda84, sint16 L0x7fffffffda86, sint16 L0x7fffffffda88,
sint16 L0x7fffffffda8a, sint16 L0x7fffffffda8c, sint16 L0x7fffffffda8e,
sint16 L0x7fffffffda90, sint16 L0x7fffffffda92, sint16 L0x7fffffffda94,
sint16 L0x7fffffffda96, sint16 L0x7fffffffda98, sint16 L0x7fffffffda9a,
sint16 L0x7fffffffda9c, sint16 L0x7fffffffda9e, sint16 L0x7fffffffdaa0,
sint16 L0x7fffffffdaa2, sint16 L0x7fffffffdaa4, sint16 L0x7fffffffdaa6,
sint16 L0x7fffffffdaa8, sint16 L0x7fffffffdaaa, sint16 L0x7fffffffdaac,
sint16 L0x7fffffffdaae, sint16 L0x7fffffffdab0, sint16 L0x7fffffffdab2,
sint16 L0x7fffffffdab4, sint16 L0x7fffffffdab6, sint16 L0x7fffffffdab8,
sint16 L0x7fffffffdaba, sint16 L0x7fffffffdabc, sint16 L0x7fffffffdabe,
sint16 L0x7fffffffdac0, sint16 L0x7fffffffdac2, sint16 L0x7fffffffdac4,
sint16 L0x7fffffffdac6, sint16 L0x7fffffffdac8, sint16 L0x7fffffffdaca,
sint16 L0x7fffffffdacc, sint16 L0x7fffffffdace, sint16 L0x7fffffffdad0,
sint16 L0x7fffffffdad2, sint16 L0x7fffffffdad4, sint16 L0x7fffffffdad6,
sint16 L0x7fffffffdad8, sint16 L0x7fffffffdada, sint16 L0x7fffffffdadc,
sint16 L0x7fffffffdade
) =
{
and [
eqmod (inp_poly000**2) (L0x7fffffffd2e0*x** 0+L0x7fffffffd2f0*x** 1)
      [10753, x**2 - 1],
eqmod (inp_poly001**2) (L0x7fffffffd300*x** 0+L0x7fffffffd310*x** 1)
      [10753, x**2 - 10752],
eqmod (inp_poly002**2) (L0x7fffffffd2e2*x** 0+L0x7fffffffd2f2*x** 1)
      [10753, x**2 - 6264],
eqmod (inp_poly003**2) (L0x7fffffffd302*x** 0+L0x7fffffffd312*x** 1)
      [10753, x**2 - 4489],
eqmod (inp_poly004**2) (L0x7fffffffd2e4*x** 0+L0x7fffffffd2f4*x** 1)
      [10753, x**2 - 321],
eqmod (inp_poly005**2) (L0x7fffffffd304*x** 0+L0x7fffffffd314*x** 1)
      [10753, x**2 - 10432],
eqmod (inp_poly006**2) (L0x7fffffffd2e6*x** 0+L0x7fffffffd2f6*x** 1)
      [10753, x**2 - 10686],
eqmod (inp_poly007**2) (L0x7fffffffd306*x** 0+L0x7fffffffd316*x** 1)
      [10753, x**2 - 67],
eqmod (inp_poly008**2) (L0x7fffffffd2e8*x** 0+L0x7fffffffd2f8*x** 1)
      [10753, x**2 - 9097],
eqmod (inp_poly009**2) (L0x7fffffffd308*x** 0+L0x7fffffffd318*x** 1)
      [10753, x**2 - 1656],
eqmod (inp_poly00a**2) (L0x7fffffffd2ea*x** 0+L0x7fffffffd2fa*x** 1)
      [10753, x**2 - 3461],
eqmod (inp_poly00b**2) (L0x7fffffffd30a*x** 0+L0x7fffffffd31a*x** 1)
      [10753, x**2 - 7292],
eqmod (inp_poly00c**2) (L0x7fffffffd2ec*x** 0+L0x7fffffffd2fc*x** 1)
      [10753, x**2 - 6074],
eqmod (inp_poly00d**2) (L0x7fffffffd30c*x** 0+L0x7fffffffd31c*x** 1)
      [10753, x**2 - 4679],
eqmod (inp_poly00e**2) (L0x7fffffffd2ee*x** 0+L0x7fffffffd2fe*x** 1)
      [10753, x**2 - 3422],
eqmod (inp_poly00f**2) (L0x7fffffffd30e*x** 0+L0x7fffffffd31e*x** 1)
      [10753, x**2 - 7331],
eqmod (inp_poly010**2) (L0x7fffffffd320*x** 0+L0x7fffffffd330*x** 1)
      [10753, x**2 - 1154],
eqmod (inp_poly011**2) (L0x7fffffffd340*x** 0+L0x7fffffffd350*x** 1)
      [10753, x**2 - 9599],
eqmod (inp_poly012**2) (L0x7fffffffd322*x** 0+L0x7fffffffd332*x** 1)
      [10753, x**2 - 2640],
eqmod (inp_poly013**2) (L0x7fffffffd342*x** 0+L0x7fffffffd352*x** 1)
      [10753, x**2 - 8113],
eqmod (inp_poly014**2) (L0x7fffffffd324*x** 0+L0x7fffffffd334*x** 1)
      [10753, x**2 - 4832],
eqmod (inp_poly015**2) (L0x7fffffffd344*x** 0+L0x7fffffffd354*x** 1)
      [10753, x**2 - 5921],
eqmod (inp_poly016**2) (L0x7fffffffd326*x** 0+L0x7fffffffd336*x** 1)
      [10753, x**2 - 8706],
eqmod (inp_poly017**2) (L0x7fffffffd346*x** 0+L0x7fffffffd356*x** 1)
      [10753, x**2 - 2047],
eqmod (inp_poly018**2) (L0x7fffffffd328*x** 0+L0x7fffffffd338*x** 1)
      [10753, x**2 - 3010],
eqmod (inp_poly019**2) (L0x7fffffffd348*x** 0+L0x7fffffffd358*x** 1)
      [10753, x**2 - 7743],
eqmod (inp_poly01a**2) (L0x7fffffffd32a*x** 0+L0x7fffffffd33a*x** 1)
      [10753, x**2 - 4631],
eqmod (inp_poly01b**2) (L0x7fffffffd34a*x** 0+L0x7fffffffd35a*x** 1)
      [10753, x**2 - 6122],
eqmod (inp_poly01c**2) (L0x7fffffffd32c*x** 0+L0x7fffffffd33c*x** 1)
      [10753, x**2 - 9193],
eqmod (inp_poly01d**2) (L0x7fffffffd34c*x** 0+L0x7fffffffd35c*x** 1)
      [10753, x**2 - 1560],
eqmod (inp_poly01e**2) (L0x7fffffffd32e*x** 0+L0x7fffffffd33e*x** 1)
      [10753, x**2 - 2637],
eqmod (inp_poly01f**2) (L0x7fffffffd34e*x** 0+L0x7fffffffd35e*x** 1)
      [10753, x**2 - 8116],
eqmod (inp_poly020**2) (L0x7fffffffd360*x** 0+L0x7fffffffd370*x** 1)
      [10753, x**2 - 7853],
eqmod (inp_poly021**2) (L0x7fffffffd380*x** 0+L0x7fffffffd390*x** 1)
      [10753, x**2 - 2900],
eqmod (inp_poly022**2) (L0x7fffffffd362*x** 0+L0x7fffffffd372*x** 1)
      [10753, x**2 - 6970],
eqmod (inp_poly023**2) (L0x7fffffffd382*x** 0+L0x7fffffffd392*x** 1)
      [10753, x**2 - 3783],
eqmod (inp_poly024**2) (L0x7fffffffd364*x** 0+L0x7fffffffd374*x** 1)
      [10753, x**2 - 4611],
eqmod (inp_poly025**2) (L0x7fffffffd384*x** 0+L0x7fffffffd394*x** 1)
      [10753, x**2 - 6142],
eqmod (inp_poly026**2) (L0x7fffffffd366*x** 0+L0x7fffffffd376*x** 1)
      [10753, x**2 - 746],
eqmod (inp_poly027**2) (L0x7fffffffd386*x** 0+L0x7fffffffd396*x** 1)
      [10753, x**2 - 10007],
eqmod (inp_poly028**2) (L0x7fffffffd368*x** 0+L0x7fffffffd378*x** 1)
      [10753, x**2 - 6562],
eqmod (inp_poly029**2) (L0x7fffffffd388*x** 0+L0x7fffffffd398*x** 1)
      [10753, x**2 - 4191],
eqmod (inp_poly02a**2) (L0x7fffffffd36a*x** 0+L0x7fffffffd37a*x** 1)
      [10753, x**2 - 6402],
eqmod (inp_poly02b**2) (L0x7fffffffd38a*x** 0+L0x7fffffffd39a*x** 1)
      [10753, x**2 - 4351],
eqmod (inp_poly02c**2) (L0x7fffffffd36c*x** 0+L0x7fffffffd37c*x** 1)
      [10753, x**2 - 9567],
eqmod (inp_poly02d**2) (L0x7fffffffd38c*x** 0+L0x7fffffffd39c*x** 1)
      [10753, x**2 - 1186],
eqmod (inp_poly02e**2) (L0x7fffffffd36e*x** 0+L0x7fffffffd37e*x** 1)
      [10753, x**2 - 1219],
eqmod (inp_poly02f**2) (L0x7fffffffd38e*x** 0+L0x7fffffffd39e*x** 1)
      [10753, x**2 - 9534],
eqmod (inp_poly030**2) (L0x7fffffffd3a0*x** 0+L0x7fffffffd3b0*x** 1)
      [10753, x**2 - 8336],
eqmod (inp_poly031**2) (L0x7fffffffd3c0*x** 0+L0x7fffffffd3d0*x** 1)
      [10753, x**2 - 2417],
eqmod (inp_poly032**2) (L0x7fffffffd3a2*x** 0+L0x7fffffffd3b2*x** 1)
      [10753, x**2 - 136],
eqmod (inp_poly033**2) (L0x7fffffffd3c2*x** 0+L0x7fffffffd3d2*x** 1)
      [10753, x**2 - 10617],
eqmod (inp_poly034**2) (L0x7fffffffd3a4*x** 0+L0x7fffffffd3b4*x** 1)
      [10753, x**2 - 9112],
eqmod (inp_poly035**2) (L0x7fffffffd3c4*x** 0+L0x7fffffffd3d4*x** 1)
      [10753, x**2 - 1641],
eqmod (inp_poly036**2) (L0x7fffffffd3a6*x** 0+L0x7fffffffd3b6*x** 1)
      [10753, x**2 - 644],
eqmod (inp_poly037**2) (L0x7fffffffd3c6*x** 0+L0x7fffffffd3d6*x** 1)
      [10753, x**2 - 10109],
eqmod (inp_poly038**2) (L0x7fffffffd3a8*x** 0+L0x7fffffffd3b8*x** 1)
      [10753, x**2 - 2436],
eqmod (inp_poly039**2) (L0x7fffffffd3c8*x** 0+L0x7fffffffd3d8*x** 1)
      [10753, x**2 - 8317],
eqmod (inp_poly03a**2) (L0x7fffffffd3aa*x** 0+L0x7fffffffd3ba*x** 1)
      [10753, x**2 - 597],
eqmod (inp_poly03b**2) (L0x7fffffffd3ca*x** 0+L0x7fffffffd3da*x** 1)
      [10753, x**2 - 10156],
eqmod (inp_poly03c**2) (L0x7fffffffd3ac*x** 0+L0x7fffffffd3bc*x** 1)
      [10753, x**2 - 7740],
eqmod (inp_poly03d**2) (L0x7fffffffd3cc*x** 0+L0x7fffffffd3dc*x** 1)
      [10753, x**2 - 3013],
eqmod (inp_poly03e**2) (L0x7fffffffd3ae*x** 0+L0x7fffffffd3be*x** 1)
      [10753, x**2 - 8836],
eqmod (inp_poly03f**2) (L0x7fffffffd3ce*x** 0+L0x7fffffffd3de*x** 1)
      [10753, x**2 - 1917]
,
eqmod (inp_poly040**2) (L0x7fffffffd3e0*x** 0+L0x7fffffffd3f0*x** 1)
      [10753, x**2 - 10000],
eqmod (inp_poly041**2) (L0x7fffffffd400*x** 0+L0x7fffffffd410*x** 1)
      [10753, x**2 - 753],
eqmod (inp_poly042**2) (L0x7fffffffd3e2*x** 0+L0x7fffffffd3f2*x** 1)
      [10753, x**2 - 3775],
eqmod (inp_poly043**2) (L0x7fffffffd402*x** 0+L0x7fffffffd412*x** 1)
      [10753, x**2 - 6978],
eqmod (inp_poly044**2) (L0x7fffffffd3e4*x** 0+L0x7fffffffd3f4*x** 1)
      [10753, x**2 - 5606],
eqmod (inp_poly045**2) (L0x7fffffffd404*x** 0+L0x7fffffffd414*x** 1)
      [10753, x**2 - 5147],
eqmod (inp_poly046**2) (L0x7fffffffd3e6*x** 0+L0x7fffffffd3f6*x** 1)
      [10753, x**2 - 7439],
eqmod (inp_poly047**2) (L0x7fffffffd406*x** 0+L0x7fffffffd416*x** 1)
      [10753, x**2 - 3314],
eqmod (inp_poly048**2) (L0x7fffffffd3e8*x** 0+L0x7fffffffd3f8*x** 1)
      [10753, x**2 - 10373],
eqmod (inp_poly049**2) (L0x7fffffffd408*x** 0+L0x7fffffffd418*x** 1)
      [10753, x**2 - 380],
eqmod (inp_poly04a**2) (L0x7fffffffd3ea*x** 0+L0x7fffffffd3fa*x** 1)
      [10753, x**2 - 6846],
eqmod (inp_poly04b**2) (L0x7fffffffd40a*x** 0+L0x7fffffffd41a*x** 1)
      [10753, x**2 - 3907],
eqmod (inp_poly04c**2) (L0x7fffffffd3ec*x** 0+L0x7fffffffd3fc*x** 1)
      [10753, x**2 - 7056],
eqmod (inp_poly04d**2) (L0x7fffffffd40c*x** 0+L0x7fffffffd41c*x** 1)
      [10753, x**2 - 3697],
eqmod (inp_poly04e**2) (L0x7fffffffd3ee*x** 0+L0x7fffffffd3fe*x** 1)
      [10753, x**2 - 3954],
eqmod (inp_poly04f**2) (L0x7fffffffd40e*x** 0+L0x7fffffffd41e*x** 1)
      [10753, x**2 - 6799],
eqmod (inp_poly050**2) (L0x7fffffffd420*x** 0+L0x7fffffffd430*x** 1)
      [10753, x**2 - 2031],
eqmod (inp_poly051**2) (L0x7fffffffd440*x** 0+L0x7fffffffd450*x** 1)
      [10753, x**2 - 8722],
eqmod (inp_poly052**2) (L0x7fffffffd422*x** 0+L0x7fffffffd432*x** 1)
      [10753, x**2 - 1385],
eqmod (inp_poly053**2) (L0x7fffffffd442*x** 0+L0x7fffffffd452*x** 1)
      [10753, x**2 - 9368],
eqmod (inp_poly054**2) (L0x7fffffffd424*x** 0+L0x7fffffffd434*x** 1)
      [10753, x**2 - 6771],
eqmod (inp_poly055**2) (L0x7fffffffd444*x** 0+L0x7fffffffd454*x** 1)
      [10753, x**2 - 3982],
eqmod (inp_poly056**2) (L0x7fffffffd426*x** 0+L0x7fffffffd436*x** 1)
      [10753, x**2 - 3712],
eqmod (inp_poly057**2) (L0x7fffffffd446*x** 0+L0x7fffffffd456*x** 1)
      [10753, x**2 - 7041],
eqmod (inp_poly058**2) (L0x7fffffffd428*x** 0+L0x7fffffffd438*x** 1)
      [10753, x**2 - 2353],
eqmod (inp_poly059**2) (L0x7fffffffd448*x** 0+L0x7fffffffd458*x** 1)
      [10753, x**2 - 8400],
eqmod (inp_poly05a**2) (L0x7fffffffd42a*x** 0+L0x7fffffffd43a*x** 1)
      [10753, x**2 - 7582],
eqmod (inp_poly05b**2) (L0x7fffffffd44a*x** 0+L0x7fffffffd45a*x** 1)
      [10753, x**2 - 3171],
eqmod (inp_poly05c**2) (L0x7fffffffd42c*x** 0+L0x7fffffffd43c*x** 1)
      [10753, x**2 - 2603],
eqmod (inp_poly05d**2) (L0x7fffffffd44c*x** 0+L0x7fffffffd45c*x** 1)
      [10753, x**2 - 8150],
eqmod (inp_poly05e**2) (L0x7fffffffd42e*x** 0+L0x7fffffffd43e*x** 1)
      [10753, x**2 - 3644],
eqmod (inp_poly05f**2) (L0x7fffffffd44e*x** 0+L0x7fffffffd45e*x** 1)
      [10753, x**2 - 7109],
eqmod (inp_poly060**2) (L0x7fffffffd460*x** 0+L0x7fffffffd470*x** 1)
      [10753, x**2 - 841],
eqmod (inp_poly061**2) (L0x7fffffffd480*x** 0+L0x7fffffffd490*x** 1)
      [10753, x**2 - 9912],
eqmod (inp_poly062**2) (L0x7fffffffd462*x** 0+L0x7fffffffd472*x** 1)
      [10753, x**2 - 9807],
eqmod (inp_poly063**2) (L0x7fffffffd482*x** 0+L0x7fffffffd492*x** 1)
      [10753, x**2 - 946],
eqmod (inp_poly064**2) (L0x7fffffffd464*x** 0+L0x7fffffffd474*x** 1)
      [10753, x**2 - 1136],
eqmod (inp_poly065**2) (L0x7fffffffd484*x** 0+L0x7fffffffd494*x** 1)
      [10753, x**2 - 9617],
eqmod (inp_poly066**2) (L0x7fffffffd466*x** 0+L0x7fffffffd476*x** 1)
      [10753, x**2 - 8171],
eqmod (inp_poly067**2) (L0x7fffffffd486*x** 0+L0x7fffffffd496*x** 1)
      [10753, x**2 - 2582],
eqmod (inp_poly068**2) (L0x7fffffffd468*x** 0+L0x7fffffffd478*x** 1)
      [10753, x**2 - 5194],
eqmod (inp_poly069**2) (L0x7fffffffd488*x** 0+L0x7fffffffd498*x** 1)
      [10753, x**2 - 5559],
eqmod (inp_poly06a**2) (L0x7fffffffd46a*x** 0+L0x7fffffffd47a*x** 1)
      [10753, x**2 - 7391],
eqmod (inp_poly06b**2) (L0x7fffffffd48a*x** 0+L0x7fffffffd49a*x** 1)
      [10753, x**2 - 3362],
eqmod (inp_poly06c**2) (L0x7fffffffd46c*x** 0+L0x7fffffffd47c*x** 1)
      [10753, x**2 - 559],
eqmod (inp_poly06d**2) (L0x7fffffffd48c*x** 0+L0x7fffffffd49c*x** 1)
      [10753, x**2 - 10194],
eqmod (inp_poly06e**2) (L0x7fffffffd46e*x** 0+L0x7fffffffd47e*x** 1)
      [10753, x**2 - 6851],
eqmod (inp_poly06f**2) (L0x7fffffffd48e*x** 0+L0x7fffffffd49e*x** 1)
      [10753, x**2 - 3902],
eqmod (inp_poly070**2) (L0x7fffffffd4a0*x** 0+L0x7fffffffd4b0*x** 1)
      [10753, x**2 - 2744],
eqmod (inp_poly071**2) (L0x7fffffffd4c0*x** 0+L0x7fffffffd4d0*x** 1)
      [10753, x**2 - 8009],
eqmod (inp_poly072**2) (L0x7fffffffd4a2*x** 0+L0x7fffffffd4b2*x** 1)
      [10753, x**2 - 5122],
eqmod (inp_poly073**2) (L0x7fffffffd4c2*x** 0+L0x7fffffffd4d2*x** 1)
      [10753, x**2 - 5631],
eqmod (inp_poly074**2) (L0x7fffffffd4a4*x** 0+L0x7fffffffd4b4*x** 1)
      [10753, x**2 - 9831],
eqmod (inp_poly075**2) (L0x7fffffffd4c4*x** 0+L0x7fffffffd4d4*x** 1)
      [10753, x**2 - 922],
eqmod (inp_poly076**2) (L0x7fffffffd4a6*x** 0+L0x7fffffffd4b6*x** 1)
      [10753, x**2 - 9706],
eqmod (inp_poly077**2) (L0x7fffffffd4c6*x** 0+L0x7fffffffd4d6*x** 1)
      [10753, x**2 - 1047],
eqmod (inp_poly078**2) (L0x7fffffffd4a8*x** 0+L0x7fffffffd4b8*x** 1)
      [10753, x**2 - 4455],
eqmod (inp_poly079**2) (L0x7fffffffd4c8*x** 0+L0x7fffffffd4d8*x** 1)
      [10753, x**2 - 6298],
eqmod (inp_poly07a**2) (L0x7fffffffd4aa*x** 0+L0x7fffffffd4ba*x** 1)
      [10753, x**2 - 2085],
eqmod (inp_poly07b**2) (L0x7fffffffd4ca*x** 0+L0x7fffffffd4da*x** 1)
      [10753, x**2 - 8668],
eqmod (inp_poly07c**2) (L0x7fffffffd4ac*x** 0+L0x7fffffffd4bc*x** 1)
      [10753, x**2 - 10659],
eqmod (inp_poly07d**2) (L0x7fffffffd4cc*x** 0+L0x7fffffffd4dc*x** 1)
      [10753, x**2 - 94],
eqmod (inp_poly07e**2) (L0x7fffffffd4ae*x** 0+L0x7fffffffd4be*x** 1)
      [10753, x**2 - 2599],
eqmod (inp_poly07f**2) (L0x7fffffffd4ce*x** 0+L0x7fffffffd4de*x** 1)
      [10753, x**2 - 8154]
,
eqmod (inp_poly080**2) (L0x7fffffffd4e0*x** 0+L0x7fffffffd4f0*x** 1)
      [10753, x**2 - 100],
eqmod (inp_poly081**2) (L0x7fffffffd500*x** 0+L0x7fffffffd510*x** 1)
      [10753, x**2 - 10653],
eqmod (inp_poly082**2) (L0x7fffffffd4e2*x** 0+L0x7fffffffd4f2*x** 1)
      [10753, x**2 - 2726],
eqmod (inp_poly083**2) (L0x7fffffffd502*x** 0+L0x7fffffffd512*x** 1)
      [10753, x**2 - 8027],
eqmod (inp_poly084**2) (L0x7fffffffd4e4*x** 0+L0x7fffffffd4f4*x** 1)
      [10753, x**2 - 10594],
eqmod (inp_poly085**2) (L0x7fffffffd504*x** 0+L0x7fffffffd514*x** 1)
      [10753, x**2 - 159],
eqmod (inp_poly086**2) (L0x7fffffffd4e6*x** 0+L0x7fffffffd4f6*x** 1)
      [10753, x**2 - 4053],
eqmod (inp_poly087**2) (L0x7fffffffd506*x** 0+L0x7fffffffd516*x** 1)
      [10753, x**2 - 6700],
eqmod (inp_poly088**2) (L0x7fffffffd4e8*x** 0+L0x7fffffffd4f8*x** 1)
      [10753, x**2 - 6448],
eqmod (inp_poly089**2) (L0x7fffffffd508*x** 0+L0x7fffffffd518*x** 1)
      [10753, x**2 - 4305],
eqmod (inp_poly08a**2) (L0x7fffffffd4ea*x** 0+L0x7fffffffd4fa*x** 1)
      [10753, x**2 - 2004],
eqmod (inp_poly08b**2) (L0x7fffffffd50a*x** 0+L0x7fffffffd51a*x** 1)
      [10753, x**2 - 8749],
eqmod (inp_poly08c**2) (L0x7fffffffd4ec*x** 0+L0x7fffffffd4fc*x** 1)
      [10753, x**2 - 5232],
eqmod (inp_poly08d**2) (L0x7fffffffd50c*x** 0+L0x7fffffffd51c*x** 1)
      [10753, x**2 - 5521],
eqmod (inp_poly08e**2) (L0x7fffffffd4ee*x** 0+L0x7fffffffd4fe*x** 1)
      [10753, x**2 - 8857],
eqmod (inp_poly08f**2) (L0x7fffffffd50e*x** 0+L0x7fffffffd51e*x** 1)
      [10753, x**2 - 1896],
eqmod (inp_poly090**2) (L0x7fffffffd520*x** 0+L0x7fffffffd530*x** 1)
      [10753, x**2 - 7870],
eqmod (inp_poly091**2) (L0x7fffffffd540*x** 0+L0x7fffffffd550*x** 1)
      [10753, x**2 - 2883],
eqmod (inp_poly092**2) (L0x7fffffffd522*x** 0+L0x7fffffffd532*x** 1)
      [10753, x**2 - 5928],
eqmod (inp_poly093**2) (L0x7fffffffd542*x** 0+L0x7fffffffd552*x** 1)
      [10753, x**2 - 4825],
eqmod (inp_poly094**2) (L0x7fffffffd524*x** 0+L0x7fffffffd534*x** 1)
      [10753, x**2 - 10068],
eqmod (inp_poly095**2) (L0x7fffffffd544*x** 0+L0x7fffffffd554*x** 1)
      [10753, x**2 - 685],
eqmod (inp_poly096**2) (L0x7fffffffd526*x** 0+L0x7fffffffd536*x** 1)
      [10753, x**2 - 10360],
eqmod (inp_poly097**2) (L0x7fffffffd546*x** 0+L0x7fffffffd556*x** 1)
      [10753, x**2 - 393],
eqmod (inp_poly098**2) (L0x7fffffffd528*x** 0+L0x7fffffffd538*x** 1)
      [10753, x**2 - 10669],
eqmod (inp_poly099**2) (L0x7fffffffd548*x** 0+L0x7fffffffd558*x** 1)
      [10753, x**2 - 84],
eqmod (inp_poly09a**2) (L0x7fffffffd52a*x** 0+L0x7fffffffd53a*x** 1)
      [10753, x**2 - 721],
eqmod (inp_poly09b**2) (L0x7fffffffd54a*x** 0+L0x7fffffffd55a*x** 1)
      [10753, x**2 - 10032],
eqmod (inp_poly09c**2) (L0x7fffffffd52c*x** 0+L0x7fffffffd53c*x** 1)
      [10753, x**2 - 5295],
eqmod (inp_poly09d**2) (L0x7fffffffd54c*x** 0+L0x7fffffffd55c*x** 1)
      [10753, x**2 - 5458],
eqmod (inp_poly09e**2) (L0x7fffffffd52e*x** 0+L0x7fffffffd53e*x** 1)
      [10753, x**2 - 5628],
eqmod (inp_poly09f**2) (L0x7fffffffd54e*x** 0+L0x7fffffffd55e*x** 1)
      [10753, x**2 - 5125],
eqmod (inp_poly0a0**2) (L0x7fffffffd560*x** 0+L0x7fffffffd570*x** 1)
      [10753, x**2 - 331],
eqmod (inp_poly0a1**2) (L0x7fffffffd580*x** 0+L0x7fffffffd590*x** 1)
      [10753, x**2 - 10422],
eqmod (inp_poly0a2**2) (L0x7fffffffd562*x** 0+L0x7fffffffd572*x** 1)
      [10753, x**2 - 8808],
eqmod (inp_poly0a3**2) (L0x7fffffffd582*x** 0+L0x7fffffffd592*x** 1)
      [10753, x**2 - 1945],
eqmod (inp_poly0a4**2) (L0x7fffffffd564*x** 0+L0x7fffffffd574*x** 1)
      [10753, x**2 - 9474],
eqmod (inp_poly0a5**2) (L0x7fffffffd584*x** 0+L0x7fffffffd594*x** 1)
      [10753, x**2 - 1279],
eqmod (inp_poly0a6**2) (L0x7fffffffd566*x** 0+L0x7fffffffd576*x** 1)
      [10753, x**2 - 10082],
eqmod (inp_poly0a7**2) (L0x7fffffffd586*x** 0+L0x7fffffffd596*x** 1)
      [10753, x**2 - 671],
eqmod (inp_poly0a8**2) (L0x7fffffffd568*x** 0+L0x7fffffffd578*x** 1)
      [10753, x**2 - 267],
eqmod (inp_poly0a9**2) (L0x7fffffffd588*x** 0+L0x7fffffffd598*x** 1)
      [10753, x**2 - 10486],
eqmod (inp_poly0aa**2) (L0x7fffffffd56a*x** 0+L0x7fffffffd57a*x** 1)
      [10753, x**2 - 5773],
eqmod (inp_poly0ab**2) (L0x7fffffffd58a*x** 0+L0x7fffffffd59a*x** 1)
      [10753, x**2 - 4980],
eqmod (inp_poly0ac**2) (L0x7fffffffd56c*x** 0+L0x7fffffffd57c*x** 1)
      [10753, x**2 - 10436],
eqmod (inp_poly0ad**2) (L0x7fffffffd58c*x** 0+L0x7fffffffd59c*x** 1)
      [10753, x**2 - 317],
eqmod (inp_poly0ae**2) (L0x7fffffffd56e*x** 0+L0x7fffffffd57e*x** 1)
      [10753, x**2 - 3617],
eqmod (inp_poly0af**2) (L0x7fffffffd58e*x** 0+L0x7fffffffd59e*x** 1)
      [10753, x**2 - 7136],
eqmod (inp_poly0b0**2) (L0x7fffffffd5a0*x** 0+L0x7fffffffd5b0*x** 1)
      [10753, x**2 - 5619],
eqmod (inp_poly0b1**2) (L0x7fffffffd5c0*x** 0+L0x7fffffffd5d0*x** 1)
      [10753, x**2 - 5134],
eqmod (inp_poly0b2**2) (L0x7fffffffd5a2*x** 0+L0x7fffffffd5b2*x** 1)
      [10753, x**2 - 2847],
eqmod (inp_poly0b3**2) (L0x7fffffffd5c2*x** 0+L0x7fffffffd5d2*x** 1)
      [10753, x**2 - 7906],
eqmod (inp_poly0b4**2) (L0x7fffffffd5a4*x** 0+L0x7fffffffd5b4*x** 1)
      [10753, x**2 - 7948],
eqmod (inp_poly0b5**2) (L0x7fffffffd5c4*x** 0+L0x7fffffffd5d4*x** 1)
      [10753, x**2 - 2805],
eqmod (inp_poly0b6**2) (L0x7fffffffd5a6*x** 0+L0x7fffffffd5b6*x** 1)
      [10753, x**2 - 10635],
eqmod (inp_poly0b7**2) (L0x7fffffffd5c6*x** 0+L0x7fffffffd5d6*x** 1)
      [10753, x**2 - 118],
eqmod (inp_poly0b8**2) (L0x7fffffffd5a8*x** 0+L0x7fffffffd5b8*x** 1)
      [10753, x**2 - 7034],
eqmod (inp_poly0b9**2) (L0x7fffffffd5c8*x** 0+L0x7fffffffd5d8*x** 1)
      [10753, x**2 - 3719],
eqmod (inp_poly0ba**2) (L0x7fffffffd5aa*x** 0+L0x7fffffffd5ba*x** 1)
      [10753, x**2 - 5935],
eqmod (inp_poly0bb**2) (L0x7fffffffd5ca*x** 0+L0x7fffffffd5da*x** 1)
      [10753, x**2 - 4818],
eqmod (inp_poly0bc**2) (L0x7fffffffd5ac*x** 0+L0x7fffffffd5bc*x** 1)
      [10753, x**2 - 10537],
eqmod (inp_poly0bd**2) (L0x7fffffffd5cc*x** 0+L0x7fffffffd5dc*x** 1)
      [10753, x**2 - 216],
eqmod (inp_poly0be**2) (L0x7fffffffd5ae*x** 0+L0x7fffffffd5be*x** 1)
      [10753, x**2 - 1854],
eqmod (inp_poly0bf**2) (L0x7fffffffd5ce*x** 0+L0x7fffffffd5de*x** 1)
      [10753, x**2 - 8899]
,
eqmod (inp_poly0c0**2) (L0x7fffffffd5e0*x** 0+L0x7fffffffd5f0*x** 1)
      [10753, x**2 - 10724],
eqmod (inp_poly0c1**2) (L0x7fffffffd600*x** 0+L0x7fffffffd610*x** 1)
      [10753, x**2 - 29],
eqmod (inp_poly0c2**2) (L0x7fffffffd5e2*x** 0+L0x7fffffffd5f2*x** 1)
      [10753, x**2 - 1145],
eqmod (inp_poly0c3**2) (L0x7fffffffd602*x** 0+L0x7fffffffd612*x** 1)
      [10753, x**2 - 9608],
eqmod (inp_poly0c4**2) (L0x7fffffffd5e4*x** 0+L0x7fffffffd5f4*x** 1)
      [10753, x**2 - 1444],
eqmod (inp_poly0c5**2) (L0x7fffffffd604*x** 0+L0x7fffffffd614*x** 1)
      [10753, x**2 - 9309],
eqmod (inp_poly0c6**2) (L0x7fffffffd5e6*x** 0+L0x7fffffffd5f6*x** 1)
      [10753, x**2 - 1943],
eqmod (inp_poly0c7**2) (L0x7fffffffd606*x** 0+L0x7fffffffd616*x** 1)
      [10753, x**2 - 8810],
eqmod (inp_poly0c8**2) (L0x7fffffffd5e8*x** 0+L0x7fffffffd5f8*x** 1)
      [10753, x**2 - 5012],
eqmod (inp_poly0c9**2) (L0x7fffffffd608*x** 0+L0x7fffffffd618*x** 1)
      [10753, x**2 - 5741],
eqmod (inp_poly0ca**2) (L0x7fffffffd5ea*x** 0+L0x7fffffffd5fa*x** 1)
      [10753, x**2 - 7161],
eqmod (inp_poly0cb**2) (L0x7fffffffd60a*x** 0+L0x7fffffffd61a*x** 1)
      [10753, x**2 - 3592],
eqmod (inp_poly0cc**2) (L0x7fffffffd5ec*x** 0+L0x7fffffffd5fc*x** 1)
      [10753, x**2 - 6655],
eqmod (inp_poly0cd**2) (L0x7fffffffd60c*x** 0+L0x7fffffffd61c*x** 1)
      [10753, x**2 - 4098],
eqmod (inp_poly0ce**2) (L0x7fffffffd5ee*x** 0+L0x7fffffffd5fe*x** 1)
      [10753, x**2 - 8292],
eqmod (inp_poly0cf**2) (L0x7fffffffd60e*x** 0+L0x7fffffffd61e*x** 1)
      [10753, x**2 - 2461],
eqmod (inp_poly0d0**2) (L0x7fffffffd620*x** 0+L0x7fffffffd630*x** 1)
      [10753, x**2 - 9546],
eqmod (inp_poly0d1**2) (L0x7fffffffd640*x** 0+L0x7fffffffd650*x** 1)
      [10753, x**2 - 1207],
eqmod (inp_poly0d2**2) (L0x7fffffffd622*x** 0+L0x7fffffffd632*x** 1)
      [10753, x**2 - 9464],
eqmod (inp_poly0d3**2) (L0x7fffffffd642*x** 0+L0x7fffffffd652*x** 1)
      [10753, x**2 - 1289],
eqmod (inp_poly0d4**2) (L0x7fffffffd624*x** 0+L0x7fffffffd634*x** 1)
      [10753, x**2 - 10414],
eqmod (inp_poly0d5**2) (L0x7fffffffd644*x** 0+L0x7fffffffd654*x** 1)
      [10753, x**2 - 339],
eqmod (inp_poly0d6**2) (L0x7fffffffd626*x** 0+L0x7fffffffd636*x** 1)
      [10753, x**2 - 5598],
eqmod (inp_poly0d7**2) (L0x7fffffffd646*x** 0+L0x7fffffffd656*x** 1)
      [10753, x**2 - 5155],
eqmod (inp_poly0d8**2) (L0x7fffffffd628*x** 0+L0x7fffffffd638*x** 1)
      [10753, x**2 - 9487],
eqmod (inp_poly0d9**2) (L0x7fffffffd648*x** 0+L0x7fffffffd658*x** 1)
      [10753, x**2 - 1266],
eqmod (inp_poly0da**2) (L0x7fffffffd62a*x** 0+L0x7fffffffd63a*x** 1)
      [10753, x**2 - 5490],
eqmod (inp_poly0db**2) (L0x7fffffffd64a*x** 0+L0x7fffffffd65a*x** 1)
      [10753, x**2 - 5263],
eqmod (inp_poly0dc**2) (L0x7fffffffd62c*x** 0+L0x7fffffffd63c*x** 1)
      [10753, x**2 - 2228],
eqmod (inp_poly0dd**2) (L0x7fffffffd64c*x** 0+L0x7fffffffd65c*x** 1)
      [10753, x**2 - 8525],
eqmod (inp_poly0de**2) (L0x7fffffffd62e*x** 0+L0x7fffffffd63e*x** 1)
      [10753, x**2 - 9551],
eqmod (inp_poly0df**2) (L0x7fffffffd64e*x** 0+L0x7fffffffd65e*x** 1)
      [10753, x**2 - 1202],
eqmod (inp_poly0e0**2) (L0x7fffffffd660*x** 0+L0x7fffffffd670*x** 1)
      [10753, x**2 - 8829],
eqmod (inp_poly0e1**2) (L0x7fffffffd680*x** 0+L0x7fffffffd690*x** 1)
      [10753, x**2 - 1924],
eqmod (inp_poly0e2**2) (L0x7fffffffd662*x** 0+L0x7fffffffd672*x** 1)
      [10753, x**2 - 2177],
eqmod (inp_poly0e3**2) (L0x7fffffffd682*x** 0+L0x7fffffffd692*x** 1)
      [10753, x**2 - 8576],
eqmod (inp_poly0e4**2) (L0x7fffffffd664*x** 0+L0x7fffffffd674*x** 1)
      [10753, x**2 - 6070],
eqmod (inp_poly0e5**2) (L0x7fffffffd684*x** 0+L0x7fffffffd694*x** 1)
      [10753, x**2 - 4683],
eqmod (inp_poly0e6**2) (L0x7fffffffd666*x** 0+L0x7fffffffd676*x** 1)
      [10753, x**2 - 10625],
eqmod (inp_poly0e7**2) (L0x7fffffffd686*x** 0+L0x7fffffffd696*x** 1)
      [10753, x**2 - 128],
eqmod (inp_poly0e8**2) (L0x7fffffffd668*x** 0+L0x7fffffffd678*x** 1)
      [10753, x**2 - 3256],
eqmod (inp_poly0e9**2) (L0x7fffffffd688*x** 0+L0x7fffffffd698*x** 1)
      [10753, x**2 - 7497],
eqmod (inp_poly0ea**2) (L0x7fffffffd66a*x** 0+L0x7fffffffd67a*x** 1)
      [10753, x**2 - 7896],
eqmod (inp_poly0eb**2) (L0x7fffffffd68a*x** 0+L0x7fffffffd69a*x** 1)
      [10753, x**2 - 2857],
eqmod (inp_poly0ec**2) (L0x7fffffffd66c*x** 0+L0x7fffffffd67c*x** 1)
      [10753, x**2 - 2135],
eqmod (inp_poly0ed**2) (L0x7fffffffd68c*x** 0+L0x7fffffffd69c*x** 1)
      [10753, x**2 - 8618],
eqmod (inp_poly0ee**2) (L0x7fffffffd66e*x** 0+L0x7fffffffd67e*x** 1)
      [10753, x**2 - 7661],
eqmod (inp_poly0ef**2) (L0x7fffffffd68e*x** 0+L0x7fffffffd69e*x** 1)
      [10753, x**2 - 3092],
eqmod (inp_poly0f0**2) (L0x7fffffffd6a0*x** 0+L0x7fffffffd6b0*x** 1)
      [10753, x**2 - 5575],
eqmod (inp_poly0f1**2) (L0x7fffffffd6c0*x** 0+L0x7fffffffd6d0*x** 1)
      [10753, x**2 - 5178],
eqmod (inp_poly0f2**2) (L0x7fffffffd6a2*x** 0+L0x7fffffffd6b2*x** 1)
      [10753, x**2 - 6809],
eqmod (inp_poly0f3**2) (L0x7fffffffd6c2*x** 0+L0x7fffffffd6d2*x** 1)
      [10753, x**2 - 3944],
eqmod (inp_poly0f4**2) (L0x7fffffffd6a4*x** 0+L0x7fffffffd6b4*x** 1)
      [10753, x**2 - 4577],
eqmod (inp_poly0f5**2) (L0x7fffffffd6c4*x** 0+L0x7fffffffd6d4*x** 1)
      [10753, x**2 - 6176],
eqmod (inp_poly0f6**2) (L0x7fffffffd6a6*x** 0+L0x7fffffffd6b6*x** 1)
      [10753, x**2 - 2830],
eqmod (inp_poly0f7**2) (L0x7fffffffd6c6*x** 0+L0x7fffffffd6d6*x** 1)
      [10753, x**2 - 7923],
eqmod (inp_poly0f8**2) (L0x7fffffffd6a8*x** 0+L0x7fffffffd6b8*x** 1)
      [10753, x**2 - 4627],
eqmod (inp_poly0f9**2) (L0x7fffffffd6c8*x** 0+L0x7fffffffd6d8*x** 1)
      [10753, x**2 - 6126],
eqmod (inp_poly0fa**2) (L0x7fffffffd6aa*x** 0+L0x7fffffffd6ba*x** 1)
      [10753, x**2 - 4193],
eqmod (inp_poly0fb**2) (L0x7fffffffd6ca*x** 0+L0x7fffffffd6da*x** 1)
      [10753, x**2 - 6560],
eqmod (inp_poly0fc**2) (L0x7fffffffd6ac*x** 0+L0x7fffffffd6bc*x** 1)
      [10753, x**2 - 1353],
eqmod (inp_poly0fd**2) (L0x7fffffffd6cc*x** 0+L0x7fffffffd6dc*x** 1)
      [10753, x**2 - 9400],
eqmod (inp_poly0fe**2) (L0x7fffffffd6ae*x** 0+L0x7fffffffd6be*x** 1)
      [10753, x**2 - 1828],
eqmod (inp_poly0ff**2) (L0x7fffffffd6ce*x** 0+L0x7fffffffd6de*x** 1)
      [10753, x**2 - 8925]
,
eqmod (inp_poly100**2) (L0x7fffffffd6e0*x** 0+L0x7fffffffd6f0*x** 1)
      [10753, x**2 - 10],
eqmod (inp_poly101**2) (L0x7fffffffd700*x** 0+L0x7fffffffd710*x** 1)
      [10753, x**2 - 10743],
eqmod (inp_poly102**2) (L0x7fffffffd6e2*x** 0+L0x7fffffffd6f2*x** 1)
      [10753, x**2 - 8875],
eqmod (inp_poly103**2) (L0x7fffffffd702*x** 0+L0x7fffffffd712*x** 1)
      [10753, x**2 - 1878],
eqmod (inp_poly104**2) (L0x7fffffffd6e4*x** 0+L0x7fffffffd6f4*x** 1)
      [10753, x**2 - 3210],
eqmod (inp_poly105**2) (L0x7fffffffd704*x** 0+L0x7fffffffd714*x** 1)
      [10753, x**2 - 7543],
eqmod (inp_poly106**2) (L0x7fffffffd6e6*x** 0+L0x7fffffffd6f6*x** 1)
      [10753, x**2 - 10083],
eqmod (inp_poly107**2) (L0x7fffffffd706*x** 0+L0x7fffffffd716*x** 1)
      [10753, x**2 - 670],
eqmod (inp_poly108**2) (L0x7fffffffd6e8*x** 0+L0x7fffffffd6f8*x** 1)
      [10753, x**2 - 4946],
eqmod (inp_poly109**2) (L0x7fffffffd708*x** 0+L0x7fffffffd718*x** 1)
      [10753, x**2 - 5807],
eqmod (inp_poly10a**2) (L0x7fffffffd6ea*x** 0+L0x7fffffffd6fa*x** 1)
      [10753, x**2 - 2351],
eqmod (inp_poly10b**2) (L0x7fffffffd70a*x** 0+L0x7fffffffd71a*x** 1)
      [10753, x**2 - 8402],
eqmod (inp_poly10c**2) (L0x7fffffffd6ec*x** 0+L0x7fffffffd6fc*x** 1)
      [10753, x**2 - 6975],
eqmod (inp_poly10d**2) (L0x7fffffffd70c*x** 0+L0x7fffffffd71c*x** 1)
      [10753, x**2 - 3778],
eqmod (inp_poly10e**2) (L0x7fffffffd6ee*x** 0+L0x7fffffffd6fe*x** 1)
      [10753, x**2 - 1961],
eqmod (inp_poly10f**2) (L0x7fffffffd70e*x** 0+L0x7fffffffd71e*x** 1)
      [10753, x**2 - 8792],
eqmod (inp_poly110**2) (L0x7fffffffd720*x** 0+L0x7fffffffd730*x** 1)
      [10753, x**2 - 787],
eqmod (inp_poly111**2) (L0x7fffffffd740*x** 0+L0x7fffffffd750*x** 1)
      [10753, x**2 - 9966],
eqmod (inp_poly112**2) (L0x7fffffffd722*x** 0+L0x7fffffffd732*x** 1)
      [10753, x**2 - 4894],
eqmod (inp_poly113**2) (L0x7fffffffd742*x** 0+L0x7fffffffd752*x** 1)
      [10753, x**2 - 5859],
eqmod (inp_poly114**2) (L0x7fffffffd724*x** 0+L0x7fffffffd734*x** 1)
      [10753, x**2 - 5308],
eqmod (inp_poly115**2) (L0x7fffffffd744*x** 0+L0x7fffffffd754*x** 1)
      [10753, x**2 - 5445],
eqmod (inp_poly116**2) (L0x7fffffffd726*x** 0+L0x7fffffffd736*x** 1)
      [10753, x**2 - 1036],
eqmod (inp_poly117**2) (L0x7fffffffd746*x** 0+L0x7fffffffd756*x** 1)
      [10753, x**2 - 9717],
eqmod (inp_poly118**2) (L0x7fffffffd728*x** 0+L0x7fffffffd738*x** 1)
      [10753, x**2 - 8594],
eqmod (inp_poly119**2) (L0x7fffffffd748*x** 0+L0x7fffffffd758*x** 1)
      [10753, x**2 - 2159],
eqmod (inp_poly11a**2) (L0x7fffffffd72a*x** 0+L0x7fffffffd73a*x** 1)
      [10753, x**2 - 3298],
eqmod (inp_poly11b**2) (L0x7fffffffd74a*x** 0+L0x7fffffffd75a*x** 1)
      [10753, x**2 - 7455],
eqmod (inp_poly11c**2) (L0x7fffffffd72c*x** 0+L0x7fffffffd73c*x** 1)
      [10753, x**2 - 5906],
eqmod (inp_poly11d**2) (L0x7fffffffd74c*x** 0+L0x7fffffffd75c*x** 1)
      [10753, x**2 - 4847],
eqmod (inp_poly11e**2) (L0x7fffffffd72e*x** 0+L0x7fffffffd73e*x** 1)
      [10753, x**2 - 4864],
eqmod (inp_poly11f**2) (L0x7fffffffd74e*x** 0+L0x7fffffffd75e*x** 1)
      [10753, x**2 - 5889],
eqmod (inp_poly120**2) (L0x7fffffffd760*x** 0+L0x7fffffffd770*x** 1)
      [10753, x**2 - 3259],
eqmod (inp_poly121**2) (L0x7fffffffd780*x** 0+L0x7fffffffd790*x** 1)
      [10753, x**2 - 7494],
eqmod (inp_poly122**2) (L0x7fffffffd762*x** 0+L0x7fffffffd772*x** 1)
      [10753, x**2 - 5182],
eqmod (inp_poly123**2) (L0x7fffffffd782*x** 0+L0x7fffffffd792*x** 1)
      [10753, x**2 - 5571],
eqmod (inp_poly124**2) (L0x7fffffffd764*x** 0+L0x7fffffffd774*x** 1)
      [10753, x**2 - 3098],
eqmod (inp_poly125**2) (L0x7fffffffd784*x** 0+L0x7fffffffd794*x** 1)
      [10753, x**2 - 7655],
eqmod (inp_poly126**2) (L0x7fffffffd766*x** 0+L0x7fffffffd776*x** 1)
      [10753, x**2 - 7460],
eqmod (inp_poly127**2) (L0x7fffffffd786*x** 0+L0x7fffffffd796*x** 1)
      [10753, x**2 - 3293],
eqmod (inp_poly128**2) (L0x7fffffffd768*x** 0+L0x7fffffffd778*x** 1)
      [10753, x**2 - 1102],
eqmod (inp_poly129**2) (L0x7fffffffd788*x** 0+L0x7fffffffd798*x** 1)
      [10753, x**2 - 9651],
eqmod (inp_poly12a**2) (L0x7fffffffd76a*x** 0+L0x7fffffffd77a*x** 1)
      [10753, x**2 - 10255],
eqmod (inp_poly12b**2) (L0x7fffffffd78a*x** 0+L0x7fffffffd79a*x** 1)
      [10753, x**2 - 498],
eqmod (inp_poly12c**2) (L0x7fffffffd76c*x** 0+L0x7fffffffd77c*x** 1)
      [10753, x**2 - 9646],
eqmod (inp_poly12d**2) (L0x7fffffffd78c*x** 0+L0x7fffffffd79c*x** 1)
      [10753, x**2 - 1107],
eqmod (inp_poly12e**2) (L0x7fffffffd76e*x** 0+L0x7fffffffd77e*x** 1)
      [10753, x**2 - 1437],
eqmod (inp_poly12f**2) (L0x7fffffffd78e*x** 0+L0x7fffffffd79e*x** 1)
      [10753, x**2 - 9316],
eqmod (inp_poly130**2) (L0x7fffffffd7a0*x** 0+L0x7fffffffd7b0*x** 1)
      [10753, x**2 - 8089],
eqmod (inp_poly131**2) (L0x7fffffffd7c0*x** 0+L0x7fffffffd7d0*x** 1)
      [10753, x**2 - 2664],
eqmod (inp_poly132**2) (L0x7fffffffd7a2*x** 0+L0x7fffffffd7b2*x** 1)
      [10753, x**2 - 1360],
eqmod (inp_poly133**2) (L0x7fffffffd7c2*x** 0+L0x7fffffffd7d2*x** 1)
      [10753, x**2 - 9393],
eqmod (inp_poly134**2) (L0x7fffffffd7a4*x** 0+L0x7fffffffd7b4*x** 1)
      [10753, x**2 - 5096],
eqmod (inp_poly135**2) (L0x7fffffffd7c4*x** 0+L0x7fffffffd7d4*x** 1)
      [10753, x**2 - 5657],
eqmod (inp_poly136**2) (L0x7fffffffd7a6*x** 0+L0x7fffffffd7b6*x** 1)
      [10753, x**2 - 6440],
eqmod (inp_poly137**2) (L0x7fffffffd7c6*x** 0+L0x7fffffffd7d6*x** 1)
      [10753, x**2 - 4313],
eqmod (inp_poly138**2) (L0x7fffffffd7a8*x** 0+L0x7fffffffd7b8*x** 1)
      [10753, x**2 - 2854],
eqmod (inp_poly139**2) (L0x7fffffffd7c8*x** 0+L0x7fffffffd7d8*x** 1)
      [10753, x**2 - 7899],
eqmod (inp_poly13a**2) (L0x7fffffffd7aa*x** 0+L0x7fffffffd7ba*x** 1)
      [10753, x**2 - 5970],
eqmod (inp_poly13b**2) (L0x7fffffffd7ca*x** 0+L0x7fffffffd7da*x** 1)
      [10753, x**2 - 4783],
eqmod (inp_poly13c**2) (L0x7fffffffd7ac*x** 0+L0x7fffffffd7bc*x** 1)
      [10753, x**2 - 2129],
eqmod (inp_poly13d**2) (L0x7fffffffd7cc*x** 0+L0x7fffffffd7dc*x** 1)
      [10753, x**2 - 8624],
eqmod (inp_poly13e**2) (L0x7fffffffd7ae*x** 0+L0x7fffffffd7be*x** 1)
      [10753, x**2 - 2336],
eqmod (inp_poly13f**2) (L0x7fffffffd7ce*x** 0+L0x7fffffffd7de*x** 1)
      [10753, x**2 - 8417]
,
eqmod (inp_poly140**2) (L0x7fffffffd7e0*x** 0+L0x7fffffffd7f0*x** 1)
      [10753, x**2 - 3223],
eqmod (inp_poly141**2) (L0x7fffffffd800*x** 0+L0x7fffffffd810*x** 1)
      [10753, x**2 - 7530],
eqmod (inp_poly142**2) (L0x7fffffffd7e2*x** 0+L0x7fffffffd7f2*x** 1)
      [10753, x**2 - 5491],
eqmod (inp_poly143**2) (L0x7fffffffd802*x** 0+L0x7fffffffd812*x** 1)
      [10753, x**2 - 5262],
eqmod (inp_poly144**2) (L0x7fffffffd7e4*x** 0+L0x7fffffffd7f4*x** 1)
      [10753, x**2 - 2295],
eqmod (inp_poly145**2) (L0x7fffffffd804*x** 0+L0x7fffffffd814*x** 1)
      [10753, x**2 - 8458],
eqmod (inp_poly146**2) (L0x7fffffffd7e6*x** 0+L0x7fffffffd7f6*x** 1)
      [10753, x**2 - 9872],
eqmod (inp_poly147**2) (L0x7fffffffd806*x** 0+L0x7fffffffd816*x** 1)
      [10753, x**2 - 881],
eqmod (inp_poly148**2) (L0x7fffffffd7e8*x** 0+L0x7fffffffd7f8*x** 1)
      [10753, x**2 - 6953],
eqmod (inp_poly149**2) (L0x7fffffffd808*x** 0+L0x7fffffffd818*x** 1)
      [10753, x**2 - 3800],
eqmod (inp_poly14a**2) (L0x7fffffffd7ea*x** 0+L0x7fffffffd7fa*x** 1)
      [10753, x**2 - 3942],
eqmod (inp_poly14b**2) (L0x7fffffffd80a*x** 0+L0x7fffffffd81a*x** 1)
      [10753, x**2 - 6811],
eqmod (inp_poly14c**2) (L0x7fffffffd7ec*x** 0+L0x7fffffffd7fc*x** 1)
      [10753, x**2 - 6042],
eqmod (inp_poly14d**2) (L0x7fffffffd80c*x** 0+L0x7fffffffd81c*x** 1)
      [10753, x**2 - 4711],
eqmod (inp_poly14e**2) (L0x7fffffffd7ee*x** 0+L0x7fffffffd7fe*x** 1)
      [10753, x**2 - 7281],
eqmod (inp_poly14f**2) (L0x7fffffffd80e*x** 0+L0x7fffffffd81e*x** 1)
      [10753, x**2 - 3472],
eqmod (inp_poly150**2) (L0x7fffffffd820*x** 0+L0x7fffffffd830*x** 1)
      [10753, x**2 - 9557],
eqmod (inp_poly151**2) (L0x7fffffffd840*x** 0+L0x7fffffffd850*x** 1)
      [10753, x**2 - 1196],
eqmod (inp_poly152**2) (L0x7fffffffd822*x** 0+L0x7fffffffd832*x** 1)
      [10753, x**2 - 3097],
eqmod (inp_poly153**2) (L0x7fffffffd842*x** 0+L0x7fffffffd852*x** 1)
      [10753, x**2 - 7656],
eqmod (inp_poly154**2) (L0x7fffffffd824*x** 0+L0x7fffffffd834*x** 1)
      [10753, x**2 - 3192],
eqmod (inp_poly155**2) (L0x7fffffffd844*x** 0+L0x7fffffffd854*x** 1)
      [10753, x**2 - 7561],
eqmod (inp_poly156**2) (L0x7fffffffd826*x** 0+L0x7fffffffd836*x** 1)
      [10753, x**2 - 4861],
eqmod (inp_poly157**2) (L0x7fffffffd846*x** 0+L0x7fffffffd856*x** 1)
      [10753, x**2 - 5892],
eqmod (inp_poly158**2) (L0x7fffffffd828*x** 0+L0x7fffffffd838*x** 1)
      [10753, x**2 - 2024],
eqmod (inp_poly159**2) (L0x7fffffffd848*x** 0+L0x7fffffffd858*x** 1)
      [10753, x**2 - 8729],
eqmod (inp_poly15a**2) (L0x7fffffffd82a*x** 0+L0x7fffffffd83a*x** 1)
      [10753, x**2 - 549],
eqmod (inp_poly15b**2) (L0x7fffffffd84a*x** 0+L0x7fffffffd85a*x** 1)
      [10753, x**2 - 10204],
eqmod (inp_poly15c**2) (L0x7fffffffd82c*x** 0+L0x7fffffffd83c*x** 1)
      [10753, x**2 - 4524],
eqmod (inp_poly15d**2) (L0x7fffffffd84c*x** 0+L0x7fffffffd85c*x** 1)
      [10753, x**2 - 6229],
eqmod (inp_poly15e**2) (L0x7fffffffd82e*x** 0+L0x7fffffffd83e*x** 1)
      [10753, x**2 - 4181],
eqmod (inp_poly15f**2) (L0x7fffffffd84e*x** 0+L0x7fffffffd85e*x** 1)
      [10753, x**2 - 6572],
eqmod (inp_poly160**2) (L0x7fffffffd860*x** 0+L0x7fffffffd870*x** 1)
      [10753, x**2 - 8410],
eqmod (inp_poly161**2) (L0x7fffffffd880*x** 0+L0x7fffffffd890*x** 1)
      [10753, x**2 - 2343],
eqmod (inp_poly162**2) (L0x7fffffffd862*x** 0+L0x7fffffffd872*x** 1)
      [10753, x**2 - 1293],
eqmod (inp_poly163**2) (L0x7fffffffd882*x** 0+L0x7fffffffd892*x** 1)
      [10753, x**2 - 9460],
eqmod (inp_poly164**2) (L0x7fffffffd864*x** 0+L0x7fffffffd874*x** 1)
      [10753, x**2 - 607],
eqmod (inp_poly165**2) (L0x7fffffffd884*x** 0+L0x7fffffffd894*x** 1)
      [10753, x**2 - 10146],
eqmod (inp_poly166**2) (L0x7fffffffd866*x** 0+L0x7fffffffd876*x** 1)
      [10753, x**2 - 6439],
eqmod (inp_poly167**2) (L0x7fffffffd886*x** 0+L0x7fffffffd896*x** 1)
      [10753, x**2 - 4314],
eqmod (inp_poly168**2) (L0x7fffffffd868*x** 0+L0x7fffffffd878*x** 1)
      [10753, x**2 - 8928],
eqmod (inp_poly169**2) (L0x7fffffffd888*x** 0+L0x7fffffffd898*x** 1)
      [10753, x**2 - 1825],
eqmod (inp_poly16a**2) (L0x7fffffffd86a*x** 0+L0x7fffffffd87a*x** 1)
      [10753, x**2 - 9392],
eqmod (inp_poly16b**2) (L0x7fffffffd88a*x** 0+L0x7fffffffd89a*x** 1)
      [10753, x**2 - 1361],
eqmod (inp_poly16c**2) (L0x7fffffffd86c*x** 0+L0x7fffffffd87c*x** 1)
      [10753, x**2 - 5590],
eqmod (inp_poly16d**2) (L0x7fffffffd88c*x** 0+L0x7fffffffd89c*x** 1)
      [10753, x**2 - 5163],
eqmod (inp_poly16e**2) (L0x7fffffffd86e*x** 0+L0x7fffffffd87e*x** 1)
      [10753, x**2 - 3992],
eqmod (inp_poly16f**2) (L0x7fffffffd88e*x** 0+L0x7fffffffd89e*x** 1)
      [10753, x**2 - 6761],
eqmod (inp_poly170**2) (L0x7fffffffd8a0*x** 0+L0x7fffffffd8b0*x** 1)
      [10753, x**2 - 5934],
eqmod (inp_poly171**2) (L0x7fffffffd8c0*x** 0+L0x7fffffffd8d0*x** 1)
      [10753, x**2 - 4819],
eqmod (inp_poly172**2) (L0x7fffffffd8a2*x** 0+L0x7fffffffd8b2*x** 1)
      [10753, x**2 - 8208],
eqmod (inp_poly173**2) (L0x7fffffffd8c2*x** 0+L0x7fffffffd8d2*x** 1)
      [10753, x**2 - 2545],
eqmod (inp_poly174**2) (L0x7fffffffd8a4*x** 0+L0x7fffffffd8b4*x** 1)
      [10753, x**2 - 1533],
eqmod (inp_poly175**2) (L0x7fffffffd8c4*x** 0+L0x7fffffffd8d4*x** 1)
      [10753, x**2 - 9220],
eqmod (inp_poly176**2) (L0x7fffffffd8a6*x** 0+L0x7fffffffd8b6*x** 1)
      [10753, x**2 - 283],
eqmod (inp_poly177**2) (L0x7fffffffd8c6*x** 0+L0x7fffffffd8d6*x** 1)
      [10753, x**2 - 10470],
eqmod (inp_poly178**2) (L0x7fffffffd8a8*x** 0+L0x7fffffffd8b8*x** 1)
      [10753, x**2 - 1538],
eqmod (inp_poly179**2) (L0x7fffffffd8c8*x** 0+L0x7fffffffd8d8*x** 1)
      [10753, x**2 - 9215],
eqmod (inp_poly17a**2) (L0x7fffffffd8aa*x** 0+L0x7fffffffd8ba*x** 1)
      [10753, x**2 - 10097],
eqmod (inp_poly17b**2) (L0x7fffffffd8ca*x** 0+L0x7fffffffd8da*x** 1)
      [10753, x**2 - 656],
eqmod (inp_poly17c**2) (L0x7fffffffd8ac*x** 0+L0x7fffffffd8bc*x** 1)
      [10753, x**2 - 9813],
eqmod (inp_poly17d**2) (L0x7fffffffd8cc*x** 0+L0x7fffffffd8dc*x** 1)
      [10753, x**2 - 940],
eqmod (inp_poly17e**2) (L0x7fffffffd8ae*x** 0+L0x7fffffffd8be*x** 1)
      [10753, x**2 - 4484],
eqmod (inp_poly17f**2) (L0x7fffffffd8ce*x** 0+L0x7fffffffd8de*x** 1)
      [10753, x**2 - 6269]
,
eqmod (inp_poly180**2) (L0x7fffffffd8e0*x** 0+L0x7fffffffd8f0*x** 1)
      [10753, x**2 - 1000],
eqmod (inp_poly181**2) (L0x7fffffffd900*x** 0+L0x7fffffffd910*x** 1)
      [10753, x**2 - 9753],
eqmod (inp_poly182**2) (L0x7fffffffd8e2*x** 0+L0x7fffffffd8f2*x** 1)
      [10753, x**2 - 5754],
eqmod (inp_poly183**2) (L0x7fffffffd902*x** 0+L0x7fffffffd912*x** 1)
      [10753, x**2 - 4999],
eqmod (inp_poly184**2) (L0x7fffffffd8e4*x** 0+L0x7fffffffd8f4*x** 1)
      [10753, x**2 - 9163],
eqmod (inp_poly185**2) (L0x7fffffffd904*x** 0+L0x7fffffffd914*x** 1)
      [10753, x**2 - 1590],
eqmod (inp_poly186**2) (L0x7fffffffd8e6*x** 0+L0x7fffffffd8f6*x** 1)
      [10753, x**2 - 8271],
eqmod (inp_poly187**2) (L0x7fffffffd906*x** 0+L0x7fffffffd916*x** 1)
      [10753, x**2 - 2482],
eqmod (inp_poly188**2) (L0x7fffffffd8e8*x** 0+L0x7fffffffd8f8*x** 1)
      [10753, x**2 - 10715],
eqmod (inp_poly189**2) (L0x7fffffffd908*x** 0+L0x7fffffffd918*x** 1)
      [10753, x**2 - 38],
eqmod (inp_poly18a**2) (L0x7fffffffd8ea*x** 0+L0x7fffffffd8fa*x** 1)
      [10753, x**2 - 9287],
eqmod (inp_poly18b**2) (L0x7fffffffd90a*x** 0+L0x7fffffffd91a*x** 1)
      [10753, x**2 - 1466],
eqmod (inp_poly18c**2) (L0x7fffffffd8ec*x** 0+L0x7fffffffd8fc*x** 1)
      [10753, x**2 - 9308],
eqmod (inp_poly18d**2) (L0x7fffffffd90c*x** 0+L0x7fffffffd91c*x** 1)
      [10753, x**2 - 1445],
eqmod (inp_poly18e**2) (L0x7fffffffd8ee*x** 0+L0x7fffffffd8fe*x** 1)
      [10753, x**2 - 2546],
eqmod (inp_poly18f**2) (L0x7fffffffd90e*x** 0+L0x7fffffffd91e*x** 1)
      [10753, x**2 - 8207],
eqmod (inp_poly190**2) (L0x7fffffffd920*x** 0+L0x7fffffffd930*x** 1)
      [10753, x**2 - 3429],
eqmod (inp_poly191**2) (L0x7fffffffd940*x** 0+L0x7fffffffd950*x** 1)
      [10753, x**2 - 7324],
eqmod (inp_poly192**2) (L0x7fffffffd922*x** 0+L0x7fffffffd932*x** 1)
      [10753, x**2 - 5515],
eqmod (inp_poly193**2) (L0x7fffffffd942*x** 0+L0x7fffffffd952*x** 1)
      [10753, x**2 - 5238],
eqmod (inp_poly194**2) (L0x7fffffffd924*x** 0+L0x7fffffffd934*x** 1)
      [10753, x**2 - 3903],
eqmod (inp_poly195**2) (L0x7fffffffd944*x** 0+L0x7fffffffd954*x** 1)
      [10753, x**2 - 6850],
eqmod (inp_poly196**2) (L0x7fffffffd926*x** 0+L0x7fffffffd936*x** 1)
      [10753, x**2 - 6823],
eqmod (inp_poly197**2) (L0x7fffffffd946*x** 0+L0x7fffffffd956*x** 1)
      [10753, x**2 - 3930],
eqmod (inp_poly198**2) (L0x7fffffffd928*x** 0+L0x7fffffffd938*x** 1)
      [10753, x**2 - 9913],
eqmod (inp_poly199**2) (L0x7fffffffd948*x** 0+L0x7fffffffd958*x** 1)
      [10753, x**2 - 840],
eqmod (inp_poly19a**2) (L0x7fffffffd92a*x** 0+L0x7fffffffd93a*x** 1)
      [10753, x**2 - 7210],
eqmod (inp_poly19b**2) (L0x7fffffffd94a*x** 0+L0x7fffffffd95a*x** 1)
      [10753, x**2 - 3543],
eqmod (inp_poly19c**2) (L0x7fffffffd92c*x** 0+L0x7fffffffd93c*x** 1)
      [10753, x**2 - 9938],
eqmod (inp_poly19d**2) (L0x7fffffffd94c*x** 0+L0x7fffffffd95c*x** 1)
      [10753, x**2 - 815],
eqmod (inp_poly19e**2) (L0x7fffffffd92e*x** 0+L0x7fffffffd93e*x** 1)
      [10753, x**2 - 2515],
eqmod (inp_poly19f**2) (L0x7fffffffd94e*x** 0+L0x7fffffffd95e*x** 1)
      [10753, x**2 - 8238],
eqmod (inp_poly1a0**2) (L0x7fffffffd960*x** 0+L0x7fffffffd970*x** 1)
      [10753, x**2 - 3310],
eqmod (inp_poly1a1**2) (L0x7fffffffd980*x** 0+L0x7fffffffd990*x** 1)
      [10753, x**2 - 7443],
eqmod (inp_poly1a2**2) (L0x7fffffffd962*x** 0+L0x7fffffffd972*x** 1)
      [10753, x**2 - 2056],
eqmod (inp_poly1a3**2) (L0x7fffffffd982*x** 0+L0x7fffffffd992*x** 1)
      [10753, x**2 - 8697],
eqmod (inp_poly1a4**2) (L0x7fffffffd964*x** 0+L0x7fffffffd974*x** 1)
      [10753, x**2 - 8716],
eqmod (inp_poly1a5**2) (L0x7fffffffd984*x** 0+L0x7fffffffd994*x** 1)
      [10753, x**2 - 2037],
eqmod (inp_poly1a6**2) (L0x7fffffffd966*x** 0+L0x7fffffffd976*x** 1)
      [10753, x**2 - 4043],
eqmod (inp_poly1a7**2) (L0x7fffffffd986*x** 0+L0x7fffffffd996*x** 1)
      [10753, x**2 - 6710],
eqmod (inp_poly1a8**2) (L0x7fffffffd968*x** 0+L0x7fffffffd978*x** 1)
      [10753, x**2 - 2670],
eqmod (inp_poly1a9**2) (L0x7fffffffd988*x** 0+L0x7fffffffd998*x** 1)
      [10753, x**2 - 8083],
eqmod (inp_poly1aa**2) (L0x7fffffffd96a*x** 0+L0x7fffffffd97a*x** 1)
      [10753, x**2 - 3965],
eqmod (inp_poly1ab**2) (L0x7fffffffd98a*x** 0+L0x7fffffffd99a*x** 1)
      [10753, x**2 - 6788],
eqmod (inp_poly1ac**2) (L0x7fffffffd96c*x** 0+L0x7fffffffd97c*x** 1)
      [10753, x**2 - 7583],
eqmod (inp_poly1ad**2) (L0x7fffffffd98c*x** 0+L0x7fffffffd99c*x** 1)
      [10753, x**2 - 3170],
eqmod (inp_poly1ae**2) (L0x7fffffffd96e*x** 0+L0x7fffffffd97e*x** 1)
      [10753, x**2 - 3911],
eqmod (inp_poly1af**2) (L0x7fffffffd98e*x** 0+L0x7fffffffd99e*x** 1)
      [10753, x**2 - 6842],
eqmod (inp_poly1b0**2) (L0x7fffffffd9a0*x** 0+L0x7fffffffd9b0*x** 1)
      [10753, x**2 - 2425],
eqmod (inp_poly1b1**2) (L0x7fffffffd9c0*x** 0+L0x7fffffffd9d0*x** 1)
      [10753, x**2 - 8328],
eqmod (inp_poly1b2**2) (L0x7fffffffd9a2*x** 0+L0x7fffffffd9b2*x** 1)
      [10753, x**2 - 6964],
eqmod (inp_poly1b3**2) (L0x7fffffffd9c2*x** 0+L0x7fffffffd9d2*x** 1)
      [10753, x**2 - 3789],
eqmod (inp_poly1b4**2) (L0x7fffffffd9a4*x** 0+L0x7fffffffd9b4*x** 1)
      [10753, x**2 - 4209],
eqmod (inp_poly1b5**2) (L0x7fffffffd9c4*x** 0+L0x7fffffffd9d4*x** 1)
      [10753, x**2 - 6544],
eqmod (inp_poly1b6**2) (L0x7fffffffd9a6*x** 0+L0x7fffffffd9b6*x** 1)
      [10753, x**2 - 9573],
eqmod (inp_poly1b7**2) (L0x7fffffffd9c6*x** 0+L0x7fffffffd9d6*x** 1)
      [10753, x**2 - 1180],
eqmod (inp_poly1b8**2) (L0x7fffffffd9a8*x** 0+L0x7fffffffd9b8*x** 1)
      [10753, x**2 - 5822],
eqmod (inp_poly1b9**2) (L0x7fffffffd9c8*x** 0+L0x7fffffffd9d8*x** 1)
      [10753, x**2 - 4931],
eqmod (inp_poly1ba**2) (L0x7fffffffd9aa*x** 0+L0x7fffffffd9ba*x** 1)
      [10753, x**2 - 5585],
eqmod (inp_poly1bb**2) (L0x7fffffffd9ca*x** 0+L0x7fffffffd9da*x** 1)
      [10753, x**2 - 5168],
eqmod (inp_poly1bc**2) (L0x7fffffffd9ac*x** 0+L0x7fffffffd9bc*x** 1)
      [10753, x**2 - 8593],
eqmod (inp_poly1bd**2) (L0x7fffffffd9cc*x** 0+L0x7fffffffd9dc*x** 1)
      [10753, x**2 - 2160],
eqmod (inp_poly1be**2) (L0x7fffffffd9ae*x** 0+L0x7fffffffd9be*x** 1)
      [10753, x**2 - 7787],
eqmod (inp_poly1bf**2) (L0x7fffffffd9ce*x** 0+L0x7fffffffd9de*x** 1)
      [10753, x**2 - 2966]
,
eqmod (inp_poly1c0**2) (L0x7fffffffd9e0*x** 0+L0x7fffffffd9f0*x** 1)
      [10753, x**2 - 10463],
eqmod (inp_poly1c1**2) (L0x7fffffffda00*x** 0+L0x7fffffffda10*x** 1)
      [10753, x**2 - 290],
eqmod (inp_poly1c2**2) (L0x7fffffffd9e2*x** 0+L0x7fffffffd9f2*x** 1)
      [10753, x**2 - 697],
eqmod (inp_poly1c3**2) (L0x7fffffffda02*x** 0+L0x7fffffffda12*x** 1)
      [10753, x**2 - 10056],
eqmod (inp_poly1c4**2) (L0x7fffffffd9e4*x** 0+L0x7fffffffd9f4*x** 1)
      [10753, x**2 - 3687],
eqmod (inp_poly1c5**2) (L0x7fffffffda04*x** 0+L0x7fffffffda14*x** 1)
      [10753, x**2 - 7066],
eqmod (inp_poly1c6**2) (L0x7fffffffd9e6*x** 0+L0x7fffffffd9f6*x** 1)
      [10753, x**2 - 8677],
eqmod (inp_poly1c7**2) (L0x7fffffffda06*x** 0+L0x7fffffffda16*x** 1)
      [10753, x**2 - 2076],
eqmod (inp_poly1c8**2) (L0x7fffffffd9e8*x** 0+L0x7fffffffd9f8*x** 1)
      [10753, x**2 - 7108],
eqmod (inp_poly1c9**2) (L0x7fffffffda08*x** 0+L0x7fffffffda18*x** 1)
      [10753, x**2 - 3645],
eqmod (inp_poly1ca**2) (L0x7fffffffd9ea*x** 0+L0x7fffffffd9fa*x** 1)
      [10753, x**2 - 7092],
eqmod (inp_poly1cb**2) (L0x7fffffffda0a*x** 0+L0x7fffffffda1a*x** 1)
      [10753, x**2 - 3661],
eqmod (inp_poly1cc**2) (L0x7fffffffd9ec*x** 0+L0x7fffffffd9fc*x** 1)
      [10753, x**2 - 2032],
eqmod (inp_poly1cd**2) (L0x7fffffffda0c*x** 0+L0x7fffffffda1c*x** 1)
      [10753, x**2 - 8721],
eqmod (inp_poly1ce**2) (L0x7fffffffd9ee*x** 0+L0x7fffffffd9fe*x** 1)
      [10753, x**2 - 7649],
eqmod (inp_poly1cf**2) (L0x7fffffffda0e*x** 0+L0x7fffffffda1e*x** 1)
      [10753, x**2 - 3104],
eqmod (inp_poly1d0**2) (L0x7fffffffda20*x** 0+L0x7fffffffda30*x** 1)
      [10753, x**2 - 9436],
eqmod (inp_poly1d1**2) (L0x7fffffffda40*x** 0+L0x7fffffffda50*x** 1)
      [10753, x**2 - 1317],
eqmod (inp_poly1d2**2) (L0x7fffffffda22*x** 0+L0x7fffffffda32*x** 1)
      [10753, x**2 - 8616],
eqmod (inp_poly1d3**2) (L0x7fffffffda42*x** 0+L0x7fffffffda52*x** 1)
      [10753, x**2 - 2137],
eqmod (inp_poly1d4**2) (L0x7fffffffda24*x** 0+L0x7fffffffda34*x** 1)
      [10753, x**2 - 7363],
eqmod (inp_poly1d5**2) (L0x7fffffffda44*x** 0+L0x7fffffffda54*x** 1)
      [10753, x**2 - 3390],
eqmod (inp_poly1d6**2) (L0x7fffffffda26*x** 0+L0x7fffffffda36*x** 1)
      [10753, x**2 - 2215],
eqmod (inp_poly1d7**2) (L0x7fffffffda46*x** 0+L0x7fffffffda56*x** 1)
      [10753, x**2 - 8538],
eqmod (inp_poly1d8**2) (L0x7fffffffda28*x** 0+L0x7fffffffda38*x** 1)
      [10753, x**2 - 8846],
eqmod (inp_poly1d9**2) (L0x7fffffffda48*x** 0+L0x7fffffffda58*x** 1)
      [10753, x**2 - 1907],
eqmod (inp_poly1da**2) (L0x7fffffffda2a*x** 0+L0x7fffffffda3a*x** 1)
      [10753, x**2 - 1135],
eqmod (inp_poly1db**2) (L0x7fffffffda4a*x** 0+L0x7fffffffda5a*x** 1)
      [10753, x**2 - 9618],
eqmod (inp_poly1dc**2) (L0x7fffffffda2c*x** 0+L0x7fffffffda3c*x** 1)
      [10753, x**2 - 774],
eqmod (inp_poly1dd**2) (L0x7fffffffda4c*x** 0+L0x7fffffffda5c*x** 1)
      [10753, x**2 - 9979],
eqmod (inp_poly1de**2) (L0x7fffffffda2e*x** 0+L0x7fffffffda3e*x** 1)
      [10753, x**2 - 9486],
eqmod (inp_poly1df**2) (L0x7fffffffda4e*x** 0+L0x7fffffffda5e*x** 1)
      [10753, x**2 - 1267],
eqmod (inp_poly1e0**2) (L0x7fffffffda60*x** 0+L0x7fffffffda70*x** 1)
      [10753, x**2 - 2266],
eqmod (inp_poly1e1**2) (L0x7fffffffda80*x** 0+L0x7fffffffda90*x** 1)
      [10753, x**2 - 8487],
eqmod (inp_poly1e2**2) (L0x7fffffffda62*x** 0+L0x7fffffffda72*x** 1)
      [10753, x**2 - 264],
eqmod (inp_poly1e3**2) (L0x7fffffffda82*x** 0+L0x7fffffffda92*x** 1)
      [10753, x**2 - 10489],
eqmod (inp_poly1e4**2) (L0x7fffffffda64*x** 0+L0x7fffffffda74*x** 1)
      [10753, x**2 - 6935],
eqmod (inp_poly1e5**2) (L0x7fffffffda84*x** 0+L0x7fffffffda94*x** 1)
      [10753, x**2 - 3818],
eqmod (inp_poly1e6**2) (L0x7fffffffda66*x** 0+L0x7fffffffda76*x** 1)
      [10753, x**2 - 9473],
eqmod (inp_poly1e7**2) (L0x7fffffffda86*x** 0+L0x7fffffffda96*x** 1)
      [10753, x**2 - 1280],
eqmod (inp_poly1e8**2) (L0x7fffffffda68*x** 0+L0x7fffffffda78*x** 1)
      [10753, x**2 - 301],
eqmod (inp_poly1e9**2) (L0x7fffffffda88*x** 0+L0x7fffffffda98*x** 1)
      [10753, x**2 - 10452],
eqmod (inp_poly1ea**2) (L0x7fffffffda6a*x** 0+L0x7fffffffda7a*x** 1)
      [10753, x**2 - 3689],
eqmod (inp_poly1eb**2) (L0x7fffffffda8a*x** 0+L0x7fffffffda9a*x** 1)
      [10753, x**2 - 7064],
eqmod (inp_poly1ec**2) (L0x7fffffffda6c*x** 0+L0x7fffffffda7c*x** 1)
      [10753, x**2 - 10597],
eqmod (inp_poly1ed**2) (L0x7fffffffda8c*x** 0+L0x7fffffffda9c*x** 1)
      [10753, x**2 - 156],
eqmod (inp_poly1ee**2) (L0x7fffffffda6e*x** 0+L0x7fffffffda7e*x** 1)
      [10753, x**2 - 1339],
eqmod (inp_poly1ef**2) (L0x7fffffffda8e*x** 0+L0x7fffffffda9e*x** 1)
      [10753, x**2 - 9414],
eqmod (inp_poly1f0**2) (L0x7fffffffdaa0*x** 0+L0x7fffffffdab0*x** 1)
      [10753, x**2 - 1985],
eqmod (inp_poly1f1**2) (L0x7fffffffdac0*x** 0+L0x7fffffffdad0*x** 1)
      [10753, x**2 - 8768],
eqmod (inp_poly1f2**2) (L0x7fffffffdaa2*x** 0+L0x7fffffffdab2*x** 1)
      [10753, x**2 - 3572],
eqmod (inp_poly1f3**2) (L0x7fffffffdac2*x** 0+L0x7fffffffdad2*x** 1)
      [10753, x**2 - 7181],
eqmod (inp_poly1f4**2) (L0x7fffffffdaa4*x** 0+L0x7fffffffdab4*x** 1)
      [10753, x**2 - 2758],
eqmod (inp_poly1f5**2) (L0x7fffffffdac4*x** 0+L0x7fffffffdad4*x** 1)
      [10753, x**2 - 7995],
eqmod (inp_poly1f6**2) (L0x7fffffffdaa6*x** 0+L0x7fffffffdab6*x** 1)
      [10753, x**2 - 6794],
eqmod (inp_poly1f7**2) (L0x7fffffffdac6*x** 0+L0x7fffffffdad6*x** 1)
      [10753, x**2 - 3959],
eqmod (inp_poly1f8**2) (L0x7fffffffdaa8*x** 0+L0x7fffffffdab8*x** 1)
      [10753, x**2 - 3258],
eqmod (inp_poly1f9**2) (L0x7fffffffdac8*x** 0+L0x7fffffffdad8*x** 1)
      [10753, x**2 - 7495],
eqmod (inp_poly1fa**2) (L0x7fffffffdaaa*x** 0+L0x7fffffffdaba*x** 1)
      [10753, x**2 - 9671],
eqmod (inp_poly1fb**2) (L0x7fffffffdaca*x** 0+L0x7fffffffdada*x** 1)
      [10753, x**2 - 1082],
eqmod (inp_poly1fc**2) (L0x7fffffffdaac*x** 0+L0x7fffffffdabc*x** 1)
      [10753, x**2 - 2777],
eqmod (inp_poly1fd**2) (L0x7fffffffdacc*x** 0+L0x7fffffffdadc*x** 1)
      [10753, x**2 - 7976],
eqmod (inp_poly1fe**2) (L0x7fffffffdaae*x** 0+L0x7fffffffdabe*x** 1)
      [10753, x**2 - 7527],
eqmod (inp_poly1ff**2) (L0x7fffffffdace*x** 0+L0x7fffffffdade*x** 1)
      [10753, x**2 - 3226]
] && and [
(-5535)@16<=s L0x7fffffffd2e0,L0x7fffffffd2e0<=s5535@16,
(-5535)@16<=s L0x7fffffffd2e2,L0x7fffffffd2e2<=s5535@16,
(-5535)@16<=s L0x7fffffffd2e4,L0x7fffffffd2e4<=s5535@16,
(-5535)@16<=s L0x7fffffffd2e6,L0x7fffffffd2e6<=s5535@16,
(-5535)@16<=s L0x7fffffffd2e8,L0x7fffffffd2e8<=s5535@16,
(-5535)@16<=s L0x7fffffffd2ea,L0x7fffffffd2ea<=s5535@16,
(-5535)@16<=s L0x7fffffffd2ec,L0x7fffffffd2ec<=s5535@16,
(-5535)@16<=s L0x7fffffffd2ee,L0x7fffffffd2ee<=s5535@16,
(-5535)@16<=s L0x7fffffffd2f0,L0x7fffffffd2f0<=s5535@16,
(-5614)@16<=s L0x7fffffffd2f2,L0x7fffffffd2f2<=s5614@16,
(-5535)@16<=s L0x7fffffffd2f4,L0x7fffffffd2f4<=s5535@16,
(-5614)@16<=s L0x7fffffffd2f6,L0x7fffffffd2f6<=s5614@16,
(-5535)@16<=s L0x7fffffffd2f8,L0x7fffffffd2f8<=s5535@16,
(-5614)@16<=s L0x7fffffffd2fa,L0x7fffffffd2fa<=s5614@16,
(-5535)@16<=s L0x7fffffffd2fc,L0x7fffffffd2fc<=s5535@16,
(-5614)@16<=s L0x7fffffffd2fe,L0x7fffffffd2fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd300,L0x7fffffffd300<=s5614@16,
(-5614)@16<=s L0x7fffffffd302,L0x7fffffffd302<=s5614@16,
(-5614)@16<=s L0x7fffffffd304,L0x7fffffffd304<=s5614@16,
(-5614)@16<=s L0x7fffffffd306,L0x7fffffffd306<=s5614@16,
(-5614)@16<=s L0x7fffffffd308,L0x7fffffffd308<=s5614@16,
(-5614)@16<=s L0x7fffffffd30a,L0x7fffffffd30a<=s5614@16,
(-5614)@16<=s L0x7fffffffd30c,L0x7fffffffd30c<=s5614@16,
(-5614)@16<=s L0x7fffffffd30e,L0x7fffffffd30e<=s5614@16,
(-5535)@16<=s L0x7fffffffd310,L0x7fffffffd310<=s5535@16,
(-5614)@16<=s L0x7fffffffd312,L0x7fffffffd312<=s5614@16,
(-5535)@16<=s L0x7fffffffd314,L0x7fffffffd314<=s5535@16,
(-5614)@16<=s L0x7fffffffd316,L0x7fffffffd316<=s5614@16,
(-5535)@16<=s L0x7fffffffd318,L0x7fffffffd318<=s5535@16,
(-5614)@16<=s L0x7fffffffd31a,L0x7fffffffd31a<=s5614@16,
(-5535)@16<=s L0x7fffffffd31c,L0x7fffffffd31c<=s5535@16,
(-5614)@16<=s L0x7fffffffd31e,L0x7fffffffd31e<=s5614@16,
(-5614)@16<=s L0x7fffffffd320,L0x7fffffffd320<=s5614@16,
(-5614)@16<=s L0x7fffffffd322,L0x7fffffffd322<=s5614@16,
(-5614)@16<=s L0x7fffffffd324,L0x7fffffffd324<=s5614@16,
(-5614)@16<=s L0x7fffffffd326,L0x7fffffffd326<=s5614@16,
(-5614)@16<=s L0x7fffffffd328,L0x7fffffffd328<=s5614@16,
(-5614)@16<=s L0x7fffffffd32a,L0x7fffffffd32a<=s5614@16,
(-5614)@16<=s L0x7fffffffd32c,L0x7fffffffd32c<=s5614@16,
(-5614)@16<=s L0x7fffffffd32e,L0x7fffffffd32e<=s5614@16,
(-5614)@16<=s L0x7fffffffd330,L0x7fffffffd330<=s5614@16,
(-5614)@16<=s L0x7fffffffd332,L0x7fffffffd332<=s5614@16,
(-5614)@16<=s L0x7fffffffd334,L0x7fffffffd334<=s5614@16,
(-5614)@16<=s L0x7fffffffd336,L0x7fffffffd336<=s5614@16,
(-5614)@16<=s L0x7fffffffd338,L0x7fffffffd338<=s5614@16,
(-5614)@16<=s L0x7fffffffd33a,L0x7fffffffd33a<=s5614@16,
(-5614)@16<=s L0x7fffffffd33c,L0x7fffffffd33c<=s5614@16,
(-5614)@16<=s L0x7fffffffd33e,L0x7fffffffd33e<=s5614@16,
(-5614)@16<=s L0x7fffffffd340,L0x7fffffffd340<=s5614@16,
(-5614)@16<=s L0x7fffffffd342,L0x7fffffffd342<=s5614@16,
(-5614)@16<=s L0x7fffffffd344,L0x7fffffffd344<=s5614@16,
(-5614)@16<=s L0x7fffffffd346,L0x7fffffffd346<=s5614@16,
(-5614)@16<=s L0x7fffffffd348,L0x7fffffffd348<=s5614@16,
(-5614)@16<=s L0x7fffffffd34a,L0x7fffffffd34a<=s5614@16,
(-5614)@16<=s L0x7fffffffd34c,L0x7fffffffd34c<=s5614@16,
(-5614)@16<=s L0x7fffffffd34e,L0x7fffffffd34e<=s5614@16,
(-5614)@16<=s L0x7fffffffd350,L0x7fffffffd350<=s5614@16,
(-5614)@16<=s L0x7fffffffd352,L0x7fffffffd352<=s5614@16,
(-5614)@16<=s L0x7fffffffd354,L0x7fffffffd354<=s5614@16,
(-5614)@16<=s L0x7fffffffd356,L0x7fffffffd356<=s5614@16,
(-5614)@16<=s L0x7fffffffd358,L0x7fffffffd358<=s5614@16,
(-5614)@16<=s L0x7fffffffd35a,L0x7fffffffd35a<=s5614@16,
(-5614)@16<=s L0x7fffffffd35c,L0x7fffffffd35c<=s5614@16,
(-5614)@16<=s L0x7fffffffd35e,L0x7fffffffd35e<=s5614@16,
(-5614)@16<=s L0x7fffffffd360,L0x7fffffffd360<=s5614@16,
(-5614)@16<=s L0x7fffffffd362,L0x7fffffffd362<=s5614@16,
(-5614)@16<=s L0x7fffffffd364,L0x7fffffffd364<=s5614@16,
(-5614)@16<=s L0x7fffffffd366,L0x7fffffffd366<=s5614@16,
(-5614)@16<=s L0x7fffffffd368,L0x7fffffffd368<=s5614@16,
(-5614)@16<=s L0x7fffffffd36a,L0x7fffffffd36a<=s5614@16,
(-5614)@16<=s L0x7fffffffd36c,L0x7fffffffd36c<=s5614@16,
(-5614)@16<=s L0x7fffffffd36e,L0x7fffffffd36e<=s5614@16,
(-5614)@16<=s L0x7fffffffd370,L0x7fffffffd370<=s5614@16,
(-5614)@16<=s L0x7fffffffd372,L0x7fffffffd372<=s5614@16,
(-5614)@16<=s L0x7fffffffd374,L0x7fffffffd374<=s5614@16,
(-5614)@16<=s L0x7fffffffd376,L0x7fffffffd376<=s5614@16,
(-5614)@16<=s L0x7fffffffd378,L0x7fffffffd378<=s5614@16,
(-5614)@16<=s L0x7fffffffd37a,L0x7fffffffd37a<=s5614@16,
(-5614)@16<=s L0x7fffffffd37c,L0x7fffffffd37c<=s5614@16,
(-5614)@16<=s L0x7fffffffd37e,L0x7fffffffd37e<=s5614@16,
(-5614)@16<=s L0x7fffffffd380,L0x7fffffffd380<=s5614@16,
(-5614)@16<=s L0x7fffffffd382,L0x7fffffffd382<=s5614@16,
(-5614)@16<=s L0x7fffffffd384,L0x7fffffffd384<=s5614@16,
(-5614)@16<=s L0x7fffffffd386,L0x7fffffffd386<=s5614@16,
(-5614)@16<=s L0x7fffffffd388,L0x7fffffffd388<=s5614@16,
(-5614)@16<=s L0x7fffffffd38a,L0x7fffffffd38a<=s5614@16,
(-5614)@16<=s L0x7fffffffd38c,L0x7fffffffd38c<=s5614@16,
(-5614)@16<=s L0x7fffffffd38e,L0x7fffffffd38e<=s5614@16,
(-5614)@16<=s L0x7fffffffd390,L0x7fffffffd390<=s5614@16,
(-5614)@16<=s L0x7fffffffd392,L0x7fffffffd392<=s5614@16,
(-5614)@16<=s L0x7fffffffd394,L0x7fffffffd394<=s5614@16,
(-5614)@16<=s L0x7fffffffd396,L0x7fffffffd396<=s5614@16,
(-5614)@16<=s L0x7fffffffd398,L0x7fffffffd398<=s5614@16,
(-5614)@16<=s L0x7fffffffd39a,L0x7fffffffd39a<=s5614@16,
(-5614)@16<=s L0x7fffffffd39c,L0x7fffffffd39c<=s5614@16,
(-5614)@16<=s L0x7fffffffd39e,L0x7fffffffd39e<=s5614@16,
(-5614)@16<=s L0x7fffffffd3a0,L0x7fffffffd3a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3a2,L0x7fffffffd3a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3a4,L0x7fffffffd3a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3a6,L0x7fffffffd3a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3a8,L0x7fffffffd3a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3aa,L0x7fffffffd3aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ac,L0x7fffffffd3ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ae,L0x7fffffffd3ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd3b0,L0x7fffffffd3b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3b2,L0x7fffffffd3b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3b4,L0x7fffffffd3b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3b6,L0x7fffffffd3b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3b8,L0x7fffffffd3b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ba,L0x7fffffffd3ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd3bc,L0x7fffffffd3bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd3be,L0x7fffffffd3be<=s5614@16,
(-5614)@16<=s L0x7fffffffd3c0,L0x7fffffffd3c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3c2,L0x7fffffffd3c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3c4,L0x7fffffffd3c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3c6,L0x7fffffffd3c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3c8,L0x7fffffffd3c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ca,L0x7fffffffd3ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd3cc,L0x7fffffffd3cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ce,L0x7fffffffd3ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd3d0,L0x7fffffffd3d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3d2,L0x7fffffffd3d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3d4,L0x7fffffffd3d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3d6,L0x7fffffffd3d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3d8,L0x7fffffffd3d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3da,L0x7fffffffd3da<=s5614@16,
(-5614)@16<=s L0x7fffffffd3dc,L0x7fffffffd3dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd3de,L0x7fffffffd3de<=s5614@16,
(-5614)@16<=s L0x7fffffffd3e0,L0x7fffffffd3e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3e2,L0x7fffffffd3e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3e4,L0x7fffffffd3e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3e6,L0x7fffffffd3e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3e8,L0x7fffffffd3e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ea,L0x7fffffffd3ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ec,L0x7fffffffd3ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd3ee,L0x7fffffffd3ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd3f0,L0x7fffffffd3f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd3f2,L0x7fffffffd3f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd3f4,L0x7fffffffd3f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd3f6,L0x7fffffffd3f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd3f8,L0x7fffffffd3f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd3fa,L0x7fffffffd3fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd3fc,L0x7fffffffd3fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd3fe,L0x7fffffffd3fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd400,L0x7fffffffd400<=s5614@16,
(-5614)@16<=s L0x7fffffffd402,L0x7fffffffd402<=s5614@16,
(-5614)@16<=s L0x7fffffffd404,L0x7fffffffd404<=s5614@16,
(-5614)@16<=s L0x7fffffffd406,L0x7fffffffd406<=s5614@16,
(-5614)@16<=s L0x7fffffffd408,L0x7fffffffd408<=s5614@16,
(-5614)@16<=s L0x7fffffffd40a,L0x7fffffffd40a<=s5614@16,
(-5614)@16<=s L0x7fffffffd40c,L0x7fffffffd40c<=s5614@16,
(-5614)@16<=s L0x7fffffffd40e,L0x7fffffffd40e<=s5614@16,
(-5614)@16<=s L0x7fffffffd410,L0x7fffffffd410<=s5614@16,
(-5614)@16<=s L0x7fffffffd412,L0x7fffffffd412<=s5614@16,
(-5614)@16<=s L0x7fffffffd414,L0x7fffffffd414<=s5614@16,
(-5614)@16<=s L0x7fffffffd416,L0x7fffffffd416<=s5614@16,
(-5614)@16<=s L0x7fffffffd418,L0x7fffffffd418<=s5614@16,
(-5614)@16<=s L0x7fffffffd41a,L0x7fffffffd41a<=s5614@16,
(-5614)@16<=s L0x7fffffffd41c,L0x7fffffffd41c<=s5614@16,
(-5614)@16<=s L0x7fffffffd41e,L0x7fffffffd41e<=s5614@16,
(-5614)@16<=s L0x7fffffffd420,L0x7fffffffd420<=s5614@16,
(-5614)@16<=s L0x7fffffffd422,L0x7fffffffd422<=s5614@16,
(-5614)@16<=s L0x7fffffffd424,L0x7fffffffd424<=s5614@16,
(-5614)@16<=s L0x7fffffffd426,L0x7fffffffd426<=s5614@16,
(-5614)@16<=s L0x7fffffffd428,L0x7fffffffd428<=s5614@16,
(-5614)@16<=s L0x7fffffffd42a,L0x7fffffffd42a<=s5614@16,
(-5614)@16<=s L0x7fffffffd42c,L0x7fffffffd42c<=s5614@16,
(-5614)@16<=s L0x7fffffffd42e,L0x7fffffffd42e<=s5614@16,
(-5614)@16<=s L0x7fffffffd430,L0x7fffffffd430<=s5614@16,
(-5614)@16<=s L0x7fffffffd432,L0x7fffffffd432<=s5614@16,
(-5614)@16<=s L0x7fffffffd434,L0x7fffffffd434<=s5614@16,
(-5614)@16<=s L0x7fffffffd436,L0x7fffffffd436<=s5614@16,
(-5614)@16<=s L0x7fffffffd438,L0x7fffffffd438<=s5614@16,
(-5614)@16<=s L0x7fffffffd43a,L0x7fffffffd43a<=s5614@16,
(-5614)@16<=s L0x7fffffffd43c,L0x7fffffffd43c<=s5614@16,
(-5614)@16<=s L0x7fffffffd43e,L0x7fffffffd43e<=s5614@16,
(-5614)@16<=s L0x7fffffffd440,L0x7fffffffd440<=s5614@16,
(-5614)@16<=s L0x7fffffffd442,L0x7fffffffd442<=s5614@16,
(-5614)@16<=s L0x7fffffffd444,L0x7fffffffd444<=s5614@16,
(-5614)@16<=s L0x7fffffffd446,L0x7fffffffd446<=s5614@16,
(-5614)@16<=s L0x7fffffffd448,L0x7fffffffd448<=s5614@16,
(-5614)@16<=s L0x7fffffffd44a,L0x7fffffffd44a<=s5614@16,
(-5614)@16<=s L0x7fffffffd44c,L0x7fffffffd44c<=s5614@16,
(-5614)@16<=s L0x7fffffffd44e,L0x7fffffffd44e<=s5614@16,
(-5614)@16<=s L0x7fffffffd450,L0x7fffffffd450<=s5614@16,
(-5614)@16<=s L0x7fffffffd452,L0x7fffffffd452<=s5614@16,
(-5614)@16<=s L0x7fffffffd454,L0x7fffffffd454<=s5614@16,
(-5614)@16<=s L0x7fffffffd456,L0x7fffffffd456<=s5614@16,
(-5614)@16<=s L0x7fffffffd458,L0x7fffffffd458<=s5614@16,
(-5614)@16<=s L0x7fffffffd45a,L0x7fffffffd45a<=s5614@16,
(-5614)@16<=s L0x7fffffffd45c,L0x7fffffffd45c<=s5614@16,
(-5614)@16<=s L0x7fffffffd45e,L0x7fffffffd45e<=s5614@16,
(-5614)@16<=s L0x7fffffffd460,L0x7fffffffd460<=s5614@16,
(-5614)@16<=s L0x7fffffffd462,L0x7fffffffd462<=s5614@16,
(-5614)@16<=s L0x7fffffffd464,L0x7fffffffd464<=s5614@16,
(-5614)@16<=s L0x7fffffffd466,L0x7fffffffd466<=s5614@16,
(-5614)@16<=s L0x7fffffffd468,L0x7fffffffd468<=s5614@16,
(-5614)@16<=s L0x7fffffffd46a,L0x7fffffffd46a<=s5614@16,
(-5614)@16<=s L0x7fffffffd46c,L0x7fffffffd46c<=s5614@16,
(-5614)@16<=s L0x7fffffffd46e,L0x7fffffffd46e<=s5614@16,
(-5614)@16<=s L0x7fffffffd470,L0x7fffffffd470<=s5614@16,
(-5614)@16<=s L0x7fffffffd472,L0x7fffffffd472<=s5614@16,
(-5614)@16<=s L0x7fffffffd474,L0x7fffffffd474<=s5614@16,
(-5614)@16<=s L0x7fffffffd476,L0x7fffffffd476<=s5614@16,
(-5614)@16<=s L0x7fffffffd478,L0x7fffffffd478<=s5614@16,
(-5614)@16<=s L0x7fffffffd47a,L0x7fffffffd47a<=s5614@16,
(-5614)@16<=s L0x7fffffffd47c,L0x7fffffffd47c<=s5614@16,
(-5614)@16<=s L0x7fffffffd47e,L0x7fffffffd47e<=s5614@16,
(-5614)@16<=s L0x7fffffffd480,L0x7fffffffd480<=s5614@16,
(-5614)@16<=s L0x7fffffffd482,L0x7fffffffd482<=s5614@16,
(-5614)@16<=s L0x7fffffffd484,L0x7fffffffd484<=s5614@16,
(-5614)@16<=s L0x7fffffffd486,L0x7fffffffd486<=s5614@16,
(-5614)@16<=s L0x7fffffffd488,L0x7fffffffd488<=s5614@16,
(-5614)@16<=s L0x7fffffffd48a,L0x7fffffffd48a<=s5614@16,
(-5614)@16<=s L0x7fffffffd48c,L0x7fffffffd48c<=s5614@16,
(-5614)@16<=s L0x7fffffffd48e,L0x7fffffffd48e<=s5614@16,
(-5614)@16<=s L0x7fffffffd490,L0x7fffffffd490<=s5614@16,
(-5614)@16<=s L0x7fffffffd492,L0x7fffffffd492<=s5614@16,
(-5614)@16<=s L0x7fffffffd494,L0x7fffffffd494<=s5614@16,
(-5614)@16<=s L0x7fffffffd496,L0x7fffffffd496<=s5614@16,
(-5614)@16<=s L0x7fffffffd498,L0x7fffffffd498<=s5614@16,
(-5614)@16<=s L0x7fffffffd49a,L0x7fffffffd49a<=s5614@16,
(-5614)@16<=s L0x7fffffffd49c,L0x7fffffffd49c<=s5614@16,
(-5614)@16<=s L0x7fffffffd49e,L0x7fffffffd49e<=s5614@16,
(-5614)@16<=s L0x7fffffffd4a0,L0x7fffffffd4a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4a2,L0x7fffffffd4a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4a4,L0x7fffffffd4a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4a6,L0x7fffffffd4a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4a8,L0x7fffffffd4a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4aa,L0x7fffffffd4aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ac,L0x7fffffffd4ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ae,L0x7fffffffd4ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd4b0,L0x7fffffffd4b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4b2,L0x7fffffffd4b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4b4,L0x7fffffffd4b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4b6,L0x7fffffffd4b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4b8,L0x7fffffffd4b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ba,L0x7fffffffd4ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd4bc,L0x7fffffffd4bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd4be,L0x7fffffffd4be<=s5614@16,
(-5614)@16<=s L0x7fffffffd4c0,L0x7fffffffd4c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4c2,L0x7fffffffd4c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4c4,L0x7fffffffd4c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4c6,L0x7fffffffd4c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4c8,L0x7fffffffd4c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ca,L0x7fffffffd4ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd4cc,L0x7fffffffd4cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ce,L0x7fffffffd4ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd4d0,L0x7fffffffd4d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4d2,L0x7fffffffd4d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4d4,L0x7fffffffd4d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4d6,L0x7fffffffd4d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4d8,L0x7fffffffd4d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4da,L0x7fffffffd4da<=s5614@16,
(-5614)@16<=s L0x7fffffffd4dc,L0x7fffffffd4dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd4de,L0x7fffffffd4de<=s5614@16,
(-5614)@16<=s L0x7fffffffd4e0,L0x7fffffffd4e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4e2,L0x7fffffffd4e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4e4,L0x7fffffffd4e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4e6,L0x7fffffffd4e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4e8,L0x7fffffffd4e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ea,L0x7fffffffd4ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ec,L0x7fffffffd4ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd4ee,L0x7fffffffd4ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd4f0,L0x7fffffffd4f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd4f2,L0x7fffffffd4f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd4f4,L0x7fffffffd4f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd4f6,L0x7fffffffd4f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd4f8,L0x7fffffffd4f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd4fa,L0x7fffffffd4fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd4fc,L0x7fffffffd4fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd4fe,L0x7fffffffd4fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd500,L0x7fffffffd500<=s5614@16,
(-5614)@16<=s L0x7fffffffd502,L0x7fffffffd502<=s5614@16,
(-5614)@16<=s L0x7fffffffd504,L0x7fffffffd504<=s5614@16,
(-5614)@16<=s L0x7fffffffd506,L0x7fffffffd506<=s5614@16,
(-5614)@16<=s L0x7fffffffd508,L0x7fffffffd508<=s5614@16,
(-5614)@16<=s L0x7fffffffd50a,L0x7fffffffd50a<=s5614@16,
(-5614)@16<=s L0x7fffffffd50c,L0x7fffffffd50c<=s5614@16,
(-5614)@16<=s L0x7fffffffd50e,L0x7fffffffd50e<=s5614@16,
(-5614)@16<=s L0x7fffffffd510,L0x7fffffffd510<=s5614@16,
(-5614)@16<=s L0x7fffffffd512,L0x7fffffffd512<=s5614@16,
(-5614)@16<=s L0x7fffffffd514,L0x7fffffffd514<=s5614@16,
(-5614)@16<=s L0x7fffffffd516,L0x7fffffffd516<=s5614@16,
(-5614)@16<=s L0x7fffffffd518,L0x7fffffffd518<=s5614@16,
(-5614)@16<=s L0x7fffffffd51a,L0x7fffffffd51a<=s5614@16,
(-5614)@16<=s L0x7fffffffd51c,L0x7fffffffd51c<=s5614@16,
(-5614)@16<=s L0x7fffffffd51e,L0x7fffffffd51e<=s5614@16,
(-5614)@16<=s L0x7fffffffd520,L0x7fffffffd520<=s5614@16,
(-5614)@16<=s L0x7fffffffd522,L0x7fffffffd522<=s5614@16,
(-5614)@16<=s L0x7fffffffd524,L0x7fffffffd524<=s5614@16,
(-5614)@16<=s L0x7fffffffd526,L0x7fffffffd526<=s5614@16,
(-5614)@16<=s L0x7fffffffd528,L0x7fffffffd528<=s5614@16,
(-5614)@16<=s L0x7fffffffd52a,L0x7fffffffd52a<=s5614@16,
(-5614)@16<=s L0x7fffffffd52c,L0x7fffffffd52c<=s5614@16,
(-5614)@16<=s L0x7fffffffd52e,L0x7fffffffd52e<=s5614@16,
(-5614)@16<=s L0x7fffffffd530,L0x7fffffffd530<=s5614@16,
(-5614)@16<=s L0x7fffffffd532,L0x7fffffffd532<=s5614@16,
(-5614)@16<=s L0x7fffffffd534,L0x7fffffffd534<=s5614@16,
(-5614)@16<=s L0x7fffffffd536,L0x7fffffffd536<=s5614@16,
(-5614)@16<=s L0x7fffffffd538,L0x7fffffffd538<=s5614@16,
(-5614)@16<=s L0x7fffffffd53a,L0x7fffffffd53a<=s5614@16,
(-5614)@16<=s L0x7fffffffd53c,L0x7fffffffd53c<=s5614@16,
(-5614)@16<=s L0x7fffffffd53e,L0x7fffffffd53e<=s5614@16,
(-5614)@16<=s L0x7fffffffd540,L0x7fffffffd540<=s5614@16,
(-5614)@16<=s L0x7fffffffd542,L0x7fffffffd542<=s5614@16,
(-5614)@16<=s L0x7fffffffd544,L0x7fffffffd544<=s5614@16,
(-5614)@16<=s L0x7fffffffd546,L0x7fffffffd546<=s5614@16,
(-5614)@16<=s L0x7fffffffd548,L0x7fffffffd548<=s5614@16,
(-5614)@16<=s L0x7fffffffd54a,L0x7fffffffd54a<=s5614@16,
(-5614)@16<=s L0x7fffffffd54c,L0x7fffffffd54c<=s5614@16,
(-5614)@16<=s L0x7fffffffd54e,L0x7fffffffd54e<=s5614@16,
(-5614)@16<=s L0x7fffffffd550,L0x7fffffffd550<=s5614@16,
(-5614)@16<=s L0x7fffffffd552,L0x7fffffffd552<=s5614@16,
(-5614)@16<=s L0x7fffffffd554,L0x7fffffffd554<=s5614@16,
(-5614)@16<=s L0x7fffffffd556,L0x7fffffffd556<=s5614@16,
(-5614)@16<=s L0x7fffffffd558,L0x7fffffffd558<=s5614@16,
(-5614)@16<=s L0x7fffffffd55a,L0x7fffffffd55a<=s5614@16,
(-5614)@16<=s L0x7fffffffd55c,L0x7fffffffd55c<=s5614@16,
(-5614)@16<=s L0x7fffffffd55e,L0x7fffffffd55e<=s5614@16,
(-5614)@16<=s L0x7fffffffd560,L0x7fffffffd560<=s5614@16,
(-5614)@16<=s L0x7fffffffd562,L0x7fffffffd562<=s5614@16,
(-5614)@16<=s L0x7fffffffd564,L0x7fffffffd564<=s5614@16,
(-5614)@16<=s L0x7fffffffd566,L0x7fffffffd566<=s5614@16,
(-5614)@16<=s L0x7fffffffd568,L0x7fffffffd568<=s5614@16,
(-5614)@16<=s L0x7fffffffd56a,L0x7fffffffd56a<=s5614@16,
(-5614)@16<=s L0x7fffffffd56c,L0x7fffffffd56c<=s5614@16,
(-5614)@16<=s L0x7fffffffd56e,L0x7fffffffd56e<=s5614@16,
(-5614)@16<=s L0x7fffffffd570,L0x7fffffffd570<=s5614@16,
(-5614)@16<=s L0x7fffffffd572,L0x7fffffffd572<=s5614@16,
(-5614)@16<=s L0x7fffffffd574,L0x7fffffffd574<=s5614@16,
(-5614)@16<=s L0x7fffffffd576,L0x7fffffffd576<=s5614@16,
(-5614)@16<=s L0x7fffffffd578,L0x7fffffffd578<=s5614@16,
(-5614)@16<=s L0x7fffffffd57a,L0x7fffffffd57a<=s5614@16,
(-5614)@16<=s L0x7fffffffd57c,L0x7fffffffd57c<=s5614@16,
(-5614)@16<=s L0x7fffffffd57e,L0x7fffffffd57e<=s5614@16,
(-5614)@16<=s L0x7fffffffd580,L0x7fffffffd580<=s5614@16,
(-5614)@16<=s L0x7fffffffd582,L0x7fffffffd582<=s5614@16,
(-5614)@16<=s L0x7fffffffd584,L0x7fffffffd584<=s5614@16,
(-5614)@16<=s L0x7fffffffd586,L0x7fffffffd586<=s5614@16,
(-5614)@16<=s L0x7fffffffd588,L0x7fffffffd588<=s5614@16,
(-5614)@16<=s L0x7fffffffd58a,L0x7fffffffd58a<=s5614@16,
(-5614)@16<=s L0x7fffffffd58c,L0x7fffffffd58c<=s5614@16,
(-5614)@16<=s L0x7fffffffd58e,L0x7fffffffd58e<=s5614@16,
(-5614)@16<=s L0x7fffffffd590,L0x7fffffffd590<=s5614@16,
(-5614)@16<=s L0x7fffffffd592,L0x7fffffffd592<=s5614@16,
(-5614)@16<=s L0x7fffffffd594,L0x7fffffffd594<=s5614@16,
(-5614)@16<=s L0x7fffffffd596,L0x7fffffffd596<=s5614@16,
(-5614)@16<=s L0x7fffffffd598,L0x7fffffffd598<=s5614@16,
(-5614)@16<=s L0x7fffffffd59a,L0x7fffffffd59a<=s5614@16,
(-5614)@16<=s L0x7fffffffd59c,L0x7fffffffd59c<=s5614@16,
(-5614)@16<=s L0x7fffffffd59e,L0x7fffffffd59e<=s5614@16,
(-5614)@16<=s L0x7fffffffd5a0,L0x7fffffffd5a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5a2,L0x7fffffffd5a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5a4,L0x7fffffffd5a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5a6,L0x7fffffffd5a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5a8,L0x7fffffffd5a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5aa,L0x7fffffffd5aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ac,L0x7fffffffd5ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ae,L0x7fffffffd5ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd5b0,L0x7fffffffd5b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5b2,L0x7fffffffd5b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5b4,L0x7fffffffd5b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5b6,L0x7fffffffd5b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5b8,L0x7fffffffd5b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ba,L0x7fffffffd5ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd5bc,L0x7fffffffd5bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd5be,L0x7fffffffd5be<=s5614@16,
(-5614)@16<=s L0x7fffffffd5c0,L0x7fffffffd5c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5c2,L0x7fffffffd5c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5c4,L0x7fffffffd5c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5c6,L0x7fffffffd5c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5c8,L0x7fffffffd5c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ca,L0x7fffffffd5ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd5cc,L0x7fffffffd5cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ce,L0x7fffffffd5ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd5d0,L0x7fffffffd5d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5d2,L0x7fffffffd5d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5d4,L0x7fffffffd5d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5d6,L0x7fffffffd5d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5d8,L0x7fffffffd5d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5da,L0x7fffffffd5da<=s5614@16,
(-5614)@16<=s L0x7fffffffd5dc,L0x7fffffffd5dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd5de,L0x7fffffffd5de<=s5614@16,
(-5614)@16<=s L0x7fffffffd5e0,L0x7fffffffd5e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5e2,L0x7fffffffd5e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5e4,L0x7fffffffd5e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5e6,L0x7fffffffd5e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5e8,L0x7fffffffd5e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ea,L0x7fffffffd5ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ec,L0x7fffffffd5ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd5ee,L0x7fffffffd5ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd5f0,L0x7fffffffd5f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd5f2,L0x7fffffffd5f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd5f4,L0x7fffffffd5f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd5f6,L0x7fffffffd5f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd5f8,L0x7fffffffd5f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd5fa,L0x7fffffffd5fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd5fc,L0x7fffffffd5fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd5fe,L0x7fffffffd5fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd600,L0x7fffffffd600<=s5614@16,
(-5614)@16<=s L0x7fffffffd602,L0x7fffffffd602<=s5614@16,
(-5614)@16<=s L0x7fffffffd604,L0x7fffffffd604<=s5614@16,
(-5614)@16<=s L0x7fffffffd606,L0x7fffffffd606<=s5614@16,
(-5614)@16<=s L0x7fffffffd608,L0x7fffffffd608<=s5614@16,
(-5614)@16<=s L0x7fffffffd60a,L0x7fffffffd60a<=s5614@16,
(-5614)@16<=s L0x7fffffffd60c,L0x7fffffffd60c<=s5614@16,
(-5614)@16<=s L0x7fffffffd60e,L0x7fffffffd60e<=s5614@16,
(-5614)@16<=s L0x7fffffffd610,L0x7fffffffd610<=s5614@16,
(-5614)@16<=s L0x7fffffffd612,L0x7fffffffd612<=s5614@16,
(-5614)@16<=s L0x7fffffffd614,L0x7fffffffd614<=s5614@16,
(-5614)@16<=s L0x7fffffffd616,L0x7fffffffd616<=s5614@16,
(-5614)@16<=s L0x7fffffffd618,L0x7fffffffd618<=s5614@16,
(-5614)@16<=s L0x7fffffffd61a,L0x7fffffffd61a<=s5614@16,
(-5614)@16<=s L0x7fffffffd61c,L0x7fffffffd61c<=s5614@16,
(-5614)@16<=s L0x7fffffffd61e,L0x7fffffffd61e<=s5614@16,
(-5614)@16<=s L0x7fffffffd620,L0x7fffffffd620<=s5614@16,
(-5614)@16<=s L0x7fffffffd622,L0x7fffffffd622<=s5614@16,
(-5614)@16<=s L0x7fffffffd624,L0x7fffffffd624<=s5614@16,
(-5614)@16<=s L0x7fffffffd626,L0x7fffffffd626<=s5614@16,
(-5614)@16<=s L0x7fffffffd628,L0x7fffffffd628<=s5614@16,
(-5614)@16<=s L0x7fffffffd62a,L0x7fffffffd62a<=s5614@16,
(-5614)@16<=s L0x7fffffffd62c,L0x7fffffffd62c<=s5614@16,
(-5614)@16<=s L0x7fffffffd62e,L0x7fffffffd62e<=s5614@16,
(-5614)@16<=s L0x7fffffffd630,L0x7fffffffd630<=s5614@16,
(-5614)@16<=s L0x7fffffffd632,L0x7fffffffd632<=s5614@16,
(-5614)@16<=s L0x7fffffffd634,L0x7fffffffd634<=s5614@16,
(-5614)@16<=s L0x7fffffffd636,L0x7fffffffd636<=s5614@16,
(-5614)@16<=s L0x7fffffffd638,L0x7fffffffd638<=s5614@16,
(-5614)@16<=s L0x7fffffffd63a,L0x7fffffffd63a<=s5614@16,
(-5614)@16<=s L0x7fffffffd63c,L0x7fffffffd63c<=s5614@16,
(-5614)@16<=s L0x7fffffffd63e,L0x7fffffffd63e<=s5614@16,
(-5614)@16<=s L0x7fffffffd640,L0x7fffffffd640<=s5614@16,
(-5614)@16<=s L0x7fffffffd642,L0x7fffffffd642<=s5614@16,
(-5614)@16<=s L0x7fffffffd644,L0x7fffffffd644<=s5614@16,
(-5614)@16<=s L0x7fffffffd646,L0x7fffffffd646<=s5614@16,
(-5614)@16<=s L0x7fffffffd648,L0x7fffffffd648<=s5614@16,
(-5614)@16<=s L0x7fffffffd64a,L0x7fffffffd64a<=s5614@16,
(-5614)@16<=s L0x7fffffffd64c,L0x7fffffffd64c<=s5614@16,
(-5614)@16<=s L0x7fffffffd64e,L0x7fffffffd64e<=s5614@16,
(-5614)@16<=s L0x7fffffffd650,L0x7fffffffd650<=s5614@16,
(-5614)@16<=s L0x7fffffffd652,L0x7fffffffd652<=s5614@16,
(-5614)@16<=s L0x7fffffffd654,L0x7fffffffd654<=s5614@16,
(-5614)@16<=s L0x7fffffffd656,L0x7fffffffd656<=s5614@16,
(-5614)@16<=s L0x7fffffffd658,L0x7fffffffd658<=s5614@16,
(-5614)@16<=s L0x7fffffffd65a,L0x7fffffffd65a<=s5614@16,
(-5614)@16<=s L0x7fffffffd65c,L0x7fffffffd65c<=s5614@16,
(-5614)@16<=s L0x7fffffffd65e,L0x7fffffffd65e<=s5614@16,
(-5614)@16<=s L0x7fffffffd660,L0x7fffffffd660<=s5614@16,
(-5614)@16<=s L0x7fffffffd662,L0x7fffffffd662<=s5614@16,
(-5614)@16<=s L0x7fffffffd664,L0x7fffffffd664<=s5614@16,
(-5614)@16<=s L0x7fffffffd666,L0x7fffffffd666<=s5614@16,
(-5614)@16<=s L0x7fffffffd668,L0x7fffffffd668<=s5614@16,
(-5614)@16<=s L0x7fffffffd66a,L0x7fffffffd66a<=s5614@16,
(-5614)@16<=s L0x7fffffffd66c,L0x7fffffffd66c<=s5614@16,
(-5614)@16<=s L0x7fffffffd66e,L0x7fffffffd66e<=s5614@16,
(-5614)@16<=s L0x7fffffffd670,L0x7fffffffd670<=s5614@16,
(-5614)@16<=s L0x7fffffffd672,L0x7fffffffd672<=s5614@16,
(-5614)@16<=s L0x7fffffffd674,L0x7fffffffd674<=s5614@16,
(-5614)@16<=s L0x7fffffffd676,L0x7fffffffd676<=s5614@16,
(-5614)@16<=s L0x7fffffffd678,L0x7fffffffd678<=s5614@16,
(-5614)@16<=s L0x7fffffffd67a,L0x7fffffffd67a<=s5614@16,
(-5614)@16<=s L0x7fffffffd67c,L0x7fffffffd67c<=s5614@16,
(-5614)@16<=s L0x7fffffffd67e,L0x7fffffffd67e<=s5614@16,
(-5614)@16<=s L0x7fffffffd680,L0x7fffffffd680<=s5614@16,
(-5614)@16<=s L0x7fffffffd682,L0x7fffffffd682<=s5614@16,
(-5614)@16<=s L0x7fffffffd684,L0x7fffffffd684<=s5614@16,
(-5614)@16<=s L0x7fffffffd686,L0x7fffffffd686<=s5614@16,
(-5614)@16<=s L0x7fffffffd688,L0x7fffffffd688<=s5614@16,
(-5614)@16<=s L0x7fffffffd68a,L0x7fffffffd68a<=s5614@16,
(-5614)@16<=s L0x7fffffffd68c,L0x7fffffffd68c<=s5614@16,
(-5614)@16<=s L0x7fffffffd68e,L0x7fffffffd68e<=s5614@16,
(-5614)@16<=s L0x7fffffffd690,L0x7fffffffd690<=s5614@16,
(-5614)@16<=s L0x7fffffffd692,L0x7fffffffd692<=s5614@16,
(-5614)@16<=s L0x7fffffffd694,L0x7fffffffd694<=s5614@16,
(-5614)@16<=s L0x7fffffffd696,L0x7fffffffd696<=s5614@16,
(-5535)@16<=s L0x7fffffffd698,L0x7fffffffd698<=s5535@16,
(-5614)@16<=s L0x7fffffffd69a,L0x7fffffffd69a<=s5614@16,
(-5535)@16<=s L0x7fffffffd69c,L0x7fffffffd69c<=s5535@16,
(-5614)@16<=s L0x7fffffffd69e,L0x7fffffffd69e<=s5614@16,
(-5614)@16<=s L0x7fffffffd6a0,L0x7fffffffd6a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6a2,L0x7fffffffd6a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6a4,L0x7fffffffd6a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6a6,L0x7fffffffd6a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6a8,L0x7fffffffd6a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6aa,L0x7fffffffd6aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ac,L0x7fffffffd6ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ae,L0x7fffffffd6ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd6b0,L0x7fffffffd6b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6b2,L0x7fffffffd6b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6b4,L0x7fffffffd6b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6b6,L0x7fffffffd6b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6b8,L0x7fffffffd6b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ba,L0x7fffffffd6ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd6bc,L0x7fffffffd6bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd6be,L0x7fffffffd6be<=s5614@16,
(-5614)@16<=s L0x7fffffffd6c0,L0x7fffffffd6c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6c2,L0x7fffffffd6c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6c4,L0x7fffffffd6c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6c6,L0x7fffffffd6c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6c8,L0x7fffffffd6c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ca,L0x7fffffffd6ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd6cc,L0x7fffffffd6cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ce,L0x7fffffffd6ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd6d0,L0x7fffffffd6d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6d2,L0x7fffffffd6d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6d4,L0x7fffffffd6d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6d6,L0x7fffffffd6d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6d8,L0x7fffffffd6d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6da,L0x7fffffffd6da<=s5614@16,
(-5614)@16<=s L0x7fffffffd6dc,L0x7fffffffd6dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd6de,L0x7fffffffd6de<=s5614@16,
(-5614)@16<=s L0x7fffffffd6e0,L0x7fffffffd6e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6e2,L0x7fffffffd6e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6e4,L0x7fffffffd6e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6e6,L0x7fffffffd6e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6e8,L0x7fffffffd6e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ea,L0x7fffffffd6ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ec,L0x7fffffffd6ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd6ee,L0x7fffffffd6ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd6f0,L0x7fffffffd6f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd6f2,L0x7fffffffd6f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd6f4,L0x7fffffffd6f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd6f6,L0x7fffffffd6f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd6f8,L0x7fffffffd6f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd6fa,L0x7fffffffd6fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd6fc,L0x7fffffffd6fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd6fe,L0x7fffffffd6fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd700,L0x7fffffffd700<=s5614@16,
(-5614)@16<=s L0x7fffffffd702,L0x7fffffffd702<=s5614@16,
(-5614)@16<=s L0x7fffffffd704,L0x7fffffffd704<=s5614@16,
(-5614)@16<=s L0x7fffffffd706,L0x7fffffffd706<=s5614@16,
(-5614)@16<=s L0x7fffffffd708,L0x7fffffffd708<=s5614@16,
(-5614)@16<=s L0x7fffffffd70a,L0x7fffffffd70a<=s5614@16,
(-5614)@16<=s L0x7fffffffd70c,L0x7fffffffd70c<=s5614@16,
(-5614)@16<=s L0x7fffffffd70e,L0x7fffffffd70e<=s5614@16,
(-5614)@16<=s L0x7fffffffd710,L0x7fffffffd710<=s5614@16,
(-5614)@16<=s L0x7fffffffd712,L0x7fffffffd712<=s5614@16,
(-5614)@16<=s L0x7fffffffd714,L0x7fffffffd714<=s5614@16,
(-5614)@16<=s L0x7fffffffd716,L0x7fffffffd716<=s5614@16,
(-5614)@16<=s L0x7fffffffd718,L0x7fffffffd718<=s5614@16,
(-5614)@16<=s L0x7fffffffd71a,L0x7fffffffd71a<=s5614@16,
(-5614)@16<=s L0x7fffffffd71c,L0x7fffffffd71c<=s5614@16,
(-5614)@16<=s L0x7fffffffd71e,L0x7fffffffd71e<=s5614@16,
(-5614)@16<=s L0x7fffffffd720,L0x7fffffffd720<=s5614@16,
(-5614)@16<=s L0x7fffffffd722,L0x7fffffffd722<=s5614@16,
(-5614)@16<=s L0x7fffffffd724,L0x7fffffffd724<=s5614@16,
(-5614)@16<=s L0x7fffffffd726,L0x7fffffffd726<=s5614@16,
(-5614)@16<=s L0x7fffffffd728,L0x7fffffffd728<=s5614@16,
(-5614)@16<=s L0x7fffffffd72a,L0x7fffffffd72a<=s5614@16,
(-5614)@16<=s L0x7fffffffd72c,L0x7fffffffd72c<=s5614@16,
(-5614)@16<=s L0x7fffffffd72e,L0x7fffffffd72e<=s5614@16,
(-5614)@16<=s L0x7fffffffd730,L0x7fffffffd730<=s5614@16,
(-5614)@16<=s L0x7fffffffd732,L0x7fffffffd732<=s5614@16,
(-5614)@16<=s L0x7fffffffd734,L0x7fffffffd734<=s5614@16,
(-5614)@16<=s L0x7fffffffd736,L0x7fffffffd736<=s5614@16,
(-5614)@16<=s L0x7fffffffd738,L0x7fffffffd738<=s5614@16,
(-5614)@16<=s L0x7fffffffd73a,L0x7fffffffd73a<=s5614@16,
(-5614)@16<=s L0x7fffffffd73c,L0x7fffffffd73c<=s5614@16,
(-5614)@16<=s L0x7fffffffd73e,L0x7fffffffd73e<=s5614@16,
(-5614)@16<=s L0x7fffffffd740,L0x7fffffffd740<=s5614@16,
(-5614)@16<=s L0x7fffffffd742,L0x7fffffffd742<=s5614@16,
(-5614)@16<=s L0x7fffffffd744,L0x7fffffffd744<=s5614@16,
(-5614)@16<=s L0x7fffffffd746,L0x7fffffffd746<=s5614@16,
(-5614)@16<=s L0x7fffffffd748,L0x7fffffffd748<=s5614@16,
(-5614)@16<=s L0x7fffffffd74a,L0x7fffffffd74a<=s5614@16,
(-5614)@16<=s L0x7fffffffd74c,L0x7fffffffd74c<=s5614@16,
(-5614)@16<=s L0x7fffffffd74e,L0x7fffffffd74e<=s5614@16,
(-5614)@16<=s L0x7fffffffd750,L0x7fffffffd750<=s5614@16,
(-5614)@16<=s L0x7fffffffd752,L0x7fffffffd752<=s5614@16,
(-5614)@16<=s L0x7fffffffd754,L0x7fffffffd754<=s5614@16,
(-5614)@16<=s L0x7fffffffd756,L0x7fffffffd756<=s5614@16,
(-5614)@16<=s L0x7fffffffd758,L0x7fffffffd758<=s5614@16,
(-5614)@16<=s L0x7fffffffd75a,L0x7fffffffd75a<=s5614@16,
(-5614)@16<=s L0x7fffffffd75c,L0x7fffffffd75c<=s5614@16,
(-5614)@16<=s L0x7fffffffd75e,L0x7fffffffd75e<=s5614@16,
(-5614)@16<=s L0x7fffffffd760,L0x7fffffffd760<=s5614@16,
(-5614)@16<=s L0x7fffffffd762,L0x7fffffffd762<=s5614@16,
(-5614)@16<=s L0x7fffffffd764,L0x7fffffffd764<=s5614@16,
(-5614)@16<=s L0x7fffffffd766,L0x7fffffffd766<=s5614@16,
(-5614)@16<=s L0x7fffffffd768,L0x7fffffffd768<=s5614@16,
(-5614)@16<=s L0x7fffffffd76a,L0x7fffffffd76a<=s5614@16,
(-5614)@16<=s L0x7fffffffd76c,L0x7fffffffd76c<=s5614@16,
(-5614)@16<=s L0x7fffffffd76e,L0x7fffffffd76e<=s5614@16,
(-5614)@16<=s L0x7fffffffd770,L0x7fffffffd770<=s5614@16,
(-5614)@16<=s L0x7fffffffd772,L0x7fffffffd772<=s5614@16,
(-5614)@16<=s L0x7fffffffd774,L0x7fffffffd774<=s5614@16,
(-5614)@16<=s L0x7fffffffd776,L0x7fffffffd776<=s5614@16,
(-5614)@16<=s L0x7fffffffd778,L0x7fffffffd778<=s5614@16,
(-5614)@16<=s L0x7fffffffd77a,L0x7fffffffd77a<=s5614@16,
(-5614)@16<=s L0x7fffffffd77c,L0x7fffffffd77c<=s5614@16,
(-5614)@16<=s L0x7fffffffd77e,L0x7fffffffd77e<=s5614@16,
(-5614)@16<=s L0x7fffffffd780,L0x7fffffffd780<=s5614@16,
(-5614)@16<=s L0x7fffffffd782,L0x7fffffffd782<=s5614@16,
(-5614)@16<=s L0x7fffffffd784,L0x7fffffffd784<=s5614@16,
(-5614)@16<=s L0x7fffffffd786,L0x7fffffffd786<=s5614@16,
(-5614)@16<=s L0x7fffffffd788,L0x7fffffffd788<=s5614@16,
(-5614)@16<=s L0x7fffffffd78a,L0x7fffffffd78a<=s5614@16,
(-5614)@16<=s L0x7fffffffd78c,L0x7fffffffd78c<=s5614@16,
(-5614)@16<=s L0x7fffffffd78e,L0x7fffffffd78e<=s5614@16,
(-5614)@16<=s L0x7fffffffd790,L0x7fffffffd790<=s5614@16,
(-5614)@16<=s L0x7fffffffd792,L0x7fffffffd792<=s5614@16,
(-5614)@16<=s L0x7fffffffd794,L0x7fffffffd794<=s5614@16,
(-5614)@16<=s L0x7fffffffd796,L0x7fffffffd796<=s5614@16,
(-5614)@16<=s L0x7fffffffd798,L0x7fffffffd798<=s5614@16,
(-5614)@16<=s L0x7fffffffd79a,L0x7fffffffd79a<=s5614@16,
(-5614)@16<=s L0x7fffffffd79c,L0x7fffffffd79c<=s5614@16,
(-5614)@16<=s L0x7fffffffd79e,L0x7fffffffd79e<=s5614@16,
(-5614)@16<=s L0x7fffffffd7a0,L0x7fffffffd7a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7a2,L0x7fffffffd7a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7a4,L0x7fffffffd7a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7a6,L0x7fffffffd7a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7a8,L0x7fffffffd7a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7aa,L0x7fffffffd7aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ac,L0x7fffffffd7ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ae,L0x7fffffffd7ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd7b0,L0x7fffffffd7b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7b2,L0x7fffffffd7b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7b4,L0x7fffffffd7b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7b6,L0x7fffffffd7b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7b8,L0x7fffffffd7b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ba,L0x7fffffffd7ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd7bc,L0x7fffffffd7bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd7be,L0x7fffffffd7be<=s5614@16,
(-5614)@16<=s L0x7fffffffd7c0,L0x7fffffffd7c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7c2,L0x7fffffffd7c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7c4,L0x7fffffffd7c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7c6,L0x7fffffffd7c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7c8,L0x7fffffffd7c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ca,L0x7fffffffd7ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd7cc,L0x7fffffffd7cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ce,L0x7fffffffd7ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd7d0,L0x7fffffffd7d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7d2,L0x7fffffffd7d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7d4,L0x7fffffffd7d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7d6,L0x7fffffffd7d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7d8,L0x7fffffffd7d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7da,L0x7fffffffd7da<=s5614@16,
(-5614)@16<=s L0x7fffffffd7dc,L0x7fffffffd7dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd7de,L0x7fffffffd7de<=s5614@16,
(-5614)@16<=s L0x7fffffffd7e0,L0x7fffffffd7e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7e2,L0x7fffffffd7e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7e4,L0x7fffffffd7e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7e6,L0x7fffffffd7e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7e8,L0x7fffffffd7e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ea,L0x7fffffffd7ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ec,L0x7fffffffd7ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd7ee,L0x7fffffffd7ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd7f0,L0x7fffffffd7f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd7f2,L0x7fffffffd7f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd7f4,L0x7fffffffd7f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd7f6,L0x7fffffffd7f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd7f8,L0x7fffffffd7f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd7fa,L0x7fffffffd7fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd7fc,L0x7fffffffd7fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd7fe,L0x7fffffffd7fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd800,L0x7fffffffd800<=s5614@16,
(-5614)@16<=s L0x7fffffffd802,L0x7fffffffd802<=s5614@16,
(-5614)@16<=s L0x7fffffffd804,L0x7fffffffd804<=s5614@16,
(-5614)@16<=s L0x7fffffffd806,L0x7fffffffd806<=s5614@16,
(-5614)@16<=s L0x7fffffffd808,L0x7fffffffd808<=s5614@16,
(-5614)@16<=s L0x7fffffffd80a,L0x7fffffffd80a<=s5614@16,
(-5614)@16<=s L0x7fffffffd80c,L0x7fffffffd80c<=s5614@16,
(-5614)@16<=s L0x7fffffffd80e,L0x7fffffffd80e<=s5614@16,
(-5614)@16<=s L0x7fffffffd810,L0x7fffffffd810<=s5614@16,
(-5614)@16<=s L0x7fffffffd812,L0x7fffffffd812<=s5614@16,
(-5614)@16<=s L0x7fffffffd814,L0x7fffffffd814<=s5614@16,
(-5614)@16<=s L0x7fffffffd816,L0x7fffffffd816<=s5614@16,
(-5614)@16<=s L0x7fffffffd818,L0x7fffffffd818<=s5614@16,
(-5614)@16<=s L0x7fffffffd81a,L0x7fffffffd81a<=s5614@16,
(-5614)@16<=s L0x7fffffffd81c,L0x7fffffffd81c<=s5614@16,
(-5614)@16<=s L0x7fffffffd81e,L0x7fffffffd81e<=s5614@16,
(-5614)@16<=s L0x7fffffffd820,L0x7fffffffd820<=s5614@16,
(-5614)@16<=s L0x7fffffffd822,L0x7fffffffd822<=s5614@16,
(-5614)@16<=s L0x7fffffffd824,L0x7fffffffd824<=s5614@16,
(-5614)@16<=s L0x7fffffffd826,L0x7fffffffd826<=s5614@16,
(-5614)@16<=s L0x7fffffffd828,L0x7fffffffd828<=s5614@16,
(-5614)@16<=s L0x7fffffffd82a,L0x7fffffffd82a<=s5614@16,
(-5614)@16<=s L0x7fffffffd82c,L0x7fffffffd82c<=s5614@16,
(-5614)@16<=s L0x7fffffffd82e,L0x7fffffffd82e<=s5614@16,
(-5614)@16<=s L0x7fffffffd830,L0x7fffffffd830<=s5614@16,
(-5614)@16<=s L0x7fffffffd832,L0x7fffffffd832<=s5614@16,
(-5614)@16<=s L0x7fffffffd834,L0x7fffffffd834<=s5614@16,
(-5614)@16<=s L0x7fffffffd836,L0x7fffffffd836<=s5614@16,
(-5614)@16<=s L0x7fffffffd838,L0x7fffffffd838<=s5614@16,
(-5614)@16<=s L0x7fffffffd83a,L0x7fffffffd83a<=s5614@16,
(-5614)@16<=s L0x7fffffffd83c,L0x7fffffffd83c<=s5614@16,
(-5614)@16<=s L0x7fffffffd83e,L0x7fffffffd83e<=s5614@16,
(-5614)@16<=s L0x7fffffffd840,L0x7fffffffd840<=s5614@16,
(-5614)@16<=s L0x7fffffffd842,L0x7fffffffd842<=s5614@16,
(-5614)@16<=s L0x7fffffffd844,L0x7fffffffd844<=s5614@16,
(-5614)@16<=s L0x7fffffffd846,L0x7fffffffd846<=s5614@16,
(-5614)@16<=s L0x7fffffffd848,L0x7fffffffd848<=s5614@16,
(-5614)@16<=s L0x7fffffffd84a,L0x7fffffffd84a<=s5614@16,
(-5614)@16<=s L0x7fffffffd84c,L0x7fffffffd84c<=s5614@16,
(-5614)@16<=s L0x7fffffffd84e,L0x7fffffffd84e<=s5614@16,
(-5614)@16<=s L0x7fffffffd850,L0x7fffffffd850<=s5614@16,
(-5614)@16<=s L0x7fffffffd852,L0x7fffffffd852<=s5614@16,
(-5614)@16<=s L0x7fffffffd854,L0x7fffffffd854<=s5614@16,
(-5614)@16<=s L0x7fffffffd856,L0x7fffffffd856<=s5614@16,
(-5614)@16<=s L0x7fffffffd858,L0x7fffffffd858<=s5614@16,
(-5614)@16<=s L0x7fffffffd85a,L0x7fffffffd85a<=s5614@16,
(-5614)@16<=s L0x7fffffffd85c,L0x7fffffffd85c<=s5614@16,
(-5614)@16<=s L0x7fffffffd85e,L0x7fffffffd85e<=s5614@16,
(-5614)@16<=s L0x7fffffffd860,L0x7fffffffd860<=s5614@16,
(-5614)@16<=s L0x7fffffffd862,L0x7fffffffd862<=s5614@16,
(-5614)@16<=s L0x7fffffffd864,L0x7fffffffd864<=s5614@16,
(-5614)@16<=s L0x7fffffffd866,L0x7fffffffd866<=s5614@16,
(-5614)@16<=s L0x7fffffffd868,L0x7fffffffd868<=s5614@16,
(-5614)@16<=s L0x7fffffffd86a,L0x7fffffffd86a<=s5614@16,
(-5614)@16<=s L0x7fffffffd86c,L0x7fffffffd86c<=s5614@16,
(-5614)@16<=s L0x7fffffffd86e,L0x7fffffffd86e<=s5614@16,
(-5614)@16<=s L0x7fffffffd870,L0x7fffffffd870<=s5614@16,
(-5614)@16<=s L0x7fffffffd872,L0x7fffffffd872<=s5614@16,
(-5614)@16<=s L0x7fffffffd874,L0x7fffffffd874<=s5614@16,
(-5614)@16<=s L0x7fffffffd876,L0x7fffffffd876<=s5614@16,
(-5614)@16<=s L0x7fffffffd878,L0x7fffffffd878<=s5614@16,
(-5614)@16<=s L0x7fffffffd87a,L0x7fffffffd87a<=s5614@16,
(-5614)@16<=s L0x7fffffffd87c,L0x7fffffffd87c<=s5614@16,
(-5614)@16<=s L0x7fffffffd87e,L0x7fffffffd87e<=s5614@16,
(-5614)@16<=s L0x7fffffffd880,L0x7fffffffd880<=s5614@16,
(-5614)@16<=s L0x7fffffffd882,L0x7fffffffd882<=s5614@16,
(-5614)@16<=s L0x7fffffffd884,L0x7fffffffd884<=s5614@16,
(-5614)@16<=s L0x7fffffffd886,L0x7fffffffd886<=s5614@16,
(-5614)@16<=s L0x7fffffffd888,L0x7fffffffd888<=s5614@16,
(-5614)@16<=s L0x7fffffffd88a,L0x7fffffffd88a<=s5614@16,
(-5614)@16<=s L0x7fffffffd88c,L0x7fffffffd88c<=s5614@16,
(-5614)@16<=s L0x7fffffffd88e,L0x7fffffffd88e<=s5614@16,
(-5614)@16<=s L0x7fffffffd890,L0x7fffffffd890<=s5614@16,
(-5614)@16<=s L0x7fffffffd892,L0x7fffffffd892<=s5614@16,
(-5614)@16<=s L0x7fffffffd894,L0x7fffffffd894<=s5614@16,
(-5614)@16<=s L0x7fffffffd896,L0x7fffffffd896<=s5614@16,
(-5614)@16<=s L0x7fffffffd898,L0x7fffffffd898<=s5614@16,
(-5614)@16<=s L0x7fffffffd89a,L0x7fffffffd89a<=s5614@16,
(-5614)@16<=s L0x7fffffffd89c,L0x7fffffffd89c<=s5614@16,
(-5614)@16<=s L0x7fffffffd89e,L0x7fffffffd89e<=s5614@16,
(-5614)@16<=s L0x7fffffffd8a0,L0x7fffffffd8a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8a2,L0x7fffffffd8a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8a4,L0x7fffffffd8a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8a6,L0x7fffffffd8a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8a8,L0x7fffffffd8a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8aa,L0x7fffffffd8aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ac,L0x7fffffffd8ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ae,L0x7fffffffd8ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd8b0,L0x7fffffffd8b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8b2,L0x7fffffffd8b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8b4,L0x7fffffffd8b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8b6,L0x7fffffffd8b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8b8,L0x7fffffffd8b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ba,L0x7fffffffd8ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd8bc,L0x7fffffffd8bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd8be,L0x7fffffffd8be<=s5614@16,
(-5614)@16<=s L0x7fffffffd8c0,L0x7fffffffd8c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8c2,L0x7fffffffd8c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8c4,L0x7fffffffd8c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8c6,L0x7fffffffd8c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8c8,L0x7fffffffd8c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ca,L0x7fffffffd8ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd8cc,L0x7fffffffd8cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ce,L0x7fffffffd8ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd8d0,L0x7fffffffd8d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8d2,L0x7fffffffd8d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8d4,L0x7fffffffd8d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8d6,L0x7fffffffd8d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8d8,L0x7fffffffd8d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8da,L0x7fffffffd8da<=s5614@16,
(-5614)@16<=s L0x7fffffffd8dc,L0x7fffffffd8dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd8de,L0x7fffffffd8de<=s5614@16,
(-5614)@16<=s L0x7fffffffd8e0,L0x7fffffffd8e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8e2,L0x7fffffffd8e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8e4,L0x7fffffffd8e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8e6,L0x7fffffffd8e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8e8,L0x7fffffffd8e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ea,L0x7fffffffd8ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ec,L0x7fffffffd8ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd8ee,L0x7fffffffd8ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd8f0,L0x7fffffffd8f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd8f2,L0x7fffffffd8f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd8f4,L0x7fffffffd8f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd8f6,L0x7fffffffd8f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd8f8,L0x7fffffffd8f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd8fa,L0x7fffffffd8fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd8fc,L0x7fffffffd8fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd8fe,L0x7fffffffd8fe<=s5614@16,
(-5614)@16<=s L0x7fffffffd900,L0x7fffffffd900<=s5614@16,
(-5614)@16<=s L0x7fffffffd902,L0x7fffffffd902<=s5614@16,
(-5614)@16<=s L0x7fffffffd904,L0x7fffffffd904<=s5614@16,
(-5614)@16<=s L0x7fffffffd906,L0x7fffffffd906<=s5614@16,
(-5614)@16<=s L0x7fffffffd908,L0x7fffffffd908<=s5614@16,
(-5614)@16<=s L0x7fffffffd90a,L0x7fffffffd90a<=s5614@16,
(-5614)@16<=s L0x7fffffffd90c,L0x7fffffffd90c<=s5614@16,
(-5614)@16<=s L0x7fffffffd90e,L0x7fffffffd90e<=s5614@16,
(-5614)@16<=s L0x7fffffffd910,L0x7fffffffd910<=s5614@16,
(-5614)@16<=s L0x7fffffffd912,L0x7fffffffd912<=s5614@16,
(-5614)@16<=s L0x7fffffffd914,L0x7fffffffd914<=s5614@16,
(-5614)@16<=s L0x7fffffffd916,L0x7fffffffd916<=s5614@16,
(-5614)@16<=s L0x7fffffffd918,L0x7fffffffd918<=s5614@16,
(-5614)@16<=s L0x7fffffffd91a,L0x7fffffffd91a<=s5614@16,
(-5614)@16<=s L0x7fffffffd91c,L0x7fffffffd91c<=s5614@16,
(-5614)@16<=s L0x7fffffffd91e,L0x7fffffffd91e<=s5614@16,
(-5614)@16<=s L0x7fffffffd920,L0x7fffffffd920<=s5614@16,
(-5614)@16<=s L0x7fffffffd922,L0x7fffffffd922<=s5614@16,
(-5614)@16<=s L0x7fffffffd924,L0x7fffffffd924<=s5614@16,
(-5614)@16<=s L0x7fffffffd926,L0x7fffffffd926<=s5614@16,
(-5614)@16<=s L0x7fffffffd928,L0x7fffffffd928<=s5614@16,
(-5614)@16<=s L0x7fffffffd92a,L0x7fffffffd92a<=s5614@16,
(-5614)@16<=s L0x7fffffffd92c,L0x7fffffffd92c<=s5614@16,
(-5614)@16<=s L0x7fffffffd92e,L0x7fffffffd92e<=s5614@16,
(-5614)@16<=s L0x7fffffffd930,L0x7fffffffd930<=s5614@16,
(-5614)@16<=s L0x7fffffffd932,L0x7fffffffd932<=s5614@16,
(-5614)@16<=s L0x7fffffffd934,L0x7fffffffd934<=s5614@16,
(-5614)@16<=s L0x7fffffffd936,L0x7fffffffd936<=s5614@16,
(-5614)@16<=s L0x7fffffffd938,L0x7fffffffd938<=s5614@16,
(-5614)@16<=s L0x7fffffffd93a,L0x7fffffffd93a<=s5614@16,
(-5614)@16<=s L0x7fffffffd93c,L0x7fffffffd93c<=s5614@16,
(-5614)@16<=s L0x7fffffffd93e,L0x7fffffffd93e<=s5614@16,
(-5614)@16<=s L0x7fffffffd940,L0x7fffffffd940<=s5614@16,
(-5614)@16<=s L0x7fffffffd942,L0x7fffffffd942<=s5614@16,
(-5614)@16<=s L0x7fffffffd944,L0x7fffffffd944<=s5614@16,
(-5614)@16<=s L0x7fffffffd946,L0x7fffffffd946<=s5614@16,
(-5614)@16<=s L0x7fffffffd948,L0x7fffffffd948<=s5614@16,
(-5614)@16<=s L0x7fffffffd94a,L0x7fffffffd94a<=s5614@16,
(-5614)@16<=s L0x7fffffffd94c,L0x7fffffffd94c<=s5614@16,
(-5614)@16<=s L0x7fffffffd94e,L0x7fffffffd94e<=s5614@16,
(-5614)@16<=s L0x7fffffffd950,L0x7fffffffd950<=s5614@16,
(-5614)@16<=s L0x7fffffffd952,L0x7fffffffd952<=s5614@16,
(-5614)@16<=s L0x7fffffffd954,L0x7fffffffd954<=s5614@16,
(-5614)@16<=s L0x7fffffffd956,L0x7fffffffd956<=s5614@16,
(-5614)@16<=s L0x7fffffffd958,L0x7fffffffd958<=s5614@16,
(-5614)@16<=s L0x7fffffffd95a,L0x7fffffffd95a<=s5614@16,
(-5614)@16<=s L0x7fffffffd95c,L0x7fffffffd95c<=s5614@16,
(-5614)@16<=s L0x7fffffffd95e,L0x7fffffffd95e<=s5614@16,
(-5614)@16<=s L0x7fffffffd960,L0x7fffffffd960<=s5614@16,
(-5614)@16<=s L0x7fffffffd962,L0x7fffffffd962<=s5614@16,
(-5614)@16<=s L0x7fffffffd964,L0x7fffffffd964<=s5614@16,
(-5614)@16<=s L0x7fffffffd966,L0x7fffffffd966<=s5614@16,
(-5614)@16<=s L0x7fffffffd968,L0x7fffffffd968<=s5614@16,
(-5614)@16<=s L0x7fffffffd96a,L0x7fffffffd96a<=s5614@16,
(-5614)@16<=s L0x7fffffffd96c,L0x7fffffffd96c<=s5614@16,
(-5614)@16<=s L0x7fffffffd96e,L0x7fffffffd96e<=s5614@16,
(-5614)@16<=s L0x7fffffffd970,L0x7fffffffd970<=s5614@16,
(-5614)@16<=s L0x7fffffffd972,L0x7fffffffd972<=s5614@16,
(-5614)@16<=s L0x7fffffffd974,L0x7fffffffd974<=s5614@16,
(-5614)@16<=s L0x7fffffffd976,L0x7fffffffd976<=s5614@16,
(-5614)@16<=s L0x7fffffffd978,L0x7fffffffd978<=s5614@16,
(-5614)@16<=s L0x7fffffffd97a,L0x7fffffffd97a<=s5614@16,
(-5614)@16<=s L0x7fffffffd97c,L0x7fffffffd97c<=s5614@16,
(-5614)@16<=s L0x7fffffffd97e,L0x7fffffffd97e<=s5614@16,
(-5614)@16<=s L0x7fffffffd980,L0x7fffffffd980<=s5614@16,
(-5614)@16<=s L0x7fffffffd982,L0x7fffffffd982<=s5614@16,
(-5614)@16<=s L0x7fffffffd984,L0x7fffffffd984<=s5614@16,
(-5614)@16<=s L0x7fffffffd986,L0x7fffffffd986<=s5614@16,
(-5614)@16<=s L0x7fffffffd988,L0x7fffffffd988<=s5614@16,
(-5614)@16<=s L0x7fffffffd98a,L0x7fffffffd98a<=s5614@16,
(-5614)@16<=s L0x7fffffffd98c,L0x7fffffffd98c<=s5614@16,
(-5614)@16<=s L0x7fffffffd98e,L0x7fffffffd98e<=s5614@16,
(-5614)@16<=s L0x7fffffffd990,L0x7fffffffd990<=s5614@16,
(-5614)@16<=s L0x7fffffffd992,L0x7fffffffd992<=s5614@16,
(-5614)@16<=s L0x7fffffffd994,L0x7fffffffd994<=s5614@16,
(-5614)@16<=s L0x7fffffffd996,L0x7fffffffd996<=s5614@16,
(-5614)@16<=s L0x7fffffffd998,L0x7fffffffd998<=s5614@16,
(-5614)@16<=s L0x7fffffffd99a,L0x7fffffffd99a<=s5614@16,
(-5614)@16<=s L0x7fffffffd99c,L0x7fffffffd99c<=s5614@16,
(-5614)@16<=s L0x7fffffffd99e,L0x7fffffffd99e<=s5614@16,
(-5614)@16<=s L0x7fffffffd9a0,L0x7fffffffd9a0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9a2,L0x7fffffffd9a2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9a4,L0x7fffffffd9a4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9a6,L0x7fffffffd9a6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9a8,L0x7fffffffd9a8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9aa,L0x7fffffffd9aa<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ac,L0x7fffffffd9ac<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ae,L0x7fffffffd9ae<=s5614@16,
(-5614)@16<=s L0x7fffffffd9b0,L0x7fffffffd9b0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9b2,L0x7fffffffd9b2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9b4,L0x7fffffffd9b4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9b6,L0x7fffffffd9b6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9b8,L0x7fffffffd9b8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ba,L0x7fffffffd9ba<=s5614@16,
(-5614)@16<=s L0x7fffffffd9bc,L0x7fffffffd9bc<=s5614@16,
(-5614)@16<=s L0x7fffffffd9be,L0x7fffffffd9be<=s5614@16,
(-5614)@16<=s L0x7fffffffd9c0,L0x7fffffffd9c0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9c2,L0x7fffffffd9c2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9c4,L0x7fffffffd9c4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9c6,L0x7fffffffd9c6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9c8,L0x7fffffffd9c8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ca,L0x7fffffffd9ca<=s5614@16,
(-5614)@16<=s L0x7fffffffd9cc,L0x7fffffffd9cc<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ce,L0x7fffffffd9ce<=s5614@16,
(-5614)@16<=s L0x7fffffffd9d0,L0x7fffffffd9d0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9d2,L0x7fffffffd9d2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9d4,L0x7fffffffd9d4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9d6,L0x7fffffffd9d6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9d8,L0x7fffffffd9d8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9da,L0x7fffffffd9da<=s5614@16,
(-5614)@16<=s L0x7fffffffd9dc,L0x7fffffffd9dc<=s5614@16,
(-5614)@16<=s L0x7fffffffd9de,L0x7fffffffd9de<=s5614@16,
(-5614)@16<=s L0x7fffffffd9e0,L0x7fffffffd9e0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9e2,L0x7fffffffd9e2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9e4,L0x7fffffffd9e4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9e6,L0x7fffffffd9e6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9e8,L0x7fffffffd9e8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ea,L0x7fffffffd9ea<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ec,L0x7fffffffd9ec<=s5614@16,
(-5614)@16<=s L0x7fffffffd9ee,L0x7fffffffd9ee<=s5614@16,
(-5614)@16<=s L0x7fffffffd9f0,L0x7fffffffd9f0<=s5614@16,
(-5614)@16<=s L0x7fffffffd9f2,L0x7fffffffd9f2<=s5614@16,
(-5614)@16<=s L0x7fffffffd9f4,L0x7fffffffd9f4<=s5614@16,
(-5614)@16<=s L0x7fffffffd9f6,L0x7fffffffd9f6<=s5614@16,
(-5614)@16<=s L0x7fffffffd9f8,L0x7fffffffd9f8<=s5614@16,
(-5614)@16<=s L0x7fffffffd9fa,L0x7fffffffd9fa<=s5614@16,
(-5614)@16<=s L0x7fffffffd9fc,L0x7fffffffd9fc<=s5614@16,
(-5614)@16<=s L0x7fffffffd9fe,L0x7fffffffd9fe<=s5614@16,
(-5614)@16<=s L0x7fffffffda00,L0x7fffffffda00<=s5614@16,
(-5614)@16<=s L0x7fffffffda02,L0x7fffffffda02<=s5614@16,
(-5614)@16<=s L0x7fffffffda04,L0x7fffffffda04<=s5614@16,
(-5614)@16<=s L0x7fffffffda06,L0x7fffffffda06<=s5614@16,
(-5614)@16<=s L0x7fffffffda08,L0x7fffffffda08<=s5614@16,
(-5614)@16<=s L0x7fffffffda0a,L0x7fffffffda0a<=s5614@16,
(-5614)@16<=s L0x7fffffffda0c,L0x7fffffffda0c<=s5614@16,
(-5614)@16<=s L0x7fffffffda0e,L0x7fffffffda0e<=s5614@16,
(-5614)@16<=s L0x7fffffffda10,L0x7fffffffda10<=s5614@16,
(-5614)@16<=s L0x7fffffffda12,L0x7fffffffda12<=s5614@16,
(-5614)@16<=s L0x7fffffffda14,L0x7fffffffda14<=s5614@16,
(-5614)@16<=s L0x7fffffffda16,L0x7fffffffda16<=s5614@16,
(-5614)@16<=s L0x7fffffffda18,L0x7fffffffda18<=s5614@16,
(-5614)@16<=s L0x7fffffffda1a,L0x7fffffffda1a<=s5614@16,
(-5614)@16<=s L0x7fffffffda1c,L0x7fffffffda1c<=s5614@16,
(-5614)@16<=s L0x7fffffffda1e,L0x7fffffffda1e<=s5614@16,
(-5614)@16<=s L0x7fffffffda20,L0x7fffffffda20<=s5614@16,
(-5614)@16<=s L0x7fffffffda22,L0x7fffffffda22<=s5614@16,
(-5614)@16<=s L0x7fffffffda24,L0x7fffffffda24<=s5614@16,
(-5614)@16<=s L0x7fffffffda26,L0x7fffffffda26<=s5614@16,
(-5614)@16<=s L0x7fffffffda28,L0x7fffffffda28<=s5614@16,
(-5614)@16<=s L0x7fffffffda2a,L0x7fffffffda2a<=s5614@16,
(-5614)@16<=s L0x7fffffffda2c,L0x7fffffffda2c<=s5614@16,
(-5614)@16<=s L0x7fffffffda2e,L0x7fffffffda2e<=s5614@16,
(-5614)@16<=s L0x7fffffffda30,L0x7fffffffda30<=s5614@16,
(-5614)@16<=s L0x7fffffffda32,L0x7fffffffda32<=s5614@16,
(-5614)@16<=s L0x7fffffffda34,L0x7fffffffda34<=s5614@16,
(-5614)@16<=s L0x7fffffffda36,L0x7fffffffda36<=s5614@16,
(-5614)@16<=s L0x7fffffffda38,L0x7fffffffda38<=s5614@16,
(-5614)@16<=s L0x7fffffffda3a,L0x7fffffffda3a<=s5614@16,
(-5614)@16<=s L0x7fffffffda3c,L0x7fffffffda3c<=s5614@16,
(-5614)@16<=s L0x7fffffffda3e,L0x7fffffffda3e<=s5614@16,
(-5614)@16<=s L0x7fffffffda40,L0x7fffffffda40<=s5614@16,
(-5614)@16<=s L0x7fffffffda42,L0x7fffffffda42<=s5614@16,
(-5614)@16<=s L0x7fffffffda44,L0x7fffffffda44<=s5614@16,
(-5614)@16<=s L0x7fffffffda46,L0x7fffffffda46<=s5614@16,
(-5614)@16<=s L0x7fffffffda48,L0x7fffffffda48<=s5614@16,
(-5614)@16<=s L0x7fffffffda4a,L0x7fffffffda4a<=s5614@16,
(-5614)@16<=s L0x7fffffffda4c,L0x7fffffffda4c<=s5614@16,
(-5614)@16<=s L0x7fffffffda4e,L0x7fffffffda4e<=s5614@16,
(-5614)@16<=s L0x7fffffffda50,L0x7fffffffda50<=s5614@16,
(-5614)@16<=s L0x7fffffffda52,L0x7fffffffda52<=s5614@16,
(-5614)@16<=s L0x7fffffffda54,L0x7fffffffda54<=s5614@16,
(-5614)@16<=s L0x7fffffffda56,L0x7fffffffda56<=s5614@16,
(-5614)@16<=s L0x7fffffffda58,L0x7fffffffda58<=s5614@16,
(-5614)@16<=s L0x7fffffffda5a,L0x7fffffffda5a<=s5614@16,
(-5614)@16<=s L0x7fffffffda5c,L0x7fffffffda5c<=s5614@16,
(-5614)@16<=s L0x7fffffffda5e,L0x7fffffffda5e<=s5614@16,
(-5614)@16<=s L0x7fffffffda60,L0x7fffffffda60<=s5614@16,
(-5614)@16<=s L0x7fffffffda62,L0x7fffffffda62<=s5614@16,
(-5614)@16<=s L0x7fffffffda64,L0x7fffffffda64<=s5614@16,
(-5614)@16<=s L0x7fffffffda66,L0x7fffffffda66<=s5614@16,
(-5614)@16<=s L0x7fffffffda68,L0x7fffffffda68<=s5614@16,
(-5614)@16<=s L0x7fffffffda6a,L0x7fffffffda6a<=s5614@16,
(-5614)@16<=s L0x7fffffffda6c,L0x7fffffffda6c<=s5614@16,
(-5614)@16<=s L0x7fffffffda6e,L0x7fffffffda6e<=s5614@16,
(-5614)@16<=s L0x7fffffffda70,L0x7fffffffda70<=s5614@16,
(-5614)@16<=s L0x7fffffffda72,L0x7fffffffda72<=s5614@16,
(-5614)@16<=s L0x7fffffffda74,L0x7fffffffda74<=s5614@16,
(-5614)@16<=s L0x7fffffffda76,L0x7fffffffda76<=s5614@16,
(-5614)@16<=s L0x7fffffffda78,L0x7fffffffda78<=s5614@16,
(-5614)@16<=s L0x7fffffffda7a,L0x7fffffffda7a<=s5614@16,
(-5614)@16<=s L0x7fffffffda7c,L0x7fffffffda7c<=s5614@16,
(-5614)@16<=s L0x7fffffffda7e,L0x7fffffffda7e<=s5614@16,
(-5614)@16<=s L0x7fffffffda80,L0x7fffffffda80<=s5614@16,
(-5614)@16<=s L0x7fffffffda82,L0x7fffffffda82<=s5614@16,
(-5614)@16<=s L0x7fffffffda84,L0x7fffffffda84<=s5614@16,
(-5614)@16<=s L0x7fffffffda86,L0x7fffffffda86<=s5614@16,
(-5614)@16<=s L0x7fffffffda88,L0x7fffffffda88<=s5614@16,
(-5614)@16<=s L0x7fffffffda8a,L0x7fffffffda8a<=s5614@16,
(-5614)@16<=s L0x7fffffffda8c,L0x7fffffffda8c<=s5614@16,
(-5614)@16<=s L0x7fffffffda8e,L0x7fffffffda8e<=s5614@16,
(-5614)@16<=s L0x7fffffffda90,L0x7fffffffda90<=s5614@16,
(-5614)@16<=s L0x7fffffffda92,L0x7fffffffda92<=s5614@16,
(-5614)@16<=s L0x7fffffffda94,L0x7fffffffda94<=s5614@16,
(-5614)@16<=s L0x7fffffffda96,L0x7fffffffda96<=s5614@16,
(-5614)@16<=s L0x7fffffffda98,L0x7fffffffda98<=s5614@16,
(-5614)@16<=s L0x7fffffffda9a,L0x7fffffffda9a<=s5614@16,
(-5614)@16<=s L0x7fffffffda9c,L0x7fffffffda9c<=s5614@16,
(-5614)@16<=s L0x7fffffffda9e,L0x7fffffffda9e<=s5614@16,
(-5614)@16<=s L0x7fffffffdaa0,L0x7fffffffdaa0<=s5614@16,
(-5614)@16<=s L0x7fffffffdaa2,L0x7fffffffdaa2<=s5614@16,
(-5614)@16<=s L0x7fffffffdaa4,L0x7fffffffdaa4<=s5614@16,
(-5614)@16<=s L0x7fffffffdaa6,L0x7fffffffdaa6<=s5614@16,
(-5614)@16<=s L0x7fffffffdaa8,L0x7fffffffdaa8<=s5614@16,
(-5614)@16<=s L0x7fffffffdaaa,L0x7fffffffdaaa<=s5614@16,
(-5614)@16<=s L0x7fffffffdaac,L0x7fffffffdaac<=s5614@16,
(-5614)@16<=s L0x7fffffffdaae,L0x7fffffffdaae<=s5614@16,
(-5614)@16<=s L0x7fffffffdab0,L0x7fffffffdab0<=s5614@16,
(-5614)@16<=s L0x7fffffffdab2,L0x7fffffffdab2<=s5614@16,
(-5614)@16<=s L0x7fffffffdab4,L0x7fffffffdab4<=s5614@16,
(-5614)@16<=s L0x7fffffffdab6,L0x7fffffffdab6<=s5614@16,
(-5614)@16<=s L0x7fffffffdab8,L0x7fffffffdab8<=s5614@16,
(-5614)@16<=s L0x7fffffffdaba,L0x7fffffffdaba<=s5614@16,
(-5614)@16<=s L0x7fffffffdabc,L0x7fffffffdabc<=s5614@16,
(-5614)@16<=s L0x7fffffffdabe,L0x7fffffffdabe<=s5614@16,
(-5614)@16<=s L0x7fffffffdac0,L0x7fffffffdac0<=s5614@16,
(-5614)@16<=s L0x7fffffffdac2,L0x7fffffffdac2<=s5614@16,
(-5614)@16<=s L0x7fffffffdac4,L0x7fffffffdac4<=s5614@16,
(-5614)@16<=s L0x7fffffffdac6,L0x7fffffffdac6<=s5614@16,
(-5614)@16<=s L0x7fffffffdac8,L0x7fffffffdac8<=s5614@16,
(-5614)@16<=s L0x7fffffffdaca,L0x7fffffffdaca<=s5614@16,
(-5614)@16<=s L0x7fffffffdacc,L0x7fffffffdacc<=s5614@16,
(-5614)@16<=s L0x7fffffffdace,L0x7fffffffdace<=s5614@16,
(-5614)@16<=s L0x7fffffffdad0,L0x7fffffffdad0<=s5614@16,
(-5614)@16<=s L0x7fffffffdad2,L0x7fffffffdad2<=s5614@16,
(-5614)@16<=s L0x7fffffffdad4,L0x7fffffffdad4<=s5614@16,
(-5614)@16<=s L0x7fffffffdad6,L0x7fffffffdad6<=s5614@16,
(-5614)@16<=s L0x7fffffffdad8,L0x7fffffffdad8<=s5614@16,
(-5614)@16<=s L0x7fffffffdada,L0x7fffffffdada<=s5614@16,
(-5614)@16<=s L0x7fffffffdadc,L0x7fffffffdadc<=s5614@16,
(-5614)@16<=s L0x7fffffffdade,L0x7fffffffdade<=s5614@16
]
}

(**************** CUT   0 *****************)

ecut and [
eqmod (inp_poly000**2) (L0x7fffffffd2e0*x** 0+L0x7fffffffd2f0*x** 1)
      [10753, x**2 - 1],
eqmod (inp_poly001**2) (L0x7fffffffd300*x** 0+L0x7fffffffd310*x** 1)
      [10753, x**2 - 10752],
eqmod (inp_poly002**2) (L0x7fffffffd2e2*x** 0+L0x7fffffffd2f2*x** 1)
      [10753, x**2 - 6264],
eqmod (inp_poly003**2) (L0x7fffffffd302*x** 0+L0x7fffffffd312*x** 1)
      [10753, x**2 - 4489],
eqmod (inp_poly004**2) (L0x7fffffffd2e4*x** 0+L0x7fffffffd2f4*x** 1)
      [10753, x**2 - 321],
eqmod (inp_poly005**2) (L0x7fffffffd304*x** 0+L0x7fffffffd314*x** 1)
      [10753, x**2 - 10432],
eqmod (inp_poly006**2) (L0x7fffffffd2e6*x** 0+L0x7fffffffd2f6*x** 1)
      [10753, x**2 - 10686],
eqmod (inp_poly007**2) (L0x7fffffffd306*x** 0+L0x7fffffffd316*x** 1)
      [10753, x**2 - 67],
eqmod (inp_poly008**2) (L0x7fffffffd2e8*x** 0+L0x7fffffffd2f8*x** 1)
      [10753, x**2 - 9097],
eqmod (inp_poly009**2) (L0x7fffffffd308*x** 0+L0x7fffffffd318*x** 1)
      [10753, x**2 - 1656],
eqmod (inp_poly00a**2) (L0x7fffffffd2ea*x** 0+L0x7fffffffd2fa*x** 1)
      [10753, x**2 - 3461],
eqmod (inp_poly00b**2) (L0x7fffffffd30a*x** 0+L0x7fffffffd31a*x** 1)
      [10753, x**2 - 7292],
eqmod (inp_poly00c**2) (L0x7fffffffd2ec*x** 0+L0x7fffffffd2fc*x** 1)
      [10753, x**2 - 6074],
eqmod (inp_poly00d**2) (L0x7fffffffd30c*x** 0+L0x7fffffffd31c*x** 1)
      [10753, x**2 - 4679],
eqmod (inp_poly00e**2) (L0x7fffffffd2ee*x** 0+L0x7fffffffd2fe*x** 1)
      [10753, x**2 - 3422],
eqmod (inp_poly00f**2) (L0x7fffffffd30e*x** 0+L0x7fffffffd31e*x** 1)
      [10753, x**2 - 7331],
eqmod (inp_poly010**2) (L0x7fffffffd320*x** 0+L0x7fffffffd330*x** 1)
      [10753, x**2 - 1154],
eqmod (inp_poly011**2) (L0x7fffffffd340*x** 0+L0x7fffffffd350*x** 1)
      [10753, x**2 - 9599],
eqmod (inp_poly012**2) (L0x7fffffffd322*x** 0+L0x7fffffffd332*x** 1)
      [10753, x**2 - 2640],
eqmod (inp_poly013**2) (L0x7fffffffd342*x** 0+L0x7fffffffd352*x** 1)
      [10753, x**2 - 8113],
eqmod (inp_poly014**2) (L0x7fffffffd324*x** 0+L0x7fffffffd334*x** 1)
      [10753, x**2 - 4832],
eqmod (inp_poly015**2) (L0x7fffffffd344*x** 0+L0x7fffffffd354*x** 1)
      [10753, x**2 - 5921],
eqmod (inp_poly016**2) (L0x7fffffffd326*x** 0+L0x7fffffffd336*x** 1)
      [10753, x**2 - 8706],
eqmod (inp_poly017**2) (L0x7fffffffd346*x** 0+L0x7fffffffd356*x** 1)
      [10753, x**2 - 2047],
eqmod (inp_poly018**2) (L0x7fffffffd328*x** 0+L0x7fffffffd338*x** 1)
      [10753, x**2 - 3010],
eqmod (inp_poly019**2) (L0x7fffffffd348*x** 0+L0x7fffffffd358*x** 1)
      [10753, x**2 - 7743],
eqmod (inp_poly01a**2) (L0x7fffffffd32a*x** 0+L0x7fffffffd33a*x** 1)
      [10753, x**2 - 4631],
eqmod (inp_poly01b**2) (L0x7fffffffd34a*x** 0+L0x7fffffffd35a*x** 1)
      [10753, x**2 - 6122],
eqmod (inp_poly01c**2) (L0x7fffffffd32c*x** 0+L0x7fffffffd33c*x** 1)
      [10753, x**2 - 9193],
eqmod (inp_poly01d**2) (L0x7fffffffd34c*x** 0+L0x7fffffffd35c*x** 1)
      [10753, x**2 - 1560],
eqmod (inp_poly01e**2) (L0x7fffffffd32e*x** 0+L0x7fffffffd33e*x** 1)
      [10753, x**2 - 2637],
eqmod (inp_poly01f**2) (L0x7fffffffd34e*x** 0+L0x7fffffffd35e*x** 1)
      [10753, x**2 - 8116],
eqmod (inp_poly020**2) (L0x7fffffffd360*x** 0+L0x7fffffffd370*x** 1)
      [10753, x**2 - 7853],
eqmod (inp_poly021**2) (L0x7fffffffd380*x** 0+L0x7fffffffd390*x** 1)
      [10753, x**2 - 2900],
eqmod (inp_poly022**2) (L0x7fffffffd362*x** 0+L0x7fffffffd372*x** 1)
      [10753, x**2 - 6970],
eqmod (inp_poly023**2) (L0x7fffffffd382*x** 0+L0x7fffffffd392*x** 1)
      [10753, x**2 - 3783],
eqmod (inp_poly024**2) (L0x7fffffffd364*x** 0+L0x7fffffffd374*x** 1)
      [10753, x**2 - 4611],
eqmod (inp_poly025**2) (L0x7fffffffd384*x** 0+L0x7fffffffd394*x** 1)
      [10753, x**2 - 6142],
eqmod (inp_poly026**2) (L0x7fffffffd366*x** 0+L0x7fffffffd376*x** 1)
      [10753, x**2 - 746],
eqmod (inp_poly027**2) (L0x7fffffffd386*x** 0+L0x7fffffffd396*x** 1)
      [10753, x**2 - 10007],
eqmod (inp_poly028**2) (L0x7fffffffd368*x** 0+L0x7fffffffd378*x** 1)
      [10753, x**2 - 6562],
eqmod (inp_poly029**2) (L0x7fffffffd388*x** 0+L0x7fffffffd398*x** 1)
      [10753, x**2 - 4191],
eqmod (inp_poly02a**2) (L0x7fffffffd36a*x** 0+L0x7fffffffd37a*x** 1)
      [10753, x**2 - 6402],
eqmod (inp_poly02b**2) (L0x7fffffffd38a*x** 0+L0x7fffffffd39a*x** 1)
      [10753, x**2 - 4351],
eqmod (inp_poly02c**2) (L0x7fffffffd36c*x** 0+L0x7fffffffd37c*x** 1)
      [10753, x**2 - 9567],
eqmod (inp_poly02d**2) (L0x7fffffffd38c*x** 0+L0x7fffffffd39c*x** 1)
      [10753, x**2 - 1186],
eqmod (inp_poly02e**2) (L0x7fffffffd36e*x** 0+L0x7fffffffd37e*x** 1)
      [10753, x**2 - 1219],
eqmod (inp_poly02f**2) (L0x7fffffffd38e*x** 0+L0x7fffffffd39e*x** 1)
      [10753, x**2 - 9534],
eqmod (inp_poly030**2) (L0x7fffffffd3a0*x** 0+L0x7fffffffd3b0*x** 1)
      [10753, x**2 - 8336],
eqmod (inp_poly031**2) (L0x7fffffffd3c0*x** 0+L0x7fffffffd3d0*x** 1)
      [10753, x**2 - 2417],
eqmod (inp_poly032**2) (L0x7fffffffd3a2*x** 0+L0x7fffffffd3b2*x** 1)
      [10753, x**2 - 136],
eqmod (inp_poly033**2) (L0x7fffffffd3c2*x** 0+L0x7fffffffd3d2*x** 1)
      [10753, x**2 - 10617],
eqmod (inp_poly034**2) (L0x7fffffffd3a4*x** 0+L0x7fffffffd3b4*x** 1)
      [10753, x**2 - 9112],
eqmod (inp_poly035**2) (L0x7fffffffd3c4*x** 0+L0x7fffffffd3d4*x** 1)
      [10753, x**2 - 1641],
eqmod (inp_poly036**2) (L0x7fffffffd3a6*x** 0+L0x7fffffffd3b6*x** 1)
      [10753, x**2 - 644],
eqmod (inp_poly037**2) (L0x7fffffffd3c6*x** 0+L0x7fffffffd3d6*x** 1)
      [10753, x**2 - 10109],
eqmod (inp_poly038**2) (L0x7fffffffd3a8*x** 0+L0x7fffffffd3b8*x** 1)
      [10753, x**2 - 2436],
eqmod (inp_poly039**2) (L0x7fffffffd3c8*x** 0+L0x7fffffffd3d8*x** 1)
      [10753, x**2 - 8317],
eqmod (inp_poly03a**2) (L0x7fffffffd3aa*x** 0+L0x7fffffffd3ba*x** 1)
      [10753, x**2 - 597],
eqmod (inp_poly03b**2) (L0x7fffffffd3ca*x** 0+L0x7fffffffd3da*x** 1)
      [10753, x**2 - 10156],
eqmod (inp_poly03c**2) (L0x7fffffffd3ac*x** 0+L0x7fffffffd3bc*x** 1)
      [10753, x**2 - 7740],
eqmod (inp_poly03d**2) (L0x7fffffffd3cc*x** 0+L0x7fffffffd3dc*x** 1)
      [10753, x**2 - 3013],
eqmod (inp_poly03e**2) (L0x7fffffffd3ae*x** 0+L0x7fffffffd3be*x** 1)
      [10753, x**2 - 8836],
eqmod (inp_poly03f**2) (L0x7fffffffd3ce*x** 0+L0x7fffffffd3de*x** 1)
      [10753, x**2 - 1917]
] prove with [ precondition ];



(**************** CUT   1 *****************)

ecut and [
eqmod (inp_poly040**2) (L0x7fffffffd3e0*x** 0+L0x7fffffffd3f0*x** 1)
      [10753, x**2 - 10000],
eqmod (inp_poly041**2) (L0x7fffffffd400*x** 0+L0x7fffffffd410*x** 1)
      [10753, x**2 - 753],
eqmod (inp_poly042**2) (L0x7fffffffd3e2*x** 0+L0x7fffffffd3f2*x** 1)
      [10753, x**2 - 3775],
eqmod (inp_poly043**2) (L0x7fffffffd402*x** 0+L0x7fffffffd412*x** 1)
      [10753, x**2 - 6978],
eqmod (inp_poly044**2) (L0x7fffffffd3e4*x** 0+L0x7fffffffd3f4*x** 1)
      [10753, x**2 - 5606],
eqmod (inp_poly045**2) (L0x7fffffffd404*x** 0+L0x7fffffffd414*x** 1)
      [10753, x**2 - 5147],
eqmod (inp_poly046**2) (L0x7fffffffd3e6*x** 0+L0x7fffffffd3f6*x** 1)
      [10753, x**2 - 7439],
eqmod (inp_poly047**2) (L0x7fffffffd406*x** 0+L0x7fffffffd416*x** 1)
      [10753, x**2 - 3314],
eqmod (inp_poly048**2) (L0x7fffffffd3e8*x** 0+L0x7fffffffd3f8*x** 1)
      [10753, x**2 - 10373],
eqmod (inp_poly049**2) (L0x7fffffffd408*x** 0+L0x7fffffffd418*x** 1)
      [10753, x**2 - 380],
eqmod (inp_poly04a**2) (L0x7fffffffd3ea*x** 0+L0x7fffffffd3fa*x** 1)
      [10753, x**2 - 6846],
eqmod (inp_poly04b**2) (L0x7fffffffd40a*x** 0+L0x7fffffffd41a*x** 1)
      [10753, x**2 - 3907],
eqmod (inp_poly04c**2) (L0x7fffffffd3ec*x** 0+L0x7fffffffd3fc*x** 1)
      [10753, x**2 - 7056],
eqmod (inp_poly04d**2) (L0x7fffffffd40c*x** 0+L0x7fffffffd41c*x** 1)
      [10753, x**2 - 3697],
eqmod (inp_poly04e**2) (L0x7fffffffd3ee*x** 0+L0x7fffffffd3fe*x** 1)
      [10753, x**2 - 3954],
eqmod (inp_poly04f**2) (L0x7fffffffd40e*x** 0+L0x7fffffffd41e*x** 1)
      [10753, x**2 - 6799],
eqmod (inp_poly050**2) (L0x7fffffffd420*x** 0+L0x7fffffffd430*x** 1)
      [10753, x**2 - 2031],
eqmod (inp_poly051**2) (L0x7fffffffd440*x** 0+L0x7fffffffd450*x** 1)
      [10753, x**2 - 8722],
eqmod (inp_poly052**2) (L0x7fffffffd422*x** 0+L0x7fffffffd432*x** 1)
      [10753, x**2 - 1385],
eqmod (inp_poly053**2) (L0x7fffffffd442*x** 0+L0x7fffffffd452*x** 1)
      [10753, x**2 - 9368],
eqmod (inp_poly054**2) (L0x7fffffffd424*x** 0+L0x7fffffffd434*x** 1)
      [10753, x**2 - 6771],
eqmod (inp_poly055**2) (L0x7fffffffd444*x** 0+L0x7fffffffd454*x** 1)
      [10753, x**2 - 3982],
eqmod (inp_poly056**2) (L0x7fffffffd426*x** 0+L0x7fffffffd436*x** 1)
      [10753, x**2 - 3712],
eqmod (inp_poly057**2) (L0x7fffffffd446*x** 0+L0x7fffffffd456*x** 1)
      [10753, x**2 - 7041],
eqmod (inp_poly058**2) (L0x7fffffffd428*x** 0+L0x7fffffffd438*x** 1)
      [10753, x**2 - 2353],
eqmod (inp_poly059**2) (L0x7fffffffd448*x** 0+L0x7fffffffd458*x** 1)
      [10753, x**2 - 8400],
eqmod (inp_poly05a**2) (L0x7fffffffd42a*x** 0+L0x7fffffffd43a*x** 1)
      [10753, x**2 - 7582],
eqmod (inp_poly05b**2) (L0x7fffffffd44a*x** 0+L0x7fffffffd45a*x** 1)
      [10753, x**2 - 3171],
eqmod (inp_poly05c**2) (L0x7fffffffd42c*x** 0+L0x7fffffffd43c*x** 1)
      [10753, x**2 - 2603],
eqmod (inp_poly05d**2) (L0x7fffffffd44c*x** 0+L0x7fffffffd45c*x** 1)
      [10753, x**2 - 8150],
eqmod (inp_poly05e**2) (L0x7fffffffd42e*x** 0+L0x7fffffffd43e*x** 1)
      [10753, x**2 - 3644],
eqmod (inp_poly05f**2) (L0x7fffffffd44e*x** 0+L0x7fffffffd45e*x** 1)
      [10753, x**2 - 7109],
eqmod (inp_poly060**2) (L0x7fffffffd460*x** 0+L0x7fffffffd470*x** 1)
      [10753, x**2 - 841],
eqmod (inp_poly061**2) (L0x7fffffffd480*x** 0+L0x7fffffffd490*x** 1)
      [10753, x**2 - 9912],
eqmod (inp_poly062**2) (L0x7fffffffd462*x** 0+L0x7fffffffd472*x** 1)
      [10753, x**2 - 9807],
eqmod (inp_poly063**2) (L0x7fffffffd482*x** 0+L0x7fffffffd492*x** 1)
      [10753, x**2 - 946],
eqmod (inp_poly064**2) (L0x7fffffffd464*x** 0+L0x7fffffffd474*x** 1)
      [10753, x**2 - 1136],
eqmod (inp_poly065**2) (L0x7fffffffd484*x** 0+L0x7fffffffd494*x** 1)
      [10753, x**2 - 9617],
eqmod (inp_poly066**2) (L0x7fffffffd466*x** 0+L0x7fffffffd476*x** 1)
      [10753, x**2 - 8171],
eqmod (inp_poly067**2) (L0x7fffffffd486*x** 0+L0x7fffffffd496*x** 1)
      [10753, x**2 - 2582],
eqmod (inp_poly068**2) (L0x7fffffffd468*x** 0+L0x7fffffffd478*x** 1)
      [10753, x**2 - 5194],
eqmod (inp_poly069**2) (L0x7fffffffd488*x** 0+L0x7fffffffd498*x** 1)
      [10753, x**2 - 5559],
eqmod (inp_poly06a**2) (L0x7fffffffd46a*x** 0+L0x7fffffffd47a*x** 1)
      [10753, x**2 - 7391],
eqmod (inp_poly06b**2) (L0x7fffffffd48a*x** 0+L0x7fffffffd49a*x** 1)
      [10753, x**2 - 3362],
eqmod (inp_poly06c**2) (L0x7fffffffd46c*x** 0+L0x7fffffffd47c*x** 1)
      [10753, x**2 - 559],
eqmod (inp_poly06d**2) (L0x7fffffffd48c*x** 0+L0x7fffffffd49c*x** 1)
      [10753, x**2 - 10194],
eqmod (inp_poly06e**2) (L0x7fffffffd46e*x** 0+L0x7fffffffd47e*x** 1)
      [10753, x**2 - 6851],
eqmod (inp_poly06f**2) (L0x7fffffffd48e*x** 0+L0x7fffffffd49e*x** 1)
      [10753, x**2 - 3902],
eqmod (inp_poly070**2) (L0x7fffffffd4a0*x** 0+L0x7fffffffd4b0*x** 1)
      [10753, x**2 - 2744],
eqmod (inp_poly071**2) (L0x7fffffffd4c0*x** 0+L0x7fffffffd4d0*x** 1)
      [10753, x**2 - 8009],
eqmod (inp_poly072**2) (L0x7fffffffd4a2*x** 0+L0x7fffffffd4b2*x** 1)
      [10753, x**2 - 5122],
eqmod (inp_poly073**2) (L0x7fffffffd4c2*x** 0+L0x7fffffffd4d2*x** 1)
      [10753, x**2 - 5631],
eqmod (inp_poly074**2) (L0x7fffffffd4a4*x** 0+L0x7fffffffd4b4*x** 1)
      [10753, x**2 - 9831],
eqmod (inp_poly075**2) (L0x7fffffffd4c4*x** 0+L0x7fffffffd4d4*x** 1)
      [10753, x**2 - 922],
eqmod (inp_poly076**2) (L0x7fffffffd4a6*x** 0+L0x7fffffffd4b6*x** 1)
      [10753, x**2 - 9706],
eqmod (inp_poly077**2) (L0x7fffffffd4c6*x** 0+L0x7fffffffd4d6*x** 1)
      [10753, x**2 - 1047],
eqmod (inp_poly078**2) (L0x7fffffffd4a8*x** 0+L0x7fffffffd4b8*x** 1)
      [10753, x**2 - 4455],
eqmod (inp_poly079**2) (L0x7fffffffd4c8*x** 0+L0x7fffffffd4d8*x** 1)
      [10753, x**2 - 6298],
eqmod (inp_poly07a**2) (L0x7fffffffd4aa*x** 0+L0x7fffffffd4ba*x** 1)
      [10753, x**2 - 2085],
eqmod (inp_poly07b**2) (L0x7fffffffd4ca*x** 0+L0x7fffffffd4da*x** 1)
      [10753, x**2 - 8668],
eqmod (inp_poly07c**2) (L0x7fffffffd4ac*x** 0+L0x7fffffffd4bc*x** 1)
      [10753, x**2 - 10659],
eqmod (inp_poly07d**2) (L0x7fffffffd4cc*x** 0+L0x7fffffffd4dc*x** 1)
      [10753, x**2 - 94],
eqmod (inp_poly07e**2) (L0x7fffffffd4ae*x** 0+L0x7fffffffd4be*x** 1)
      [10753, x**2 - 2599],
eqmod (inp_poly07f**2) (L0x7fffffffd4ce*x** 0+L0x7fffffffd4de*x** 1)
      [10753, x**2 - 8154]
] prove with [ precondition ];



(**************** CUT   2 *****************)

ecut and [
eqmod (inp_poly080**2) (L0x7fffffffd4e0*x** 0+L0x7fffffffd4f0*x** 1)
      [10753, x**2 - 100],
eqmod (inp_poly081**2) (L0x7fffffffd500*x** 0+L0x7fffffffd510*x** 1)
      [10753, x**2 - 10653],
eqmod (inp_poly082**2) (L0x7fffffffd4e2*x** 0+L0x7fffffffd4f2*x** 1)
      [10753, x**2 - 2726],
eqmod (inp_poly083**2) (L0x7fffffffd502*x** 0+L0x7fffffffd512*x** 1)
      [10753, x**2 - 8027],
eqmod (inp_poly084**2) (L0x7fffffffd4e4*x** 0+L0x7fffffffd4f4*x** 1)
      [10753, x**2 - 10594],
eqmod (inp_poly085**2) (L0x7fffffffd504*x** 0+L0x7fffffffd514*x** 1)
      [10753, x**2 - 159],
eqmod (inp_poly086**2) (L0x7fffffffd4e6*x** 0+L0x7fffffffd4f6*x** 1)
      [10753, x**2 - 4053],
eqmod (inp_poly087**2) (L0x7fffffffd506*x** 0+L0x7fffffffd516*x** 1)
      [10753, x**2 - 6700],
eqmod (inp_poly088**2) (L0x7fffffffd4e8*x** 0+L0x7fffffffd4f8*x** 1)
      [10753, x**2 - 6448],
eqmod (inp_poly089**2) (L0x7fffffffd508*x** 0+L0x7fffffffd518*x** 1)
      [10753, x**2 - 4305],
eqmod (inp_poly08a**2) (L0x7fffffffd4ea*x** 0+L0x7fffffffd4fa*x** 1)
      [10753, x**2 - 2004],
eqmod (inp_poly08b**2) (L0x7fffffffd50a*x** 0+L0x7fffffffd51a*x** 1)
      [10753, x**2 - 8749],
eqmod (inp_poly08c**2) (L0x7fffffffd4ec*x** 0+L0x7fffffffd4fc*x** 1)
      [10753, x**2 - 5232],
eqmod (inp_poly08d**2) (L0x7fffffffd50c*x** 0+L0x7fffffffd51c*x** 1)
      [10753, x**2 - 5521],
eqmod (inp_poly08e**2) (L0x7fffffffd4ee*x** 0+L0x7fffffffd4fe*x** 1)
      [10753, x**2 - 8857],
eqmod (inp_poly08f**2) (L0x7fffffffd50e*x** 0+L0x7fffffffd51e*x** 1)
      [10753, x**2 - 1896],
eqmod (inp_poly090**2) (L0x7fffffffd520*x** 0+L0x7fffffffd530*x** 1)
      [10753, x**2 - 7870],
eqmod (inp_poly091**2) (L0x7fffffffd540*x** 0+L0x7fffffffd550*x** 1)
      [10753, x**2 - 2883],
eqmod (inp_poly092**2) (L0x7fffffffd522*x** 0+L0x7fffffffd532*x** 1)
      [10753, x**2 - 5928],
eqmod (inp_poly093**2) (L0x7fffffffd542*x** 0+L0x7fffffffd552*x** 1)
      [10753, x**2 - 4825],
eqmod (inp_poly094**2) (L0x7fffffffd524*x** 0+L0x7fffffffd534*x** 1)
      [10753, x**2 - 10068],
eqmod (inp_poly095**2) (L0x7fffffffd544*x** 0+L0x7fffffffd554*x** 1)
      [10753, x**2 - 685],
eqmod (inp_poly096**2) (L0x7fffffffd526*x** 0+L0x7fffffffd536*x** 1)
      [10753, x**2 - 10360],
eqmod (inp_poly097**2) (L0x7fffffffd546*x** 0+L0x7fffffffd556*x** 1)
      [10753, x**2 - 393],
eqmod (inp_poly098**2) (L0x7fffffffd528*x** 0+L0x7fffffffd538*x** 1)
      [10753, x**2 - 10669],
eqmod (inp_poly099**2) (L0x7fffffffd548*x** 0+L0x7fffffffd558*x** 1)
      [10753, x**2 - 84],
eqmod (inp_poly09a**2) (L0x7fffffffd52a*x** 0+L0x7fffffffd53a*x** 1)
      [10753, x**2 - 721],
eqmod (inp_poly09b**2) (L0x7fffffffd54a*x** 0+L0x7fffffffd55a*x** 1)
      [10753, x**2 - 10032],
eqmod (inp_poly09c**2) (L0x7fffffffd52c*x** 0+L0x7fffffffd53c*x** 1)
      [10753, x**2 - 5295],
eqmod (inp_poly09d**2) (L0x7fffffffd54c*x** 0+L0x7fffffffd55c*x** 1)
      [10753, x**2 - 5458],
eqmod (inp_poly09e**2) (L0x7fffffffd52e*x** 0+L0x7fffffffd53e*x** 1)
      [10753, x**2 - 5628],
eqmod (inp_poly09f**2) (L0x7fffffffd54e*x** 0+L0x7fffffffd55e*x** 1)
      [10753, x**2 - 5125],
eqmod (inp_poly0a0**2) (L0x7fffffffd560*x** 0+L0x7fffffffd570*x** 1)
      [10753, x**2 - 331],
eqmod (inp_poly0a1**2) (L0x7fffffffd580*x** 0+L0x7fffffffd590*x** 1)
      [10753, x**2 - 10422],
eqmod (inp_poly0a2**2) (L0x7fffffffd562*x** 0+L0x7fffffffd572*x** 1)
      [10753, x**2 - 8808],
eqmod (inp_poly0a3**2) (L0x7fffffffd582*x** 0+L0x7fffffffd592*x** 1)
      [10753, x**2 - 1945],
eqmod (inp_poly0a4**2) (L0x7fffffffd564*x** 0+L0x7fffffffd574*x** 1)
      [10753, x**2 - 9474],
eqmod (inp_poly0a5**2) (L0x7fffffffd584*x** 0+L0x7fffffffd594*x** 1)
      [10753, x**2 - 1279],
eqmod (inp_poly0a6**2) (L0x7fffffffd566*x** 0+L0x7fffffffd576*x** 1)
      [10753, x**2 - 10082],
eqmod (inp_poly0a7**2) (L0x7fffffffd586*x** 0+L0x7fffffffd596*x** 1)
      [10753, x**2 - 671],
eqmod (inp_poly0a8**2) (L0x7fffffffd568*x** 0+L0x7fffffffd578*x** 1)
      [10753, x**2 - 267],
eqmod (inp_poly0a9**2) (L0x7fffffffd588*x** 0+L0x7fffffffd598*x** 1)
      [10753, x**2 - 10486],
eqmod (inp_poly0aa**2) (L0x7fffffffd56a*x** 0+L0x7fffffffd57a*x** 1)
      [10753, x**2 - 5773],
eqmod (inp_poly0ab**2) (L0x7fffffffd58a*x** 0+L0x7fffffffd59a*x** 1)
      [10753, x**2 - 4980],
eqmod (inp_poly0ac**2) (L0x7fffffffd56c*x** 0+L0x7fffffffd57c*x** 1)
      [10753, x**2 - 10436],
eqmod (inp_poly0ad**2) (L0x7fffffffd58c*x** 0+L0x7fffffffd59c*x** 1)
      [10753, x**2 - 317],
eqmod (inp_poly0ae**2) (L0x7fffffffd56e*x** 0+L0x7fffffffd57e*x** 1)
      [10753, x**2 - 3617],
eqmod (inp_poly0af**2) (L0x7fffffffd58e*x** 0+L0x7fffffffd59e*x** 1)
      [10753, x**2 - 7136],
eqmod (inp_poly0b0**2) (L0x7fffffffd5a0*x** 0+L0x7fffffffd5b0*x** 1)
      [10753, x**2 - 5619],
eqmod (inp_poly0b1**2) (L0x7fffffffd5c0*x** 0+L0x7fffffffd5d0*x** 1)
      [10753, x**2 - 5134],
eqmod (inp_poly0b2**2) (L0x7fffffffd5a2*x** 0+L0x7fffffffd5b2*x** 1)
      [10753, x**2 - 2847],
eqmod (inp_poly0b3**2) (L0x7fffffffd5c2*x** 0+L0x7fffffffd5d2*x** 1)
      [10753, x**2 - 7906],
eqmod (inp_poly0b4**2) (L0x7fffffffd5a4*x** 0+L0x7fffffffd5b4*x** 1)
      [10753, x**2 - 7948],
eqmod (inp_poly0b5**2) (L0x7fffffffd5c4*x** 0+L0x7fffffffd5d4*x** 1)
      [10753, x**2 - 2805],
eqmod (inp_poly0b6**2) (L0x7fffffffd5a6*x** 0+L0x7fffffffd5b6*x** 1)
      [10753, x**2 - 10635],
eqmod (inp_poly0b7**2) (L0x7fffffffd5c6*x** 0+L0x7fffffffd5d6*x** 1)
      [10753, x**2 - 118],
eqmod (inp_poly0b8**2) (L0x7fffffffd5a8*x** 0+L0x7fffffffd5b8*x** 1)
      [10753, x**2 - 7034],
eqmod (inp_poly0b9**2) (L0x7fffffffd5c8*x** 0+L0x7fffffffd5d8*x** 1)
      [10753, x**2 - 3719],
eqmod (inp_poly0ba**2) (L0x7fffffffd5aa*x** 0+L0x7fffffffd5ba*x** 1)
      [10753, x**2 - 5935],
eqmod (inp_poly0bb**2) (L0x7fffffffd5ca*x** 0+L0x7fffffffd5da*x** 1)
      [10753, x**2 - 4818],
eqmod (inp_poly0bc**2) (L0x7fffffffd5ac*x** 0+L0x7fffffffd5bc*x** 1)
      [10753, x**2 - 10537],
eqmod (inp_poly0bd**2) (L0x7fffffffd5cc*x** 0+L0x7fffffffd5dc*x** 1)
      [10753, x**2 - 216],
eqmod (inp_poly0be**2) (L0x7fffffffd5ae*x** 0+L0x7fffffffd5be*x** 1)
      [10753, x**2 - 1854],
eqmod (inp_poly0bf**2) (L0x7fffffffd5ce*x** 0+L0x7fffffffd5de*x** 1)
      [10753, x**2 - 8899]
] prove with [ precondition ];



(**************** CUT   3 *****************)

ecut and [
eqmod (inp_poly0c0**2) (L0x7fffffffd5e0*x** 0+L0x7fffffffd5f0*x** 1)
      [10753, x**2 - 10724],
eqmod (inp_poly0c1**2) (L0x7fffffffd600*x** 0+L0x7fffffffd610*x** 1)
      [10753, x**2 - 29],
eqmod (inp_poly0c2**2) (L0x7fffffffd5e2*x** 0+L0x7fffffffd5f2*x** 1)
      [10753, x**2 - 1145],
eqmod (inp_poly0c3**2) (L0x7fffffffd602*x** 0+L0x7fffffffd612*x** 1)
      [10753, x**2 - 9608],
eqmod (inp_poly0c4**2) (L0x7fffffffd5e4*x** 0+L0x7fffffffd5f4*x** 1)
      [10753, x**2 - 1444],
eqmod (inp_poly0c5**2) (L0x7fffffffd604*x** 0+L0x7fffffffd614*x** 1)
      [10753, x**2 - 9309],
eqmod (inp_poly0c6**2) (L0x7fffffffd5e6*x** 0+L0x7fffffffd5f6*x** 1)
      [10753, x**2 - 1943],
eqmod (inp_poly0c7**2) (L0x7fffffffd606*x** 0+L0x7fffffffd616*x** 1)
      [10753, x**2 - 8810],
eqmod (inp_poly0c8**2) (L0x7fffffffd5e8*x** 0+L0x7fffffffd5f8*x** 1)
      [10753, x**2 - 5012],
eqmod (inp_poly0c9**2) (L0x7fffffffd608*x** 0+L0x7fffffffd618*x** 1)
      [10753, x**2 - 5741],
eqmod (inp_poly0ca**2) (L0x7fffffffd5ea*x** 0+L0x7fffffffd5fa*x** 1)
      [10753, x**2 - 7161],
eqmod (inp_poly0cb**2) (L0x7fffffffd60a*x** 0+L0x7fffffffd61a*x** 1)
      [10753, x**2 - 3592],
eqmod (inp_poly0cc**2) (L0x7fffffffd5ec*x** 0+L0x7fffffffd5fc*x** 1)
      [10753, x**2 - 6655],
eqmod (inp_poly0cd**2) (L0x7fffffffd60c*x** 0+L0x7fffffffd61c*x** 1)
      [10753, x**2 - 4098],
eqmod (inp_poly0ce**2) (L0x7fffffffd5ee*x** 0+L0x7fffffffd5fe*x** 1)
      [10753, x**2 - 8292],
eqmod (inp_poly0cf**2) (L0x7fffffffd60e*x** 0+L0x7fffffffd61e*x** 1)
      [10753, x**2 - 2461],
eqmod (inp_poly0d0**2) (L0x7fffffffd620*x** 0+L0x7fffffffd630*x** 1)
      [10753, x**2 - 9546],
eqmod (inp_poly0d1**2) (L0x7fffffffd640*x** 0+L0x7fffffffd650*x** 1)
      [10753, x**2 - 1207],
eqmod (inp_poly0d2**2) (L0x7fffffffd622*x** 0+L0x7fffffffd632*x** 1)
      [10753, x**2 - 9464],
eqmod (inp_poly0d3**2) (L0x7fffffffd642*x** 0+L0x7fffffffd652*x** 1)
      [10753, x**2 - 1289],
eqmod (inp_poly0d4**2) (L0x7fffffffd624*x** 0+L0x7fffffffd634*x** 1)
      [10753, x**2 - 10414],
eqmod (inp_poly0d5**2) (L0x7fffffffd644*x** 0+L0x7fffffffd654*x** 1)
      [10753, x**2 - 339],
eqmod (inp_poly0d6**2) (L0x7fffffffd626*x** 0+L0x7fffffffd636*x** 1)
      [10753, x**2 - 5598],
eqmod (inp_poly0d7**2) (L0x7fffffffd646*x** 0+L0x7fffffffd656*x** 1)
      [10753, x**2 - 5155],
eqmod (inp_poly0d8**2) (L0x7fffffffd628*x** 0+L0x7fffffffd638*x** 1)
      [10753, x**2 - 9487],
eqmod (inp_poly0d9**2) (L0x7fffffffd648*x** 0+L0x7fffffffd658*x** 1)
      [10753, x**2 - 1266],
eqmod (inp_poly0da**2) (L0x7fffffffd62a*x** 0+L0x7fffffffd63a*x** 1)
      [10753, x**2 - 5490],
eqmod (inp_poly0db**2) (L0x7fffffffd64a*x** 0+L0x7fffffffd65a*x** 1)
      [10753, x**2 - 5263],
eqmod (inp_poly0dc**2) (L0x7fffffffd62c*x** 0+L0x7fffffffd63c*x** 1)
      [10753, x**2 - 2228],
eqmod (inp_poly0dd**2) (L0x7fffffffd64c*x** 0+L0x7fffffffd65c*x** 1)
      [10753, x**2 - 8525],
eqmod (inp_poly0de**2) (L0x7fffffffd62e*x** 0+L0x7fffffffd63e*x** 1)
      [10753, x**2 - 9551],
eqmod (inp_poly0df**2) (L0x7fffffffd64e*x** 0+L0x7fffffffd65e*x** 1)
      [10753, x**2 - 1202],
eqmod (inp_poly0e0**2) (L0x7fffffffd660*x** 0+L0x7fffffffd670*x** 1)
      [10753, x**2 - 8829],
eqmod (inp_poly0e1**2) (L0x7fffffffd680*x** 0+L0x7fffffffd690*x** 1)
      [10753, x**2 - 1924],
eqmod (inp_poly0e2**2) (L0x7fffffffd662*x** 0+L0x7fffffffd672*x** 1)
      [10753, x**2 - 2177],
eqmod (inp_poly0e3**2) (L0x7fffffffd682*x** 0+L0x7fffffffd692*x** 1)
      [10753, x**2 - 8576],
eqmod (inp_poly0e4**2) (L0x7fffffffd664*x** 0+L0x7fffffffd674*x** 1)
      [10753, x**2 - 6070],
eqmod (inp_poly0e5**2) (L0x7fffffffd684*x** 0+L0x7fffffffd694*x** 1)
      [10753, x**2 - 4683],
eqmod (inp_poly0e6**2) (L0x7fffffffd666*x** 0+L0x7fffffffd676*x** 1)
      [10753, x**2 - 10625],
eqmod (inp_poly0e7**2) (L0x7fffffffd686*x** 0+L0x7fffffffd696*x** 1)
      [10753, x**2 - 128],
eqmod (inp_poly0e8**2) (L0x7fffffffd668*x** 0+L0x7fffffffd678*x** 1)
      [10753, x**2 - 3256],
eqmod (inp_poly0e9**2) (L0x7fffffffd688*x** 0+L0x7fffffffd698*x** 1)
      [10753, x**2 - 7497],
eqmod (inp_poly0ea**2) (L0x7fffffffd66a*x** 0+L0x7fffffffd67a*x** 1)
      [10753, x**2 - 7896],
eqmod (inp_poly0eb**2) (L0x7fffffffd68a*x** 0+L0x7fffffffd69a*x** 1)
      [10753, x**2 - 2857],
eqmod (inp_poly0ec**2) (L0x7fffffffd66c*x** 0+L0x7fffffffd67c*x** 1)
      [10753, x**2 - 2135],
eqmod (inp_poly0ed**2) (L0x7fffffffd68c*x** 0+L0x7fffffffd69c*x** 1)
      [10753, x**2 - 8618],
eqmod (inp_poly0ee**2) (L0x7fffffffd66e*x** 0+L0x7fffffffd67e*x** 1)
      [10753, x**2 - 7661],
eqmod (inp_poly0ef**2) (L0x7fffffffd68e*x** 0+L0x7fffffffd69e*x** 1)
      [10753, x**2 - 3092],
eqmod (inp_poly0f0**2) (L0x7fffffffd6a0*x** 0+L0x7fffffffd6b0*x** 1)
      [10753, x**2 - 5575],
eqmod (inp_poly0f1**2) (L0x7fffffffd6c0*x** 0+L0x7fffffffd6d0*x** 1)
      [10753, x**2 - 5178],
eqmod (inp_poly0f2**2) (L0x7fffffffd6a2*x** 0+L0x7fffffffd6b2*x** 1)
      [10753, x**2 - 6809],
eqmod (inp_poly0f3**2) (L0x7fffffffd6c2*x** 0+L0x7fffffffd6d2*x** 1)
      [10753, x**2 - 3944],
eqmod (inp_poly0f4**2) (L0x7fffffffd6a4*x** 0+L0x7fffffffd6b4*x** 1)
      [10753, x**2 - 4577],
eqmod (inp_poly0f5**2) (L0x7fffffffd6c4*x** 0+L0x7fffffffd6d4*x** 1)
      [10753, x**2 - 6176],
eqmod (inp_poly0f6**2) (L0x7fffffffd6a6*x** 0+L0x7fffffffd6b6*x** 1)
      [10753, x**2 - 2830],
eqmod (inp_poly0f7**2) (L0x7fffffffd6c6*x** 0+L0x7fffffffd6d6*x** 1)
      [10753, x**2 - 7923],
eqmod (inp_poly0f8**2) (L0x7fffffffd6a8*x** 0+L0x7fffffffd6b8*x** 1)
      [10753, x**2 - 4627],
eqmod (inp_poly0f9**2) (L0x7fffffffd6c8*x** 0+L0x7fffffffd6d8*x** 1)
      [10753, x**2 - 6126],
eqmod (inp_poly0fa**2) (L0x7fffffffd6aa*x** 0+L0x7fffffffd6ba*x** 1)
      [10753, x**2 - 4193],
eqmod (inp_poly0fb**2) (L0x7fffffffd6ca*x** 0+L0x7fffffffd6da*x** 1)
      [10753, x**2 - 6560],
eqmod (inp_poly0fc**2) (L0x7fffffffd6ac*x** 0+L0x7fffffffd6bc*x** 1)
      [10753, x**2 - 1353],
eqmod (inp_poly0fd**2) (L0x7fffffffd6cc*x** 0+L0x7fffffffd6dc*x** 1)
      [10753, x**2 - 9400],
eqmod (inp_poly0fe**2) (L0x7fffffffd6ae*x** 0+L0x7fffffffd6be*x** 1)
      [10753, x**2 - 1828],
eqmod (inp_poly0ff**2) (L0x7fffffffd6ce*x** 0+L0x7fffffffd6de*x** 1)
      [10753, x**2 - 8925]
] prove with [ precondition ];



(**************** CUT   4 *****************)

ecut and [
eqmod (inp_poly100**2) (L0x7fffffffd6e0*x** 0+L0x7fffffffd6f0*x** 1)
      [10753, x**2 - 10],
eqmod (inp_poly101**2) (L0x7fffffffd700*x** 0+L0x7fffffffd710*x** 1)
      [10753, x**2 - 10743],
eqmod (inp_poly102**2) (L0x7fffffffd6e2*x** 0+L0x7fffffffd6f2*x** 1)
      [10753, x**2 - 8875],
eqmod (inp_poly103**2) (L0x7fffffffd702*x** 0+L0x7fffffffd712*x** 1)
      [10753, x**2 - 1878],
eqmod (inp_poly104**2) (L0x7fffffffd6e4*x** 0+L0x7fffffffd6f4*x** 1)
      [10753, x**2 - 3210],
eqmod (inp_poly105**2) (L0x7fffffffd704*x** 0+L0x7fffffffd714*x** 1)
      [10753, x**2 - 7543],
eqmod (inp_poly106**2) (L0x7fffffffd6e6*x** 0+L0x7fffffffd6f6*x** 1)
      [10753, x**2 - 10083],
eqmod (inp_poly107**2) (L0x7fffffffd706*x** 0+L0x7fffffffd716*x** 1)
      [10753, x**2 - 670],
eqmod (inp_poly108**2) (L0x7fffffffd6e8*x** 0+L0x7fffffffd6f8*x** 1)
      [10753, x**2 - 4946],
eqmod (inp_poly109**2) (L0x7fffffffd708*x** 0+L0x7fffffffd718*x** 1)
      [10753, x**2 - 5807],
eqmod (inp_poly10a**2) (L0x7fffffffd6ea*x** 0+L0x7fffffffd6fa*x** 1)
      [10753, x**2 - 2351],
eqmod (inp_poly10b**2) (L0x7fffffffd70a*x** 0+L0x7fffffffd71a*x** 1)
      [10753, x**2 - 8402],
eqmod (inp_poly10c**2) (L0x7fffffffd6ec*x** 0+L0x7fffffffd6fc*x** 1)
      [10753, x**2 - 6975],
eqmod (inp_poly10d**2) (L0x7fffffffd70c*x** 0+L0x7fffffffd71c*x** 1)
      [10753, x**2 - 3778],
eqmod (inp_poly10e**2) (L0x7fffffffd6ee*x** 0+L0x7fffffffd6fe*x** 1)
      [10753, x**2 - 1961],
eqmod (inp_poly10f**2) (L0x7fffffffd70e*x** 0+L0x7fffffffd71e*x** 1)
      [10753, x**2 - 8792],
eqmod (inp_poly110**2) (L0x7fffffffd720*x** 0+L0x7fffffffd730*x** 1)
      [10753, x**2 - 787],
eqmod (inp_poly111**2) (L0x7fffffffd740*x** 0+L0x7fffffffd750*x** 1)
      [10753, x**2 - 9966],
eqmod (inp_poly112**2) (L0x7fffffffd722*x** 0+L0x7fffffffd732*x** 1)
      [10753, x**2 - 4894],
eqmod (inp_poly113**2) (L0x7fffffffd742*x** 0+L0x7fffffffd752*x** 1)
      [10753, x**2 - 5859],
eqmod (inp_poly114**2) (L0x7fffffffd724*x** 0+L0x7fffffffd734*x** 1)
      [10753, x**2 - 5308],
eqmod (inp_poly115**2) (L0x7fffffffd744*x** 0+L0x7fffffffd754*x** 1)
      [10753, x**2 - 5445],
eqmod (inp_poly116**2) (L0x7fffffffd726*x** 0+L0x7fffffffd736*x** 1)
      [10753, x**2 - 1036],
eqmod (inp_poly117**2) (L0x7fffffffd746*x** 0+L0x7fffffffd756*x** 1)
      [10753, x**2 - 9717],
eqmod (inp_poly118**2) (L0x7fffffffd728*x** 0+L0x7fffffffd738*x** 1)
      [10753, x**2 - 8594],
eqmod (inp_poly119**2) (L0x7fffffffd748*x** 0+L0x7fffffffd758*x** 1)
      [10753, x**2 - 2159],
eqmod (inp_poly11a**2) (L0x7fffffffd72a*x** 0+L0x7fffffffd73a*x** 1)
      [10753, x**2 - 3298],
eqmod (inp_poly11b**2) (L0x7fffffffd74a*x** 0+L0x7fffffffd75a*x** 1)
      [10753, x**2 - 7455],
eqmod (inp_poly11c**2) (L0x7fffffffd72c*x** 0+L0x7fffffffd73c*x** 1)
      [10753, x**2 - 5906],
eqmod (inp_poly11d**2) (L0x7fffffffd74c*x** 0+L0x7fffffffd75c*x** 1)
      [10753, x**2 - 4847],
eqmod (inp_poly11e**2) (L0x7fffffffd72e*x** 0+L0x7fffffffd73e*x** 1)
      [10753, x**2 - 4864],
eqmod (inp_poly11f**2) (L0x7fffffffd74e*x** 0+L0x7fffffffd75e*x** 1)
      [10753, x**2 - 5889],
eqmod (inp_poly120**2) (L0x7fffffffd760*x** 0+L0x7fffffffd770*x** 1)
      [10753, x**2 - 3259],
eqmod (inp_poly121**2) (L0x7fffffffd780*x** 0+L0x7fffffffd790*x** 1)
      [10753, x**2 - 7494],
eqmod (inp_poly122**2) (L0x7fffffffd762*x** 0+L0x7fffffffd772*x** 1)
      [10753, x**2 - 5182],
eqmod (inp_poly123**2) (L0x7fffffffd782*x** 0+L0x7fffffffd792*x** 1)
      [10753, x**2 - 5571],
eqmod (inp_poly124**2) (L0x7fffffffd764*x** 0+L0x7fffffffd774*x** 1)
      [10753, x**2 - 3098],
eqmod (inp_poly125**2) (L0x7fffffffd784*x** 0+L0x7fffffffd794*x** 1)
      [10753, x**2 - 7655],
eqmod (inp_poly126**2) (L0x7fffffffd766*x** 0+L0x7fffffffd776*x** 1)
      [10753, x**2 - 7460],
eqmod (inp_poly127**2) (L0x7fffffffd786*x** 0+L0x7fffffffd796*x** 1)
      [10753, x**2 - 3293],
eqmod (inp_poly128**2) (L0x7fffffffd768*x** 0+L0x7fffffffd778*x** 1)
      [10753, x**2 - 1102],
eqmod (inp_poly129**2) (L0x7fffffffd788*x** 0+L0x7fffffffd798*x** 1)
      [10753, x**2 - 9651],
eqmod (inp_poly12a**2) (L0x7fffffffd76a*x** 0+L0x7fffffffd77a*x** 1)
      [10753, x**2 - 10255],
eqmod (inp_poly12b**2) (L0x7fffffffd78a*x** 0+L0x7fffffffd79a*x** 1)
      [10753, x**2 - 498],
eqmod (inp_poly12c**2) (L0x7fffffffd76c*x** 0+L0x7fffffffd77c*x** 1)
      [10753, x**2 - 9646],
eqmod (inp_poly12d**2) (L0x7fffffffd78c*x** 0+L0x7fffffffd79c*x** 1)
      [10753, x**2 - 1107],
eqmod (inp_poly12e**2) (L0x7fffffffd76e*x** 0+L0x7fffffffd77e*x** 1)
      [10753, x**2 - 1437],
eqmod (inp_poly12f**2) (L0x7fffffffd78e*x** 0+L0x7fffffffd79e*x** 1)
      [10753, x**2 - 9316],
eqmod (inp_poly130**2) (L0x7fffffffd7a0*x** 0+L0x7fffffffd7b0*x** 1)
      [10753, x**2 - 8089],
eqmod (inp_poly131**2) (L0x7fffffffd7c0*x** 0+L0x7fffffffd7d0*x** 1)
      [10753, x**2 - 2664],
eqmod (inp_poly132**2) (L0x7fffffffd7a2*x** 0+L0x7fffffffd7b2*x** 1)
      [10753, x**2 - 1360],
eqmod (inp_poly133**2) (L0x7fffffffd7c2*x** 0+L0x7fffffffd7d2*x** 1)
      [10753, x**2 - 9393],
eqmod (inp_poly134**2) (L0x7fffffffd7a4*x** 0+L0x7fffffffd7b4*x** 1)
      [10753, x**2 - 5096],
eqmod (inp_poly135**2) (L0x7fffffffd7c4*x** 0+L0x7fffffffd7d4*x** 1)
      [10753, x**2 - 5657],
eqmod (inp_poly136**2) (L0x7fffffffd7a6*x** 0+L0x7fffffffd7b6*x** 1)
      [10753, x**2 - 6440],
eqmod (inp_poly137**2) (L0x7fffffffd7c6*x** 0+L0x7fffffffd7d6*x** 1)
      [10753, x**2 - 4313],
eqmod (inp_poly138**2) (L0x7fffffffd7a8*x** 0+L0x7fffffffd7b8*x** 1)
      [10753, x**2 - 2854],
eqmod (inp_poly139**2) (L0x7fffffffd7c8*x** 0+L0x7fffffffd7d8*x** 1)
      [10753, x**2 - 7899],
eqmod (inp_poly13a**2) (L0x7fffffffd7aa*x** 0+L0x7fffffffd7ba*x** 1)
      [10753, x**2 - 5970],
eqmod (inp_poly13b**2) (L0x7fffffffd7ca*x** 0+L0x7fffffffd7da*x** 1)
      [10753, x**2 - 4783],
eqmod (inp_poly13c**2) (L0x7fffffffd7ac*x** 0+L0x7fffffffd7bc*x** 1)
      [10753, x**2 - 2129],
eqmod (inp_poly13d**2) (L0x7fffffffd7cc*x** 0+L0x7fffffffd7dc*x** 1)
      [10753, x**2 - 8624],
eqmod (inp_poly13e**2) (L0x7fffffffd7ae*x** 0+L0x7fffffffd7be*x** 1)
      [10753, x**2 - 2336],
eqmod (inp_poly13f**2) (L0x7fffffffd7ce*x** 0+L0x7fffffffd7de*x** 1)
      [10753, x**2 - 8417]
] prove with [ precondition ];



(**************** CUT   5 *****************)

ecut and [
eqmod (inp_poly140**2) (L0x7fffffffd7e0*x** 0+L0x7fffffffd7f0*x** 1)
      [10753, x**2 - 3223],
eqmod (inp_poly141**2) (L0x7fffffffd800*x** 0+L0x7fffffffd810*x** 1)
      [10753, x**2 - 7530],
eqmod (inp_poly142**2) (L0x7fffffffd7e2*x** 0+L0x7fffffffd7f2*x** 1)
      [10753, x**2 - 5491],
eqmod (inp_poly143**2) (L0x7fffffffd802*x** 0+L0x7fffffffd812*x** 1)
      [10753, x**2 - 5262],
eqmod (inp_poly144**2) (L0x7fffffffd7e4*x** 0+L0x7fffffffd7f4*x** 1)
      [10753, x**2 - 2295],
eqmod (inp_poly145**2) (L0x7fffffffd804*x** 0+L0x7fffffffd814*x** 1)
      [10753, x**2 - 8458],
eqmod (inp_poly146**2) (L0x7fffffffd7e6*x** 0+L0x7fffffffd7f6*x** 1)
      [10753, x**2 - 9872],
eqmod (inp_poly147**2) (L0x7fffffffd806*x** 0+L0x7fffffffd816*x** 1)
      [10753, x**2 - 881],
eqmod (inp_poly148**2) (L0x7fffffffd7e8*x** 0+L0x7fffffffd7f8*x** 1)
      [10753, x**2 - 6953],
eqmod (inp_poly149**2) (L0x7fffffffd808*x** 0+L0x7fffffffd818*x** 1)
      [10753, x**2 - 3800],
eqmod (inp_poly14a**2) (L0x7fffffffd7ea*x** 0+L0x7fffffffd7fa*x** 1)
      [10753, x**2 - 3942],
eqmod (inp_poly14b**2) (L0x7fffffffd80a*x** 0+L0x7fffffffd81a*x** 1)
      [10753, x**2 - 6811],
eqmod (inp_poly14c**2) (L0x7fffffffd7ec*x** 0+L0x7fffffffd7fc*x** 1)
      [10753, x**2 - 6042],
eqmod (inp_poly14d**2) (L0x7fffffffd80c*x** 0+L0x7fffffffd81c*x** 1)
      [10753, x**2 - 4711],
eqmod (inp_poly14e**2) (L0x7fffffffd7ee*x** 0+L0x7fffffffd7fe*x** 1)
      [10753, x**2 - 7281],
eqmod (inp_poly14f**2) (L0x7fffffffd80e*x** 0+L0x7fffffffd81e*x** 1)
      [10753, x**2 - 3472],
eqmod (inp_poly150**2) (L0x7fffffffd820*x** 0+L0x7fffffffd830*x** 1)
      [10753, x**2 - 9557],
eqmod (inp_poly151**2) (L0x7fffffffd840*x** 0+L0x7fffffffd850*x** 1)
      [10753, x**2 - 1196],
eqmod (inp_poly152**2) (L0x7fffffffd822*x** 0+L0x7fffffffd832*x** 1)
      [10753, x**2 - 3097],
eqmod (inp_poly153**2) (L0x7fffffffd842*x** 0+L0x7fffffffd852*x** 1)
      [10753, x**2 - 7656],
eqmod (inp_poly154**2) (L0x7fffffffd824*x** 0+L0x7fffffffd834*x** 1)
      [10753, x**2 - 3192],
eqmod (inp_poly155**2) (L0x7fffffffd844*x** 0+L0x7fffffffd854*x** 1)
      [10753, x**2 - 7561],
eqmod (inp_poly156**2) (L0x7fffffffd826*x** 0+L0x7fffffffd836*x** 1)
      [10753, x**2 - 4861],
eqmod (inp_poly157**2) (L0x7fffffffd846*x** 0+L0x7fffffffd856*x** 1)
      [10753, x**2 - 5892],
eqmod (inp_poly158**2) (L0x7fffffffd828*x** 0+L0x7fffffffd838*x** 1)
      [10753, x**2 - 2024],
eqmod (inp_poly159**2) (L0x7fffffffd848*x** 0+L0x7fffffffd858*x** 1)
      [10753, x**2 - 8729],
eqmod (inp_poly15a**2) (L0x7fffffffd82a*x** 0+L0x7fffffffd83a*x** 1)
      [10753, x**2 - 549],
eqmod (inp_poly15b**2) (L0x7fffffffd84a*x** 0+L0x7fffffffd85a*x** 1)
      [10753, x**2 - 10204],
eqmod (inp_poly15c**2) (L0x7fffffffd82c*x** 0+L0x7fffffffd83c*x** 1)
      [10753, x**2 - 4524],
eqmod (inp_poly15d**2) (L0x7fffffffd84c*x** 0+L0x7fffffffd85c*x** 1)
      [10753, x**2 - 6229],
eqmod (inp_poly15e**2) (L0x7fffffffd82e*x** 0+L0x7fffffffd83e*x** 1)
      [10753, x**2 - 4181],
eqmod (inp_poly15f**2) (L0x7fffffffd84e*x** 0+L0x7fffffffd85e*x** 1)
      [10753, x**2 - 6572],
eqmod (inp_poly160**2) (L0x7fffffffd860*x** 0+L0x7fffffffd870*x** 1)
      [10753, x**2 - 8410],
eqmod (inp_poly161**2) (L0x7fffffffd880*x** 0+L0x7fffffffd890*x** 1)
      [10753, x**2 - 2343],
eqmod (inp_poly162**2) (L0x7fffffffd862*x** 0+L0x7fffffffd872*x** 1)
      [10753, x**2 - 1293],
eqmod (inp_poly163**2) (L0x7fffffffd882*x** 0+L0x7fffffffd892*x** 1)
      [10753, x**2 - 9460],
eqmod (inp_poly164**2) (L0x7fffffffd864*x** 0+L0x7fffffffd874*x** 1)
      [10753, x**2 - 607],
eqmod (inp_poly165**2) (L0x7fffffffd884*x** 0+L0x7fffffffd894*x** 1)
      [10753, x**2 - 10146],
eqmod (inp_poly166**2) (L0x7fffffffd866*x** 0+L0x7fffffffd876*x** 1)
      [10753, x**2 - 6439],
eqmod (inp_poly167**2) (L0x7fffffffd886*x** 0+L0x7fffffffd896*x** 1)
      [10753, x**2 - 4314],
eqmod (inp_poly168**2) (L0x7fffffffd868*x** 0+L0x7fffffffd878*x** 1)
      [10753, x**2 - 8928],
eqmod (inp_poly169**2) (L0x7fffffffd888*x** 0+L0x7fffffffd898*x** 1)
      [10753, x**2 - 1825],
eqmod (inp_poly16a**2) (L0x7fffffffd86a*x** 0+L0x7fffffffd87a*x** 1)
      [10753, x**2 - 9392],
eqmod (inp_poly16b**2) (L0x7fffffffd88a*x** 0+L0x7fffffffd89a*x** 1)
      [10753, x**2 - 1361],
eqmod (inp_poly16c**2) (L0x7fffffffd86c*x** 0+L0x7fffffffd87c*x** 1)
      [10753, x**2 - 5590],
eqmod (inp_poly16d**2) (L0x7fffffffd88c*x** 0+L0x7fffffffd89c*x** 1)
      [10753, x**2 - 5163],
eqmod (inp_poly16e**2) (L0x7fffffffd86e*x** 0+L0x7fffffffd87e*x** 1)
      [10753, x**2 - 3992],
eqmod (inp_poly16f**2) (L0x7fffffffd88e*x** 0+L0x7fffffffd89e*x** 1)
      [10753, x**2 - 6761],
eqmod (inp_poly170**2) (L0x7fffffffd8a0*x** 0+L0x7fffffffd8b0*x** 1)
      [10753, x**2 - 5934],
eqmod (inp_poly171**2) (L0x7fffffffd8c0*x** 0+L0x7fffffffd8d0*x** 1)
      [10753, x**2 - 4819],
eqmod (inp_poly172**2) (L0x7fffffffd8a2*x** 0+L0x7fffffffd8b2*x** 1)
      [10753, x**2 - 8208],
eqmod (inp_poly173**2) (L0x7fffffffd8c2*x** 0+L0x7fffffffd8d2*x** 1)
      [10753, x**2 - 2545],
eqmod (inp_poly174**2) (L0x7fffffffd8a4*x** 0+L0x7fffffffd8b4*x** 1)
      [10753, x**2 - 1533],
eqmod (inp_poly175**2) (L0x7fffffffd8c4*x** 0+L0x7fffffffd8d4*x** 1)
      [10753, x**2 - 9220],
eqmod (inp_poly176**2) (L0x7fffffffd8a6*x** 0+L0x7fffffffd8b6*x** 1)
      [10753, x**2 - 283],
eqmod (inp_poly177**2) (L0x7fffffffd8c6*x** 0+L0x7fffffffd8d6*x** 1)
      [10753, x**2 - 10470],
eqmod (inp_poly178**2) (L0x7fffffffd8a8*x** 0+L0x7fffffffd8b8*x** 1)
      [10753, x**2 - 1538],
eqmod (inp_poly179**2) (L0x7fffffffd8c8*x** 0+L0x7fffffffd8d8*x** 1)
      [10753, x**2 - 9215],
eqmod (inp_poly17a**2) (L0x7fffffffd8aa*x** 0+L0x7fffffffd8ba*x** 1)
      [10753, x**2 - 10097],
eqmod (inp_poly17b**2) (L0x7fffffffd8ca*x** 0+L0x7fffffffd8da*x** 1)
      [10753, x**2 - 656],
eqmod (inp_poly17c**2) (L0x7fffffffd8ac*x** 0+L0x7fffffffd8bc*x** 1)
      [10753, x**2 - 9813],
eqmod (inp_poly17d**2) (L0x7fffffffd8cc*x** 0+L0x7fffffffd8dc*x** 1)
      [10753, x**2 - 940],
eqmod (inp_poly17e**2) (L0x7fffffffd8ae*x** 0+L0x7fffffffd8be*x** 1)
      [10753, x**2 - 4484],
eqmod (inp_poly17f**2) (L0x7fffffffd8ce*x** 0+L0x7fffffffd8de*x** 1)
      [10753, x**2 - 6269]
] prove with [ precondition ];



(**************** CUT   6 *****************)

ecut and [
eqmod (inp_poly180**2) (L0x7fffffffd8e0*x** 0+L0x7fffffffd8f0*x** 1)
      [10753, x**2 - 1000],
eqmod (inp_poly181**2) (L0x7fffffffd900*x** 0+L0x7fffffffd910*x** 1)
      [10753, x**2 - 9753],
eqmod (inp_poly182**2) (L0x7fffffffd8e2*x** 0+L0x7fffffffd8f2*x** 1)
      [10753, x**2 - 5754],
eqmod (inp_poly183**2) (L0x7fffffffd902*x** 0+L0x7fffffffd912*x** 1)
      [10753, x**2 - 4999],
eqmod (inp_poly184**2) (L0x7fffffffd8e4*x** 0+L0x7fffffffd8f4*x** 1)
      [10753, x**2 - 9163],
eqmod (inp_poly185**2) (L0x7fffffffd904*x** 0+L0x7fffffffd914*x** 1)
      [10753, x**2 - 1590],
eqmod (inp_poly186**2) (L0x7fffffffd8e6*x** 0+L0x7fffffffd8f6*x** 1)
      [10753, x**2 - 8271],
eqmod (inp_poly187**2) (L0x7fffffffd906*x** 0+L0x7fffffffd916*x** 1)
      [10753, x**2 - 2482],
eqmod (inp_poly188**2) (L0x7fffffffd8e8*x** 0+L0x7fffffffd8f8*x** 1)
      [10753, x**2 - 10715],
eqmod (inp_poly189**2) (L0x7fffffffd908*x** 0+L0x7fffffffd918*x** 1)
      [10753, x**2 - 38],
eqmod (inp_poly18a**2) (L0x7fffffffd8ea*x** 0+L0x7fffffffd8fa*x** 1)
      [10753, x**2 - 9287],
eqmod (inp_poly18b**2) (L0x7fffffffd90a*x** 0+L0x7fffffffd91a*x** 1)
      [10753, x**2 - 1466],
eqmod (inp_poly18c**2) (L0x7fffffffd8ec*x** 0+L0x7fffffffd8fc*x** 1)
      [10753, x**2 - 9308],
eqmod (inp_poly18d**2) (L0x7fffffffd90c*x** 0+L0x7fffffffd91c*x** 1)
      [10753, x**2 - 1445],
eqmod (inp_poly18e**2) (L0x7fffffffd8ee*x** 0+L0x7fffffffd8fe*x** 1)
      [10753, x**2 - 2546],
eqmod (inp_poly18f**2) (L0x7fffffffd90e*x** 0+L0x7fffffffd91e*x** 1)
      [10753, x**2 - 8207],
eqmod (inp_poly190**2) (L0x7fffffffd920*x** 0+L0x7fffffffd930*x** 1)
      [10753, x**2 - 3429],
eqmod (inp_poly191**2) (L0x7fffffffd940*x** 0+L0x7fffffffd950*x** 1)
      [10753, x**2 - 7324],
eqmod (inp_poly192**2) (L0x7fffffffd922*x** 0+L0x7fffffffd932*x** 1)
      [10753, x**2 - 5515],
eqmod (inp_poly193**2) (L0x7fffffffd942*x** 0+L0x7fffffffd952*x** 1)
      [10753, x**2 - 5238],
eqmod (inp_poly194**2) (L0x7fffffffd924*x** 0+L0x7fffffffd934*x** 1)
      [10753, x**2 - 3903],
eqmod (inp_poly195**2) (L0x7fffffffd944*x** 0+L0x7fffffffd954*x** 1)
      [10753, x**2 - 6850],
eqmod (inp_poly196**2) (L0x7fffffffd926*x** 0+L0x7fffffffd936*x** 1)
      [10753, x**2 - 6823],
eqmod (inp_poly197**2) (L0x7fffffffd946*x** 0+L0x7fffffffd956*x** 1)
      [10753, x**2 - 3930],
eqmod (inp_poly198**2) (L0x7fffffffd928*x** 0+L0x7fffffffd938*x** 1)
      [10753, x**2 - 9913],
eqmod (inp_poly199**2) (L0x7fffffffd948*x** 0+L0x7fffffffd958*x** 1)
      [10753, x**2 - 840],
eqmod (inp_poly19a**2) (L0x7fffffffd92a*x** 0+L0x7fffffffd93a*x** 1)
      [10753, x**2 - 7210],
eqmod (inp_poly19b**2) (L0x7fffffffd94a*x** 0+L0x7fffffffd95a*x** 1)
      [10753, x**2 - 3543],
eqmod (inp_poly19c**2) (L0x7fffffffd92c*x** 0+L0x7fffffffd93c*x** 1)
      [10753, x**2 - 9938],
eqmod (inp_poly19d**2) (L0x7fffffffd94c*x** 0+L0x7fffffffd95c*x** 1)
      [10753, x**2 - 815],
eqmod (inp_poly19e**2) (L0x7fffffffd92e*x** 0+L0x7fffffffd93e*x** 1)
      [10753, x**2 - 2515],
eqmod (inp_poly19f**2) (L0x7fffffffd94e*x** 0+L0x7fffffffd95e*x** 1)
      [10753, x**2 - 8238],
eqmod (inp_poly1a0**2) (L0x7fffffffd960*x** 0+L0x7fffffffd970*x** 1)
      [10753, x**2 - 3310],
eqmod (inp_poly1a1**2) (L0x7fffffffd980*x** 0+L0x7fffffffd990*x** 1)
      [10753, x**2 - 7443],
eqmod (inp_poly1a2**2) (L0x7fffffffd962*x** 0+L0x7fffffffd972*x** 1)
      [10753, x**2 - 2056],
eqmod (inp_poly1a3**2) (L0x7fffffffd982*x** 0+L0x7fffffffd992*x** 1)
      [10753, x**2 - 8697],
eqmod (inp_poly1a4**2) (L0x7fffffffd964*x** 0+L0x7fffffffd974*x** 1)
      [10753, x**2 - 8716],
eqmod (inp_poly1a5**2) (L0x7fffffffd984*x** 0+L0x7fffffffd994*x** 1)
      [10753, x**2 - 2037],
eqmod (inp_poly1a6**2) (L0x7fffffffd966*x** 0+L0x7fffffffd976*x** 1)
      [10753, x**2 - 4043],
eqmod (inp_poly1a7**2) (L0x7fffffffd986*x** 0+L0x7fffffffd996*x** 1)
      [10753, x**2 - 6710],
eqmod (inp_poly1a8**2) (L0x7fffffffd968*x** 0+L0x7fffffffd978*x** 1)
      [10753, x**2 - 2670],
eqmod (inp_poly1a9**2) (L0x7fffffffd988*x** 0+L0x7fffffffd998*x** 1)
      [10753, x**2 - 8083],
eqmod (inp_poly1aa**2) (L0x7fffffffd96a*x** 0+L0x7fffffffd97a*x** 1)
      [10753, x**2 - 3965],
eqmod (inp_poly1ab**2) (L0x7fffffffd98a*x** 0+L0x7fffffffd99a*x** 1)
      [10753, x**2 - 6788],
eqmod (inp_poly1ac**2) (L0x7fffffffd96c*x** 0+L0x7fffffffd97c*x** 1)
      [10753, x**2 - 7583],
eqmod (inp_poly1ad**2) (L0x7fffffffd98c*x** 0+L0x7fffffffd99c*x** 1)
      [10753, x**2 - 3170],
eqmod (inp_poly1ae**2) (L0x7fffffffd96e*x** 0+L0x7fffffffd97e*x** 1)
      [10753, x**2 - 3911],
eqmod (inp_poly1af**2) (L0x7fffffffd98e*x** 0+L0x7fffffffd99e*x** 1)
      [10753, x**2 - 6842],
eqmod (inp_poly1b0**2) (L0x7fffffffd9a0*x** 0+L0x7fffffffd9b0*x** 1)
      [10753, x**2 - 2425],
eqmod (inp_poly1b1**2) (L0x7fffffffd9c0*x** 0+L0x7fffffffd9d0*x** 1)
      [10753, x**2 - 8328],
eqmod (inp_poly1b2**2) (L0x7fffffffd9a2*x** 0+L0x7fffffffd9b2*x** 1)
      [10753, x**2 - 6964],
eqmod (inp_poly1b3**2) (L0x7fffffffd9c2*x** 0+L0x7fffffffd9d2*x** 1)
      [10753, x**2 - 3789],
eqmod (inp_poly1b4**2) (L0x7fffffffd9a4*x** 0+L0x7fffffffd9b4*x** 1)
      [10753, x**2 - 4209],
eqmod (inp_poly1b5**2) (L0x7fffffffd9c4*x** 0+L0x7fffffffd9d4*x** 1)
      [10753, x**2 - 6544],
eqmod (inp_poly1b6**2) (L0x7fffffffd9a6*x** 0+L0x7fffffffd9b6*x** 1)
      [10753, x**2 - 9573],
eqmod (inp_poly1b7**2) (L0x7fffffffd9c6*x** 0+L0x7fffffffd9d6*x** 1)
      [10753, x**2 - 1180],
eqmod (inp_poly1b8**2) (L0x7fffffffd9a8*x** 0+L0x7fffffffd9b8*x** 1)
      [10753, x**2 - 5822],
eqmod (inp_poly1b9**2) (L0x7fffffffd9c8*x** 0+L0x7fffffffd9d8*x** 1)
      [10753, x**2 - 4931],
eqmod (inp_poly1ba**2) (L0x7fffffffd9aa*x** 0+L0x7fffffffd9ba*x** 1)
      [10753, x**2 - 5585],
eqmod (inp_poly1bb**2) (L0x7fffffffd9ca*x** 0+L0x7fffffffd9da*x** 1)
      [10753, x**2 - 5168],
eqmod (inp_poly1bc**2) (L0x7fffffffd9ac*x** 0+L0x7fffffffd9bc*x** 1)
      [10753, x**2 - 8593],
eqmod (inp_poly1bd**2) (L0x7fffffffd9cc*x** 0+L0x7fffffffd9dc*x** 1)
      [10753, x**2 - 2160],
eqmod (inp_poly1be**2) (L0x7fffffffd9ae*x** 0+L0x7fffffffd9be*x** 1)
      [10753, x**2 - 7787],
eqmod (inp_poly1bf**2) (L0x7fffffffd9ce*x** 0+L0x7fffffffd9de*x** 1)
      [10753, x**2 - 2966]
] prove with [ precondition ];



(**************** CUT   7 *****************)

ecut and [
eqmod (inp_poly1c0**2) (L0x7fffffffd9e0*x** 0+L0x7fffffffd9f0*x** 1)
      [10753, x**2 - 10463],
eqmod (inp_poly1c1**2) (L0x7fffffffda00*x** 0+L0x7fffffffda10*x** 1)
      [10753, x**2 - 290],
eqmod (inp_poly1c2**2) (L0x7fffffffd9e2*x** 0+L0x7fffffffd9f2*x** 1)
      [10753, x**2 - 697],
eqmod (inp_poly1c3**2) (L0x7fffffffda02*x** 0+L0x7fffffffda12*x** 1)
      [10753, x**2 - 10056],
eqmod (inp_poly1c4**2) (L0x7fffffffd9e4*x** 0+L0x7fffffffd9f4*x** 1)
      [10753, x**2 - 3687],
eqmod (inp_poly1c5**2) (L0x7fffffffda04*x** 0+L0x7fffffffda14*x** 1)
      [10753, x**2 - 7066],
eqmod (inp_poly1c6**2) (L0x7fffffffd9e6*x** 0+L0x7fffffffd9f6*x** 1)
      [10753, x**2 - 8677],
eqmod (inp_poly1c7**2) (L0x7fffffffda06*x** 0+L0x7fffffffda16*x** 1)
      [10753, x**2 - 2076],
eqmod (inp_poly1c8**2) (L0x7fffffffd9e8*x** 0+L0x7fffffffd9f8*x** 1)
      [10753, x**2 - 7108],
eqmod (inp_poly1c9**2) (L0x7fffffffda08*x** 0+L0x7fffffffda18*x** 1)
      [10753, x**2 - 3645],
eqmod (inp_poly1ca**2) (L0x7fffffffd9ea*x** 0+L0x7fffffffd9fa*x** 1)
      [10753, x**2 - 7092],
eqmod (inp_poly1cb**2) (L0x7fffffffda0a*x** 0+L0x7fffffffda1a*x** 1)
      [10753, x**2 - 3661],
eqmod (inp_poly1cc**2) (L0x7fffffffd9ec*x** 0+L0x7fffffffd9fc*x** 1)
      [10753, x**2 - 2032],
eqmod (inp_poly1cd**2) (L0x7fffffffda0c*x** 0+L0x7fffffffda1c*x** 1)
      [10753, x**2 - 8721],
eqmod (inp_poly1ce**2) (L0x7fffffffd9ee*x** 0+L0x7fffffffd9fe*x** 1)
      [10753, x**2 - 7649],
eqmod (inp_poly1cf**2) (L0x7fffffffda0e*x** 0+L0x7fffffffda1e*x** 1)
      [10753, x**2 - 3104],
eqmod (inp_poly1d0**2) (L0x7fffffffda20*x** 0+L0x7fffffffda30*x** 1)
      [10753, x**2 - 9436],
eqmod (inp_poly1d1**2) (L0x7fffffffda40*x** 0+L0x7fffffffda50*x** 1)
      [10753, x**2 - 1317],
eqmod (inp_poly1d2**2) (L0x7fffffffda22*x** 0+L0x7fffffffda32*x** 1)
      [10753, x**2 - 8616],
eqmod (inp_poly1d3**2) (L0x7fffffffda42*x** 0+L0x7fffffffda52*x** 1)
      [10753, x**2 - 2137],
eqmod (inp_poly1d4**2) (L0x7fffffffda24*x** 0+L0x7fffffffda34*x** 1)
      [10753, x**2 - 7363],
eqmod (inp_poly1d5**2) (L0x7fffffffda44*x** 0+L0x7fffffffda54*x** 1)
      [10753, x**2 - 3390],
eqmod (inp_poly1d6**2) (L0x7fffffffda26*x** 0+L0x7fffffffda36*x** 1)
      [10753, x**2 - 2215],
eqmod (inp_poly1d7**2) (L0x7fffffffda46*x** 0+L0x7fffffffda56*x** 1)
      [10753, x**2 - 8538],
eqmod (inp_poly1d8**2) (L0x7fffffffda28*x** 0+L0x7fffffffda38*x** 1)
      [10753, x**2 - 8846],
eqmod (inp_poly1d9**2) (L0x7fffffffda48*x** 0+L0x7fffffffda58*x** 1)
      [10753, x**2 - 1907],
eqmod (inp_poly1da**2) (L0x7fffffffda2a*x** 0+L0x7fffffffda3a*x** 1)
      [10753, x**2 - 1135],
eqmod (inp_poly1db**2) (L0x7fffffffda4a*x** 0+L0x7fffffffda5a*x** 1)
      [10753, x**2 - 9618],
eqmod (inp_poly1dc**2) (L0x7fffffffda2c*x** 0+L0x7fffffffda3c*x** 1)
      [10753, x**2 - 774],
eqmod (inp_poly1dd**2) (L0x7fffffffda4c*x** 0+L0x7fffffffda5c*x** 1)
      [10753, x**2 - 9979],
eqmod (inp_poly1de**2) (L0x7fffffffda2e*x** 0+L0x7fffffffda3e*x** 1)
      [10753, x**2 - 9486],
eqmod (inp_poly1df**2) (L0x7fffffffda4e*x** 0+L0x7fffffffda5e*x** 1)
      [10753, x**2 - 1267],
eqmod (inp_poly1e0**2) (L0x7fffffffda60*x** 0+L0x7fffffffda70*x** 1)
      [10753, x**2 - 2266],
eqmod (inp_poly1e1**2) (L0x7fffffffda80*x** 0+L0x7fffffffda90*x** 1)
      [10753, x**2 - 8487],
eqmod (inp_poly1e2**2) (L0x7fffffffda62*x** 0+L0x7fffffffda72*x** 1)
      [10753, x**2 - 264],
eqmod (inp_poly1e3**2) (L0x7fffffffda82*x** 0+L0x7fffffffda92*x** 1)
      [10753, x**2 - 10489],
eqmod (inp_poly1e4**2) (L0x7fffffffda64*x** 0+L0x7fffffffda74*x** 1)
      [10753, x**2 - 6935],
eqmod (inp_poly1e5**2) (L0x7fffffffda84*x** 0+L0x7fffffffda94*x** 1)
      [10753, x**2 - 3818],
eqmod (inp_poly1e6**2) (L0x7fffffffda66*x** 0+L0x7fffffffda76*x** 1)
      [10753, x**2 - 9473],
eqmod (inp_poly1e7**2) (L0x7fffffffda86*x** 0+L0x7fffffffda96*x** 1)
      [10753, x**2 - 1280],
eqmod (inp_poly1e8**2) (L0x7fffffffda68*x** 0+L0x7fffffffda78*x** 1)
      [10753, x**2 - 301],
eqmod (inp_poly1e9**2) (L0x7fffffffda88*x** 0+L0x7fffffffda98*x** 1)
      [10753, x**2 - 10452],
eqmod (inp_poly1ea**2) (L0x7fffffffda6a*x** 0+L0x7fffffffda7a*x** 1)
      [10753, x**2 - 3689],
eqmod (inp_poly1eb**2) (L0x7fffffffda8a*x** 0+L0x7fffffffda9a*x** 1)
      [10753, x**2 - 7064],
eqmod (inp_poly1ec**2) (L0x7fffffffda6c*x** 0+L0x7fffffffda7c*x** 1)
      [10753, x**2 - 10597],
eqmod (inp_poly1ed**2) (L0x7fffffffda8c*x** 0+L0x7fffffffda9c*x** 1)
      [10753, x**2 - 156],
eqmod (inp_poly1ee**2) (L0x7fffffffda6e*x** 0+L0x7fffffffda7e*x** 1)
      [10753, x**2 - 1339],
eqmod (inp_poly1ef**2) (L0x7fffffffda8e*x** 0+L0x7fffffffda9e*x** 1)
      [10753, x**2 - 9414],
eqmod (inp_poly1f0**2) (L0x7fffffffdaa0*x** 0+L0x7fffffffdab0*x** 1)
      [10753, x**2 - 1985],
eqmod (inp_poly1f1**2) (L0x7fffffffdac0*x** 0+L0x7fffffffdad0*x** 1)
      [10753, x**2 - 8768],
eqmod (inp_poly1f2**2) (L0x7fffffffdaa2*x** 0+L0x7fffffffdab2*x** 1)
      [10753, x**2 - 3572],
eqmod (inp_poly1f3**2) (L0x7fffffffdac2*x** 0+L0x7fffffffdad2*x** 1)
      [10753, x**2 - 7181],
eqmod (inp_poly1f4**2) (L0x7fffffffdaa4*x** 0+L0x7fffffffdab4*x** 1)
      [10753, x**2 - 2758],
eqmod (inp_poly1f5**2) (L0x7fffffffdac4*x** 0+L0x7fffffffdad4*x** 1)
      [10753, x**2 - 7995],
eqmod (inp_poly1f6**2) (L0x7fffffffdaa6*x** 0+L0x7fffffffdab6*x** 1)
      [10753, x**2 - 6794],
eqmod (inp_poly1f7**2) (L0x7fffffffdac6*x** 0+L0x7fffffffdad6*x** 1)
      [10753, x**2 - 3959],
eqmod (inp_poly1f8**2) (L0x7fffffffdaa8*x** 0+L0x7fffffffdab8*x** 1)
      [10753, x**2 - 3258],
eqmod (inp_poly1f9**2) (L0x7fffffffdac8*x** 0+L0x7fffffffdad8*x** 1)
      [10753, x**2 - 7495],
eqmod (inp_poly1fa**2) (L0x7fffffffdaaa*x** 0+L0x7fffffffdaba*x** 1)
      [10753, x**2 - 9671],
eqmod (inp_poly1fb**2) (L0x7fffffffdaca*x** 0+L0x7fffffffdada*x** 1)
      [10753, x**2 - 1082],
eqmod (inp_poly1fc**2) (L0x7fffffffdaac*x** 0+L0x7fffffffdabc*x** 1)
      [10753, x**2 - 2777],
eqmod (inp_poly1fd**2) (L0x7fffffffdacc*x** 0+L0x7fffffffdadc*x** 1)
      [10753, x**2 - 7976],
eqmod (inp_poly1fe**2) (L0x7fffffffdaae*x** 0+L0x7fffffffdabe*x** 1)
      [10753, x**2 - 7527],
eqmod (inp_poly1ff**2) (L0x7fffffffdace*x** 0+L0x7fffffffdade*x** 1)
      [10753, x**2 - 3226]
] prove with [ precondition ];



(**************** CUT   8 *****************)

ecut true;



(**************** constants *****************)

mov L0x555555561120 ( 10753)@sint16; mov L0x555555561122 ( 10753)@sint16;
mov L0x555555561124 ( 10753)@sint16; mov L0x555555561126 ( 10753)@sint16;
mov L0x555555561128 ( 10753)@sint16; mov L0x55555556112a ( 10753)@sint16;
mov L0x55555556112c ( 10753)@sint16; mov L0x55555556112e ( 10753)@sint16;
mov L0x555555561130 ( 10753)@sint16; mov L0x555555561132 ( 10753)@sint16;
mov L0x555555561134 ( 10753)@sint16; mov L0x555555561136 ( 10753)@sint16;
mov L0x555555561138 ( 10753)@sint16; mov L0x55555556113a ( 10753)@sint16;
mov L0x55555556113c ( 10753)@sint16; mov L0x55555556113e ( 10753)@sint16;
mov L0x555555561140 (-10751)@sint16; mov L0x555555561142 (-10751)@sint16;
mov L0x555555561144 (-10751)@sint16; mov L0x555555561146 (-10751)@sint16;
mov L0x555555561148 (-10751)@sint16; mov L0x55555556114a (-10751)@sint16;
mov L0x55555556114c (-10751)@sint16; mov L0x55555556114e (-10751)@sint16;
mov L0x555555561150 (-10751)@sint16; mov L0x555555561152 (-10751)@sint16;
mov L0x555555561154 (-10751)@sint16; mov L0x555555561156 (-10751)@sint16;
mov L0x555555561158 (-10751)@sint16; mov L0x55555556115a (-10751)@sint16;
mov L0x55555556115c (-10751)@sint16; mov L0x55555556115e (-10751)@sint16;
mov L0x555555561160 ( 12482)@sint16; mov L0x555555561162 ( 12482)@sint16;
mov L0x555555561164 ( 12482)@sint16; mov L0x555555561166 ( 12482)@sint16;
mov L0x555555561168 ( 12482)@sint16; mov L0x55555556116a ( 12482)@sint16;
mov L0x55555556116c ( 12482)@sint16; mov L0x55555556116e ( 12482)@sint16;
mov L0x555555561170 ( 12482)@sint16; mov L0x555555561172 ( 12482)@sint16;
mov L0x555555561174 ( 12482)@sint16; mov L0x555555561176 ( 12482)@sint16;
mov L0x555555561178 ( 12482)@sint16; mov L0x55555556117a ( 12482)@sint16;
mov L0x55555556117c ( 12482)@sint16; mov L0x55555556117e ( 12482)@sint16;
mov L0x555555561180 (    16)@sint16; mov L0x555555561182 (    16)@sint16;
mov L0x555555561184 (    16)@sint16; mov L0x555555561186 (    16)@sint16;
mov L0x555555561188 (    16)@sint16; mov L0x55555556118a (    16)@sint16;
mov L0x55555556118c (    16)@sint16; mov L0x55555556118e (    16)@sint16;
mov L0x555555561190 (    16)@sint16; mov L0x555555561192 (    16)@sint16;
mov L0x555555561194 (    16)@sint16; mov L0x555555561196 (    16)@sint16;
mov L0x555555561198 (    16)@sint16; mov L0x55555556119a (    16)@sint16;
mov L0x55555556119c (    16)@sint16; mov L0x55555556119e (    16)@sint16;
mov L0x5555555611a0 (    -6)@sint16; mov L0x5555555611a2 (    -6)@sint16;
mov L0x5555555611a4 (    -6)@sint16; mov L0x5555555611a6 (    -6)@sint16;
mov L0x5555555611a8 (    -6)@sint16; mov L0x5555555611aa (    -6)@sint16;
mov L0x5555555611ac (    -6)@sint16; mov L0x5555555611ae (    -6)@sint16;
mov L0x5555555611b0 (    -6)@sint16; mov L0x5555555611b2 (    -6)@sint16;
mov L0x5555555611b4 (    -6)@sint16; mov L0x5555555611b6 (    -6)@sint16;
mov L0x5555555611b8 (    -6)@sint16; mov L0x5555555611ba (    -6)@sint16;
mov L0x5555555611bc (    -6)@sint16; mov L0x5555555611be (    -6)@sint16;
mov L0x5555555611c0 (  1018)@sint16; mov L0x5555555611c2 (  1018)@sint16;
mov L0x5555555611c4 (  1018)@sint16; mov L0x5555555611c6 (  1018)@sint16;
mov L0x5555555611c8 (  1018)@sint16; mov L0x5555555611ca (  1018)@sint16;
mov L0x5555555611cc (  1018)@sint16; mov L0x5555555611ce (  1018)@sint16;
mov L0x5555555611d0 (  1018)@sint16; mov L0x5555555611d2 (  1018)@sint16;
mov L0x5555555611d4 (  1018)@sint16; mov L0x5555555611d6 (  1018)@sint16;
mov L0x5555555611d8 (  1018)@sint16; mov L0x5555555611da (  1018)@sint16;
mov L0x5555555611dc (  1018)@sint16; mov L0x5555555611de (  1018)@sint16;
mov L0x5555555611e0 (  -780)@sint16; mov L0x5555555611e2 (  -780)@sint16;
mov L0x5555555611e4 (  -780)@sint16; mov L0x5555555611e6 (  -780)@sint16;
mov L0x5555555611e8 (  -780)@sint16; mov L0x5555555611ea (  -780)@sint16;
mov L0x5555555611ec (  -780)@sint16; mov L0x5555555611ee (  -780)@sint16;
mov L0x5555555611f0 (  -780)@sint16; mov L0x5555555611f2 (  -780)@sint16;
mov L0x5555555611f4 (  -780)@sint16; mov L0x5555555611f6 (  -780)@sint16;
mov L0x5555555611f8 (  -780)@sint16; mov L0x5555555611fa (  -780)@sint16;
mov L0x5555555611fc (  -780)@sint16; mov L0x5555555611fe (  -780)@sint16;
mov L0x555555561200 (  1268)@sint16; mov L0x555555561202 (  1268)@sint16;
mov L0x555555561204 (  1268)@sint16; mov L0x555555561206 (  1268)@sint16;
mov L0x555555561208 (  1268)@sint16; mov L0x55555556120a (  1268)@sint16;
mov L0x55555556120c (  1268)@sint16; mov L0x55555556120e (  1268)@sint16;
mov L0x555555561210 (  1268)@sint16; mov L0x555555561212 (  1268)@sint16;
mov L0x555555561214 (  1268)@sint16; mov L0x555555561216 (  1268)@sint16;
mov L0x555555561218 (  1268)@sint16; mov L0x55555556121a (  1268)@sint16;
mov L0x55555556121c (  1268)@sint16; mov L0x55555556121e (  1268)@sint16;
mov L0x555555561220 (    -6)@sint16; mov L0x555555561222 ( 27359)@sint16;
mov L0x555555561224 ( -1956)@sint16; mov L0x555555561226 (   408)@sint16;
mov L0x555555561228 ( 10093)@sint16; mov L0x55555556122a (-21094)@sint16;
mov L0x55555556122c ( 28517)@sint16; mov L0x55555556122e (-20856)@sint16;
mov L0x555555561230 ( -7033)@sint16; mov L0x555555561232 (-16090)@sint16;
mov L0x555555561234 (-29449)@sint16; mov L0x555555561236 ( 12476)@sint16;
mov L0x555555561238 (-18345)@sint16; mov L0x55555556123a (-28224)@sint16;
mov L0x55555556123c (  9508)@sint16; mov L0x55555556123e (-16072)@sint16;
mov L0x555555561240 ( 17675)@sint16; mov L0x555555561242 ( 23056)@sint16;
mov L0x555555561244 (-28103)@sint16; mov L0x555555561246 ( -4547)@sint16;
mov L0x555555561248 ( 25543)@sint16; mov L0x55555556124a ( 26518)@sint16;
mov L0x55555556124c (  7228)@sint16; mov L0x55555556124e ( -7429)@sint16;
mov L0x555555561250 ( 14731)@sint16; mov L0x555555561252 (  -829)@sint16;
mov L0x555555561254 ( 10001)@sint16; mov L0x555555561256 ( -3925)@sint16;
mov L0x555555561258 (-14847)@sint16; mov L0x55555556125a ( -3639)@sint16;
mov L0x55555556125c ( 18363)@sint16; mov L0x55555556125e ( 11683)@sint16;
mov L0x555555561260 (  4589)@sint16; mov L0x555555561262 (-23007)@sint16;
mov L0x555555561264 ( 31369)@sint16; mov L0x555555561266 ( 20198)@sint16;
mov L0x555555561268 (  2316)@sint16; mov L0x55555556126a ( 23812)@sint16;
mov L0x55555556126c ( 22532)@sint16; mov L0x55555556126e (-24098)@sint16;
mov L0x555555561270 (-12378)@sint16; mov L0x555555561272 ( -8441)@sint16;
mov L0x555555561274 ( 24269)@sint16; mov L0x555555561276 (-22623)@sint16;
mov L0x555555561278 (-14341)@sint16; mov L0x55555556127a ( 19326)@sint16;
mov L0x55555556127c (-15864)@sint16; mov L0x55555556127e (-22209)@sint16;
mov L0x555555561280 ( -5126)@sint16; mov L0x555555561282 (  5766)@sint16;
mov L0x555555561284 ( -6924)@sint16; mov L0x555555561286 ( 15736)@sint16;
mov L0x555555561288 (-31656)@sint16; mov L0x55555556128a ( 20490)@sint16;
mov L0x55555556128c ( -3407)@sint16; mov L0x55555556128e ( 23781)@sint16;
mov L0x555555561290 (-16724)@sint16; mov L0x555555561292 (-31217)@sint16;
mov L0x555555561294 (  5619)@sint16; mov L0x555555561296 (  6381)@sint16;
mov L0x555555561298 (-27152)@sint16; mov L0x55555556129a (-12707)@sint16;
mov L0x55555556129c (   573)@sint16; mov L0x55555556129e (-15840)@sint16;
mov L0x5555555612a0 (  -609)@sint16; mov L0x5555555612a2 (-16614)@sint16;
mov L0x5555555612a4 (   969)@sint16; mov L0x5555555612a6 (-24702)@sint16;
mov L0x5555555612a8 ( 26238)@sint16; mov L0x5555555612aa (-12214)@sint16;
mov L0x5555555612ac (-31887)@sint16; mov L0x5555555612ae ( 11555)@sint16;
mov L0x5555555612b0 ( 17571)@sint16; mov L0x5555555612b2 ( 29407)@sint16;
mov L0x5555555612b4 (  4175)@sint16; mov L0x5555555612b6 (  2395)@sint16;
mov L0x5555555612b8 (   512)@sint16; mov L0x5555555612ba ( -4394)@sint16;
mov L0x5555555612bc (-32271)@sint16; mov L0x5555555612be ( 31235)@sint16;
mov L0x5555555612c0 ( -2017)@sint16; mov L0x5555555612c2 ( 11854)@sint16;
mov L0x5555555612c4 (  7795)@sint16; mov L0x5555555612c6 (  4090)@sint16;
mov L0x5555555612c8 ( -1627)@sint16; mov L0x5555555612ca ( 30351)@sint16;
mov L0x5555555612cc (  1932)@sint16; mov L0x5555555612ce (-22044)@sint16;
mov L0x5555555612d0 ( 31290)@sint16; mov L0x5555555612d2 (-17352)@sint16;
mov L0x5555555612d4 ( 17096)@sint16; mov L0x5555555612d6 (   719)@sint16;
mov L0x5555555612d8 ( 22666)@sint16; mov L0x5555555612da ( 29364)@sint16;
mov L0x5555555612dc (  1316)@sint16; mov L0x5555555612de (-11300)@sint16;
mov L0x5555555612e0 (   177)@sint16; mov L0x5555555612e2 ( -6978)@sint16;
mov L0x5555555612e4 ( -8801)@sint16; mov L0x5555555612e6 (-11842)@sint16;
mov L0x5555555612e8 (-30546)@sint16; mov L0x5555555612ea ( 21892)@sint16;
mov L0x5555555612ec ( 24976)@sint16; mov L0x5555555612ee ( 14999)@sint16;
mov L0x5555555612f0 (  7356)@sint16; mov L0x5555555612f2 (  7856)@sint16;
mov L0x5555555612f4 (  2066)@sint16; mov L0x5555555612f6 ( 31418)@sint16;
mov L0x5555555612f8 (  7716)@sint16; mov L0x5555555612fa ( 32076)@sint16;
mov L0x5555555612fc (-13579)@sint16; mov L0x5555555612fe (  7326)@sint16;
mov L0x555555561300 ( 11726)@sint16; mov L0x555555561302 (-13268)@sint16;
mov L0x555555561304 ( 28541)@sint16; mov L0x555555561306 (   780)@sint16;
mov L0x555555561308 (-19844)@sint16; mov L0x55555556130a ( 17412)@sint16;
mov L0x55555556130c (-13012)@sint16; mov L0x55555556130e ( 18845)@sint16;
mov L0x555555561310 ( 31558)@sint16; mov L0x555555561312 ( 24037)@sint16;
mov L0x555555561314 (-27895)@sint16; mov L0x555555561316 (-17248)@sint16;
mov L0x555555561318 (-28200)@sint16; mov L0x55555556131a (-25555)@sint16;
mov L0x55555556131c ( -8246)@sint16; mov L0x55555556131e (-11141)@sint16;
mov L0x555555561320 (   -61)@sint16; mov L0x555555561322 ( 11446)@sint16;
mov L0x555555561324 (-19564)@sint16; mov L0x555555561326 (  4083)@sint16;
mov L0x555555561328 (-30144)@sint16; mov L0x55555556132a (-14329)@sint16;
mov L0x55555556132c ( 23026)@sint16; mov L0x55555556132e (-11952)@sint16;
mov L0x555555561330 ( -4797)@sint16; mov L0x555555561332 (-29827)@sint16;
mov L0x555555561334 (-32351)@sint16; mov L0x555555561336 ( -6314)@sint16;
mov L0x555555561338 ( 13158)@sint16; mov L0x55555556133a (-20100)@sint16;
mov L0x55555556133c ( 29541)@sint16; mov L0x55555556133e (-29644)@sint16;
mov L0x555555561340 (-19863)@sint16; mov L0x555555561342 (-31583)@sint16;
mov L0x555555561344 (-18881)@sint16; mov L0x555555561346 ( 20070)@sint16;
mov L0x555555561348 ( -6716)@sint16; mov L0x55555556134a (  3035)@sint16;
mov L0x55555556134c (  6747)@sint16; mov L0x55555556134e ( -8758)@sint16;
mov L0x555555561350 ( 16236)@sint16; mov L0x555555561352 ( -8289)@sint16;
mov L0x555555561354 (-31058)@sint16; mov L0x555555561356 ( 26286)@sint16;
mov L0x555555561358 (-17394)@sint16; mov L0x55555556135a ( 29151)@sint16;
mov L0x55555556135c (-12976)@sint16; mov L0x55555556135e (-14237)@sint16;
mov L0x555555561360 (-19643)@sint16; mov L0x555555561362 ( 32070)@sint16;
mov L0x555555561364 (-13987)@sint16; mov L0x555555561366 (  5369)@sint16;
mov L0x555555561368 ( 23160)@sint16; mov L0x55555556136a (-24025)@sint16;
mov L0x55555556136c ( 28712)@sint16; mov L0x55555556136e ( 21161)@sint16;
mov L0x555555561370 (  7289)@sint16; mov L0x555555561372 (-18875)@sint16;
mov L0x555555561374 (-19454)@sint16; mov L0x555555561376 (-29626)@sint16;
mov L0x555555561378 (-12336)@sint16; mov L0x55555556137a ( -3346)@sint16;
mov L0x55555556137c (-27572)@sint16; mov L0x55555556137e (-25482)@sint16;
mov L0x555555561380 ( 14280)@sint16; mov L0x555555561382 ( -7880)@sint16;
mov L0x555555561384 ( -3699)@sint16; mov L0x555555561386 ( 26292)@sint16;
mov L0x555555561388 ( 11123)@sint16; mov L0x55555556138a (  8295)@sint16;
mov L0x55555556138c ( 31467)@sint16; mov L0x55555556138e (-24330)@sint16;
mov L0x555555561390 ( 29370)@sint16; mov L0x555555561392 ( 15511)@sint16;
mov L0x555555561394 ( -9343)@sint16; mov L0x555555561396 ( -1725)@sint16;
mov L0x555555561398 ( -9374)@sint16; mov L0x55555556139a (  3998)@sint16;
mov L0x55555556139c (  5729)@sint16; mov L0x55555556139e (-27329)@sint16;
mov L0x5555555613a0 ( -6095)@sint16; mov L0x5555555613a2 ( 30467)@sint16;
mov L0x5555555613a4 (  9691)@sint16; mov L0x5555555613a6 ( 15127)@sint16;
mov L0x5555555613a8 (   232)@sint16; mov L0x5555555613aa (  8935)@sint16;
mov L0x5555555613ac (  8807)@sint16; mov L0x5555555613ae (-15517)@sint16;
mov L0x5555555613b0 (-20899)@sint16; mov L0x5555555613b2 ( 31924)@sint16;
mov L0x5555555613b4 (-23788)@sint16; mov L0x5555555613b6 ( 23952)@sint16;
mov L0x5555555613b8 (  5120)@sint16; mov L0x5555555613ba ( 21593)@sint16;
mov L0x5555555613bc (  4967)@sint16; mov L0x5555555613be (-15328)@sint16;
mov L0x5555555613c0 (-20173)@sint16; mov L0x5555555613c2 (-12531)@sint16;
mov L0x5555555613c4 ( 12415)@sint16; mov L0x5555555613c6 (-24641)@sint16;
mov L0x5555555613c8 (-16273)@sint16; mov L0x5555555613ca (-24165)@sint16;
mov L0x5555555613cc ( 19320)@sint16; mov L0x5555555613ce (-23836)@sint16;
mov L0x5555555613d0 (-14780)@sint16; mov L0x5555555613d2 ( 23093)@sint16;
mov L0x5555555613d4 (-25652)@sint16; mov L0x5555555613d6 (  7192)@sint16;
mov L0x5555555613d8 ( 30053)@sint16; mov L0x5555555613da ( 31497)@sint16;
mov L0x5555555613dc ( 13164)@sint16; mov L0x5555555613de ( 18077)@sint16;
mov L0x5555555613e0 (  1767)@sint16; mov L0x5555555613e2 ( -4248)@sint16;
mov L0x5555555613e4 (-22471)@sint16; mov L0x5555555613e6 ( 12653)@sint16;
mov L0x5555555613e8 ( 22215)@sint16; mov L0x5555555613ea ( 22313)@sint16;
mov L0x5555555613ec (-12384)@sint16; mov L0x5555555613ee ( 18918)@sint16;
mov L0x5555555613f0 (  8027)@sint16; mov L0x5555555613f2 ( 13024)@sint16;
mov L0x5555555613f4 ( 20661)@sint16; mov L0x5555555613f6 (-13500)@sint16;
mov L0x5555555613f8 ( 11623)@sint16; mov L0x5555555613fa ( -6917)@sint16;
mov L0x5555555613fc ( -4717)@sint16; mov L0x5555555613fe (  7722)@sint16;
mov L0x555555561400 (-13811)@sint16; mov L0x555555561402 ( -1609)@sint16;
mov L0x555555561404 ( 23269)@sint16; mov L0x555555561406 (  7801)@sint16;
mov L0x555555561408 ( -1834)@sint16; mov L0x55555556140a (-22483)@sint16;
mov L0x55555556140c (   951)@sint16; mov L0x55555556140e ( -8161)@sint16;
mov L0x555555561410 (-12098)@sint16; mov L0x555555561412 (-21770)@sint16;
mov L0x555555561414 (-16809)@sint16; mov L0x555555561416 ( 24129)@sint16;
mov L0x555555561418 (-19856)@sint16; mov L0x55555556141a (  6594)@sint16;
mov L0x55555556141c (-16925)@sint16; mov L0x55555556141e ( 19661)@sint16;
mov L0x555555561420 (  1018)@sint16; mov L0x555555561422 (   223)@sint16;
mov L0x555555561424 (  4188)@sint16; mov L0x555555561426 ( -3688)@sint16;
mov L0x555555561428 (  2413)@sint16; mov L0x55555556142a ( -3686)@sint16;
mov L0x55555556142c (   357)@sint16; mov L0x55555556142e (  -376)@sint16;
mov L0x555555561430 (  2695)@sint16; mov L0x555555561432 (  -730)@sint16;
mov L0x555555561434 (  4855)@sint16; mov L0x555555561436 (  2236)@sint16;
mov L0x555555561438 (  -425)@sint16; mov L0x55555556143a (  4544)@sint16;
mov L0x55555556143c (  3364)@sint16; mov L0x55555556143e ( -3784)@sint16;
mov L0x555555561440 (  4875)@sint16; mov L0x555555561442 ( -1520)@sint16;
mov L0x555555561444 ( -5063)@sint16; mov L0x555555561446 ( -4035)@sint16;
mov L0x555555561448 (  2503)@sint16; mov L0x55555556144a (   918)@sint16;
mov L0x55555556144c ( -3012)@sint16; mov L0x55555556144e (  4347)@sint16;
mov L0x555555561450 (  1931)@sint16; mov L0x555555561452 ( -1341)@sint16;
mov L0x555555561454 ( -3823)@sint16; mov L0x555555561456 (  -341)@sint16;
mov L0x555555561458 ( -4095)@sint16; mov L0x55555556145a ( -5175)@sint16;
mov L0x55555556145c ( -2629)@sint16; mov L0x55555556145e ( -5213)@sint16;
mov L0x555555561460 ( -3091)@sint16; mov L0x555555561462 (  4129)@sint16;
mov L0x555555561464 ( -2935)@sint16; mov L0x555555561466 (  2790)@sint16;
mov L0x555555561468 (   268)@sint16; mov L0x55555556146a (  1284)@sint16;
mov L0x55555556146c (     4)@sint16; mov L0x55555556146e (  3550)@sint16;
mov L0x555555561470 (  2982)@sint16; mov L0x555555561472 (  1287)@sint16;
mov L0x555555561474 (   205)@sint16; mov L0x555555561476 (  4513)@sint16;
mov L0x555555561478 ( -2565)@sint16; mov L0x55555556147a ( -2178)@sint16;
mov L0x55555556147c (  4616)@sint16; mov L0x55555556147e (  -193)@sint16;
mov L0x555555561480 ( -4102)@sint16; mov L0x555555561482 (  4742)@sint16;
mov L0x555555561484 ( -4876)@sint16; mov L0x555555561486 ( -4744)@sint16;
mov L0x555555561488 ( -2984)@sint16; mov L0x55555556148a ( -3062)@sint16;
mov L0x55555556148c (  -847)@sint16; mov L0x55555556148e ( -4379)@sint16;
mov L0x555555561490 ( -2388)@sint16; mov L0x555555561492 ( -1009)@sint16;
mov L0x555555561494 ( -3085)@sint16; mov L0x555555561496 ( -1299)@sint16;
mov L0x555555561498 ( -2576)@sint16; mov L0x55555556149a (  4189)@sint16;
mov L0x55555556149c (  1085)@sint16; mov L0x55555556149e (   544)@sint16;
mov L0x5555555614a0 (  5023)@sint16; mov L0x5555555614a2 (   794)@sint16;
mov L0x5555555614a4 (  -567)@sint16; mov L0x5555555614a6 ( -3198)@sint16;
mov L0x5555555614a8 (  4734)@sint16; mov L0x5555555614aa ( -2998)@sint16;
mov L0x5555555614ac (  3441)@sint16; mov L0x5555555614ae ( -5341)@sint16;
mov L0x5555555614b0 (   675)@sint16; mov L0x5555555614b2 (  2271)@sint16;
mov L0x5555555614b4 (  1615)@sint16; mov L0x5555555614b6 ( -2213)@sint16;
mov L0x5555555614b8 (   512)@sint16; mov L0x5555555614ba (  2774)@sint16;
mov L0x5555555614bc (  3057)@sint16; mov L0x5555555614be ( -2045)@sint16;
mov L0x5555555614c0 (  3615)@sint16; mov L0x5555555614c2 ( -1458)@sint16;
mov L0x5555555614c4 (  -909)@sint16; mov L0x5555555614c6 (  5114)@sint16;
mov L0x5555555614c8 (  2981)@sint16; mov L0x5555555614ca ( -4977)@sint16;
mov L0x5555555614cc (  -116)@sint16; mov L0x5555555614ce (  4580)@sint16;
mov L0x5555555614d0 (  -454)@sint16; mov L0x5555555614d2 ( -5064)@sint16;
mov L0x5555555614d4 (  4808)@sint16; mov L0x5555555614d6 ( -1841)@sint16;
mov L0x5555555614d8 (  -886)@sint16; mov L0x5555555614da ( -1356)@sint16;
mov L0x5555555614dc ( -4828)@sint16; mov L0x5555555614de ( -5156)@sint16;
mov L0x5555555614e0 (  2737)@sint16; mov L0x5555555614e2 (  4286)@sint16;
mov L0x5555555614e4 ( -3169)@sint16; mov L0x5555555614e6 (  -578)@sint16;
mov L0x5555555614e8 (  5294)@sint16; mov L0x5555555614ea (  -636)@sint16;
mov L0x5555555614ec (   400)@sint16; mov L0x5555555614ee (   151)@sint16;
mov L0x5555555614f0 ( -2884)@sint16; mov L0x5555555614f2 (  -336)@sint16;
mov L0x5555555614f4 ( -1006)@sint16; mov L0x5555555614f6 (  -326)@sint16;
mov L0x5555555614f8 (  1572)@sint16; mov L0x5555555614fa ( -2740)@sint16;
mov L0x5555555614fc (  -779)@sint16; mov L0x5555555614fe (  2206)@sint16;
mov L0x555555561500 ( -1586)@sint16; mov L0x555555561502 (  1068)@sint16;
mov L0x555555561504 ( -3715)@sint16; mov L0x555555561506 ( -1268)@sint16;
mov L0x555555561508 (  2684)@sint16; mov L0x55555556150a ( -5116)@sint16;
mov L0x55555556150c (  1324)@sint16; mov L0x55555556150e (  2973)@sint16;
mov L0x555555561510 ( -2234)@sint16; mov L0x555555561512 ( -4123)@sint16;
mov L0x555555561514 (  3337)@sint16; mov L0x555555561516 (  -864)@sint16;
mov L0x555555561518 (   472)@sint16; mov L0x55555556151a (  -467)@sint16;
mov L0x55555556151c (   970)@sint16; mov L0x55555556151e (   635)@sint16;
mov L0x555555561520 (  -573)@sint16; mov L0x555555561522 (  2230)@sint16;
mov L0x555555561524 ( -1132)@sint16; mov L0x555555561526 ( -4621)@sint16;
mov L0x555555561528 (  2624)@sint16; mov L0x55555556152a ( -4601)@sint16;
mov L0x55555556152c (  3570)@sint16; mov L0x55555556152e ( -3760)@sint16;
mov L0x555555561530 ( -5309)@sint16; mov L0x555555561532 (  3453)@sint16;
mov L0x555555561534 ( -5215)@sint16; mov L0x555555561536 (   854)@sint16;
mov L0x555555561538 ( -4250)@sint16; mov L0x55555556153a (  2428)@sint16;
mov L0x55555556153c (  1381)@sint16; mov L0x55555556153e (  5172)@sint16;
mov L0x555555561540 ( -5015)@sint16; mov L0x555555561542 ( -4447)@sint16;
mov L0x555555561544 (  3135)@sint16; mov L0x555555561546 (  2662)@sint16;
mov L0x555555561548 (  3524)@sint16; mov L0x55555556154a ( -1573)@sint16;
mov L0x55555556154c (  2139)@sint16; mov L0x55555556154e (   458)@sint16;
mov L0x555555561550 ( -2196)@sint16; mov L0x555555561552 ( -2657)@sint16;
mov L0x555555561554 (  4782)@sint16; mov L0x555555561556 ( -3410)@sint16;
mov L0x555555561558 (  2062)@sint16; mov L0x55555556155a (  2015)@sint16;
mov L0x55555556155c ( -4784)@sint16; mov L0x55555556155e (  1635)@sint16;
mov L0x555555561560 (  1349)@sint16; mov L0x555555561562 ( -1722)@sint16;
mov L0x555555561564 (  2909)@sint16; mov L0x555555561566 ( -4359)@sint16;
mov L0x555555561568 (  2680)@sint16; mov L0x55555556156a (  2087)@sint16;
mov L0x55555556156c (    40)@sint16; mov L0x55555556156e (  3241)@sint16;
mov L0x555555561570 ( -2439)@sint16; mov L0x555555561572 (  2117)@sint16;
mov L0x555555561574 (  2050)@sint16; mov L0x555555561576 (  2118)@sint16;
mov L0x555555561578 ( -4144)@sint16; mov L0x55555556157a (  -274)@sint16;
mov L0x55555556157c (  3148)@sint16; mov L0x55555556157e ( -1930)@sint16;
mov L0x555555561580 (  1992)@sint16; mov L0x555555561582 (  4408)@sint16;
mov L0x555555561584 (  5005)@sint16; mov L0x555555561586 ( -4428)@sint16;
mov L0x555555561588 (  2419)@sint16; mov L0x55555556158a (  1639)@sint16;
mov L0x55555556158c (  2283)@sint16; mov L0x55555556158e (  -778)@sint16;
mov L0x555555561590 ( -2374)@sint16; mov L0x555555561592 (   663)@sint16;
mov L0x555555561594 (  1409)@sint16; mov L0x555555561596 ( -2237)@sint16;
mov L0x555555561598 ( -4254)@sint16; mov L0x55555556159a ( -1122)@sint16;
mov L0x55555556159c (    97)@sint16; mov L0x55555556159e ( -5313)@sint16;
mov L0x5555555615a0 ( -3535)@sint16; mov L0x5555555615a2 ( -2813)@sint16;
mov L0x5555555615a4 (  5083)@sint16; mov L0x5555555615a6 (   279)@sint16;
mov L0x5555555615a8 (  4328)@sint16; mov L0x5555555615aa (  2279)@sint16;
mov L0x5555555615ac (  2151)@sint16; mov L0x5555555615ae (   355)@sint16;
mov L0x5555555615b0 ( -4003)@sint16; mov L0x5555555615b2 (  1204)@sint16;
mov L0x5555555615b4 ( -5356)@sint16; mov L0x5555555615b6 (  -624)@sint16;
mov L0x5555555615b8 (  5120)@sint16; mov L0x5555555615ba ( -4519)@sint16;
mov L0x5555555615bc ( -1689)@sint16; mov L0x5555555615be (  1056)@sint16;
mov L0x5555555615c0 (  3891)@sint16; mov L0x5555555615c2 ( -3827)@sint16;
mov L0x5555555615c4 (  1663)@sint16; mov L0x5555555615c6 ( -2625)@sint16;
mov L0x5555555615c8 ( -2449)@sint16; mov L0x5555555615ca (  3995)@sint16;
mov L0x5555555615cc ( -1160)@sint16; mov L0x5555555615ce (  2788)@sint16;
mov L0x5555555615d0 ( -4540)@sint16; mov L0x5555555615d2 (  3125)@sint16;
mov L0x5555555615d4 (  5068)@sint16; mov L0x5555555615d6 (  3096)@sint16;
mov L0x5555555615d8 (  1893)@sint16; mov L0x5555555615da ( -2807)@sint16;
mov L0x5555555615dc ( -5268)@sint16; mov L0x5555555615de (  2205)@sint16;
mov L0x5555555615e0 ( -4889)@sint16; mov L0x5555555615e2 (  -152)@sint16;
mov L0x5555555615e4 (   569)@sint16; mov L0x5555555615e6 (  4973)@sint16;
mov L0x5555555615e8 (  -825)@sint16; mov L0x5555555615ea (  4393)@sint16;
mov L0x5555555615ec (  4000)@sint16; mov L0x5555555615ee (  1510)@sint16;
mov L0x5555555615f0 (  3419)@sint16; mov L0x5555555615f2 ( -3360)@sint16;
mov L0x5555555615f4 (   693)@sint16; mov L0x5555555615f6 ( -3260)@sint16;
mov L0x5555555615f8 (  4967)@sint16; mov L0x5555555615fa (  4859)@sint16;
mov L0x5555555615fc (  2963)@sint16; mov L0x5555555615fe (   554)@sint16;
mov L0x555555561600 ( -5107)@sint16; mov L0x555555561602 (   -73)@sint16;
mov L0x555555561604 ( -4891)@sint16; mov L0x555555561606 ( -1927)@sint16;
mov L0x555555561608 (  5334)@sint16; mov L0x55555556160a (  2605)@sint16;
mov L0x55555556160c (  2487)@sint16; mov L0x55555556160e ( -2529)@sint16;
mov L0x555555561610 (  -834)@sint16; mov L0x555555561612 (  1782)@sint16;
mov L0x555555561614 (  1111)@sint16; mov L0x555555561616 (  2113)@sint16;
mov L0x555555561618 (  4720)@sint16; mov L0x55555556161a ( -4670)@sint16;
mov L0x55555556161c ( -1053)@sint16; mov L0x55555556161e ( -4403)@sint16;
mov L0x555555561620 (    -6)@sint16; mov L0x555555561622 (-27359)@sint16;
mov L0x555555561624 (  -408)@sint16; mov L0x555555561626 (  1956)@sint16;
mov L0x555555561628 ( 20856)@sint16; mov L0x55555556162a (-28517)@sint16;
mov L0x55555556162c ( 21094)@sint16; mov L0x55555556162e (-10093)@sint16;
mov L0x555555561630 (  1018)@sint16; mov L0x555555561632 (  -223)@sint16;
mov L0x555555561634 (  3688)@sint16; mov L0x555555561636 ( -4188)@sint16;
mov L0x555555561638 (   376)@sint16; mov L0x55555556163a (  -357)@sint16;
mov L0x55555556163c (  3686)@sint16; mov L0x55555556163e ( -2413)@sint16;



(**************** indices *****************)

mov L0x5555555610a0 (0x0f0e)@sint16; mov L0x5555555610a2 (0x0d0c)@sint16;
mov L0x5555555610a4 (0x0b0a)@sint16; mov L0x5555555610a6 (0x0908)@sint16;
mov L0x5555555610a8 (0x0706)@sint16; mov L0x5555555610aa (0x0504)@sint16;
mov L0x5555555610ac (0x0302)@sint16; mov L0x5555555610ae (0x0100)@sint16;
mov L0x5555555610b0 (0x0f0e)@sint16; mov L0x5555555610b2 (0x0d0c)@sint16;
mov L0x5555555610b4 (0x0b0a)@sint16; mov L0x5555555610b6 (0x0908)@sint16;
mov L0x5555555610b8 (0x0706)@sint16; mov L0x5555555610ba (0x0504)@sint16;
mov L0x5555555610bc (0x0302)@sint16; mov L0x5555555610be (0x0100)@sint16;
mov L0x5555555610c0 (0x0007)@sint16; mov L0x5555555610c2 (0x0000)@sint16;
mov L0x5555555610c4 (0x0006)@sint16; mov L0x5555555610c6 (0x0000)@sint16;
mov L0x5555555610c8 (0x0005)@sint16; mov L0x5555555610ca (0x0000)@sint16;
mov L0x5555555610cc (0x0004)@sint16; mov L0x5555555610ce (0x0000)@sint16;
mov L0x5555555610d0 (0x0003)@sint16; mov L0x5555555610d2 (0x0000)@sint16;
mov L0x5555555610d4 (0x0002)@sint16; mov L0x5555555610d6 (0x0000)@sint16;
mov L0x5555555610d8 (0x0001)@sint16; mov L0x5555555610da (0x0000)@sint16;
mov L0x5555555610dc (0x0000)@sint16; mov L0x5555555610de (0x0000)@sint16;
mov L0x5555555610e0 (0x0100)@sint16; mov L0x5555555610e2 (0x0504)@sint16;
mov L0x5555555610e4 (0x0908)@sint16; mov L0x5555555610e6 (0x0d0c)@sint16;
mov L0x5555555610e8 (0x0302)@sint16; mov L0x5555555610ea (0x0706)@sint16;
mov L0x5555555610ec (0x0b0a)@sint16; mov L0x5555555610ee (0x0f0e)@sint16;
mov L0x5555555610f0 (0x0100)@sint16; mov L0x5555555610f2 (0x0504)@sint16;
mov L0x5555555610f4 (0x0908)@sint16; mov L0x5555555610f6 (0x0d0c)@sint16;
mov L0x5555555610f8 (0x0302)@sint16; mov L0x5555555610fa (0x0706)@sint16;
mov L0x5555555610fc (0x0b0a)@sint16; mov L0x5555555610fe (0x0f0e)@sint16;
mov L0x555555561100 (0x0100)@sint16; mov L0x555555561102 (0x0908)@sint16;
mov L0x555555561104 (0x0302)@sint16; mov L0x555555561106 (0x0b0a)@sint16;
mov L0x555555561108 (0x0504)@sint16; mov L0x55555556110a (0x0d0c)@sint16;
mov L0x55555556110c (0x0706)@sint16; mov L0x55555556110e (0x0f0e)@sint16;
mov L0x555555561110 (0x0100)@sint16; mov L0x555555561112 (0x0908)@sint16;
mov L0x555555561114 (0x0302)@sint16; mov L0x555555561116 (0x0b0a)@sint16;
mov L0x555555561118 (0x0504)@sint16; mov L0x55555556111a (0x0d0c)@sint16;
mov L0x55555556111c (0x0706)@sint16; mov L0x55555556111e (0x0f0e)@sint16;



(* #! -> SP = 0x7fffffffca98 *)
#! 0x7fffffffca98 = 0x7fffffffca98;
(* vmovdqa (%rdx),%ymm0                            #! EA = L0x555555561120; Value = 0x2a012a012a012a01; PC = 0x555555559f6e *)
mov ymm0_0 L0x555555561120;
mov ymm0_1 L0x555555561122;
mov ymm0_2 L0x555555561124;
mov ymm0_3 L0x555555561126;
mov ymm0_4 L0x555555561128;
mov ymm0_5 L0x55555556112a;
mov ymm0_6 L0x55555556112c;
mov ymm0_7 L0x55555556112e;
mov ymm0_8 L0x555555561130;
mov ymm0_9 L0x555555561132;
mov ymm0_a L0x555555561134;
mov ymm0_b L0x555555561136;
mov ymm0_c L0x555555561138;
mov ymm0_d L0x55555556113a;
mov ymm0_e L0x55555556113c;
mov ymm0_f L0x55555556113e;
(* vmovdqa 0x7126(%rip),%ymm15        # 0x5555555610a0 <nttmul_idxdata>#! EA = L0x5555555610a0; Value = 0x09080b0a0d0c0f0e; PC = 0x555555559f72 *)
mov ymm15_0 L0x5555555610a0;
mov ymm15_1 L0x5555555610a2;
mov ymm15_2 L0x5555555610a4;
mov ymm15_3 L0x5555555610a6;
mov ymm15_4 L0x5555555610a8;
mov ymm15_5 L0x5555555610aa;
mov ymm15_6 L0x5555555610ac;
mov ymm15_7 L0x5555555610ae;
mov ymm15_8 L0x5555555610b0;
mov ymm15_9 L0x5555555610b2;
mov ymm15_a L0x5555555610b4;
mov ymm15_b L0x5555555610b6;
mov ymm15_c L0x5555555610b8;
mov ymm15_d L0x5555555610ba;
mov ymm15_e L0x5555555610bc;
mov ymm15_f L0x5555555610be;
(* vmovdqa 0x715e(%rip),%ymm14        # 0x5555555610e0 <nttmul_idxdata+64>#! EA = L0x5555555610e0; Value = 0x0d0c090805040100; PC = 0x555555559f7a *)
mov ymm14_0 L0x5555555610e0;
mov ymm14_1 L0x5555555610e2;
mov ymm14_2 L0x5555555610e4;
mov ymm14_3 L0x5555555610e6;
mov ymm14_4 L0x5555555610e8;
mov ymm14_5 L0x5555555610ea;
mov ymm14_6 L0x5555555610ec;
mov ymm14_7 L0x5555555610ee;
mov ymm14_8 L0x5555555610f0;
mov ymm14_9 L0x5555555610f2;
mov ymm14_a L0x5555555610f4;
mov ymm14_b L0x5555555610f6;
mov ymm14_c L0x5555555610f8;
mov ymm14_d L0x5555555610fa;
mov ymm14_e L0x5555555610fc;
mov ymm14_f L0x5555555610fe;
(* vmovdqa (%rsi),%ymm4                            #! EA = L0x7fffffffd2e0; Value = 0xf22e12b10126075d; PC = 0x555555559f82 *)
mov ymm4_0 L0x7fffffffd2e0;
mov ymm4_1 L0x7fffffffd2e2;
mov ymm4_2 L0x7fffffffd2e4;
mov ymm4_3 L0x7fffffffd2e6;
mov ymm4_4 L0x7fffffffd2e8;
mov ymm4_5 L0x7fffffffd2ea;
mov ymm4_6 L0x7fffffffd2ec;
mov ymm4_7 L0x7fffffffd2ee;
mov ymm4_8 L0x7fffffffd2f0;
mov ymm4_9 L0x7fffffffd2f2;
mov ymm4_a L0x7fffffffd2f4;
mov ymm4_b L0x7fffffffd2f6;
mov ymm4_c L0x7fffffffd2f8;
mov ymm4_d L0x7fffffffd2fa;
mov ymm4_e L0x7fffffffd2fc;
mov ymm4_f L0x7fffffffd2fe;
(* vmovdqa 0x20(%rsi),%ymm5                        #! EA = L0x7fffffffd300; Value = 0xfca6f0410376f0fe; PC = 0x555555559f86 *)
mov ymm5_0 L0x7fffffffd300;
mov ymm5_1 L0x7fffffffd302;
mov ymm5_2 L0x7fffffffd304;
mov ymm5_3 L0x7fffffffd306;
mov ymm5_4 L0x7fffffffd308;
mov ymm5_5 L0x7fffffffd30a;
mov ymm5_6 L0x7fffffffd30c;
mov ymm5_7 L0x7fffffffd30e;
mov ymm5_8 L0x7fffffffd310;
mov ymm5_9 L0x7fffffffd312;
mov ymm5_a L0x7fffffffd314;
mov ymm5_b L0x7fffffffd316;
mov ymm5_c L0x7fffffffd318;
mov ymm5_d L0x7fffffffd31a;
mov ymm5_e L0x7fffffffd31c;
mov ymm5_f L0x7fffffffd31e;
(* vmovdqa 0x40(%rsi),%ymm6                        #! EA = L0x7fffffffd320; Value = 0x11fff5f4ef5beb7c; PC = 0x555555559f8b *)
mov ymm6_0 L0x7fffffffd320;
mov ymm6_1 L0x7fffffffd322;
mov ymm6_2 L0x7fffffffd324;
mov ymm6_3 L0x7fffffffd326;
mov ymm6_4 L0x7fffffffd328;
mov ymm6_5 L0x7fffffffd32a;
mov ymm6_6 L0x7fffffffd32c;
mov ymm6_7 L0x7fffffffd32e;
mov ymm6_8 L0x7fffffffd330;
mov ymm6_9 L0x7fffffffd332;
mov ymm6_a L0x7fffffffd334;
mov ymm6_b L0x7fffffffd336;
mov ymm6_c L0x7fffffffd338;
mov ymm6_d L0x7fffffffd33a;
mov ymm6_e L0x7fffffffd33c;
mov ymm6_f L0x7fffffffd33e;
(* vmovdqa 0x60(%rsi),%ymm7                        #! EA = L0x7fffffffd340; Value = 0xf8f7f165fa0313ba; PC = 0x555555559f90 *)
mov ymm7_0 L0x7fffffffd340;
mov ymm7_1 L0x7fffffffd342;
mov ymm7_2 L0x7fffffffd344;
mov ymm7_3 L0x7fffffffd346;
mov ymm7_4 L0x7fffffffd348;
mov ymm7_5 L0x7fffffffd34a;
mov ymm7_6 L0x7fffffffd34c;
mov ymm7_7 L0x7fffffffd34e;
mov ymm7_8 L0x7fffffffd350;
mov ymm7_9 L0x7fffffffd352;
mov ymm7_a L0x7fffffffd354;
mov ymm7_b L0x7fffffffd356;
mov ymm7_c L0x7fffffffd358;
mov ymm7_d L0x7fffffffd35a;
mov ymm7_e L0x7fffffffd35c;
mov ymm7_f L0x7fffffffd35e;
(* vmovdqa 0x80(%rsi),%ymm8                        #! EA = L0x7fffffffd360; Value = 0xefa70b91f2f005ed; PC = 0x555555559f95 *)
mov ymm8_0 L0x7fffffffd360;
mov ymm8_1 L0x7fffffffd362;
mov ymm8_2 L0x7fffffffd364;
mov ymm8_3 L0x7fffffffd366;
mov ymm8_4 L0x7fffffffd368;
mov ymm8_5 L0x7fffffffd36a;
mov ymm8_6 L0x7fffffffd36c;
mov ymm8_7 L0x7fffffffd36e;
mov ymm8_8 L0x7fffffffd370;
mov ymm8_9 L0x7fffffffd372;
mov ymm8_a L0x7fffffffd374;
mov ymm8_b L0x7fffffffd376;
mov ymm8_c L0x7fffffffd378;
mov ymm8_d L0x7fffffffd37a;
mov ymm8_e L0x7fffffffd37c;
mov ymm8_f L0x7fffffffd37e;
(* vmovdqa 0xa0(%rsi),%ymm9                        #! EA = L0x7fffffffd380; Value = 0x05130dd9017a04f9; PC = 0x555555559f9d *)
mov ymm9_0 L0x7fffffffd380;
mov ymm9_1 L0x7fffffffd382;
mov ymm9_2 L0x7fffffffd384;
mov ymm9_3 L0x7fffffffd386;
mov ymm9_4 L0x7fffffffd388;
mov ymm9_5 L0x7fffffffd38a;
mov ymm9_6 L0x7fffffffd38c;
mov ymm9_7 L0x7fffffffd38e;
mov ymm9_8 L0x7fffffffd390;
mov ymm9_9 L0x7fffffffd392;
mov ymm9_a L0x7fffffffd394;
mov ymm9_b L0x7fffffffd396;
mov ymm9_c L0x7fffffffd398;
mov ymm9_d L0x7fffffffd39a;
mov ymm9_e L0x7fffffffd39c;
mov ymm9_f L0x7fffffffd39e;
(* vmovdqa 0xc0(%rsi),%ymm10                       #! EA = L0x7fffffffd3a0; Value = 0x0483f3d4f55f10b5; PC = 0x555555559fa5 *)
mov ymm10_0 L0x7fffffffd3a0;
mov ymm10_1 L0x7fffffffd3a2;
mov ymm10_2 L0x7fffffffd3a4;
mov ymm10_3 L0x7fffffffd3a6;
mov ymm10_4 L0x7fffffffd3a8;
mov ymm10_5 L0x7fffffffd3aa;
mov ymm10_6 L0x7fffffffd3ac;
mov ymm10_7 L0x7fffffffd3ae;
mov ymm10_8 L0x7fffffffd3b0;
mov ymm10_9 L0x7fffffffd3b2;
mov ymm10_a L0x7fffffffd3b4;
mov ymm10_b L0x7fffffffd3b6;
mov ymm10_c L0x7fffffffd3b8;
mov ymm10_d L0x7fffffffd3ba;
mov ymm10_e L0x7fffffffd3bc;
mov ymm10_f L0x7fffffffd3be;
(* vmovdqa 0xe0(%rsi),%ymm11                       #! EA = L0x7fffffffd3c0; Value = 0xf06ef00212f60485; PC = 0x555555559fad *)
mov ymm11_0 L0x7fffffffd3c0;
mov ymm11_1 L0x7fffffffd3c2;
mov ymm11_2 L0x7fffffffd3c4;
mov ymm11_3 L0x7fffffffd3c6;
mov ymm11_4 L0x7fffffffd3c8;
mov ymm11_5 L0x7fffffffd3ca;
mov ymm11_6 L0x7fffffffd3cc;
mov ymm11_7 L0x7fffffffd3ce;
mov ymm11_8 L0x7fffffffd3d0;
mov ymm11_9 L0x7fffffffd3d2;
mov ymm11_a L0x7fffffffd3d4;
mov ymm11_b L0x7fffffffd3d6;
mov ymm11_c L0x7fffffffd3d8;
mov ymm11_d L0x7fffffffd3da;
mov ymm11_e L0x7fffffffd3dc;
mov ymm11_f L0x7fffffffd3de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x555555559fb5 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x555555559fb9 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x555555559fbd *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x555555559fc1 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x555555559fc5 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x555555559fca *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x555555559fcf *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x555555559fd4 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x500(%rdx),%ymm12               #! EA = L0x555555561620; Value = 0x07a4fe689521fffa; PC = 0x555555559fd9 *)
mov ymm12_0 L0x555555561620;
mov ymm12_1 L0x555555561622;
mov ymm12_2 L0x555555561624;
mov ymm12_3 L0x555555561626;
mov ymm12_4 L0x555555561628;
mov ymm12_5 L0x55555556162a;
mov ymm12_6 L0x55555556162c;
mov ymm12_7 L0x55555556162e;
mov ymm12_8 L0x555555561620;
mov ymm12_9 L0x555555561622;
mov ymm12_a L0x555555561624;
mov ymm12_b L0x555555561626;
mov ymm12_c L0x555555561628;
mov ymm12_d L0x55555556162a;
mov ymm12_e L0x55555556162c;
mov ymm12_f L0x55555556162e;
(* vbroadcasti128 0x510(%rdx),%ymm13               #! EA = L0x555555561630; Value = 0xefa40e68ff2103fa; PC = 0x555555559fe2 *)
mov ymm13_0 L0x555555561630;
mov ymm13_1 L0x555555561632;
mov ymm13_2 L0x555555561634;
mov ymm13_3 L0x555555561636;
mov ymm13_4 L0x555555561638;
mov ymm13_5 L0x55555556163a;
mov ymm13_6 L0x55555556163c;
mov ymm13_7 L0x55555556163e;
mov ymm13_8 L0x555555561630;
mov ymm13_9 L0x555555561632;
mov ymm13_a L0x555555561634;
mov ymm13_b L0x555555561636;
mov ymm13_c L0x555555561638;
mov ymm13_d L0x55555556163a;
mov ymm13_e L0x55555556163c;
mov ymm13_f L0x55555556163e;
(* vpmullw %ymm12,%ymm5,%ymm10                     #! PC = 0x555555559feb *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x555555559ff0 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555559ff5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm5,%ymm5                       #! PC = 0x555555559ff9 *)
sub ymm5_0 ymm5_0 ymm10_0;
sub ymm5_1 ymm5_1 ymm10_1;
sub ymm5_2 ymm5_2 ymm10_2;
sub ymm5_3 ymm5_3 ymm10_3;
sub ymm5_4 ymm5_4 ymm10_4;
sub ymm5_5 ymm5_5 ymm10_5;
sub ymm5_6 ymm5_6 ymm10_6;
sub ymm5_7 ymm5_7 ymm10_7;
sub ymm5_8 ymm5_8 ymm10_8;
sub ymm5_9 ymm5_9 ymm10_9;
sub ymm5_a ymm5_a ymm10_a;
sub ymm5_b ymm5_b ymm10_b;
sub ymm5_c ymm5_c ymm10_c;
sub ymm5_d ymm5_d ymm10_d;
sub ymm5_e ymm5_e ymm10_e;
sub ymm5_f ymm5_f ymm10_f;
(* vbroadcasti128 0x110(%rdx),%ymm1                #! EA = L0x555555561230; Value = 0x30bc8cf7c126e487; PC = 0x555555559ffe *)
mov ymm1_0 L0x555555561230;
mov ymm1_1 L0x555555561232;
mov ymm1_2 L0x555555561234;
mov ymm1_3 L0x555555561236;
mov ymm1_4 L0x555555561238;
mov ymm1_5 L0x55555556123a;
mov ymm1_6 L0x55555556123c;
mov ymm1_7 L0x55555556123e;
mov ymm1_8 L0x555555561230;
mov ymm1_9 L0x555555561232;
mov ymm1_a L0x555555561234;
mov ymm1_b L0x555555561236;
mov ymm1_c L0x555555561238;
mov ymm1_d L0x55555556123a;
mov ymm1_e L0x55555556123c;
mov ymm1_f L0x55555556123e;
(* vbroadcasti128 0x310(%rdx),%ymm2                #! EA = L0x555555561430; Value = 0x08bc12f7fd260a87; PC = 0x55555555a007 *)
mov ymm2_0 L0x555555561430;
mov ymm2_1 L0x555555561432;
mov ymm2_2 L0x555555561434;
mov ymm2_3 L0x555555561436;
mov ymm2_4 L0x555555561438;
mov ymm2_5 L0x55555556143a;
mov ymm2_6 L0x55555556143c;
mov ymm2_7 L0x55555556143e;
mov ymm2_8 L0x555555561430;
mov ymm2_9 L0x555555561432;
mov ymm2_a L0x555555561434;
mov ymm2_b L0x555555561436;
mov ymm2_c L0x555555561438;
mov ymm2_d L0x55555556143a;
mov ymm2_e L0x55555556143c;
mov ymm2_f L0x55555556143e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a010 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a015 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555a01a *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a01e *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a022 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555a026 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x130(%rdx),%ymm1                #! EA = L0x555555561250; Value = 0xf0ab2711fcc3398b; PC = 0x55555555a02a *)
mov ymm1_0 L0x555555561250;
mov ymm1_1 L0x555555561252;
mov ymm1_2 L0x555555561254;
mov ymm1_3 L0x555555561256;
mov ymm1_4 L0x555555561258;
mov ymm1_5 L0x55555556125a;
mov ymm1_6 L0x55555556125c;
mov ymm1_7 L0x55555556125e;
mov ymm1_8 L0x555555561250;
mov ymm1_9 L0x555555561252;
mov ymm1_a L0x555555561254;
mov ymm1_b L0x555555561256;
mov ymm1_c L0x555555561258;
mov ymm1_d L0x55555556125a;
mov ymm1_e L0x55555556125c;
mov ymm1_f L0x55555556125e;
(* vbroadcasti128 0x330(%rdx),%ymm2                #! EA = L0x555555561450; Value = 0xfeabf111fac3078b; PC = 0x55555555a033 *)
mov ymm2_0 L0x555555561450;
mov ymm2_1 L0x555555561452;
mov ymm2_2 L0x555555561454;
mov ymm2_3 L0x555555561456;
mov ymm2_4 L0x555555561458;
mov ymm2_5 L0x55555556145a;
mov ymm2_6 L0x55555556145c;
mov ymm2_7 L0x55555556145e;
mov ymm2_8 L0x555555561450;
mov ymm2_9 L0x555555561452;
mov ymm2_a L0x555555561454;
mov ymm2_b L0x555555561456;
mov ymm2_c L0x555555561458;
mov ymm2_d L0x55555556145a;
mov ymm2_e L0x55555556145c;
mov ymm2_f L0x55555556145e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a03c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a041 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555a046 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a04a *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a04e *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555a052 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x120(%rdx),%ymm1                #! EA = L0x555555561240; Value = 0xee3d92395a10450b; PC = 0x55555555a057 *)
mov ymm1_0 L0x555555561240;
mov ymm1_1 L0x555555561242;
mov ymm1_2 L0x555555561244;
mov ymm1_3 L0x555555561246;
mov ymm1_4 L0x555555561248;
mov ymm1_5 L0x55555556124a;
mov ymm1_6 L0x55555556124c;
mov ymm1_7 L0x55555556124e;
mov ymm1_8 L0x555555561240;
mov ymm1_9 L0x555555561242;
mov ymm1_a L0x555555561244;
mov ymm1_b L0x555555561246;
mov ymm1_c L0x555555561248;
mov ymm1_d L0x55555556124a;
mov ymm1_e L0x55555556124c;
mov ymm1_f L0x55555556124e;
(* vbroadcasti128 0x320(%rdx),%ymm2                #! EA = L0x555555561440; Value = 0xf03dec39fa10130b; PC = 0x55555555a060 *)
mov ymm2_0 L0x555555561440;
mov ymm2_1 L0x555555561442;
mov ymm2_2 L0x555555561444;
mov ymm2_3 L0x555555561446;
mov ymm2_4 L0x555555561448;
mov ymm2_5 L0x55555556144a;
mov ymm2_6 L0x55555556144c;
mov ymm2_7 L0x55555556144e;
mov ymm2_8 L0x555555561440;
mov ymm2_9 L0x555555561442;
mov ymm2_a L0x555555561444;
mov ymm2_b L0x555555561446;
mov ymm2_c L0x555555561448;
mov ymm2_d L0x55555556144a;
mov ymm2_e L0x55555556144c;
mov ymm2_f L0x55555556144e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a069 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a06e *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555a073 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a077 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a07b *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555a07f *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555a084 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a089 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555a08e *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555a092 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a096 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a09b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555a0a0 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555a0a4 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555a0a8 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a0ad *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555a0b2 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555a0b7 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a0bc *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a0c1 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555a0c6 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555a0cb *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555a0d0 *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555a0d4 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555a0d8 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555a0dc *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555a0e0 *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555a0e5 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555a0ea *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555a0ef *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq %xmm12,%ymm12                      #! PC = 0x55555555a0f4 *)
mov ymm12_0 ymm12_0;
mov ymm12_1 ymm12_1;
mov ymm12_2 ymm12_2;
mov ymm12_3 ymm12_3;
mov ymm12_4 ymm12_0;
mov ymm12_5 ymm12_1;
mov ymm12_6 ymm12_2;
mov ymm12_7 ymm12_3;
mov ymm12_8 ymm12_0;
mov ymm12_9 ymm12_1;
mov ymm12_a ymm12_2;
mov ymm12_b ymm12_3;
mov ymm12_c ymm12_0;
mov ymm12_d ymm12_1;
mov ymm12_e ymm12_2;
mov ymm12_f ymm12_3;
(* vpbroadcastq %xmm13,%ymm13                      #! PC = 0x55555555a0f9 *)
mov ymm13_0 ymm13_0;
mov ymm13_1 ymm13_1;
mov ymm13_2 ymm13_2;
mov ymm13_3 ymm13_3;
mov ymm13_4 ymm13_0;
mov ymm13_5 ymm13_1;
mov ymm13_6 ymm13_2;
mov ymm13_7 ymm13_3;
mov ymm13_8 ymm13_0;
mov ymm13_9 ymm13_1;
mov ymm13_a ymm13_2;
mov ymm13_b ymm13_3;
mov ymm13_c ymm13_0;
mov ymm13_d ymm13_1;
mov ymm13_e ymm13_2;
mov ymm13_f ymm13_3;
(* vpmullw %ymm12,%ymm5,%ymm6                      #! PC = 0x55555555a0fe *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555a103 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a108 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm5,%ymm5                        #! PC = 0x55555555a10c *)
sub ymm5_0 ymm5_0 ymm6_0;
sub ymm5_1 ymm5_1 ymm6_1;
sub ymm5_2 ymm5_2 ymm6_2;
sub ymm5_3 ymm5_3 ymm6_3;
sub ymm5_4 ymm5_4 ymm6_4;
sub ymm5_5 ymm5_5 ymm6_5;
sub ymm5_6 ymm5_6 ymm6_6;
sub ymm5_7 ymm5_7 ymm6_7;
sub ymm5_8 ymm5_8 ymm6_8;
sub ymm5_9 ymm5_9 ymm6_9;
sub ymm5_a ymm5_a ymm6_a;
sub ymm5_b ymm5_b ymm6_b;
sub ymm5_c ymm5_c ymm6_c;
sub ymm5_d ymm5_d ymm6_d;
sub ymm5_e ymm5_e ymm6_e;
sub ymm5_f ymm5_f ymm6_f;
(* vpbroadcastq 0x108(%rdx),%ymm1                  #! EA = L0x555555561228; Value = 0xae886f65ad9a276d; PC = 0x55555555a110 *)
mov ymm1_0 L0x555555561228;
mov ymm1_1 L0x55555556122a;
mov ymm1_2 L0x55555556122c;
mov ymm1_3 L0x55555556122e;
mov ymm1_4 L0x555555561228;
mov ymm1_5 L0x55555556122a;
mov ymm1_6 L0x55555556122c;
mov ymm1_7 L0x55555556122e;
mov ymm1_8 L0x555555561228;
mov ymm1_9 L0x55555556122a;
mov ymm1_a L0x55555556122c;
mov ymm1_b L0x55555556122e;
mov ymm1_c L0x555555561228;
mov ymm1_d L0x55555556122a;
mov ymm1_e L0x55555556122c;
mov ymm1_f L0x55555556122e;
(* vpbroadcastq 0x308(%rdx),%ymm2                  #! EA = L0x555555561428; Value = 0xfe880165f19a096d; PC = 0x55555555a119 *)
mov ymm2_0 L0x555555561428;
mov ymm2_1 L0x55555556142a;
mov ymm2_2 L0x55555556142c;
mov ymm2_3 L0x55555556142e;
mov ymm2_4 L0x555555561428;
mov ymm2_5 L0x55555556142a;
mov ymm2_6 L0x55555556142c;
mov ymm2_7 L0x55555556142e;
mov ymm2_8 L0x555555561428;
mov ymm2_9 L0x55555556142a;
mov ymm2_a L0x55555556142c;
mov ymm2_b L0x55555556142e;
mov ymm2_c L0x555555561428;
mov ymm2_d L0x55555556142a;
mov ymm2_e L0x55555556142c;
mov ymm2_f L0x55555556142e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a122 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a127 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555a12c *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a130 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a134 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555a138 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x118(%rdx),%ymm1                  #! EA = L0x555555561238; Value = 0xc138252491c0b857; PC = 0x55555555a13c *)
mov ymm1_0 L0x555555561238;
mov ymm1_1 L0x55555556123a;
mov ymm1_2 L0x55555556123c;
mov ymm1_3 L0x55555556123e;
mov ymm1_4 L0x555555561238;
mov ymm1_5 L0x55555556123a;
mov ymm1_6 L0x55555556123c;
mov ymm1_7 L0x55555556123e;
mov ymm1_8 L0x555555561238;
mov ymm1_9 L0x55555556123a;
mov ymm1_a L0x55555556123c;
mov ymm1_b L0x55555556123e;
mov ymm1_c L0x555555561238;
mov ymm1_d L0x55555556123a;
mov ymm1_e L0x55555556123c;
mov ymm1_f L0x55555556123e;
(* vpbroadcastq 0x318(%rdx),%ymm2                  #! EA = L0x555555561438; Value = 0xf1380d2411c0fe57; PC = 0x55555555a145 *)
mov ymm2_0 L0x555555561438;
mov ymm2_1 L0x55555556143a;
mov ymm2_2 L0x55555556143c;
mov ymm2_3 L0x55555556143e;
mov ymm2_4 L0x555555561438;
mov ymm2_5 L0x55555556143a;
mov ymm2_6 L0x55555556143c;
mov ymm2_7 L0x55555556143e;
mov ymm2_8 L0x555555561438;
mov ymm2_9 L0x55555556143a;
mov ymm2_a L0x55555556143c;
mov ymm2_b L0x55555556143e;
mov ymm2_c L0x555555561438;
mov ymm2_d L0x55555556143a;
mov ymm2_e L0x55555556143c;
mov ymm2_f L0x55555556143e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a14e *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a153 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555a158 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a15c *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a160 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555a164 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x110(%rdx),%ymm1                  #! EA = L0x555555561230; Value = 0x30bc8cf7c126e487; PC = 0x55555555a169 *)
mov ymm1_0 L0x555555561230;
mov ymm1_1 L0x555555561232;
mov ymm1_2 L0x555555561234;
mov ymm1_3 L0x555555561236;
mov ymm1_4 L0x555555561230;
mov ymm1_5 L0x555555561232;
mov ymm1_6 L0x555555561234;
mov ymm1_7 L0x555555561236;
mov ymm1_8 L0x555555561230;
mov ymm1_9 L0x555555561232;
mov ymm1_a L0x555555561234;
mov ymm1_b L0x555555561236;
mov ymm1_c L0x555555561230;
mov ymm1_d L0x555555561232;
mov ymm1_e L0x555555561234;
mov ymm1_f L0x555555561236;
(* vpbroadcastq 0x310(%rdx),%ymm2                  #! EA = L0x555555561430; Value = 0x08bc12f7fd260a87; PC = 0x55555555a172 *)
mov ymm2_0 L0x555555561430;
mov ymm2_1 L0x555555561432;
mov ymm2_2 L0x555555561434;
mov ymm2_3 L0x555555561436;
mov ymm2_4 L0x555555561430;
mov ymm2_5 L0x555555561432;
mov ymm2_6 L0x555555561434;
mov ymm2_7 L0x555555561436;
mov ymm2_8 L0x555555561430;
mov ymm2_9 L0x555555561432;
mov ymm2_a L0x555555561434;
mov ymm2_b L0x555555561436;
mov ymm2_c L0x555555561430;
mov ymm2_d L0x555555561432;
mov ymm2_e L0x555555561434;
mov ymm2_f L0x555555561436;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a17b *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a180 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555a185 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a189 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a18d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555a191 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555a196 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555a19e *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555a1a6 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555a1aa *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a1ae *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555a1b2 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555a1b6 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555a1ba *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a1be *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555a1c2 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555a1c6 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555a1ca *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a1ce *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555a1d2 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555a1d6 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555a1da *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a1de *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555a1e2 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a1e6 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a1eb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555a1f0 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555a1f4 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555a1f8 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a1fd *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555a202 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555a206 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555a20a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a20f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555a214 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555a219 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a21e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a223 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555a228 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555a22d *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555a232 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555a236 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555a23a *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555a23e *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555a242 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555a247 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555a24c *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555a251 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd %xmm12,%ymm12                      #! PC = 0x55555555a256 *)
mov ymm12_0 ymm12_0;
mov ymm12_1 ymm12_1;
mov ymm12_2 ymm12_0;
mov ymm12_3 ymm12_1;
mov ymm12_4 ymm12_0;
mov ymm12_5 ymm12_1;
mov ymm12_6 ymm12_0;
mov ymm12_7 ymm12_1;
mov ymm12_8 ymm12_0;
mov ymm12_9 ymm12_1;
mov ymm12_a ymm12_0;
mov ymm12_b ymm12_1;
mov ymm12_c ymm12_0;
mov ymm12_d ymm12_1;
mov ymm12_e ymm12_0;
mov ymm12_f ymm12_1;
(* vpbroadcastd %xmm13,%ymm13                      #! PC = 0x55555555a25b *)
mov ymm13_0 ymm13_0;
mov ymm13_1 ymm13_1;
mov ymm13_2 ymm13_0;
mov ymm13_3 ymm13_1;
mov ymm13_4 ymm13_0;
mov ymm13_5 ymm13_1;
mov ymm13_6 ymm13_0;
mov ymm13_7 ymm13_1;
mov ymm13_8 ymm13_0;
mov ymm13_9 ymm13_1;
mov ymm13_a ymm13_0;
mov ymm13_b ymm13_1;
mov ymm13_c ymm13_0;
mov ymm13_d ymm13_1;
mov ymm13_e ymm13_0;
mov ymm13_f ymm13_1;
(* vpmullw %ymm12,%ymm5,%ymm3                      #! PC = 0x55555555a260 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555a265 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a26a *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm3,%ymm5,%ymm5                        #! PC = 0x55555555a26e *)
sub ymm5_0 ymm5_0 ymm3_0;
sub ymm5_1 ymm5_1 ymm3_1;
sub ymm5_2 ymm5_2 ymm3_2;
sub ymm5_3 ymm5_3 ymm3_3;
sub ymm5_4 ymm5_4 ymm3_4;
sub ymm5_5 ymm5_5 ymm3_5;
sub ymm5_6 ymm5_6 ymm3_6;
sub ymm5_7 ymm5_7 ymm3_7;
sub ymm5_8 ymm5_8 ymm3_8;
sub ymm5_9 ymm5_9 ymm3_9;
sub ymm5_a ymm5_a ymm3_a;
sub ymm5_b ymm5_b ymm3_b;
sub ymm5_c ymm5_c ymm3_c;
sub ymm5_d ymm5_d ymm3_d;
sub ymm5_e ymm5_e ymm3_e;
sub ymm5_f ymm5_f ymm3_f;
(* vpbroadcastd 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555a272 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561226;
(* vpbroadcastd 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555a27b *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561426;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a284 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a289 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555a28e *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a292 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a296 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555a29a *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x10c(%rdx),%ymm1                  #! EA = L0x55555556122c; Value = 0xc126e487ae886f65; PC = 0x55555555a29e *)
mov ymm1_0 L0x55555556122c;
mov ymm1_1 L0x55555556122e;
mov ymm1_2 L0x55555556122c;
mov ymm1_3 L0x55555556122e;
mov ymm1_4 L0x55555556122c;
mov ymm1_5 L0x55555556122e;
mov ymm1_6 L0x55555556122c;
mov ymm1_7 L0x55555556122e;
mov ymm1_8 L0x55555556122c;
mov ymm1_9 L0x55555556122e;
mov ymm1_a L0x55555556122c;
mov ymm1_b L0x55555556122e;
mov ymm1_c L0x55555556122c;
mov ymm1_d L0x55555556122e;
mov ymm1_e L0x55555556122c;
mov ymm1_f L0x55555556122e;
(* vpbroadcastd 0x30c(%rdx),%ymm2                  #! EA = L0x55555556142c; Value = 0xfd260a87fe880165; PC = 0x55555555a2a7 *)
mov ymm2_0 L0x55555556142c;
mov ymm2_1 L0x55555556142e;
mov ymm2_2 L0x55555556142c;
mov ymm2_3 L0x55555556142e;
mov ymm2_4 L0x55555556142c;
mov ymm2_5 L0x55555556142e;
mov ymm2_6 L0x55555556142c;
mov ymm2_7 L0x55555556142e;
mov ymm2_8 L0x55555556142c;
mov ymm2_9 L0x55555556142e;
mov ymm2_a L0x55555556142c;
mov ymm2_b L0x55555556142e;
mov ymm2_c L0x55555556142c;
mov ymm2_d L0x55555556142e;
mov ymm2_e L0x55555556142c;
mov ymm2_f L0x55555556142e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a2b0 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a2b5 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555a2ba *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a2be *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a2c2 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555a2c6 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x108(%rdx),%ymm1                  #! EA = L0x555555561228; Value = 0xae886f65ad9a276d; PC = 0x55555555a2cb *)
mov ymm1_0 L0x555555561228;
mov ymm1_1 L0x55555556122a;
mov ymm1_2 L0x555555561228;
mov ymm1_3 L0x55555556122a;
mov ymm1_4 L0x555555561228;
mov ymm1_5 L0x55555556122a;
mov ymm1_6 L0x555555561228;
mov ymm1_7 L0x55555556122a;
mov ymm1_8 L0x555555561228;
mov ymm1_9 L0x55555556122a;
mov ymm1_a L0x555555561228;
mov ymm1_b L0x55555556122a;
mov ymm1_c L0x555555561228;
mov ymm1_d L0x55555556122a;
mov ymm1_e L0x555555561228;
mov ymm1_f L0x55555556122a;
(* vpbroadcastd 0x308(%rdx),%ymm2                  #! EA = L0x555555561428; Value = 0xfe880165f19a096d; PC = 0x55555555a2d4 *)
mov ymm2_0 L0x555555561428;
mov ymm2_1 L0x55555556142a;
mov ymm2_2 L0x555555561428;
mov ymm2_3 L0x55555556142a;
mov ymm2_4 L0x555555561428;
mov ymm2_5 L0x55555556142a;
mov ymm2_6 L0x555555561428;
mov ymm2_7 L0x55555556142a;
mov ymm2_8 L0x555555561428;
mov ymm2_9 L0x55555556142a;
mov ymm2_a L0x555555561428;
mov ymm2_b L0x55555556142a;
mov ymm2_c L0x555555561428;
mov ymm2_d L0x55555556142a;
mov ymm2_e L0x555555561428;
mov ymm2_f L0x55555556142a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a2dd *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a2e2 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555a2e7 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a2eb *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a2ef *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555a2f3 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a2f8 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a2fd *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555a302 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555a306 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555a30a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a30f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555a314 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555a318 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a31c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a321 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555a326 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555a32b *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555a330 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a335 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555a33a *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555a33f *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x6db4(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555a344 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555a34c *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555a352 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555a357 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555a35d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555a362 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555a368 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555a36d *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555a373 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555a378 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555a37e *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555a383 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555a389 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555a38e *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555a394 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555a399 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555a39f *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 0 *****************)




(**************** CUT   9 *****************)

cut and [
eqmod (8*inp_poly000**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1],
eqmod (8*inp_poly001**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10752],
eqmod (8*inp_poly002**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6264],
eqmod (8*inp_poly003**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4489],
eqmod (8*inp_poly004**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 321],
eqmod (8*inp_poly005**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10432],
eqmod (8*inp_poly006**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10686],
eqmod (8*inp_poly007**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 67]
,
eqmod (8*inp_poly008**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9097],
eqmod (8*inp_poly009**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1656],
eqmod (8*inp_poly00a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3461],
eqmod (8*inp_poly00b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7292],
eqmod (8*inp_poly00c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6074],
eqmod (8*inp_poly00d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4679],
eqmod (8*inp_poly00e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3422],
eqmod (8*inp_poly00f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7331]
,
eqmod (8*inp_poly010**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1154],
eqmod (8*inp_poly011**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9599],
eqmod (8*inp_poly012**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2640],
eqmod (8*inp_poly013**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8113],
eqmod (8*inp_poly014**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4832],
eqmod (8*inp_poly015**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5921],
eqmod (8*inp_poly016**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8706],
eqmod (8*inp_poly017**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2047]
,
eqmod (8*inp_poly018**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3010],
eqmod (8*inp_poly019**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7743],
eqmod (8*inp_poly01a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4631],
eqmod (8*inp_poly01b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6122],
eqmod (8*inp_poly01c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9193],
eqmod (8*inp_poly01d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1560],
eqmod (8*inp_poly01e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2637],
eqmod (8*inp_poly01f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8116]
,
eqmod (8*inp_poly020**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7853],
eqmod (8*inp_poly021**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2900],
eqmod (8*inp_poly022**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6970],
eqmod (8*inp_poly023**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3783],
eqmod (8*inp_poly024**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4611],
eqmod (8*inp_poly025**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6142],
eqmod (8*inp_poly026**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 746],
eqmod (8*inp_poly027**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10007]
,
eqmod (8*inp_poly028**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6562],
eqmod (8*inp_poly029**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4191],
eqmod (8*inp_poly02a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6402],
eqmod (8*inp_poly02b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4351],
eqmod (8*inp_poly02c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9567],
eqmod (8*inp_poly02d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1186],
eqmod (8*inp_poly02e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1219],
eqmod (8*inp_poly02f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9534]
,
eqmod (8*inp_poly030**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8336],
eqmod (8*inp_poly031**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2417],
eqmod (8*inp_poly032**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 136],
eqmod (8*inp_poly033**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10617],
eqmod (8*inp_poly034**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9112],
eqmod (8*inp_poly035**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1641],
eqmod (8*inp_poly036**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 644],
eqmod (8*inp_poly037**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10109]
,
eqmod (8*inp_poly038**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2436],
eqmod (8*inp_poly039**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8317],
eqmod (8*inp_poly03a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 597],
eqmod (8*inp_poly03b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10156],
eqmod (8*inp_poly03c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7740],
eqmod (8*inp_poly03d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3013],
eqmod (8*inp_poly03e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8836],
eqmod (8*inp_poly03f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1917]
] prove with [ cuts [ 0 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<=s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<=s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<=s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<=s10922@16,
(-11078)@16<=s ymm3_4,ymm3_4<=s11078@16,(-11078)@16<=s ymm3_5,ymm3_5<=s11078@16,
(-10870)@16<=s ymm3_6,ymm3_6<=s10870@16,(-10870)@16<=s ymm3_7,ymm3_7<=s10870@16,
( -5461)@16<=s ymm3_8,ymm3_8<=s 5461@16,( -5461)@16<=s ymm3_9,ymm3_9<=s 5461@16,
( -5461)@16<=s ymm3_a,ymm3_a<=s 5461@16,( -5461)@16<=s ymm3_b,ymm3_b<=s 5461@16,
( -5461)@16<=s ymm3_c,ymm3_c<=s 5461@16,( -5461)@16<=s ymm3_d,ymm3_d<=s 5461@16,
( -5461)@16<=s ymm3_e,ymm3_e<=s 5461@16,( -5461)@16<=s ymm3_f,ymm3_f<=s 5461@16,
(-11262)@16<=s ymm5_0,ymm5_0<=s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<=s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<=s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<=s10922@16,
(-13353)@16<=s ymm5_4,ymm5_4<=s13353@16,
(* NOTE:  (-13352)@16<=s ymm5_4,ymm5_4<=s13352@16,  *)
(-13356)@16<=s ymm5_5,ymm5_5<=s13356@16,
(-12076)@16<=s ymm5_6,ymm5_6<=s12076@16,(-12076)@16<=s ymm5_7,ymm5_7<=s12076@16,
( -5406)@16<=s ymm5_8,ymm5_8<=s 5406@16,( -5406)@16<=s ymm5_9,ymm5_9<=s 5406@16,
( -5406)@16<=s ymm5_a,ymm5_a<=s 5406@16,( -5406)@16<=s ymm5_b,ymm5_b<=s 5406@16,
( -5414)@16<=s ymm5_c,ymm5_c<=s 5414@16,( -5414)@16<=s ymm5_d,ymm5_d<=s 5414@16,
( -5409)@16<=s ymm5_e,ymm5_e<=s 5409@16,( -5409)@16<=s ymm5_f,ymm5_f<=s 5409@16,
(-11262)@16<=s ymm4_0,ymm4_0<=s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<=s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<=s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<=s10922@16,
(-10987)@16<=s ymm4_4,ymm4_4<=s10987@16,(-10987)@16<=s ymm4_5,ymm4_5<=s10987@16,
(-10875)@16<=s ymm4_6,ymm4_6<=s10875@16,(-10875)@16<=s ymm4_7,ymm4_7<=s10875@16,
( -5964)@16<=s ymm4_8,ymm4_8<=s 5964@16,( -5964)@16<=s ymm4_9,ymm4_9<=s 5964@16,
( -5963)@16<=s ymm4_a,ymm4_a<=s 5963@16,( -5963)@16<=s ymm4_b,ymm4_b<=s 5963@16,
( -5963)@16<=s ymm4_c,ymm4_c<=s 5963@16,( -5963)@16<=s ymm4_d,ymm4_d<=s 5963@16,
( -5963)@16<=s ymm4_e,ymm4_e<=s 5963@16,( -5963)@16<=s ymm4_f,ymm4_f<=s 5963@16,
(-11262)@16<=s ymm7_0,ymm7_0<=s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<=s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<=s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<=s10922@16,
(-12794)@16<=s ymm7_4,ymm7_4<=s12794@16,(-12794)@16<=s ymm7_5,ymm7_5<=s12794@16,
(-11825)@16<=s ymm7_6,ymm7_6<=s11825@16,(-11825)@16<=s ymm7_7,ymm7_7<=s11825@16,
( -5945)@16<=s ymm7_8,ymm7_8<=s 5945@16,( -5945)@16<=s ymm7_9,ymm7_9<=s 5945@16,
( -5940)@16<=s ymm7_a,ymm7_a<=s 5940@16,( -5940)@16<=s ymm7_b,ymm7_b<=s 5940@16,
( -6129)@16<=s ymm7_c,ymm7_c<=s 6129@16,( -6129)@16<=s ymm7_d,ymm7_d<=s 6129@16,
( -6114)@16<=s ymm7_e,ymm7_e<=s 6114@16,( -6114)@16<=s ymm7_f,ymm7_f<=s 6114@16,
(-11262)@16<=s ymm6_0,ymm6_0<=s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<=s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<=s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<=s10922@16,
(-13115)@16<=s ymm6_4,ymm6_4<=s13115@16,(-13115)@16<=s ymm6_5,ymm6_5<=s13115@16,
(-12030)@16<=s ymm6_6,ymm6_6<=s12030@16,(-12030)@16<=s ymm6_7,ymm6_7<=s12030@16,
( -5435)@16<=s ymm6_8,ymm6_8<=s 5435@16,( -5435)@16<=s ymm6_9,ymm6_9<=s 5435@16,
( -5435)@16<=s ymm6_a,ymm6_a<=s 5435@16,( -5435)@16<=s ymm6_b,ymm6_b<=s 5435@16,
( -5447)@16<=s ymm6_c,ymm6_c<=s 5447@16,( -5447)@16<=s ymm6_d,ymm6_d<=s 5447@16,
( -5441)@16<=s ymm6_e,ymm6_e<=s 5441@16,( -5441)@16<=s ymm6_f,ymm6_f<=s 5441@16,
(-11262)@16<=s ymm9_0,ymm9_0<=s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<=s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<=s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<=s10922@16,
(-12413)@16<=s ymm9_4,ymm9_4<=s12413@16,(-12413)@16<=s ymm9_5,ymm9_5<=s12413@16,
(-11575)@16<=s ymm9_6,ymm9_6<=s11575@16,(-11575)@16<=s ymm9_7,ymm9_7<=s11575@16,
( -5434)@16<=s ymm9_8,ymm9_8<=s 5434@16,( -5434)@16<=s ymm9_9,ymm9_9<=s 5434@16,
( -5434)@16<=s ymm9_a,ymm9_a<=s 5434@16,( -5434)@16<=s ymm9_b,ymm9_b<=s 5434@16,
( -5434)@16<=s ymm9_c,ymm9_c<=s 5434@16,( -5434)@16<=s ymm9_d,ymm9_d<=s 5434@16,
( -5434)@16<=s ymm9_e,ymm9_e<=s 5434@16,( -5434)@16<=s ymm9_f,ymm9_f<=s 5434@16,
(-11262)@16<=s ymm8_0,ymm8_0<=s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<=s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<=s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<=s10922@16,
(-13119)@16<=s ymm8_4,ymm8_4<=s13119@16,(-13119)@16<=s ymm8_5,ymm8_5<=s13119@16,
(-11943)@16<=s ymm8_6,ymm8_6<=s11943@16,(-11943)@16<=s ymm8_7,ymm8_7<=s11943@16,
( -5982)@16<=s ymm8_8,ymm8_8<=s 5982@16,( -5982)@16<=s ymm8_9,ymm8_9<=s 5982@16,
( -5966)@16<=s ymm8_a,ymm8_a<=s 5966@16,( -5966)@16<=s ymm8_b,ymm8_b<=s 5966@16,
( -6085)@16<=s ymm8_c,ymm8_c<=s 6085@16,( -6085)@16<=s ymm8_d,ymm8_d<=s 6085@16,
( -6037)@16<=s ymm8_e,ymm8_e<=s 6037@16,( -6037)@16<=s ymm8_f,ymm8_f<=s 6037@16,
(-11262)@16<=s ymm11_0,ymm11_0<=s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<=s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<=s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<=s10922@16,
(-11870)@16<=s ymm11_4,ymm11_4<=s11870@16,(-11870)@16<=s ymm11_5,ymm11_5<=s11870@16,
(-11339)@16<=s ymm11_6,ymm11_6<=s11339@16,(-11339)@16<=s ymm11_7,ymm11_7<=s11339@16,
( -5788)@16<=s ymm11_8,ymm11_8<=s 5788@16,( -5788)@16<=s ymm11_9,ymm11_9<=s 5788@16,
( -5763)@16<=s ymm11_a,ymm11_a<=s 5763@16,( -5763)@16<=s ymm11_b,ymm11_b<=s 5763@16,
( -5791)@16<=s ymm11_c,ymm11_c<=s 5791@16,( -5791)@16<=s ymm11_d,ymm11_d<=s 5791@16,
( -5788)@16<=s ymm11_e,ymm11_e<=s 5788@16,( -5788)@16<=s ymm11_f,ymm11_f<=s 5788@16
] prove with [ precondition ];



(**************** CUT  10 *****************)

ecut and [
eqmod (8*inp_poly000**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1],
eqmod (8*inp_poly001**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10752],
eqmod (8*inp_poly002**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6264],
eqmod (8*inp_poly003**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4489],
eqmod (8*inp_poly004**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 321],
eqmod (8*inp_poly005**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10432],
eqmod (8*inp_poly006**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10686],
eqmod (8*inp_poly007**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 67]
,
eqmod (8*inp_poly008**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9097],
eqmod (8*inp_poly009**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1656],
eqmod (8*inp_poly00a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3461],
eqmod (8*inp_poly00b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7292],
eqmod (8*inp_poly00c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6074],
eqmod (8*inp_poly00d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4679],
eqmod (8*inp_poly00e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3422],
eqmod (8*inp_poly00f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7331]
] prove with [ cuts [ 9 ] ];



(**************** CUT  11 *****************)

ecut and [
eqmod (8*inp_poly010**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1154],
eqmod (8*inp_poly011**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9599],
eqmod (8*inp_poly012**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2640],
eqmod (8*inp_poly013**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8113],
eqmod (8*inp_poly014**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4832],
eqmod (8*inp_poly015**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5921],
eqmod (8*inp_poly016**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8706],
eqmod (8*inp_poly017**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2047]
,
eqmod (8*inp_poly018**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3010],
eqmod (8*inp_poly019**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7743],
eqmod (8*inp_poly01a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4631],
eqmod (8*inp_poly01b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6122],
eqmod (8*inp_poly01c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9193],
eqmod (8*inp_poly01d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1560],
eqmod (8*inp_poly01e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2637],
eqmod (8*inp_poly01f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8116]
] prove with [ cuts [ 9 ] ];



(**************** CUT  12 *****************)

ecut and [
eqmod (8*inp_poly020**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7853],
eqmod (8*inp_poly021**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2900],
eqmod (8*inp_poly022**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6970],
eqmod (8*inp_poly023**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3783],
eqmod (8*inp_poly024**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4611],
eqmod (8*inp_poly025**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6142],
eqmod (8*inp_poly026**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 746],
eqmod (8*inp_poly027**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10007]
,
eqmod (8*inp_poly028**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6562],
eqmod (8*inp_poly029**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4191],
eqmod (8*inp_poly02a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6402],
eqmod (8*inp_poly02b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4351],
eqmod (8*inp_poly02c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9567],
eqmod (8*inp_poly02d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1186],
eqmod (8*inp_poly02e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1219],
eqmod (8*inp_poly02f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9534]
] prove with [ cuts [ 9 ] ];



(**************** CUT  13 *****************)

ecut and [
eqmod (8*inp_poly030**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8336],
eqmod (8*inp_poly031**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2417],
eqmod (8*inp_poly032**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 136],
eqmod (8*inp_poly033**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10617],
eqmod (8*inp_poly034**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9112],
eqmod (8*inp_poly035**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1641],
eqmod (8*inp_poly036**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 644],
eqmod (8*inp_poly037**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10109]
,
eqmod (8*inp_poly038**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2436],
eqmod (8*inp_poly039**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8317],
eqmod (8*inp_poly03a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 597],
eqmod (8*inp_poly03b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10156],
eqmod (8*inp_poly03c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7740],
eqmod (8*inp_poly03d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3013],
eqmod (8*inp_poly03e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8836],
eqmod (8*inp_poly03f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1917]
] prove with [ cuts [ 9 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555a3a4 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555a3a8 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555a3ac *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555a3b0 *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555a3b4 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555a3b9 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555a3be *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555a3c3 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555a3c8 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555a3d0 *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpmullw %ymm12,%ymm5,%ymm8                      #! PC = 0x55555555a3d8 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555a3dd *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a3e2 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm5,%ymm5                        #! PC = 0x55555555a3e6 *)
sub ymm5_0 ymm5_0 ymm8_0;
sub ymm5_1 ymm5_1 ymm8_1;
sub ymm5_2 ymm5_2 ymm8_2;
sub ymm5_3 ymm5_3 ymm8_3;
sub ymm5_4 ymm5_4 ymm8_4;
sub ymm5_5 ymm5_5 ymm8_5;
sub ymm5_6 ymm5_6 ymm8_6;
sub ymm5_7 ymm5_7 ymm8_7;
sub ymm5_8 ymm5_8 ymm8_8;
sub ymm5_9 ymm5_9 ymm8_9;
sub ymm5_a ymm5_a ymm8_a;
sub ymm5_b ymm5_b ymm8_b;
sub ymm5_c ymm5_c ymm8_c;
sub ymm5_d ymm5_d ymm8_d;
sub ymm5_e ymm5_e ymm8_e;
sub ymm5_f ymm5_f ymm8_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555a3eb *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555a3f4 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555a3fd *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a401 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a405 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555a409 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555a40d *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555a416 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555a41f *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a423 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a427 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555a42b *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555a430 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555a439 *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555a442 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a446 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a44a *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555a44e *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555a453 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555a458 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a45d *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555a461 *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555a466 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555a46b *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a470 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555a474 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555a479 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555a47e *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a483 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555a487 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555a48c *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555a491 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555a496 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555a49a *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555a49f *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555a4a3 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555a4a7 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555a4ab *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555a4af *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555a4b3 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555a4b7 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555a4bc *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555a4c1 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555a4ca *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555a4d3 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555a4d7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555a4db *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555a4df *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555a4e3 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a4e7 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555a4eb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555a4ef *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555a4f4 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555a4f8 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555a4fc *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555a500 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555a504 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555a508 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555a50c *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555a511 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555a516 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555a51b *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555a520 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555a524 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555a528 *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555a52d *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555a532 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555a536 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,(%rdi)                            #! EA = L0x7fffffffd2e0; PC = 0x55555555a53a *)
mov L0x7fffffffd2e0 ymm9_0;
mov L0x7fffffffd2e2 ymm9_1;
mov L0x7fffffffd2e4 ymm9_2;
mov L0x7fffffffd2e6 ymm9_3;
mov L0x7fffffffd2e8 ymm9_4;
mov L0x7fffffffd2ea ymm9_5;
mov L0x7fffffffd2ec ymm9_6;
mov L0x7fffffffd2ee ymm9_7;
mov L0x7fffffffd2f0 ymm9_8;
mov L0x7fffffffd2f2 ymm9_9;
mov L0x7fffffffd2f4 ymm9_a;
mov L0x7fffffffd2f6 ymm9_b;
mov L0x7fffffffd2f8 ymm9_c;
mov L0x7fffffffd2fa ymm9_d;
mov L0x7fffffffd2fc ymm9_e;
mov L0x7fffffffd2fe ymm9_f;
(* vmovdqa %ymm8,0x20(%rdi)                        #! EA = L0x7fffffffd300; PC = 0x55555555a53e *)
mov L0x7fffffffd300 ymm8_0;
mov L0x7fffffffd302 ymm8_1;
mov L0x7fffffffd304 ymm8_2;
mov L0x7fffffffd306 ymm8_3;
mov L0x7fffffffd308 ymm8_4;
mov L0x7fffffffd30a ymm8_5;
mov L0x7fffffffd30c ymm8_6;
mov L0x7fffffffd30e ymm8_7;
mov L0x7fffffffd310 ymm8_8;
mov L0x7fffffffd312 ymm8_9;
mov L0x7fffffffd314 ymm8_a;
mov L0x7fffffffd316 ymm8_b;
mov L0x7fffffffd318 ymm8_c;
mov L0x7fffffffd31a ymm8_d;
mov L0x7fffffffd31c ymm8_e;
mov L0x7fffffffd31e ymm8_f;
(* vmovdqa %ymm10,0x40(%rdi)                       #! EA = L0x7fffffffd320; PC = 0x55555555a543 *)
mov L0x7fffffffd320 ymm10_0;
mov L0x7fffffffd322 ymm10_1;
mov L0x7fffffffd324 ymm10_2;
mov L0x7fffffffd326 ymm10_3;
mov L0x7fffffffd328 ymm10_4;
mov L0x7fffffffd32a ymm10_5;
mov L0x7fffffffd32c ymm10_6;
mov L0x7fffffffd32e ymm10_7;
mov L0x7fffffffd330 ymm10_8;
mov L0x7fffffffd332 ymm10_9;
mov L0x7fffffffd334 ymm10_a;
mov L0x7fffffffd336 ymm10_b;
mov L0x7fffffffd338 ymm10_c;
mov L0x7fffffffd33a ymm10_d;
mov L0x7fffffffd33c ymm10_e;
mov L0x7fffffffd33e ymm10_f;
(* vmovdqa %ymm3,0x60(%rdi)                        #! EA = L0x7fffffffd340; PC = 0x55555555a548 *)
mov L0x7fffffffd340 ymm3_0;
mov L0x7fffffffd342 ymm3_1;
mov L0x7fffffffd344 ymm3_2;
mov L0x7fffffffd346 ymm3_3;
mov L0x7fffffffd348 ymm3_4;
mov L0x7fffffffd34a ymm3_5;
mov L0x7fffffffd34c ymm3_6;
mov L0x7fffffffd34e ymm3_7;
mov L0x7fffffffd350 ymm3_8;
mov L0x7fffffffd352 ymm3_9;
mov L0x7fffffffd354 ymm3_a;
mov L0x7fffffffd356 ymm3_b;
mov L0x7fffffffd358 ymm3_c;
mov L0x7fffffffd35a ymm3_d;
mov L0x7fffffffd35c ymm3_e;
mov L0x7fffffffd35e ymm3_f;
(* vmovdqa %ymm5,0x80(%rdi)                        #! EA = L0x7fffffffd360; PC = 0x55555555a54d *)
mov L0x7fffffffd360 ymm5_0;
mov L0x7fffffffd362 ymm5_1;
mov L0x7fffffffd364 ymm5_2;
mov L0x7fffffffd366 ymm5_3;
mov L0x7fffffffd368 ymm5_4;
mov L0x7fffffffd36a ymm5_5;
mov L0x7fffffffd36c ymm5_6;
mov L0x7fffffffd36e ymm5_7;
mov L0x7fffffffd370 ymm5_8;
mov L0x7fffffffd372 ymm5_9;
mov L0x7fffffffd374 ymm5_a;
mov L0x7fffffffd376 ymm5_b;
mov L0x7fffffffd378 ymm5_c;
mov L0x7fffffffd37a ymm5_d;
mov L0x7fffffffd37c ymm5_e;
mov L0x7fffffffd37e ymm5_f;
(* vmovdqa %ymm4,0xa0(%rdi)                        #! EA = L0x7fffffffd380; PC = 0x55555555a555 *)
mov L0x7fffffffd380 ymm4_0;
mov L0x7fffffffd382 ymm4_1;
mov L0x7fffffffd384 ymm4_2;
mov L0x7fffffffd386 ymm4_3;
mov L0x7fffffffd388 ymm4_4;
mov L0x7fffffffd38a ymm4_5;
mov L0x7fffffffd38c ymm4_6;
mov L0x7fffffffd38e ymm4_7;
mov L0x7fffffffd390 ymm4_8;
mov L0x7fffffffd392 ymm4_9;
mov L0x7fffffffd394 ymm4_a;
mov L0x7fffffffd396 ymm4_b;
mov L0x7fffffffd398 ymm4_c;
mov L0x7fffffffd39a ymm4_d;
mov L0x7fffffffd39c ymm4_e;
mov L0x7fffffffd39e ymm4_f;
(* vmovdqa %ymm6,0xc0(%rdi)                        #! EA = L0x7fffffffd3a0; PC = 0x55555555a55d *)
mov L0x7fffffffd3a0 ymm6_0;
mov L0x7fffffffd3a2 ymm6_1;
mov L0x7fffffffd3a4 ymm6_2;
mov L0x7fffffffd3a6 ymm6_3;
mov L0x7fffffffd3a8 ymm6_4;
mov L0x7fffffffd3aa ymm6_5;
mov L0x7fffffffd3ac ymm6_6;
mov L0x7fffffffd3ae ymm6_7;
mov L0x7fffffffd3b0 ymm6_8;
mov L0x7fffffffd3b2 ymm6_9;
mov L0x7fffffffd3b4 ymm6_a;
mov L0x7fffffffd3b6 ymm6_b;
mov L0x7fffffffd3b8 ymm6_c;
mov L0x7fffffffd3ba ymm6_d;
mov L0x7fffffffd3bc ymm6_e;
mov L0x7fffffffd3be ymm6_f;
(* vmovdqa %ymm11,0xe0(%rdi)                       #! EA = L0x7fffffffd3c0; PC = 0x55555555a565 *)
mov L0x7fffffffd3c0 ymm11_0;
mov L0x7fffffffd3c2 ymm11_1;
mov L0x7fffffffd3c4 ymm11_2;
mov L0x7fffffffd3c6 ymm11_3;
mov L0x7fffffffd3c8 ymm11_4;
mov L0x7fffffffd3ca ymm11_5;
mov L0x7fffffffd3cc ymm11_6;
mov L0x7fffffffd3ce ymm11_7;
mov L0x7fffffffd3d0 ymm11_8;
mov L0x7fffffffd3d2 ymm11_9;
mov L0x7fffffffd3d4 ymm11_a;
mov L0x7fffffffd3d6 ymm11_b;
mov L0x7fffffffd3d8 ymm11_c;
mov L0x7fffffffd3da ymm11_d;
mov L0x7fffffffd3dc ymm11_e;
mov L0x7fffffffd3de ymm11_f;



(**************** LEVELS 3-5, 0 *****************)

ghost segment0@bit :
segment0 = 
x**  0*(
L0x7fffffffd2e0*x** 0+L0x7fffffffd2e2*x** 1+L0x7fffffffd2e4*x** 2+
L0x7fffffffd2e6*x** 3+L0x7fffffffd2e8*x** 4+L0x7fffffffd2ea*x** 5+
L0x7fffffffd2ec*x** 6+L0x7fffffffd2ee*x** 7+L0x7fffffffd2f0*x** 8+
L0x7fffffffd2f2*x** 9+L0x7fffffffd2f4*x**10+L0x7fffffffd2f6*x**11+
L0x7fffffffd2f8*x**12+L0x7fffffffd2fa*x**13+L0x7fffffffd2fc*x**14+
L0x7fffffffd2fe*x**15)+
x** 16*(
L0x7fffffffd300*x** 0+L0x7fffffffd302*x** 1+L0x7fffffffd304*x** 2+
L0x7fffffffd306*x** 3+L0x7fffffffd308*x** 4+L0x7fffffffd30a*x** 5+
L0x7fffffffd30c*x** 6+L0x7fffffffd30e*x** 7+L0x7fffffffd310*x** 8+
L0x7fffffffd312*x** 9+L0x7fffffffd314*x**10+L0x7fffffffd316*x**11+
L0x7fffffffd318*x**12+L0x7fffffffd31a*x**13+L0x7fffffffd31c*x**14+
L0x7fffffffd31e*x**15)+
x** 32*(
L0x7fffffffd320*x** 0+L0x7fffffffd322*x** 1+L0x7fffffffd324*x** 2+
L0x7fffffffd326*x** 3+L0x7fffffffd328*x** 4+L0x7fffffffd32a*x** 5+
L0x7fffffffd32c*x** 6+L0x7fffffffd32e*x** 7+L0x7fffffffd330*x** 8+
L0x7fffffffd332*x** 9+L0x7fffffffd334*x**10+L0x7fffffffd336*x**11+
L0x7fffffffd338*x**12+L0x7fffffffd33a*x**13+L0x7fffffffd33c*x**14+
L0x7fffffffd33e*x**15)+
x** 48*(
L0x7fffffffd340*x** 0+L0x7fffffffd342*x** 1+L0x7fffffffd344*x** 2+
L0x7fffffffd346*x** 3+L0x7fffffffd348*x** 4+L0x7fffffffd34a*x** 5+
L0x7fffffffd34c*x** 6+L0x7fffffffd34e*x** 7+L0x7fffffffd350*x** 8+
L0x7fffffffd352*x** 9+L0x7fffffffd354*x**10+L0x7fffffffd356*x**11+
L0x7fffffffd358*x**12+L0x7fffffffd35a*x**13+L0x7fffffffd35c*x**14+
L0x7fffffffd35e*x**15)+
x** 64*(
L0x7fffffffd360*x** 0+L0x7fffffffd362*x** 1+L0x7fffffffd364*x** 2+
L0x7fffffffd366*x** 3+L0x7fffffffd368*x** 4+L0x7fffffffd36a*x** 5+
L0x7fffffffd36c*x** 6+L0x7fffffffd36e*x** 7+L0x7fffffffd370*x** 8+
L0x7fffffffd372*x** 9+L0x7fffffffd374*x**10+L0x7fffffffd376*x**11+
L0x7fffffffd378*x**12+L0x7fffffffd37a*x**13+L0x7fffffffd37c*x**14+
L0x7fffffffd37e*x**15)+
x** 80*(
L0x7fffffffd380*x** 0+L0x7fffffffd382*x** 1+L0x7fffffffd384*x** 2+
L0x7fffffffd386*x** 3+L0x7fffffffd388*x** 4+L0x7fffffffd38a*x** 5+
L0x7fffffffd38c*x** 6+L0x7fffffffd38e*x** 7+L0x7fffffffd390*x** 8+
L0x7fffffffd392*x** 9+L0x7fffffffd394*x**10+L0x7fffffffd396*x**11+
L0x7fffffffd398*x**12+L0x7fffffffd39a*x**13+L0x7fffffffd39c*x**14+
L0x7fffffffd39e*x**15)+
x** 96*(
L0x7fffffffd3a0*x** 0+L0x7fffffffd3a2*x** 1+L0x7fffffffd3a4*x** 2+
L0x7fffffffd3a6*x** 3+L0x7fffffffd3a8*x** 4+L0x7fffffffd3aa*x** 5+
L0x7fffffffd3ac*x** 6+L0x7fffffffd3ae*x** 7+L0x7fffffffd3b0*x** 8+
L0x7fffffffd3b2*x** 9+L0x7fffffffd3b4*x**10+L0x7fffffffd3b6*x**11+
L0x7fffffffd3b8*x**12+L0x7fffffffd3ba*x**13+L0x7fffffffd3bc*x**14+
L0x7fffffffd3be*x**15)+
x**112*(
L0x7fffffffd3c0*x** 0+L0x7fffffffd3c2*x** 1+L0x7fffffffd3c4*x** 2+
L0x7fffffffd3c6*x** 3+L0x7fffffffd3c8*x** 4+L0x7fffffffd3ca*x** 5+
L0x7fffffffd3cc*x** 6+L0x7fffffffd3ce*x** 7+L0x7fffffffd3d0*x** 8+
L0x7fffffffd3d2*x** 9+L0x7fffffffd3d4*x**10+L0x7fffffffd3d6*x**11+
L0x7fffffffd3d8*x**12+L0x7fffffffd3da*x**13+L0x7fffffffd3dc*x**14+
L0x7fffffffd3de*x**15)
&& true;


(**************** CUT  14 *****************)

cut
and [
eqmod (64*inp_poly000**2) (segment0) [10753, x**2 - 1],
eqmod (64*inp_poly001**2) (segment0) [10753, x**2 - 10752],
eqmod (64*inp_poly002**2) (segment0) [10753, x**2 - 6264],
eqmod (64*inp_poly003**2) (segment0) [10753, x**2 - 4489],
eqmod (64*inp_poly004**2) (segment0) [10753, x**2 - 321],
eqmod (64*inp_poly005**2) (segment0) [10753, x**2 - 10432],
eqmod (64*inp_poly006**2) (segment0) [10753, x**2 - 10686],
eqmod (64*inp_poly007**2) (segment0) [10753, x**2 - 67]
,
eqmod (64*inp_poly008**2) (segment0) [10753, x**2 - 9097],
eqmod (64*inp_poly009**2) (segment0) [10753, x**2 - 1656],
eqmod (64*inp_poly00a**2) (segment0) [10753, x**2 - 3461],
eqmod (64*inp_poly00b**2) (segment0) [10753, x**2 - 7292],
eqmod (64*inp_poly00c**2) (segment0) [10753, x**2 - 6074],
eqmod (64*inp_poly00d**2) (segment0) [10753, x**2 - 4679],
eqmod (64*inp_poly00e**2) (segment0) [10753, x**2 - 3422],
eqmod (64*inp_poly00f**2) (segment0) [10753, x**2 - 7331]
] prove with [ cuts [ 10 ] ],
and [
eqmod (64*inp_poly010**2) (segment0) [10753, x**2 - 1154],
eqmod (64*inp_poly011**2) (segment0) [10753, x**2 - 9599],
eqmod (64*inp_poly012**2) (segment0) [10753, x**2 - 2640],
eqmod (64*inp_poly013**2) (segment0) [10753, x**2 - 8113],
eqmod (64*inp_poly014**2) (segment0) [10753, x**2 - 4832],
eqmod (64*inp_poly015**2) (segment0) [10753, x**2 - 5921],
eqmod (64*inp_poly016**2) (segment0) [10753, x**2 - 8706],
eqmod (64*inp_poly017**2) (segment0) [10753, x**2 - 2047]
,
eqmod (64*inp_poly018**2) (segment0) [10753, x**2 - 3010],
eqmod (64*inp_poly019**2) (segment0) [10753, x**2 - 7743],
eqmod (64*inp_poly01a**2) (segment0) [10753, x**2 - 4631],
eqmod (64*inp_poly01b**2) (segment0) [10753, x**2 - 6122],
eqmod (64*inp_poly01c**2) (segment0) [10753, x**2 - 9193],
eqmod (64*inp_poly01d**2) (segment0) [10753, x**2 - 1560],
eqmod (64*inp_poly01e**2) (segment0) [10753, x**2 - 2637],
eqmod (64*inp_poly01f**2) (segment0) [10753, x**2 - 8116]
] prove with [ cuts [ 11 ] ],
and [
eqmod (64*inp_poly020**2) (segment0) [10753, x**2 - 7853],
eqmod (64*inp_poly021**2) (segment0) [10753, x**2 - 2900],
eqmod (64*inp_poly022**2) (segment0) [10753, x**2 - 6970],
eqmod (64*inp_poly023**2) (segment0) [10753, x**2 - 3783],
eqmod (64*inp_poly024**2) (segment0) [10753, x**2 - 4611],
eqmod (64*inp_poly025**2) (segment0) [10753, x**2 - 6142],
eqmod (64*inp_poly026**2) (segment0) [10753, x**2 - 746],
eqmod (64*inp_poly027**2) (segment0) [10753, x**2 - 10007]
,
eqmod (64*inp_poly028**2) (segment0) [10753, x**2 - 6562],
eqmod (64*inp_poly029**2) (segment0) [10753, x**2 - 4191],
eqmod (64*inp_poly02a**2) (segment0) [10753, x**2 - 6402],
eqmod (64*inp_poly02b**2) (segment0) [10753, x**2 - 4351],
eqmod (64*inp_poly02c**2) (segment0) [10753, x**2 - 9567],
eqmod (64*inp_poly02d**2) (segment0) [10753, x**2 - 1186],
eqmod (64*inp_poly02e**2) (segment0) [10753, x**2 - 1219],
eqmod (64*inp_poly02f**2) (segment0) [10753, x**2 - 9534]
] prove with [ cuts [ 12 ] ],
and [
eqmod (64*inp_poly030**2) (segment0) [10753, x**2 - 8336],
eqmod (64*inp_poly031**2) (segment0) [10753, x**2 - 2417],
eqmod (64*inp_poly032**2) (segment0) [10753, x**2 - 136],
eqmod (64*inp_poly033**2) (segment0) [10753, x**2 - 10617],
eqmod (64*inp_poly034**2) (segment0) [10753, x**2 - 9112],
eqmod (64*inp_poly035**2) (segment0) [10753, x**2 - 1641],
eqmod (64*inp_poly036**2) (segment0) [10753, x**2 - 644],
eqmod (64*inp_poly037**2) (segment0) [10753, x**2 - 10109]
,
eqmod (64*inp_poly038**2) (segment0) [10753, x**2 - 2436],
eqmod (64*inp_poly039**2) (segment0) [10753, x**2 - 8317],
eqmod (64*inp_poly03a**2) (segment0) [10753, x**2 - 597],
eqmod (64*inp_poly03b**2) (segment0) [10753, x**2 - 10156],
eqmod (64*inp_poly03c**2) (segment0) [10753, x**2 - 7740],
eqmod (64*inp_poly03d**2) (segment0) [10753, x**2 - 3013],
eqmod (64*inp_poly03e**2) (segment0) [10753, x**2 - 8836],
eqmod (64*inp_poly03f**2) (segment0) [10753, x**2 - 1917]
] prove with [ cuts [ 13 ] ] && and [
( -5631)@16<=s L0x7fffffffd2e0,L0x7fffffffd2e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd2e2,L0x7fffffffd2e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd2e4,L0x7fffffffd2e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd2e6,L0x7fffffffd2e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd2e8,L0x7fffffffd2e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd2ea,L0x7fffffffd2ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd2ec,L0x7fffffffd2ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd2ee,L0x7fffffffd2ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd2f0,L0x7fffffffd2f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd2f2,L0x7fffffffd2f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd2f4,L0x7fffffffd2f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd2f6,L0x7fffffffd2f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd2f8,L0x7fffffffd2f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd2fa,L0x7fffffffd2fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd2fc,L0x7fffffffd2fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd2fe,L0x7fffffffd2fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd300,L0x7fffffffd300<s 5631@16,
( -5631)@16<=s L0x7fffffffd302,L0x7fffffffd302<s 5631@16,
( -5631)@16<=s L0x7fffffffd304,L0x7fffffffd304<s 5631@16,
( -5631)@16<=s L0x7fffffffd306,L0x7fffffffd306<s 5631@16,
( -5631)@16<=s L0x7fffffffd308,L0x7fffffffd308<s 5631@16,
( -5631)@16<=s L0x7fffffffd30a,L0x7fffffffd30a<s 5631@16,
( -5631)@16<=s L0x7fffffffd30c,L0x7fffffffd30c<s 5631@16,
( -5631)@16<=s L0x7fffffffd30e,L0x7fffffffd30e<s 5631@16,
( -5631)@16<=s L0x7fffffffd310,L0x7fffffffd310<s 5631@16,
( -5631)@16<=s L0x7fffffffd312,L0x7fffffffd312<s 5631@16,
( -5631)@16<=s L0x7fffffffd314,L0x7fffffffd314<s 5631@16,
( -5631)@16<=s L0x7fffffffd316,L0x7fffffffd316<s 5631@16,
( -5631)@16<=s L0x7fffffffd318,L0x7fffffffd318<s 5631@16,
( -5631)@16<=s L0x7fffffffd31a,L0x7fffffffd31a<s 5631@16,
( -5631)@16<=s L0x7fffffffd31c,L0x7fffffffd31c<s 5631@16,
( -5631)@16<=s L0x7fffffffd31e,L0x7fffffffd31e<s 5631@16,
(-16668)@16<=s L0x7fffffffd320,L0x7fffffffd320<s16668@16,
(-16668)@16<=s L0x7fffffffd322,L0x7fffffffd322<s16668@16,
(-16668)@16<=s L0x7fffffffd324,L0x7fffffffd324<s16668@16,
(-16668)@16<=s L0x7fffffffd326,L0x7fffffffd326<s16668@16,
(-16668)@16<=s L0x7fffffffd328,L0x7fffffffd328<s16668@16,
(-16668)@16<=s L0x7fffffffd32a,L0x7fffffffd32a<s16668@16,
(-16668)@16<=s L0x7fffffffd32c,L0x7fffffffd32c<s16668@16,
(-16668)@16<=s L0x7fffffffd32e,L0x7fffffffd32e<s16668@16,
(-16328)@16<=s L0x7fffffffd330,L0x7fffffffd330<s16328@16,
(-16328)@16<=s L0x7fffffffd332,L0x7fffffffd332<s16328@16,
(-16328)@16<=s L0x7fffffffd334,L0x7fffffffd334<s16328@16,
(-16328)@16<=s L0x7fffffffd336,L0x7fffffffd336<s16328@16,
(-16328)@16<=s L0x7fffffffd338,L0x7fffffffd338<s16328@16,
(-16328)@16<=s L0x7fffffffd33a,L0x7fffffffd33a<s16328@16,
(-16328)@16<=s L0x7fffffffd33c,L0x7fffffffd33c<s16328@16,
(-16328)@16<=s L0x7fffffffd33e,L0x7fffffffd33e<s16328@16,
(-16492)@16<=s L0x7fffffffd340,L0x7fffffffd340<s16492@16,
(-16492)@16<=s L0x7fffffffd342,L0x7fffffffd342<s16492@16,
(-16492)@16<=s L0x7fffffffd344,L0x7fffffffd344<s16492@16,
(-16492)@16<=s L0x7fffffffd346,L0x7fffffffd346<s16492@16,
(-16500)@16<=s L0x7fffffffd348,L0x7fffffffd348<s16500@16,
(-16500)@16<=s L0x7fffffffd34a,L0x7fffffffd34a<s16500@16,
(-16497)@16<=s L0x7fffffffd34c,L0x7fffffffd34c<s16497@16,
(-16497)@16<=s L0x7fffffffd34e,L0x7fffffffd34e<s16497@16,
(-16279)@16<=s L0x7fffffffd350,L0x7fffffffd350<s16279@16,
(-16279)@16<=s L0x7fffffffd352,L0x7fffffffd352<s16279@16,
(-16279)@16<=s L0x7fffffffd354,L0x7fffffffd354<s16279@16,
(-16279)@16<=s L0x7fffffffd356,L0x7fffffffd356<s16279@16,
(-16279)@16<=s L0x7fffffffd358,L0x7fffffffd358<s16279@16,
(-16279)@16<=s L0x7fffffffd35a,L0x7fffffffd35a<s16279@16,
(-16279)@16<=s L0x7fffffffd35c,L0x7fffffffd35c<s16279@16,
(-16279)@16<=s L0x7fffffffd35e,L0x7fffffffd35e<s16279@16
] prove with [ cuts [ 9 ] ];


(**************** CUT  15 *****************)

cut true && true;



(* vmovdqa 0x100(%rsi),%ymm4                       #! EA = L0x7fffffffd3e0; Value = 0x06450b59ed90f5a6; PC = 0x55555555a56d *)
mov ymm4_0 L0x7fffffffd3e0;
mov ymm4_1 L0x7fffffffd3e2;
mov ymm4_2 L0x7fffffffd3e4;
mov ymm4_3 L0x7fffffffd3e6;
mov ymm4_4 L0x7fffffffd3e8;
mov ymm4_5 L0x7fffffffd3ea;
mov ymm4_6 L0x7fffffffd3ec;
mov ymm4_7 L0x7fffffffd3ee;
mov ymm4_8 L0x7fffffffd3f0;
mov ymm4_9 L0x7fffffffd3f2;
mov ymm4_a L0x7fffffffd3f4;
mov ymm4_b L0x7fffffffd3f6;
mov ymm4_c L0x7fffffffd3f8;
mov ymm4_d L0x7fffffffd3fa;
mov ymm4_e L0x7fffffffd3fc;
mov ymm4_f L0x7fffffffd3fe;
(* vmovdqa 0x120(%rsi),%ymm5                       #! EA = L0x7fffffffd400; Value = 0x12e4f1edec9ff8a3; PC = 0x55555555a575 *)
mov ymm5_0 L0x7fffffffd400;
mov ymm5_1 L0x7fffffffd402;
mov ymm5_2 L0x7fffffffd404;
mov ymm5_3 L0x7fffffffd406;
mov ymm5_4 L0x7fffffffd408;
mov ymm5_5 L0x7fffffffd40a;
mov ymm5_6 L0x7fffffffd40c;
mov ymm5_7 L0x7fffffffd40e;
mov ymm5_8 L0x7fffffffd410;
mov ymm5_9 L0x7fffffffd412;
mov ymm5_a L0x7fffffffd414;
mov ymm5_b L0x7fffffffd416;
mov ymm5_c L0x7fffffffd418;
mov ymm5_d L0x7fffffffd41a;
mov ymm5_e L0x7fffffffd41c;
mov ymm5_f L0x7fffffffd41e;
(* vmovdqa 0x140(%rsi),%ymm6                       #! EA = L0x7fffffffd420; Value = 0xf1a8f8661244ee70; PC = 0x55555555a57d *)
mov ymm6_0 L0x7fffffffd420;
mov ymm6_1 L0x7fffffffd422;
mov ymm6_2 L0x7fffffffd424;
mov ymm6_3 L0x7fffffffd426;
mov ymm6_4 L0x7fffffffd428;
mov ymm6_5 L0x7fffffffd42a;
mov ymm6_6 L0x7fffffffd42c;
mov ymm6_7 L0x7fffffffd42e;
mov ymm6_8 L0x7fffffffd430;
mov ymm6_9 L0x7fffffffd432;
mov ymm6_a L0x7fffffffd434;
mov ymm6_b L0x7fffffffd436;
mov ymm6_c L0x7fffffffd438;
mov ymm6_d L0x7fffffffd43a;
mov ymm6_e L0x7fffffffd43c;
mov ymm6_f L0x7fffffffd43e;
(* vmovdqa 0x160(%rsi),%ymm7                       #! EA = L0x7fffffffd440; Value = 0x05aaf49bf94e0144; PC = 0x55555555a585 *)
mov ymm7_0 L0x7fffffffd440;
mov ymm7_1 L0x7fffffffd442;
mov ymm7_2 L0x7fffffffd444;
mov ymm7_3 L0x7fffffffd446;
mov ymm7_4 L0x7fffffffd448;
mov ymm7_5 L0x7fffffffd44a;
mov ymm7_6 L0x7fffffffd44c;
mov ymm7_7 L0x7fffffffd44e;
mov ymm7_8 L0x7fffffffd450;
mov ymm7_9 L0x7fffffffd452;
mov ymm7_a L0x7fffffffd454;
mov ymm7_b L0x7fffffffd456;
mov ymm7_c L0x7fffffffd458;
mov ymm7_d L0x7fffffffd45a;
mov ymm7_e L0x7fffffffd45c;
mov ymm7_f L0x7fffffffd45e;
(* vmovdqa 0x180(%rsi),%ymm8                       #! EA = L0x7fffffffd460; Value = 0x12391037ef19eefa; PC = 0x55555555a58d *)
mov ymm8_0 L0x7fffffffd460;
mov ymm8_1 L0x7fffffffd462;
mov ymm8_2 L0x7fffffffd464;
mov ymm8_3 L0x7fffffffd466;
mov ymm8_4 L0x7fffffffd468;
mov ymm8_5 L0x7fffffffd46a;
mov ymm8_6 L0x7fffffffd46c;
mov ymm8_7 L0x7fffffffd46e;
mov ymm8_8 L0x7fffffffd470;
mov ymm8_9 L0x7fffffffd472;
mov ymm8_a L0x7fffffffd474;
mov ymm8_b L0x7fffffffd476;
mov ymm8_c L0x7fffffffd478;
mov ymm8_d L0x7fffffffd47a;
mov ymm8_e L0x7fffffffd47c;
mov ymm8_f L0x7fffffffd47e;
(* vmovdqa 0x1a0(%rsi),%ymm9                       #! EA = L0x7fffffffd480; Value = 0xfeef135f07671033; PC = 0x55555555a595 *)
mov ymm9_0 L0x7fffffffd480;
mov ymm9_1 L0x7fffffffd482;
mov ymm9_2 L0x7fffffffd484;
mov ymm9_3 L0x7fffffffd486;
mov ymm9_4 L0x7fffffffd488;
mov ymm9_5 L0x7fffffffd48a;
mov ymm9_6 L0x7fffffffd48c;
mov ymm9_7 L0x7fffffffd48e;
mov ymm9_8 L0x7fffffffd490;
mov ymm9_9 L0x7fffffffd492;
mov ymm9_a L0x7fffffffd494;
mov ymm9_b L0x7fffffffd496;
mov ymm9_c L0x7fffffffd498;
mov ymm9_d L0x7fffffffd49a;
mov ymm9_e L0x7fffffffd49c;
mov ymm9_f L0x7fffffffd49e;
(* vmovdqa 0x1c0(%rsi),%ymm10                      #! EA = L0x7fffffffd4a0; Value = 0x0389eb4e0254f6ef; PC = 0x55555555a59d *)
mov ymm10_0 L0x7fffffffd4a0;
mov ymm10_1 L0x7fffffffd4a2;
mov ymm10_2 L0x7fffffffd4a4;
mov ymm10_3 L0x7fffffffd4a6;
mov ymm10_4 L0x7fffffffd4a8;
mov ymm10_5 L0x7fffffffd4aa;
mov ymm10_6 L0x7fffffffd4ac;
mov ymm10_7 L0x7fffffffd4ae;
mov ymm10_8 L0x7fffffffd4b0;
mov ymm10_9 L0x7fffffffd4b2;
mov ymm10_a L0x7fffffffd4b4;
mov ymm10_b L0x7fffffffd4b6;
mov ymm10_c L0x7fffffffd4b8;
mov ymm10_d L0x7fffffffd4ba;
mov ymm10_e L0x7fffffffd4bc;
mov ymm10_f L0x7fffffffd4be;
(* vmovdqa 0x1e0(%rsi),%ymm11                      #! EA = L0x7fffffffd4c0; Value = 0xf4a6f360f8880e7b; PC = 0x55555555a5a5 *)
mov ymm11_0 L0x7fffffffd4c0;
mov ymm11_1 L0x7fffffffd4c2;
mov ymm11_2 L0x7fffffffd4c4;
mov ymm11_3 L0x7fffffffd4c6;
mov ymm11_4 L0x7fffffffd4c8;
mov ymm11_5 L0x7fffffffd4ca;
mov ymm11_6 L0x7fffffffd4cc;
mov ymm11_7 L0x7fffffffd4ce;
mov ymm11_8 L0x7fffffffd4d0;
mov ymm11_9 L0x7fffffffd4d2;
mov ymm11_a L0x7fffffffd4d4;
mov ymm11_b L0x7fffffffd4d6;
mov ymm11_c L0x7fffffffd4d8;
mov ymm11_d L0x7fffffffd4da;
mov ymm11_e L0x7fffffffd4dc;
mov ymm11_f L0x7fffffffd4de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555a5ad *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555a5b1 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555a5b5 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555a5b9 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555a5bd *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555a5c2 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555a5c7 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555a5cc *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x170(%rdx),%ymm1                #! EA = L0x555555561290; Value = 0x18ed15f3860fbeac; PC = 0x55555555a5d1 *)
mov ymm1_0 L0x555555561290;
mov ymm1_1 L0x555555561292;
mov ymm1_2 L0x555555561294;
mov ymm1_3 L0x555555561296;
mov ymm1_4 L0x555555561298;
mov ymm1_5 L0x55555556129a;
mov ymm1_6 L0x55555556129c;
mov ymm1_7 L0x55555556129e;
mov ymm1_8 L0x555555561290;
mov ymm1_9 L0x555555561292;
mov ymm1_a L0x555555561294;
mov ymm1_b L0x555555561296;
mov ymm1_c L0x555555561298;
mov ymm1_d L0x55555556129a;
mov ymm1_e L0x55555556129c;
mov ymm1_f L0x55555556129e;
(* vbroadcasti128 0x370(%rdx),%ymm2                #! EA = L0x555555561490; Value = 0xfaedf3f3fc0ff6ac; PC = 0x55555555a5da *)
mov ymm2_0 L0x555555561490;
mov ymm2_1 L0x555555561492;
mov ymm2_2 L0x555555561494;
mov ymm2_3 L0x555555561496;
mov ymm2_4 L0x555555561498;
mov ymm2_5 L0x55555556149a;
mov ymm2_6 L0x55555556149c;
mov ymm2_7 L0x55555556149e;
mov ymm2_8 L0x555555561490;
mov ymm2_9 L0x555555561492;
mov ymm2_a L0x555555561494;
mov ymm2_b L0x555555561496;
mov ymm2_c L0x555555561498;
mov ymm2_d L0x55555556149a;
mov ymm2_e L0x55555556149c;
mov ymm2_f L0x55555556149e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a5e3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a5e8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555a5ed *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555a5f1 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a5f5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555a5f9 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x160(%rdx),%ymm1                #! EA = L0x555555561280; Value = 0x3d78e4f41686ebfa; PC = 0x55555555a5fd *)
mov ymm1_0 L0x555555561280;
mov ymm1_1 L0x555555561282;
mov ymm1_2 L0x555555561284;
mov ymm1_3 L0x555555561286;
mov ymm1_4 L0x555555561288;
mov ymm1_5 L0x55555556128a;
mov ymm1_6 L0x55555556128c;
mov ymm1_7 L0x55555556128e;
mov ymm1_8 L0x555555561280;
mov ymm1_9 L0x555555561282;
mov ymm1_a L0x555555561284;
mov ymm1_b L0x555555561286;
mov ymm1_c L0x555555561288;
mov ymm1_d L0x55555556128a;
mov ymm1_e L0x55555556128c;
mov ymm1_f L0x55555556128e;
(* vbroadcasti128 0x360(%rdx),%ymm2                #! EA = L0x555555561480; Value = 0xed78ecf41286effa; PC = 0x55555555a606 *)
mov ymm2_0 L0x555555561480;
mov ymm2_1 L0x555555561482;
mov ymm2_2 L0x555555561484;
mov ymm2_3 L0x555555561486;
mov ymm2_4 L0x555555561488;
mov ymm2_5 L0x55555556148a;
mov ymm2_6 L0x55555556148c;
mov ymm2_7 L0x55555556148e;
mov ymm2_8 L0x555555561480;
mov ymm2_9 L0x555555561482;
mov ymm2_a L0x555555561484;
mov ymm2_b L0x555555561486;
mov ymm2_c L0x555555561488;
mov ymm2_d L0x55555556148a;
mov ymm2_e L0x55555556148c;
mov ymm2_f L0x55555556148e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a60f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a614 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555a619 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a61d *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a621 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555a625 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x150(%rdx),%ymm1                #! EA = L0x555555561270; Value = 0xa7a15ecddf07cfa6; PC = 0x55555555a629 *)
mov ymm1_0 L0x555555561270;
mov ymm1_1 L0x555555561272;
mov ymm1_2 L0x555555561274;
mov ymm1_3 L0x555555561276;
mov ymm1_4 L0x555555561278;
mov ymm1_5 L0x55555556127a;
mov ymm1_6 L0x55555556127c;
mov ymm1_7 L0x55555556127e;
mov ymm1_8 L0x555555561270;
mov ymm1_9 L0x555555561272;
mov ymm1_a L0x555555561274;
mov ymm1_b L0x555555561276;
mov ymm1_c L0x555555561278;
mov ymm1_d L0x55555556127a;
mov ymm1_e L0x55555556127c;
mov ymm1_f L0x55555556127e;
(* vbroadcasti128 0x350(%rdx),%ymm2                #! EA = L0x555555561470; Value = 0x11a100cd05070ba6; PC = 0x55555555a632 *)
mov ymm2_0 L0x555555561470;
mov ymm2_1 L0x555555561472;
mov ymm2_2 L0x555555561474;
mov ymm2_3 L0x555555561476;
mov ymm2_4 L0x555555561478;
mov ymm2_5 L0x55555556147a;
mov ymm2_6 L0x55555556147c;
mov ymm2_7 L0x55555556147e;
mov ymm2_8 L0x555555561470;
mov ymm2_9 L0x555555561472;
mov ymm2_a L0x555555561474;
mov ymm2_b L0x555555561476;
mov ymm2_c L0x555555561478;
mov ymm2_d L0x55555556147a;
mov ymm2_e L0x55555556147c;
mov ymm2_f L0x55555556147e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a63b *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a640 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555a645 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a649 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a64d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555a651 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x140(%rdx),%ymm1                #! EA = L0x555555561260; Value = 0x4ee67a89a62111ed; PC = 0x55555555a656 *)
mov ymm1_0 L0x555555561260;
mov ymm1_1 L0x555555561262;
mov ymm1_2 L0x555555561264;
mov ymm1_3 L0x555555561266;
mov ymm1_4 L0x555555561268;
mov ymm1_5 L0x55555556126a;
mov ymm1_6 L0x55555556126c;
mov ymm1_7 L0x55555556126e;
mov ymm1_8 L0x555555561260;
mov ymm1_9 L0x555555561262;
mov ymm1_a L0x555555561264;
mov ymm1_b L0x555555561266;
mov ymm1_c L0x555555561268;
mov ymm1_d L0x55555556126a;
mov ymm1_e L0x55555556126c;
mov ymm1_f L0x55555556126e;
(* vbroadcasti128 0x340(%rdx),%ymm2                #! EA = L0x555555561460; Value = 0x0ae6f4891021f3ed; PC = 0x55555555a65f *)
mov ymm2_0 L0x555555561460;
mov ymm2_1 L0x555555561462;
mov ymm2_2 L0x555555561464;
mov ymm2_3 L0x555555561466;
mov ymm2_4 L0x555555561468;
mov ymm2_5 L0x55555556146a;
mov ymm2_6 L0x55555556146c;
mov ymm2_7 L0x55555556146e;
mov ymm2_8 L0x555555561460;
mov ymm2_9 L0x555555561462;
mov ymm2_a L0x555555561464;
mov ymm2_b L0x555555561466;
mov ymm2_c L0x555555561468;
mov ymm2_d L0x55555556146a;
mov ymm2_e L0x55555556146c;
mov ymm2_f L0x55555556146e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a668 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a66d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555a672 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a676 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555a67a *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555a67e *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555a683 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a688 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555a68d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555a691 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a695 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a69a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555a69f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555a6a3 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555a6a7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a6ac *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555a6b1 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555a6b6 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a6bb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a6c0 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555a6c5 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555a6ca *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555a6cf *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555a6d3 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555a6d7 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555a6db *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555a6df *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555a6e4 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555a6e9 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555a6ee *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x138(%rdx),%ymm1                  #! EA = L0x555555561258; Value = 0x2da347bbf1c9c601; PC = 0x55555555a6f3 *)
mov ymm1_0 L0x555555561258;
mov ymm1_1 L0x55555556125a;
mov ymm1_2 L0x55555556125c;
mov ymm1_3 L0x55555556125e;
mov ymm1_4 L0x555555561258;
mov ymm1_5 L0x55555556125a;
mov ymm1_6 L0x55555556125c;
mov ymm1_7 L0x55555556125e;
mov ymm1_8 L0x555555561258;
mov ymm1_9 L0x55555556125a;
mov ymm1_a L0x55555556125c;
mov ymm1_b L0x55555556125e;
mov ymm1_c L0x555555561258;
mov ymm1_d L0x55555556125a;
mov ymm1_e L0x55555556125c;
mov ymm1_f L0x55555556125e;
(* vpbroadcastq 0x338(%rdx),%ymm2                  #! EA = L0x555555561458; Value = 0xeba3f5bbebc9f001; PC = 0x55555555a6fc *)
mov ymm2_0 L0x555555561458;
mov ymm2_1 L0x55555556145a;
mov ymm2_2 L0x55555556145c;
mov ymm2_3 L0x55555556145e;
mov ymm2_4 L0x555555561458;
mov ymm2_5 L0x55555556145a;
mov ymm2_6 L0x55555556145c;
mov ymm2_7 L0x55555556145e;
mov ymm2_8 L0x555555561458;
mov ymm2_9 L0x55555556145a;
mov ymm2_a L0x55555556145c;
mov ymm2_b L0x55555556145e;
mov ymm2_c L0x555555561458;
mov ymm2_d L0x55555556145a;
mov ymm2_e L0x55555556145c;
mov ymm2_f L0x55555556145e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a705 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a70a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555a70f *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555a713 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a717 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555a71b *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x130(%rdx),%ymm1                  #! EA = L0x555555561250; Value = 0xf0ab2711fcc3398b; PC = 0x55555555a71f *)
mov ymm1_0 L0x555555561250;
mov ymm1_1 L0x555555561252;
mov ymm1_2 L0x555555561254;
mov ymm1_3 L0x555555561256;
mov ymm1_4 L0x555555561250;
mov ymm1_5 L0x555555561252;
mov ymm1_6 L0x555555561254;
mov ymm1_7 L0x555555561256;
mov ymm1_8 L0x555555561250;
mov ymm1_9 L0x555555561252;
mov ymm1_a L0x555555561254;
mov ymm1_b L0x555555561256;
mov ymm1_c L0x555555561250;
mov ymm1_d L0x555555561252;
mov ymm1_e L0x555555561254;
mov ymm1_f L0x555555561256;
(* vpbroadcastq 0x330(%rdx),%ymm2                  #! EA = L0x555555561450; Value = 0xfeabf111fac3078b; PC = 0x55555555a728 *)
mov ymm2_0 L0x555555561450;
mov ymm2_1 L0x555555561452;
mov ymm2_2 L0x555555561454;
mov ymm2_3 L0x555555561456;
mov ymm2_4 L0x555555561450;
mov ymm2_5 L0x555555561452;
mov ymm2_6 L0x555555561454;
mov ymm2_7 L0x555555561456;
mov ymm2_8 L0x555555561450;
mov ymm2_9 L0x555555561452;
mov ymm2_a L0x555555561454;
mov ymm2_b L0x555555561456;
mov ymm2_c L0x555555561450;
mov ymm2_d L0x555555561452;
mov ymm2_e L0x555555561454;
mov ymm2_f L0x555555561456;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a731 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a736 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555a73b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a73f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a743 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555a747 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x128(%rdx),%ymm1                  #! EA = L0x555555561248; Value = 0xe2fb1c3c679663c7; PC = 0x55555555a74b *)
mov ymm1_0 L0x555555561248;
mov ymm1_1 L0x55555556124a;
mov ymm1_2 L0x55555556124c;
mov ymm1_3 L0x55555556124e;
mov ymm1_4 L0x555555561248;
mov ymm1_5 L0x55555556124a;
mov ymm1_6 L0x55555556124c;
mov ymm1_7 L0x55555556124e;
mov ymm1_8 L0x555555561248;
mov ymm1_9 L0x55555556124a;
mov ymm1_a L0x55555556124c;
mov ymm1_b L0x55555556124e;
mov ymm1_c L0x555555561248;
mov ymm1_d L0x55555556124a;
mov ymm1_e L0x55555556124c;
mov ymm1_f L0x55555556124e;
(* vpbroadcastq 0x328(%rdx),%ymm2                  #! EA = L0x555555561448; Value = 0x10fbf43c039609c7; PC = 0x55555555a754 *)
mov ymm2_0 L0x555555561448;
mov ymm2_1 L0x55555556144a;
mov ymm2_2 L0x55555556144c;
mov ymm2_3 L0x55555556144e;
mov ymm2_4 L0x555555561448;
mov ymm2_5 L0x55555556144a;
mov ymm2_6 L0x55555556144c;
mov ymm2_7 L0x55555556144e;
mov ymm2_8 L0x555555561448;
mov ymm2_9 L0x55555556144a;
mov ymm2_a L0x55555556144c;
mov ymm2_b L0x55555556144e;
mov ymm2_c L0x555555561448;
mov ymm2_d L0x55555556144a;
mov ymm2_e L0x55555556144c;
mov ymm2_f L0x55555556144e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a75d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a762 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555a767 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a76b *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a76f *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555a773 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x120(%rdx),%ymm1                  #! EA = L0x555555561240; Value = 0xee3d92395a10450b; PC = 0x55555555a778 *)
mov ymm1_0 L0x555555561240;
mov ymm1_1 L0x555555561242;
mov ymm1_2 L0x555555561244;
mov ymm1_3 L0x555555561246;
mov ymm1_4 L0x555555561240;
mov ymm1_5 L0x555555561242;
mov ymm1_6 L0x555555561244;
mov ymm1_7 L0x555555561246;
mov ymm1_8 L0x555555561240;
mov ymm1_9 L0x555555561242;
mov ymm1_a L0x555555561244;
mov ymm1_b L0x555555561246;
mov ymm1_c L0x555555561240;
mov ymm1_d L0x555555561242;
mov ymm1_e L0x555555561244;
mov ymm1_f L0x555555561246;
(* vpbroadcastq 0x320(%rdx),%ymm2                  #! EA = L0x555555561440; Value = 0xf03dec39fa10130b; PC = 0x55555555a781 *)
mov ymm2_0 L0x555555561440;
mov ymm2_1 L0x555555561442;
mov ymm2_2 L0x555555561444;
mov ymm2_3 L0x555555561446;
mov ymm2_4 L0x555555561440;
mov ymm2_5 L0x555555561442;
mov ymm2_6 L0x555555561444;
mov ymm2_7 L0x555555561446;
mov ymm2_8 L0x555555561440;
mov ymm2_9 L0x555555561442;
mov ymm2_a L0x555555561444;
mov ymm2_b L0x555555561446;
mov ymm2_c L0x555555561440;
mov ymm2_d L0x555555561442;
mov ymm2_e L0x555555561444;
mov ymm2_f L0x555555561446;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a78a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a78f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555a794 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a798 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a79c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555a7a0 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555a7a5 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555a7ad *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555a7b5 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555a7b9 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a7bd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555a7c1 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555a7c5 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555a7c9 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a7cd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555a7d1 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555a7d5 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555a7d9 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a7dd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555a7e1 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555a7e5 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555a7e9 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555a7ed *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555a7f1 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a7f5 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a7fa *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555a7ff *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555a803 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555a807 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a80c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555a811 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555a815 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555a819 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a81e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555a823 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555a828 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a82d *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a832 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555a837 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555a83c *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555a841 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555a845 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555a849 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555a84d *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555a851 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555a856 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555a85b *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555a860 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x11c(%rdx),%ymm1                  #! EA = L0x55555556123c; Value = 0x5a10450bc1382524; PC = 0x55555555a865 *)
mov ymm1_0 L0x55555556123c;
mov ymm1_1 L0x55555556123e;
mov ymm1_2 L0x55555556123c;
mov ymm1_3 L0x55555556123e;
mov ymm1_4 L0x55555556123c;
mov ymm1_5 L0x55555556123e;
mov ymm1_6 L0x55555556123c;
mov ymm1_7 L0x55555556123e;
mov ymm1_8 L0x55555556123c;
mov ymm1_9 L0x55555556123e;
mov ymm1_a L0x55555556123c;
mov ymm1_b L0x55555556123e;
mov ymm1_c L0x55555556123c;
mov ymm1_d L0x55555556123e;
mov ymm1_e L0x55555556123c;
mov ymm1_f L0x55555556123e;
(* vpbroadcastd 0x31c(%rdx),%ymm2                  #! EA = L0x55555556143c; Value = 0xfa10130bf1380d24; PC = 0x55555555a86e *)
mov ymm2_0 L0x55555556143c;
mov ymm2_1 L0x55555556143e;
mov ymm2_2 L0x55555556143c;
mov ymm2_3 L0x55555556143e;
mov ymm2_4 L0x55555556143c;
mov ymm2_5 L0x55555556143e;
mov ymm2_6 L0x55555556143c;
mov ymm2_7 L0x55555556143e;
mov ymm2_8 L0x55555556143c;
mov ymm2_9 L0x55555556143e;
mov ymm2_a L0x55555556143c;
mov ymm2_b L0x55555556143e;
mov ymm2_c L0x55555556143c;
mov ymm2_d L0x55555556143e;
mov ymm2_e L0x55555556143c;
mov ymm2_f L0x55555556143e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a877 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a87c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555a881 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555a885 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a889 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555a88d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x118(%rdx),%ymm1                  #! EA = L0x555555561238; Value = 0xc138252491c0b857; PC = 0x55555555a891 *)
mov ymm1_0 L0x555555561238;
mov ymm1_1 L0x55555556123a;
mov ymm1_2 L0x555555561238;
mov ymm1_3 L0x55555556123a;
mov ymm1_4 L0x555555561238;
mov ymm1_5 L0x55555556123a;
mov ymm1_6 L0x555555561238;
mov ymm1_7 L0x55555556123a;
mov ymm1_8 L0x555555561238;
mov ymm1_9 L0x55555556123a;
mov ymm1_a L0x555555561238;
mov ymm1_b L0x55555556123a;
mov ymm1_c L0x555555561238;
mov ymm1_d L0x55555556123a;
mov ymm1_e L0x555555561238;
mov ymm1_f L0x55555556123a;
(* vpbroadcastd 0x318(%rdx),%ymm2                  #! EA = L0x555555561438; Value = 0xf1380d2411c0fe57; PC = 0x55555555a89a *)
mov ymm2_0 L0x555555561438;
mov ymm2_1 L0x55555556143a;
mov ymm2_2 L0x555555561438;
mov ymm2_3 L0x55555556143a;
mov ymm2_4 L0x555555561438;
mov ymm2_5 L0x55555556143a;
mov ymm2_6 L0x555555561438;
mov ymm2_7 L0x55555556143a;
mov ymm2_8 L0x555555561438;
mov ymm2_9 L0x55555556143a;
mov ymm2_a L0x555555561438;
mov ymm2_b L0x55555556143a;
mov ymm2_c L0x555555561438;
mov ymm2_d L0x55555556143a;
mov ymm2_e L0x555555561438;
mov ymm2_f L0x55555556143a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a8a3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a8a8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555a8ad *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555a8b1 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a8b5 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555a8b9 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x114(%rdx),%ymm1                  #! EA = L0x555555561234; Value = 0x91c0b85730bc8cf7; PC = 0x55555555a8bd *)
mov ymm1_0 L0x555555561234;
mov ymm1_1 L0x555555561236;
mov ymm1_2 L0x555555561234;
mov ymm1_3 L0x555555561236;
mov ymm1_4 L0x555555561234;
mov ymm1_5 L0x555555561236;
mov ymm1_6 L0x555555561234;
mov ymm1_7 L0x555555561236;
mov ymm1_8 L0x555555561234;
mov ymm1_9 L0x555555561236;
mov ymm1_a L0x555555561234;
mov ymm1_b L0x555555561236;
mov ymm1_c L0x555555561234;
mov ymm1_d L0x555555561236;
mov ymm1_e L0x555555561234;
mov ymm1_f L0x555555561236;
(* vpbroadcastd 0x314(%rdx),%ymm2                  #! EA = L0x555555561434; Value = 0x11c0fe5708bc12f7; PC = 0x55555555a8c6 *)
mov ymm2_0 L0x555555561434;
mov ymm2_1 L0x555555561436;
mov ymm2_2 L0x555555561434;
mov ymm2_3 L0x555555561436;
mov ymm2_4 L0x555555561434;
mov ymm2_5 L0x555555561436;
mov ymm2_6 L0x555555561434;
mov ymm2_7 L0x555555561436;
mov ymm2_8 L0x555555561434;
mov ymm2_9 L0x555555561436;
mov ymm2_a L0x555555561434;
mov ymm2_b L0x555555561436;
mov ymm2_c L0x555555561434;
mov ymm2_d L0x555555561436;
mov ymm2_e L0x555555561434;
mov ymm2_f L0x555555561436;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a8cf *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a8d4 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555a8d9 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555a8dd *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a8e1 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555a8e5 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x110(%rdx),%ymm1                  #! EA = L0x555555561230; Value = 0x30bc8cf7c126e487; PC = 0x55555555a8ea *)
mov ymm1_0 L0x555555561230;
mov ymm1_1 L0x555555561232;
mov ymm1_2 L0x555555561230;
mov ymm1_3 L0x555555561232;
mov ymm1_4 L0x555555561230;
mov ymm1_5 L0x555555561232;
mov ymm1_6 L0x555555561230;
mov ymm1_7 L0x555555561232;
mov ymm1_8 L0x555555561230;
mov ymm1_9 L0x555555561232;
mov ymm1_a L0x555555561230;
mov ymm1_b L0x555555561232;
mov ymm1_c L0x555555561230;
mov ymm1_d L0x555555561232;
mov ymm1_e L0x555555561230;
mov ymm1_f L0x555555561232;
(* vpbroadcastd 0x310(%rdx),%ymm2                  #! EA = L0x555555561430; Value = 0x08bc12f7fd260a87; PC = 0x55555555a8f3 *)
mov ymm2_0 L0x555555561430;
mov ymm2_1 L0x555555561432;
mov ymm2_2 L0x555555561430;
mov ymm2_3 L0x555555561432;
mov ymm2_4 L0x555555561430;
mov ymm2_5 L0x555555561432;
mov ymm2_6 L0x555555561430;
mov ymm2_7 L0x555555561432;
mov ymm2_8 L0x555555561430;
mov ymm2_9 L0x555555561432;
mov ymm2_a L0x555555561430;
mov ymm2_b L0x555555561432;
mov ymm2_c L0x555555561430;
mov ymm2_d L0x555555561432;
mov ymm2_e L0x555555561430;
mov ymm2_f L0x555555561432;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555a8fc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555a901 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555a906 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555a90a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555a90e *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555a912 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555a917 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555a91c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555a921 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555a925 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555a929 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555a92e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555a933 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555a937 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555a93b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555a940 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555a945 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555a94a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555a94f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555a954 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555a959 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555a95e *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x6795(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555a963 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555a96b *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555a971 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555a976 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555a97c *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555a981 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555a987 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555a98c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555a992 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555a997 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555a99d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555a9a2 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555a9a8 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555a9ad *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555a9b3 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555a9b8 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555a9be *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 1 *****************)




(**************** CUT  16 *****************)

cut and [
eqmod (8*inp_poly040**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10000],
eqmod (8*inp_poly041**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 753],
eqmod (8*inp_poly042**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3775],
eqmod (8*inp_poly043**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6978],
eqmod (8*inp_poly044**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5606],
eqmod (8*inp_poly045**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5147],
eqmod (8*inp_poly046**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7439],
eqmod (8*inp_poly047**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3314]
,
eqmod (8*inp_poly048**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 10373],
eqmod (8*inp_poly049**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 380],
eqmod (8*inp_poly04a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6846],
eqmod (8*inp_poly04b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3907],
eqmod (8*inp_poly04c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7056],
eqmod (8*inp_poly04d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3697],
eqmod (8*inp_poly04e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3954],
eqmod (8*inp_poly04f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6799]
,
eqmod (8*inp_poly050**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2031],
eqmod (8*inp_poly051**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8722],
eqmod (8*inp_poly052**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1385],
eqmod (8*inp_poly053**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9368],
eqmod (8*inp_poly054**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6771],
eqmod (8*inp_poly055**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3982],
eqmod (8*inp_poly056**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3712],
eqmod (8*inp_poly057**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7041]
,
eqmod (8*inp_poly058**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2353],
eqmod (8*inp_poly059**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8400],
eqmod (8*inp_poly05a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7582],
eqmod (8*inp_poly05b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3171],
eqmod (8*inp_poly05c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2603],
eqmod (8*inp_poly05d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8150],
eqmod (8*inp_poly05e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3644],
eqmod (8*inp_poly05f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7109]
,
eqmod (8*inp_poly060**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 841],
eqmod (8*inp_poly061**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9912],
eqmod (8*inp_poly062**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9807],
eqmod (8*inp_poly063**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 946],
eqmod (8*inp_poly064**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1136],
eqmod (8*inp_poly065**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9617],
eqmod (8*inp_poly066**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8171],
eqmod (8*inp_poly067**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2582]
,
eqmod (8*inp_poly068**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5194],
eqmod (8*inp_poly069**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5559],
eqmod (8*inp_poly06a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7391],
eqmod (8*inp_poly06b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3362],
eqmod (8*inp_poly06c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 559],
eqmod (8*inp_poly06d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10194],
eqmod (8*inp_poly06e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6851],
eqmod (8*inp_poly06f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3902]
,
eqmod (8*inp_poly070**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2744],
eqmod (8*inp_poly071**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8009],
eqmod (8*inp_poly072**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5122],
eqmod (8*inp_poly073**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5631],
eqmod (8*inp_poly074**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9831],
eqmod (8*inp_poly075**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 922],
eqmod (8*inp_poly076**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9706],
eqmod (8*inp_poly077**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1047]
,
eqmod (8*inp_poly078**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4455],
eqmod (8*inp_poly079**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6298],
eqmod (8*inp_poly07a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2085],
eqmod (8*inp_poly07b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8668],
eqmod (8*inp_poly07c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10659],
eqmod (8*inp_poly07d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 94],
eqmod (8*inp_poly07e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2599],
eqmod (8*inp_poly07f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8154]
] prove with [ cuts [ 1 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-13412)@16<=s ymm3_4,ymm3_4<s13412@16,(-13412)@16<=s ymm3_5,ymm3_5<s13412@16,
(-12074)@16<=s ymm3_6,ymm3_6<s12074@16,(-12074)@16<=s ymm3_7,ymm3_7<s12074@16,
( -6001)@16<=s ymm3_8,ymm3_8<s 6001@16,( -6001)@16<=s ymm3_9,ymm3_9<s 6001@16,
( -5982)@16<=s ymm3_a,ymm3_a<s 5982@16,( -5982)@16<=s ymm3_b,ymm3_b<s 5982@16,
( -6124)@16<=s ymm3_c,ymm3_c<s 6124@16,( -6124)@16<=s ymm3_d,ymm3_d<s 6124@16,
( -6039)@16<=s ymm3_e,ymm3_e<s 6039@16,( -6039)@16<=s ymm3_f,ymm3_f<s 6039@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-13792)@16<=s ymm5_4,ymm5_4<s13792@16,(-13792)@16<=s ymm5_5,ymm5_5<s13792@16,
(-12319)@16<=s ymm5_6,ymm5_6<s12319@16,(-12319)@16<=s ymm5_7,ymm5_7<s12319@16,
( -5914)@16<=s ymm5_8,ymm5_8<s 5914@16,( -5914)@16<=s ymm5_9,ymm5_9<s 5914@16,
( -5906)@16<=s ymm5_a,ymm5_a<s 5906@16,( -5906)@16<=s ymm5_b,ymm5_b<s 5906@16,
( -6080)@16<=s ymm5_c,ymm5_c<s 6080@16,( -6080)@16<=s ymm5_d,ymm5_d<s 6080@16,
( -5991)@16<=s ymm5_e,ymm5_e<s 5991@16,( -5991)@16<=s ymm5_f,ymm5_f<s 5991@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12163)@16<=s ymm4_4,ymm4_4<s12163@16,(-12163)@16<=s ymm4_5,ymm4_5<s12163@16,
(-11464)@16<=s ymm4_6,ymm4_6<s11464@16,(-11464)@16<=s ymm4_7,ymm4_7<s11464@16,
( -6122)@16<=s ymm4_8,ymm4_8<s 6122@16,( -6122)@16<=s ymm4_9,ymm4_9<s 6122@16,
( -6122)@16<=s ymm4_a,ymm4_a<s 6122@16,( -6122)@16<=s ymm4_b,ymm4_b<s 6122@16,
( -6193)@16<=s ymm4_c,ymm4_c<s 6193@16,( -6193)@16<=s ymm4_d,ymm4_d<s 6193@16,
( -6133)@16<=s ymm4_e,ymm4_e<s 6133@16,( -6133)@16<=s ymm4_f,ymm4_f<s 6133@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-11853)@16<=s ymm7_4,ymm7_4<s11853@16,(-11853)@16<=s ymm7_5,ymm7_5<s11853@16,
(-11344)@16<=s ymm7_6,ymm7_6<s11344@16,(-11344)@16<=s ymm7_7,ymm7_7<s11344@16,
( -5442)@16<=s ymm7_8,ymm7_8<s 5442@16,( -5442)@16<=s ymm7_9,ymm7_9<s 5442@16,
( -5437)@16<=s ymm7_a,ymm7_a<s 5437@16,( -5437)@16<=s ymm7_b,ymm7_b<s 5437@16,
( -5447)@16<=s ymm7_c,ymm7_c<s 5447@16,( -5447)@16<=s ymm7_d,ymm7_d<s 5447@16,
( -5442)@16<=s ymm7_e,ymm7_e<s 5442@16,( -5442)@16<=s ymm7_f,ymm7_f<s 5442@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-13157)@16<=s ymm6_4,ymm6_4<s13157@16,(-13157)@16<=s ymm6_5,ymm6_5<s13157@16,
(-11978)@16<=s ymm6_6,ymm6_6<s11978@16,(-11978)@16<=s ymm6_7,ymm6_7<s11978@16,
( -5723)@16<=s ymm6_8,ymm6_8<s 5723@16,( -5723)@16<=s ymm6_9,ymm6_9<s 5723@16,
( -5723)@16<=s ymm6_a,ymm6_a<s 5723@16,( -5723)@16<=s ymm6_b,ymm6_b<s 5723@16,
( -5808)@16<=s ymm6_c,ymm6_c<s 5808@16,( -5808)@16<=s ymm6_d,ymm6_d<s 5808@16,
( -5762)@16<=s ymm6_e,ymm6_e<s 5762@16,( -5762)@16<=s ymm6_f,ymm6_f<s 5762@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-11885)@16<=s ymm9_4,ymm9_4<s11885@16,(-11885)@16<=s ymm9_5,ymm9_5<s11885@16,
(-11317)@16<=s ymm9_6,ymm9_6<s11317@16,(-11317)@16<=s ymm9_7,ymm9_7<s11317@16,
( -6181)@16<=s ymm9_8,ymm9_8<s 6181@16,( -6181)@16<=s ymm9_9,ymm9_9<s 6181@16,
( -6137)@16<=s ymm9_a,ymm9_a<s 6137@16,( -6137)@16<=s ymm9_b,ymm9_b<s 6137@16,
( -6225)@16<=s ymm9_c,ymm9_c<s 6225@16,( -6225)@16<=s ymm9_d,ymm9_d<s 6225@16,
( -6181)@16<=s ymm9_e,ymm9_e<s 6181@16,( -6181)@16<=s ymm9_f,ymm9_f<s 6181@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-13830)@16<=s ymm8_4,ymm8_4<s13830@16,(-13830)@16<=s ymm8_5,ymm8_5<s13830@16,
(-12248)@16<=s ymm8_6,ymm8_6<s12248@16,(-12248)@16<=s ymm8_7,ymm8_7<s12248@16,
( -5487)@16<=s ymm8_8,ymm8_8<s 5487@16,( -5487)@16<=s ymm8_9,ymm8_9<s 5487@16,
( -5487)@16<=s ymm8_a,ymm8_a<s 5487@16,( -5487)@16<=s ymm8_b,ymm8_b<s 5487@16,
( -5513)@16<=s ymm8_c,ymm8_c<s 5513@16,( -5513)@16<=s ymm8_d,ymm8_d<s 5513@16,
( -5500)@16<=s ymm8_e,ymm8_e<s 5500@16,( -5500)@16<=s ymm8_f,ymm8_f<s 5500@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-12879)@16<=s ymm11_4,ymm11_4<s12879@16,(-12879)@16<=s ymm11_5,ymm11_5<s12879@16,
(-11873)@16<=s ymm11_6,ymm11_6<s11873@16,(-11873)@16<=s ymm11_7,ymm11_7<s11873@16,
( -5831)@16<=s ymm11_8,ymm11_8<s 5831@16,( -5831)@16<=s ymm11_9,ymm11_9<s 5831@16,
( -5770)@16<=s ymm11_a,ymm11_a<s 5770@16,( -5770)@16<=s ymm11_b,ymm11_b<s 5770@16,
( -5863)@16<=s ymm11_c,ymm11_c<s 5863@16,( -5863)@16<=s ymm11_d,ymm11_d<s 5863@16,
( -5843)@16<=s ymm11_e,ymm11_e<s 5843@16,( -5843)@16<=s ymm11_f,ymm11_f<s 5843@16
] prove with [ precondition ];



(**************** CUT  17 *****************)

ecut and [
eqmod (8*inp_poly040**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10000],
eqmod (8*inp_poly041**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 753],
eqmod (8*inp_poly042**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3775],
eqmod (8*inp_poly043**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6978],
eqmod (8*inp_poly044**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5606],
eqmod (8*inp_poly045**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5147],
eqmod (8*inp_poly046**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7439],
eqmod (8*inp_poly047**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3314]
,
eqmod (8*inp_poly048**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 10373],
eqmod (8*inp_poly049**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 380],
eqmod (8*inp_poly04a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6846],
eqmod (8*inp_poly04b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3907],
eqmod (8*inp_poly04c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7056],
eqmod (8*inp_poly04d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3697],
eqmod (8*inp_poly04e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3954],
eqmod (8*inp_poly04f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6799]
] prove with [ cuts [ 16 ] ];



(**************** CUT  18 *****************)

ecut and [
eqmod (8*inp_poly050**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2031],
eqmod (8*inp_poly051**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8722],
eqmod (8*inp_poly052**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1385],
eqmod (8*inp_poly053**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9368],
eqmod (8*inp_poly054**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6771],
eqmod (8*inp_poly055**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3982],
eqmod (8*inp_poly056**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3712],
eqmod (8*inp_poly057**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7041]
,
eqmod (8*inp_poly058**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2353],
eqmod (8*inp_poly059**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8400],
eqmod (8*inp_poly05a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7582],
eqmod (8*inp_poly05b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3171],
eqmod (8*inp_poly05c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2603],
eqmod (8*inp_poly05d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8150],
eqmod (8*inp_poly05e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3644],
eqmod (8*inp_poly05f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7109]
] prove with [ cuts [ 16 ] ];



(**************** CUT  19 *****************)

ecut and [
eqmod (8*inp_poly060**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 841],
eqmod (8*inp_poly061**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9912],
eqmod (8*inp_poly062**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9807],
eqmod (8*inp_poly063**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 946],
eqmod (8*inp_poly064**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1136],
eqmod (8*inp_poly065**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9617],
eqmod (8*inp_poly066**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8171],
eqmod (8*inp_poly067**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2582]
,
eqmod (8*inp_poly068**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5194],
eqmod (8*inp_poly069**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5559],
eqmod (8*inp_poly06a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7391],
eqmod (8*inp_poly06b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3362],
eqmod (8*inp_poly06c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 559],
eqmod (8*inp_poly06d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10194],
eqmod (8*inp_poly06e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6851],
eqmod (8*inp_poly06f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3902]
] prove with [ cuts [ 16 ] ];



(**************** CUT  20 *****************)

ecut and [
eqmod (8*inp_poly070**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2744],
eqmod (8*inp_poly071**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8009],
eqmod (8*inp_poly072**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5122],
eqmod (8*inp_poly073**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5631],
eqmod (8*inp_poly074**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9831],
eqmod (8*inp_poly075**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 922],
eqmod (8*inp_poly076**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9706],
eqmod (8*inp_poly077**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1047]
,
eqmod (8*inp_poly078**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4455],
eqmod (8*inp_poly079**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6298],
eqmod (8*inp_poly07a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2085],
eqmod (8*inp_poly07b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8668],
eqmod (8*inp_poly07c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10659],
eqmod (8*inp_poly07d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 94],
eqmod (8*inp_poly07e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2599],
eqmod (8*inp_poly07f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8154]
] prove with [ cuts [ 16 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555a9c3 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555a9c7 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555a9cb *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555a9cf *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555a9d3 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555a9d8 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555a9dd *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555a9e2 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555a9e7 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555a9ef *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x10e(%rdx),%ymm1                  #! EA = L0x55555556122e; Value = 0x8cf7c126e487ae88; PC = 0x55555555a9f7 *)
mov ymm1_0 L0x55555556122e;
mov ymm1_1 L0x55555556122e;
mov ymm1_2 L0x55555556122e;
mov ymm1_3 L0x55555556122e;
mov ymm1_4 L0x55555556122e;
mov ymm1_5 L0x55555556122e;
mov ymm1_6 L0x55555556122e;
mov ymm1_7 L0x55555556122e;
mov ymm1_8 L0x55555556122e;
mov ymm1_9 L0x55555556122e;
mov ymm1_a L0x55555556122e;
mov ymm1_b L0x55555556122e;
mov ymm1_c L0x55555556122e;
mov ymm1_d L0x55555556122e;
mov ymm1_e L0x55555556122e;
mov ymm1_f L0x55555556122e;
(* vpbroadcastw 0x30e(%rdx),%ymm2                  #! EA = L0x55555556142e; Value = 0x12f7fd260a87fe88; PC = 0x55555555aa00 *)
mov ymm2_0 L0x55555556142e;
mov ymm2_1 L0x55555556142e;
mov ymm2_2 L0x55555556142e;
mov ymm2_3 L0x55555556142e;
mov ymm2_4 L0x55555556142e;
mov ymm2_5 L0x55555556142e;
mov ymm2_6 L0x55555556142e;
mov ymm2_7 L0x55555556142e;
mov ymm2_8 L0x55555556142e;
mov ymm2_9 L0x55555556142e;
mov ymm2_a L0x55555556142e;
mov ymm2_b L0x55555556142e;
mov ymm2_c L0x55555556142e;
mov ymm2_d L0x55555556142e;
mov ymm2_e L0x55555556142e;
mov ymm2_f L0x55555556142e;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555aa09 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555aa0d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa11 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555aa15 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x10c(%rdx),%ymm1                  #! EA = L0x55555556122c; Value = 0xc126e487ae886f65; PC = 0x55555555aa19 *)
mov ymm1_0 L0x55555556122c;
mov ymm1_1 L0x55555556122c;
mov ymm1_2 L0x55555556122c;
mov ymm1_3 L0x55555556122c;
mov ymm1_4 L0x55555556122c;
mov ymm1_5 L0x55555556122c;
mov ymm1_6 L0x55555556122c;
mov ymm1_7 L0x55555556122c;
mov ymm1_8 L0x55555556122c;
mov ymm1_9 L0x55555556122c;
mov ymm1_a L0x55555556122c;
mov ymm1_b L0x55555556122c;
mov ymm1_c L0x55555556122c;
mov ymm1_d L0x55555556122c;
mov ymm1_e L0x55555556122c;
mov ymm1_f L0x55555556122c;
(* vpbroadcastw 0x30c(%rdx),%ymm2                  #! EA = L0x55555556142c; Value = 0xfd260a87fe880165; PC = 0x55555555aa22 *)
mov ymm2_0 L0x55555556142c;
mov ymm2_1 L0x55555556142c;
mov ymm2_2 L0x55555556142c;
mov ymm2_3 L0x55555556142c;
mov ymm2_4 L0x55555556142c;
mov ymm2_5 L0x55555556142c;
mov ymm2_6 L0x55555556142c;
mov ymm2_7 L0x55555556142c;
mov ymm2_8 L0x55555556142c;
mov ymm2_9 L0x55555556142c;
mov ymm2_a L0x55555556142c;
mov ymm2_b L0x55555556142c;
mov ymm2_c L0x55555556142c;
mov ymm2_d L0x55555556142c;
mov ymm2_e L0x55555556142c;
mov ymm2_f L0x55555556142c;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555aa2b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555aa2f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa33 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555aa37 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x10a(%rdx),%ymm1                  #! EA = L0x55555556122a; Value = 0xe487ae886f65ad9a; PC = 0x55555555aa3b *)
mov ymm1_0 L0x55555556122a;
mov ymm1_1 L0x55555556122a;
mov ymm1_2 L0x55555556122a;
mov ymm1_3 L0x55555556122a;
mov ymm1_4 L0x55555556122a;
mov ymm1_5 L0x55555556122a;
mov ymm1_6 L0x55555556122a;
mov ymm1_7 L0x55555556122a;
mov ymm1_8 L0x55555556122a;
mov ymm1_9 L0x55555556122a;
mov ymm1_a L0x55555556122a;
mov ymm1_b L0x55555556122a;
mov ymm1_c L0x55555556122a;
mov ymm1_d L0x55555556122a;
mov ymm1_e L0x55555556122a;
mov ymm1_f L0x55555556122a;
(* vpbroadcastw 0x30a(%rdx),%ymm2                  #! EA = L0x55555556142a; Value = 0x0a87fe880165f19a; PC = 0x55555555aa44 *)
mov ymm2_0 L0x55555556142a;
mov ymm2_1 L0x55555556142a;
mov ymm2_2 L0x55555556142a;
mov ymm2_3 L0x55555556142a;
mov ymm2_4 L0x55555556142a;
mov ymm2_5 L0x55555556142a;
mov ymm2_6 L0x55555556142a;
mov ymm2_7 L0x55555556142a;
mov ymm2_8 L0x55555556142a;
mov ymm2_9 L0x55555556142a;
mov ymm2_a L0x55555556142a;
mov ymm2_b L0x55555556142a;
mov ymm2_c L0x55555556142a;
mov ymm2_d L0x55555556142a;
mov ymm2_e L0x55555556142a;
mov ymm2_f L0x55555556142a;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555aa4d *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555aa51 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa55 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555aa59 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x108(%rdx),%ymm1                  #! EA = L0x555555561228; Value = 0xae886f65ad9a276d; PC = 0x55555555aa5e *)
mov ymm1_0 L0x555555561228;
mov ymm1_1 L0x555555561228;
mov ymm1_2 L0x555555561228;
mov ymm1_3 L0x555555561228;
mov ymm1_4 L0x555555561228;
mov ymm1_5 L0x555555561228;
mov ymm1_6 L0x555555561228;
mov ymm1_7 L0x555555561228;
mov ymm1_8 L0x555555561228;
mov ymm1_9 L0x555555561228;
mov ymm1_a L0x555555561228;
mov ymm1_b L0x555555561228;
mov ymm1_c L0x555555561228;
mov ymm1_d L0x555555561228;
mov ymm1_e L0x555555561228;
mov ymm1_f L0x555555561228;
(* vpbroadcastw 0x308(%rdx),%ymm2                  #! EA = L0x555555561428; Value = 0xfe880165f19a096d; PC = 0x55555555aa67 *)
mov ymm2_0 L0x555555561428;
mov ymm2_1 L0x555555561428;
mov ymm2_2 L0x555555561428;
mov ymm2_3 L0x555555561428;
mov ymm2_4 L0x555555561428;
mov ymm2_5 L0x555555561428;
mov ymm2_6 L0x555555561428;
mov ymm2_7 L0x555555561428;
mov ymm2_8 L0x555555561428;
mov ymm2_9 L0x555555561428;
mov ymm2_a L0x555555561428;
mov ymm2_b L0x555555561428;
mov ymm2_c L0x555555561428;
mov ymm2_d L0x555555561428;
mov ymm2_e L0x555555561428;
mov ymm2_f L0x555555561428;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555aa70 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555aa74 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa78 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555aa7c *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555aa81 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555aa86 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa8b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555aa8f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555aa94 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555aa99 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aa9e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555aaa2 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555aaa7 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555aaac *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aab1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555aab5 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555aaba *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555aabf *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555aac4 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555aac8 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555aacd *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555aad1 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555aad5 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555aad9 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555aadd *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555aae1 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555aae5 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555aaea *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555aaef *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555aaf8 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555ab01 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555ab05 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ab09 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555ab0d *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555ab11 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555ab15 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ab19 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555ab1d *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555ab21 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555ab2a *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555ab33 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555ab37 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ab3b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555ab3f *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555ab43 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555ab47 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ab4b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555ab4f *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555ab54 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555ab58 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555ab5c *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555ab60 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555ab64 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555ab68 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555ab6c *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555ab71 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555ab76 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555ab7f *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555ab88 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555ab8c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555ab90 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555ab94 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555ab98 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555ab9c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555aba0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555aba4 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555aba8 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555abac *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555abb0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555abb4 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555abb8 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555abbc *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555abc0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555abc4 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555abc9 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555abce *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555abd3 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555abd7 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555abdb *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555abe0 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555abe5 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555abe9 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x100(%rdi)                       #! EA = L0x7fffffffd3e0; PC = 0x55555555abed *)
mov L0x7fffffffd3e0 ymm9_0;
mov L0x7fffffffd3e2 ymm9_1;
mov L0x7fffffffd3e4 ymm9_2;
mov L0x7fffffffd3e6 ymm9_3;
mov L0x7fffffffd3e8 ymm9_4;
mov L0x7fffffffd3ea ymm9_5;
mov L0x7fffffffd3ec ymm9_6;
mov L0x7fffffffd3ee ymm9_7;
mov L0x7fffffffd3f0 ymm9_8;
mov L0x7fffffffd3f2 ymm9_9;
mov L0x7fffffffd3f4 ymm9_a;
mov L0x7fffffffd3f6 ymm9_b;
mov L0x7fffffffd3f8 ymm9_c;
mov L0x7fffffffd3fa ymm9_d;
mov L0x7fffffffd3fc ymm9_e;
mov L0x7fffffffd3fe ymm9_f;
(* vmovdqa %ymm8,0x120(%rdi)                       #! EA = L0x7fffffffd400; PC = 0x55555555abf5 *)
mov L0x7fffffffd400 ymm8_0;
mov L0x7fffffffd402 ymm8_1;
mov L0x7fffffffd404 ymm8_2;
mov L0x7fffffffd406 ymm8_3;
mov L0x7fffffffd408 ymm8_4;
mov L0x7fffffffd40a ymm8_5;
mov L0x7fffffffd40c ymm8_6;
mov L0x7fffffffd40e ymm8_7;
mov L0x7fffffffd410 ymm8_8;
mov L0x7fffffffd412 ymm8_9;
mov L0x7fffffffd414 ymm8_a;
mov L0x7fffffffd416 ymm8_b;
mov L0x7fffffffd418 ymm8_c;
mov L0x7fffffffd41a ymm8_d;
mov L0x7fffffffd41c ymm8_e;
mov L0x7fffffffd41e ymm8_f;
(* vmovdqa %ymm10,0x140(%rdi)                      #! EA = L0x7fffffffd420; PC = 0x55555555abfd *)
mov L0x7fffffffd420 ymm10_0;
mov L0x7fffffffd422 ymm10_1;
mov L0x7fffffffd424 ymm10_2;
mov L0x7fffffffd426 ymm10_3;
mov L0x7fffffffd428 ymm10_4;
mov L0x7fffffffd42a ymm10_5;
mov L0x7fffffffd42c ymm10_6;
mov L0x7fffffffd42e ymm10_7;
mov L0x7fffffffd430 ymm10_8;
mov L0x7fffffffd432 ymm10_9;
mov L0x7fffffffd434 ymm10_a;
mov L0x7fffffffd436 ymm10_b;
mov L0x7fffffffd438 ymm10_c;
mov L0x7fffffffd43a ymm10_d;
mov L0x7fffffffd43c ymm10_e;
mov L0x7fffffffd43e ymm10_f;
(* vmovdqa %ymm3,0x160(%rdi)                       #! EA = L0x7fffffffd440; PC = 0x55555555ac05 *)
mov L0x7fffffffd440 ymm3_0;
mov L0x7fffffffd442 ymm3_1;
mov L0x7fffffffd444 ymm3_2;
mov L0x7fffffffd446 ymm3_3;
mov L0x7fffffffd448 ymm3_4;
mov L0x7fffffffd44a ymm3_5;
mov L0x7fffffffd44c ymm3_6;
mov L0x7fffffffd44e ymm3_7;
mov L0x7fffffffd450 ymm3_8;
mov L0x7fffffffd452 ymm3_9;
mov L0x7fffffffd454 ymm3_a;
mov L0x7fffffffd456 ymm3_b;
mov L0x7fffffffd458 ymm3_c;
mov L0x7fffffffd45a ymm3_d;
mov L0x7fffffffd45c ymm3_e;
mov L0x7fffffffd45e ymm3_f;
(* vmovdqa %ymm5,0x180(%rdi)                       #! EA = L0x7fffffffd460; PC = 0x55555555ac0d *)
mov L0x7fffffffd460 ymm5_0;
mov L0x7fffffffd462 ymm5_1;
mov L0x7fffffffd464 ymm5_2;
mov L0x7fffffffd466 ymm5_3;
mov L0x7fffffffd468 ymm5_4;
mov L0x7fffffffd46a ymm5_5;
mov L0x7fffffffd46c ymm5_6;
mov L0x7fffffffd46e ymm5_7;
mov L0x7fffffffd470 ymm5_8;
mov L0x7fffffffd472 ymm5_9;
mov L0x7fffffffd474 ymm5_a;
mov L0x7fffffffd476 ymm5_b;
mov L0x7fffffffd478 ymm5_c;
mov L0x7fffffffd47a ymm5_d;
mov L0x7fffffffd47c ymm5_e;
mov L0x7fffffffd47e ymm5_f;
(* vmovdqa %ymm4,0x1a0(%rdi)                       #! EA = L0x7fffffffd480; PC = 0x55555555ac15 *)
mov L0x7fffffffd480 ymm4_0;
mov L0x7fffffffd482 ymm4_1;
mov L0x7fffffffd484 ymm4_2;
mov L0x7fffffffd486 ymm4_3;
mov L0x7fffffffd488 ymm4_4;
mov L0x7fffffffd48a ymm4_5;
mov L0x7fffffffd48c ymm4_6;
mov L0x7fffffffd48e ymm4_7;
mov L0x7fffffffd490 ymm4_8;
mov L0x7fffffffd492 ymm4_9;
mov L0x7fffffffd494 ymm4_a;
mov L0x7fffffffd496 ymm4_b;
mov L0x7fffffffd498 ymm4_c;
mov L0x7fffffffd49a ymm4_d;
mov L0x7fffffffd49c ymm4_e;
mov L0x7fffffffd49e ymm4_f;
(* vmovdqa %ymm6,0x1c0(%rdi)                       #! EA = L0x7fffffffd4a0; PC = 0x55555555ac1d *)
mov L0x7fffffffd4a0 ymm6_0;
mov L0x7fffffffd4a2 ymm6_1;
mov L0x7fffffffd4a4 ymm6_2;
mov L0x7fffffffd4a6 ymm6_3;
mov L0x7fffffffd4a8 ymm6_4;
mov L0x7fffffffd4aa ymm6_5;
mov L0x7fffffffd4ac ymm6_6;
mov L0x7fffffffd4ae ymm6_7;
mov L0x7fffffffd4b0 ymm6_8;
mov L0x7fffffffd4b2 ymm6_9;
mov L0x7fffffffd4b4 ymm6_a;
mov L0x7fffffffd4b6 ymm6_b;
mov L0x7fffffffd4b8 ymm6_c;
mov L0x7fffffffd4ba ymm6_d;
mov L0x7fffffffd4bc ymm6_e;
mov L0x7fffffffd4be ymm6_f;
(* vmovdqa %ymm11,0x1e0(%rdi)                      #! EA = L0x7fffffffd4c0; PC = 0x55555555ac25 *)
mov L0x7fffffffd4c0 ymm11_0;
mov L0x7fffffffd4c2 ymm11_1;
mov L0x7fffffffd4c4 ymm11_2;
mov L0x7fffffffd4c6 ymm11_3;
mov L0x7fffffffd4c8 ymm11_4;
mov L0x7fffffffd4ca ymm11_5;
mov L0x7fffffffd4cc ymm11_6;
mov L0x7fffffffd4ce ymm11_7;
mov L0x7fffffffd4d0 ymm11_8;
mov L0x7fffffffd4d2 ymm11_9;
mov L0x7fffffffd4d4 ymm11_a;
mov L0x7fffffffd4d6 ymm11_b;
mov L0x7fffffffd4d8 ymm11_c;
mov L0x7fffffffd4da ymm11_d;
mov L0x7fffffffd4dc ymm11_e;
mov L0x7fffffffd4de ymm11_f;



(**************** LEVELS 3-5, 1 *****************)

ghost segment1@bit :
segment1 = 
x**  0*(
L0x7fffffffd3e0*x** 0+L0x7fffffffd3e2*x** 1+L0x7fffffffd3e4*x** 2+
L0x7fffffffd3e6*x** 3+L0x7fffffffd3e8*x** 4+L0x7fffffffd3ea*x** 5+
L0x7fffffffd3ec*x** 6+L0x7fffffffd3ee*x** 7+L0x7fffffffd3f0*x** 8+
L0x7fffffffd3f2*x** 9+L0x7fffffffd3f4*x**10+L0x7fffffffd3f6*x**11+
L0x7fffffffd3f8*x**12+L0x7fffffffd3fa*x**13+L0x7fffffffd3fc*x**14+
L0x7fffffffd3fe*x**15)+
x** 16*(
L0x7fffffffd400*x** 0+L0x7fffffffd402*x** 1+L0x7fffffffd404*x** 2+
L0x7fffffffd406*x** 3+L0x7fffffffd408*x** 4+L0x7fffffffd40a*x** 5+
L0x7fffffffd40c*x** 6+L0x7fffffffd40e*x** 7+L0x7fffffffd410*x** 8+
L0x7fffffffd412*x** 9+L0x7fffffffd414*x**10+L0x7fffffffd416*x**11+
L0x7fffffffd418*x**12+L0x7fffffffd41a*x**13+L0x7fffffffd41c*x**14+
L0x7fffffffd41e*x**15)+
x** 32*(
L0x7fffffffd420*x** 0+L0x7fffffffd422*x** 1+L0x7fffffffd424*x** 2+
L0x7fffffffd426*x** 3+L0x7fffffffd428*x** 4+L0x7fffffffd42a*x** 5+
L0x7fffffffd42c*x** 6+L0x7fffffffd42e*x** 7+L0x7fffffffd430*x** 8+
L0x7fffffffd432*x** 9+L0x7fffffffd434*x**10+L0x7fffffffd436*x**11+
L0x7fffffffd438*x**12+L0x7fffffffd43a*x**13+L0x7fffffffd43c*x**14+
L0x7fffffffd43e*x**15)+
x** 48*(
L0x7fffffffd440*x** 0+L0x7fffffffd442*x** 1+L0x7fffffffd444*x** 2+
L0x7fffffffd446*x** 3+L0x7fffffffd448*x** 4+L0x7fffffffd44a*x** 5+
L0x7fffffffd44c*x** 6+L0x7fffffffd44e*x** 7+L0x7fffffffd450*x** 8+
L0x7fffffffd452*x** 9+L0x7fffffffd454*x**10+L0x7fffffffd456*x**11+
L0x7fffffffd458*x**12+L0x7fffffffd45a*x**13+L0x7fffffffd45c*x**14+
L0x7fffffffd45e*x**15)+
x** 64*(
L0x7fffffffd460*x** 0+L0x7fffffffd462*x** 1+L0x7fffffffd464*x** 2+
L0x7fffffffd466*x** 3+L0x7fffffffd468*x** 4+L0x7fffffffd46a*x** 5+
L0x7fffffffd46c*x** 6+L0x7fffffffd46e*x** 7+L0x7fffffffd470*x** 8+
L0x7fffffffd472*x** 9+L0x7fffffffd474*x**10+L0x7fffffffd476*x**11+
L0x7fffffffd478*x**12+L0x7fffffffd47a*x**13+L0x7fffffffd47c*x**14+
L0x7fffffffd47e*x**15)+
x** 80*(
L0x7fffffffd480*x** 0+L0x7fffffffd482*x** 1+L0x7fffffffd484*x** 2+
L0x7fffffffd486*x** 3+L0x7fffffffd488*x** 4+L0x7fffffffd48a*x** 5+
L0x7fffffffd48c*x** 6+L0x7fffffffd48e*x** 7+L0x7fffffffd490*x** 8+
L0x7fffffffd492*x** 9+L0x7fffffffd494*x**10+L0x7fffffffd496*x**11+
L0x7fffffffd498*x**12+L0x7fffffffd49a*x**13+L0x7fffffffd49c*x**14+
L0x7fffffffd49e*x**15)+
x** 96*(
L0x7fffffffd4a0*x** 0+L0x7fffffffd4a2*x** 1+L0x7fffffffd4a4*x** 2+
L0x7fffffffd4a6*x** 3+L0x7fffffffd4a8*x** 4+L0x7fffffffd4aa*x** 5+
L0x7fffffffd4ac*x** 6+L0x7fffffffd4ae*x** 7+L0x7fffffffd4b0*x** 8+
L0x7fffffffd4b2*x** 9+L0x7fffffffd4b4*x**10+L0x7fffffffd4b6*x**11+
L0x7fffffffd4b8*x**12+L0x7fffffffd4ba*x**13+L0x7fffffffd4bc*x**14+
L0x7fffffffd4be*x**15)+
x**112*(
L0x7fffffffd4c0*x** 0+L0x7fffffffd4c2*x** 1+L0x7fffffffd4c4*x** 2+
L0x7fffffffd4c6*x** 3+L0x7fffffffd4c8*x** 4+L0x7fffffffd4ca*x** 5+
L0x7fffffffd4cc*x** 6+L0x7fffffffd4ce*x** 7+L0x7fffffffd4d0*x** 8+
L0x7fffffffd4d2*x** 9+L0x7fffffffd4d4*x**10+L0x7fffffffd4d6*x**11+
L0x7fffffffd4d8*x**12+L0x7fffffffd4da*x**13+L0x7fffffffd4dc*x**14+
L0x7fffffffd4de*x**15)
&& true;


(**************** CUT  21 *****************)

cut
and [
eqmod (64*inp_poly040**2) (segment1) [10753, x**2 - 10000],
eqmod (64*inp_poly041**2) (segment1) [10753, x**2 - 753],
eqmod (64*inp_poly042**2) (segment1) [10753, x**2 - 3775],
eqmod (64*inp_poly043**2) (segment1) [10753, x**2 - 6978],
eqmod (64*inp_poly044**2) (segment1) [10753, x**2 - 5606],
eqmod (64*inp_poly045**2) (segment1) [10753, x**2 - 5147],
eqmod (64*inp_poly046**2) (segment1) [10753, x**2 - 7439],
eqmod (64*inp_poly047**2) (segment1) [10753, x**2 - 3314]
,
eqmod (64*inp_poly048**2) (segment1) [10753, x**2 - 10373],
eqmod (64*inp_poly049**2) (segment1) [10753, x**2 - 380],
eqmod (64*inp_poly04a**2) (segment1) [10753, x**2 - 6846],
eqmod (64*inp_poly04b**2) (segment1) [10753, x**2 - 3907],
eqmod (64*inp_poly04c**2) (segment1) [10753, x**2 - 7056],
eqmod (64*inp_poly04d**2) (segment1) [10753, x**2 - 3697],
eqmod (64*inp_poly04e**2) (segment1) [10753, x**2 - 3954],
eqmod (64*inp_poly04f**2) (segment1) [10753, x**2 - 6799]
] prove with [ cuts [ 17 ] ],
and [
eqmod (64*inp_poly050**2) (segment1) [10753, x**2 - 2031],
eqmod (64*inp_poly051**2) (segment1) [10753, x**2 - 8722],
eqmod (64*inp_poly052**2) (segment1) [10753, x**2 - 1385],
eqmod (64*inp_poly053**2) (segment1) [10753, x**2 - 9368],
eqmod (64*inp_poly054**2) (segment1) [10753, x**2 - 6771],
eqmod (64*inp_poly055**2) (segment1) [10753, x**2 - 3982],
eqmod (64*inp_poly056**2) (segment1) [10753, x**2 - 3712],
eqmod (64*inp_poly057**2) (segment1) [10753, x**2 - 7041]
,
eqmod (64*inp_poly058**2) (segment1) [10753, x**2 - 2353],
eqmod (64*inp_poly059**2) (segment1) [10753, x**2 - 8400],
eqmod (64*inp_poly05a**2) (segment1) [10753, x**2 - 7582],
eqmod (64*inp_poly05b**2) (segment1) [10753, x**2 - 3171],
eqmod (64*inp_poly05c**2) (segment1) [10753, x**2 - 2603],
eqmod (64*inp_poly05d**2) (segment1) [10753, x**2 - 8150],
eqmod (64*inp_poly05e**2) (segment1) [10753, x**2 - 3644],
eqmod (64*inp_poly05f**2) (segment1) [10753, x**2 - 7109]
] prove with [ cuts [ 18 ] ],
and [
eqmod (64*inp_poly060**2) (segment1) [10753, x**2 - 841],
eqmod (64*inp_poly061**2) (segment1) [10753, x**2 - 9912],
eqmod (64*inp_poly062**2) (segment1) [10753, x**2 - 9807],
eqmod (64*inp_poly063**2) (segment1) [10753, x**2 - 946],
eqmod (64*inp_poly064**2) (segment1) [10753, x**2 - 1136],
eqmod (64*inp_poly065**2) (segment1) [10753, x**2 - 9617],
eqmod (64*inp_poly066**2) (segment1) [10753, x**2 - 8171],
eqmod (64*inp_poly067**2) (segment1) [10753, x**2 - 2582]
,
eqmod (64*inp_poly068**2) (segment1) [10753, x**2 - 5194],
eqmod (64*inp_poly069**2) (segment1) [10753, x**2 - 5559],
eqmod (64*inp_poly06a**2) (segment1) [10753, x**2 - 7391],
eqmod (64*inp_poly06b**2) (segment1) [10753, x**2 - 3362],
eqmod (64*inp_poly06c**2) (segment1) [10753, x**2 - 559],
eqmod (64*inp_poly06d**2) (segment1) [10753, x**2 - 10194],
eqmod (64*inp_poly06e**2) (segment1) [10753, x**2 - 6851],
eqmod (64*inp_poly06f**2) (segment1) [10753, x**2 - 3902]
] prove with [ cuts [ 19 ] ],
and [
eqmod (64*inp_poly070**2) (segment1) [10753, x**2 - 2744],
eqmod (64*inp_poly071**2) (segment1) [10753, x**2 - 8009],
eqmod (64*inp_poly072**2) (segment1) [10753, x**2 - 5122],
eqmod (64*inp_poly073**2) (segment1) [10753, x**2 - 5631],
eqmod (64*inp_poly074**2) (segment1) [10753, x**2 - 9831],
eqmod (64*inp_poly075**2) (segment1) [10753, x**2 - 922],
eqmod (64*inp_poly076**2) (segment1) [10753, x**2 - 9706],
eqmod (64*inp_poly077**2) (segment1) [10753, x**2 - 1047]
,
eqmod (64*inp_poly078**2) (segment1) [10753, x**2 - 4455],
eqmod (64*inp_poly079**2) (segment1) [10753, x**2 - 6298],
eqmod (64*inp_poly07a**2) (segment1) [10753, x**2 - 2085],
eqmod (64*inp_poly07b**2) (segment1) [10753, x**2 - 8668],
eqmod (64*inp_poly07c**2) (segment1) [10753, x**2 - 10659],
eqmod (64*inp_poly07d**2) (segment1) [10753, x**2 - 94],
eqmod (64*inp_poly07e**2) (segment1) [10753, x**2 - 2599],
eqmod (64*inp_poly07f**2) (segment1) [10753, x**2 - 8154]
] prove with [ cuts [ 20 ] ] && and [
( -5631)@16<=s L0x7fffffffd3e0,L0x7fffffffd3e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd3e2,L0x7fffffffd3e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd3e4,L0x7fffffffd3e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd3e6,L0x7fffffffd3e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd3e8,L0x7fffffffd3e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd3ea,L0x7fffffffd3ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd3ec,L0x7fffffffd3ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd3ee,L0x7fffffffd3ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd3f0,L0x7fffffffd3f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd3f2,L0x7fffffffd3f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd3f4,L0x7fffffffd3f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd3f6,L0x7fffffffd3f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd3f8,L0x7fffffffd3f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd3fa,L0x7fffffffd3fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd3fc,L0x7fffffffd3fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd3fe,L0x7fffffffd3fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd400,L0x7fffffffd400<s 5631@16,
( -5631)@16<=s L0x7fffffffd402,L0x7fffffffd402<s 5631@16,
( -5631)@16<=s L0x7fffffffd404,L0x7fffffffd404<s 5631@16,
( -5631)@16<=s L0x7fffffffd406,L0x7fffffffd406<s 5631@16,
( -5631)@16<=s L0x7fffffffd408,L0x7fffffffd408<s 5631@16,
( -5631)@16<=s L0x7fffffffd40a,L0x7fffffffd40a<s 5631@16,
( -5631)@16<=s L0x7fffffffd40c,L0x7fffffffd40c<s 5631@16,
( -5631)@16<=s L0x7fffffffd40e,L0x7fffffffd40e<s 5631@16,
( -5631)@16<=s L0x7fffffffd410,L0x7fffffffd410<s 5631@16,
( -5631)@16<=s L0x7fffffffd412,L0x7fffffffd412<s 5631@16,
( -5631)@16<=s L0x7fffffffd414,L0x7fffffffd414<s 5631@16,
( -5631)@16<=s L0x7fffffffd416,L0x7fffffffd416<s 5631@16,
( -5631)@16<=s L0x7fffffffd418,L0x7fffffffd418<s 5631@16,
( -5631)@16<=s L0x7fffffffd41a,L0x7fffffffd41a<s 5631@16,
( -5631)@16<=s L0x7fffffffd41c,L0x7fffffffd41c<s 5631@16,
( -5631)@16<=s L0x7fffffffd41e,L0x7fffffffd41e<s 5631@16,
(-11909)@16<=s L0x7fffffffd420,L0x7fffffffd420<s11909@16,
(-11909)@16<=s L0x7fffffffd422,L0x7fffffffd422<s11909@16,
(-11909)@16<=s L0x7fffffffd424,L0x7fffffffd424<s11909@16,
(-11909)@16<=s L0x7fffffffd426,L0x7fffffffd426<s11909@16,
(-11943)@16<=s L0x7fffffffd428,L0x7fffffffd428<s11943@16,
(-11943)@16<=s L0x7fffffffd42a,L0x7fffffffd42a<s11943@16,
(-11909)@16<=s L0x7fffffffd42c,L0x7fffffffd42c<s11909@16,
(-11909)@16<=s L0x7fffffffd42e,L0x7fffffffd42e<s11909@16,
(-11903)@16<=s L0x7fffffffd430,L0x7fffffffd430<s11903@16,
(-11903)@16<=s L0x7fffffffd432,L0x7fffffffd432<s11903@16,
(-11903)@16<=s L0x7fffffffd434,L0x7fffffffd434<s11903@16,
(-11903)@16<=s L0x7fffffffd436,L0x7fffffffd436<s11903@16,
(-11903)@16<=s L0x7fffffffd438,L0x7fffffffd438<s11903@16,
(-11903)@16<=s L0x7fffffffd43a,L0x7fffffffd43a<s11903@16,
(-11903)@16<=s L0x7fffffffd43c,L0x7fffffffd43c<s11903@16,
(-11903)@16<=s L0x7fffffffd43e,L0x7fffffffd43e<s11903@16,
(-12092)@16<=s L0x7fffffffd440,L0x7fffffffd440<s12092@16,
(-12092)@16<=s L0x7fffffffd442,L0x7fffffffd442<s12092@16,
(-12091)@16<=s L0x7fffffffd444,L0x7fffffffd444<s12091@16,
(-12091)@16<=s L0x7fffffffd446,L0x7fffffffd446<s12091@16,
(-12096)@16<=s L0x7fffffffd448,L0x7fffffffd448<s12096@16,
(-12096)@16<=s L0x7fffffffd44a,L0x7fffffffd44a<s12096@16,
(-12093)@16<=s L0x7fffffffd44c,L0x7fffffffd44c<s12093@16,
(-12093)@16<=s L0x7fffffffd44e,L0x7fffffffd44e<s12093@16,
(-12077)@16<=s L0x7fffffffd450,L0x7fffffffd450<s12077@16,
(-12077)@16<=s L0x7fffffffd452,L0x7fffffffd452<s12077@16,
(-12077)@16<=s L0x7fffffffd454,L0x7fffffffd454<s12077@16,
(-12077)@16<=s L0x7fffffffd456,L0x7fffffffd456<s12077@16,
(-12077)@16<=s L0x7fffffffd458,L0x7fffffffd458<s12077@16,
(-12077)@16<=s L0x7fffffffd45a,L0x7fffffffd45a<s12077@16,
(-12077)@16<=s L0x7fffffffd45c,L0x7fffffffd45c<s12077@16,
(-12077)@16<=s L0x7fffffffd45e,L0x7fffffffd45e<s12077@16
] prove with [ cuts [ 16 ] ];


(**************** CUT  22 *****************)

cut true && true;



(* vmovdqa 0x200(%rsi),%ymm4                       #! EA = L0x7fffffffd4e0; Value = 0x0366126b1213eb20; PC = 0x55555555ac2d *)
mov ymm4_0 L0x7fffffffd4e0;
mov ymm4_1 L0x7fffffffd4e2;
mov ymm4_2 L0x7fffffffd4e4;
mov ymm4_3 L0x7fffffffd4e6;
mov ymm4_4 L0x7fffffffd4e8;
mov ymm4_5 L0x7fffffffd4ea;
mov ymm4_6 L0x7fffffffd4ec;
mov ymm4_7 L0x7fffffffd4ee;
mov ymm4_8 L0x7fffffffd4f0;
mov ymm4_9 L0x7fffffffd4f2;
mov ymm4_a L0x7fffffffd4f4;
mov ymm4_b L0x7fffffffd4f6;
mov ymm4_c L0x7fffffffd4f8;
mov ymm4_d L0x7fffffffd4fa;
mov ymm4_e L0x7fffffffd4fc;
mov ymm4_f L0x7fffffffd4fe;
(* vmovdqa 0x220(%rsi),%ymm5                       #! EA = L0x7fffffffd500; Value = 0x008f0c87f04202e4; PC = 0x55555555ac35 *)
mov ymm5_0 L0x7fffffffd500;
mov ymm5_1 L0x7fffffffd502;
mov ymm5_2 L0x7fffffffd504;
mov ymm5_3 L0x7fffffffd506;
mov ymm5_4 L0x7fffffffd508;
mov ymm5_5 L0x7fffffffd50a;
mov ymm5_6 L0x7fffffffd50c;
mov ymm5_7 L0x7fffffffd50e;
mov ymm5_8 L0x7fffffffd510;
mov ymm5_9 L0x7fffffffd512;
mov ymm5_a L0x7fffffffd514;
mov ymm5_b L0x7fffffffd516;
mov ymm5_c L0x7fffffffd518;
mov ymm5_d L0x7fffffffd51a;
mov ymm5_e L0x7fffffffd51c;
mov ymm5_f L0x7fffffffd51e;
(* vmovdqa 0x240(%rsi),%ymm6                       #! EA = L0x7fffffffd520; Value = 0xfca907ed0fd204db; PC = 0x55555555ac3d *)
mov ymm6_0 L0x7fffffffd520;
mov ymm6_1 L0x7fffffffd522;
mov ymm6_2 L0x7fffffffd524;
mov ymm6_3 L0x7fffffffd526;
mov ymm6_4 L0x7fffffffd528;
mov ymm6_5 L0x7fffffffd52a;
mov ymm6_6 L0x7fffffffd52c;
mov ymm6_7 L0x7fffffffd52e;
mov ymm6_8 L0x7fffffffd530;
mov ymm6_9 L0x7fffffffd532;
mov ymm6_a L0x7fffffffd534;
mov ymm6_b L0x7fffffffd536;
mov ymm6_c L0x7fffffffd538;
mov ymm6_d L0x7fffffffd53a;
mov ymm6_e L0x7fffffffd53c;
mov ymm6_f L0x7fffffffd53e;
(* vmovdqa 0x260(%rsi),%ymm7                       #! EA = L0x7fffffffd540; Value = 0x02f602110c140afa; PC = 0x55555555ac45 *)
mov ymm7_0 L0x7fffffffd540;
mov ymm7_1 L0x7fffffffd542;
mov ymm7_2 L0x7fffffffd544;
mov ymm7_3 L0x7fffffffd546;
mov ymm7_4 L0x7fffffffd548;
mov ymm7_5 L0x7fffffffd54a;
mov ymm7_6 L0x7fffffffd54c;
mov ymm7_7 L0x7fffffffd54e;
mov ymm7_8 L0x7fffffffd550;
mov ymm7_9 L0x7fffffffd552;
mov ymm7_a L0x7fffffffd554;
mov ymm7_b L0x7fffffffd556;
mov ymm7_c L0x7fffffffd558;
mov ymm7_d L0x7fffffffd55a;
mov ymm7_e L0x7fffffffd55c;
mov ymm7_f L0x7fffffffd55e;
(* vmovdqa 0x280(%rsi),%ymm8                       #! EA = L0x7fffffffd560; Value = 0x07831104fc3f11de; PC = 0x55555555ac4d *)
mov ymm8_0 L0x7fffffffd560;
mov ymm8_1 L0x7fffffffd562;
mov ymm8_2 L0x7fffffffd564;
mov ymm8_3 L0x7fffffffd566;
mov ymm8_4 L0x7fffffffd568;
mov ymm8_5 L0x7fffffffd56a;
mov ymm8_6 L0x7fffffffd56c;
mov ymm8_7 L0x7fffffffd56e;
mov ymm8_8 L0x7fffffffd570;
mov ymm8_9 L0x7fffffffd572;
mov ymm8_a L0x7fffffffd574;
mov ymm8_b L0x7fffffffd576;
mov ymm8_c L0x7fffffffd578;
mov ymm8_d L0x7fffffffd57a;
mov ymm8_e L0x7fffffffd57c;
mov ymm8_f L0x7fffffffd57e;
(* vmovdqa 0x2a0(%rsi),%ymm9                       #! EA = L0x7fffffffd580; Value = 0xedcd000e1375f042; PC = 0x55555555ac55 *)
mov ymm9_0 L0x7fffffffd580;
mov ymm9_1 L0x7fffffffd582;
mov ymm9_2 L0x7fffffffd584;
mov ymm9_3 L0x7fffffffd586;
mov ymm9_4 L0x7fffffffd588;
mov ymm9_5 L0x7fffffffd58a;
mov ymm9_6 L0x7fffffffd58c;
mov ymm9_7 L0x7fffffffd58e;
mov ymm9_8 L0x7fffffffd590;
mov ymm9_9 L0x7fffffffd592;
mov ymm9_a L0x7fffffffd594;
mov ymm9_b L0x7fffffffd596;
mov ymm9_c L0x7fffffffd598;
mov ymm9_d L0x7fffffffd59a;
mov ymm9_e L0x7fffffffd59c;
mov ymm9_f L0x7fffffffd59e;
(* vmovdqa 0x2c0(%rsi),%ymm10                      #! EA = L0x7fffffffd5a0; Value = 0x03d6f2b90af802ce; PC = 0x55555555ac5d *)
mov ymm10_0 L0x7fffffffd5a0;
mov ymm10_1 L0x7fffffffd5a2;
mov ymm10_2 L0x7fffffffd5a4;
mov ymm10_3 L0x7fffffffd5a6;
mov ymm10_4 L0x7fffffffd5a8;
mov ymm10_5 L0x7fffffffd5aa;
mov ymm10_6 L0x7fffffffd5ac;
mov ymm10_7 L0x7fffffffd5ae;
mov ymm10_8 L0x7fffffffd5b0;
mov ymm10_9 L0x7fffffffd5b2;
mov ymm10_a L0x7fffffffd5b4;
mov ymm10_b L0x7fffffffd5b6;
mov ymm10_c L0x7fffffffd5b8;
mov ymm10_d L0x7fffffffd5ba;
mov ymm10_e L0x7fffffffd5bc;
mov ymm10_f L0x7fffffffd5be;
(* vmovdqa 0x2e0(%rsi),%ymm11                      #! EA = L0x7fffffffd5c0; Value = 0x1484f81402750d75; PC = 0x55555555ac65 *)
mov ymm11_0 L0x7fffffffd5c0;
mov ymm11_1 L0x7fffffffd5c2;
mov ymm11_2 L0x7fffffffd5c4;
mov ymm11_3 L0x7fffffffd5c6;
mov ymm11_4 L0x7fffffffd5c8;
mov ymm11_5 L0x7fffffffd5ca;
mov ymm11_6 L0x7fffffffd5cc;
mov ymm11_7 L0x7fffffffd5ce;
mov ymm11_8 L0x7fffffffd5d0;
mov ymm11_9 L0x7fffffffd5d2;
mov ymm11_a L0x7fffffffd5d4;
mov ymm11_b L0x7fffffffd5d6;
mov ymm11_c L0x7fffffffd5d8;
mov ymm11_d L0x7fffffffd5da;
mov ymm11_e L0x7fffffffd5dc;
mov ymm11_f L0x7fffffffd5de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555ac6d *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555ac71 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555ac75 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555ac79 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555ac7d *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555ac82 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555ac87 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555ac8c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x1f0(%rdx),%ymm1                #! EA = L0x555555561310; Value = 0xbca093095de57b46; PC = 0x55555555ac91 *)
mov ymm1_0 L0x555555561310;
mov ymm1_1 L0x555555561312;
mov ymm1_2 L0x555555561314;
mov ymm1_3 L0x555555561316;
mov ymm1_4 L0x555555561318;
mov ymm1_5 L0x55555556131a;
mov ymm1_6 L0x55555556131c;
mov ymm1_7 L0x55555556131e;
mov ymm1_8 L0x555555561310;
mov ymm1_9 L0x555555561312;
mov ymm1_a L0x555555561314;
mov ymm1_b L0x555555561316;
mov ymm1_c L0x555555561318;
mov ymm1_d L0x55555556131a;
mov ymm1_e L0x55555556131c;
mov ymm1_f L0x55555556131e;
(* vbroadcasti128 0x3f0(%rdx),%ymm2                #! EA = L0x555555561510; Value = 0xfca00d09efe5f746; PC = 0x55555555ac9a *)
mov ymm2_0 L0x555555561510;
mov ymm2_1 L0x555555561512;
mov ymm2_2 L0x555555561514;
mov ymm2_3 L0x555555561516;
mov ymm2_4 L0x555555561518;
mov ymm2_5 L0x55555556151a;
mov ymm2_6 L0x55555556151c;
mov ymm2_7 L0x55555556151e;
mov ymm2_8 L0x555555561510;
mov ymm2_9 L0x555555561512;
mov ymm2_a L0x555555561514;
mov ymm2_b L0x555555561516;
mov ymm2_c L0x555555561518;
mov ymm2_d L0x55555556151a;
mov ymm2_e L0x55555556151c;
mov ymm2_f L0x55555556151e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555aca3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555aca8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555acad *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555acb1 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555acb5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555acb9 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x1e0(%rdx),%ymm1                #! EA = L0x555555561300; Value = 0x030c6f7dcc2c2dce; PC = 0x55555555acbd *)
mov ymm1_0 L0x555555561300;
mov ymm1_1 L0x555555561302;
mov ymm1_2 L0x555555561304;
mov ymm1_3 L0x555555561306;
mov ymm1_4 L0x555555561308;
mov ymm1_5 L0x55555556130a;
mov ymm1_6 L0x55555556130c;
mov ymm1_7 L0x55555556130e;
mov ymm1_8 L0x555555561300;
mov ymm1_9 L0x555555561302;
mov ymm1_a L0x555555561304;
mov ymm1_b L0x555555561306;
mov ymm1_c L0x555555561308;
mov ymm1_d L0x55555556130a;
mov ymm1_e L0x55555556130c;
mov ymm1_f L0x55555556130e;
(* vbroadcasti128 0x3e0(%rdx),%ymm2                #! EA = L0x555555561500; Value = 0xfb0cf17d042cf9ce; PC = 0x55555555acc6 *)
mov ymm2_0 L0x555555561500;
mov ymm2_1 L0x555555561502;
mov ymm2_2 L0x555555561504;
mov ymm2_3 L0x555555561506;
mov ymm2_4 L0x555555561508;
mov ymm2_5 L0x55555556150a;
mov ymm2_6 L0x55555556150c;
mov ymm2_7 L0x55555556150e;
mov ymm2_8 L0x555555561500;
mov ymm2_9 L0x555555561502;
mov ymm2_a L0x555555561504;
mov ymm2_b L0x555555561506;
mov ymm2_c L0x555555561508;
mov ymm2_d L0x55555556150a;
mov ymm2_e L0x55555556150c;
mov ymm2_f L0x55555556150e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555accf *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555acd4 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555acd9 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555acdd *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ace1 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555ace5 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x1d0(%rdx),%ymm1                #! EA = L0x5555555612f0; Value = 0x7aba08121eb01cbc; PC = 0x55555555ace9 *)
mov ymm1_0 L0x5555555612f0;
mov ymm1_1 L0x5555555612f2;
mov ymm1_2 L0x5555555612f4;
mov ymm1_3 L0x5555555612f6;
mov ymm1_4 L0x5555555612f8;
mov ymm1_5 L0x5555555612fa;
mov ymm1_6 L0x5555555612fc;
mov ymm1_7 L0x5555555612fe;
mov ymm1_8 L0x5555555612f0;
mov ymm1_9 L0x5555555612f2;
mov ymm1_a L0x5555555612f4;
mov ymm1_b L0x5555555612f6;
mov ymm1_c L0x5555555612f8;
mov ymm1_d L0x5555555612fa;
mov ymm1_e L0x5555555612fc;
mov ymm1_f L0x5555555612fe;
(* vbroadcasti128 0x3d0(%rdx),%ymm2                #! EA = L0x5555555614f0; Value = 0xfebafc12feb0f4bc; PC = 0x55555555acf2 *)
mov ymm2_0 L0x5555555614f0;
mov ymm2_1 L0x5555555614f2;
mov ymm2_2 L0x5555555614f4;
mov ymm2_3 L0x5555555614f6;
mov ymm2_4 L0x5555555614f8;
mov ymm2_5 L0x5555555614fa;
mov ymm2_6 L0x5555555614fc;
mov ymm2_7 L0x5555555614fe;
mov ymm2_8 L0x5555555614f0;
mov ymm2_9 L0x5555555614f2;
mov ymm2_a L0x5555555614f4;
mov ymm2_b L0x5555555614f6;
mov ymm2_c L0x5555555614f8;
mov ymm2_d L0x5555555614fa;
mov ymm2_e L0x5555555614fc;
mov ymm2_f L0x5555555614fe;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555acfb *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ad00 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555ad05 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555ad09 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ad0d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555ad11 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x1c0(%rdx),%ymm1                #! EA = L0x5555555612e0; Value = 0xd1bedd9fe4be00b1; PC = 0x55555555ad16 *)
mov ymm1_0 L0x5555555612e0;
mov ymm1_1 L0x5555555612e2;
mov ymm1_2 L0x5555555612e4;
mov ymm1_3 L0x5555555612e6;
mov ymm1_4 L0x5555555612e8;
mov ymm1_5 L0x5555555612ea;
mov ymm1_6 L0x5555555612ec;
mov ymm1_7 L0x5555555612ee;
mov ymm1_8 L0x5555555612e0;
mov ymm1_9 L0x5555555612e2;
mov ymm1_a L0x5555555612e4;
mov ymm1_b L0x5555555612e6;
mov ymm1_c L0x5555555612e8;
mov ymm1_d L0x5555555612ea;
mov ymm1_e L0x5555555612ec;
mov ymm1_f L0x5555555612ee;
(* vbroadcasti128 0x3c0(%rdx),%ymm2                #! EA = L0x5555555614e0; Value = 0xfdbef39f10be0ab1; PC = 0x55555555ad1f *)
mov ymm2_0 L0x5555555614e0;
mov ymm2_1 L0x5555555614e2;
mov ymm2_2 L0x5555555614e4;
mov ymm2_3 L0x5555555614e6;
mov ymm2_4 L0x5555555614e8;
mov ymm2_5 L0x5555555614ea;
mov ymm2_6 L0x5555555614ec;
mov ymm2_7 L0x5555555614ee;
mov ymm2_8 L0x5555555614e0;
mov ymm2_9 L0x5555555614e2;
mov ymm2_a L0x5555555614e4;
mov ymm2_b L0x5555555614e6;
mov ymm2_c L0x5555555614e8;
mov ymm2_d L0x5555555614ea;
mov ymm2_e L0x5555555614ec;
mov ymm2_f L0x5555555614ee;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ad28 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ad2d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555ad32 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555ad36 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ad3a *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555ad3e *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555ad43 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555ad48 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555ad4d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555ad51 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555ad55 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555ad5a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555ad5f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555ad63 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555ad67 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555ad6c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555ad71 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555ad76 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555ad7b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555ad80 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555ad85 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555ad8a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555ad8f *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555ad93 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555ad97 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555ad9b *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555ad9f *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555ada4 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555ada9 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555adae *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x178(%rdx),%ymm1                  #! EA = L0x555555561298; Value = 0xc220023dce5d95f0; PC = 0x55555555adb3 *)
mov ymm1_0 L0x555555561298;
mov ymm1_1 L0x55555556129a;
mov ymm1_2 L0x55555556129c;
mov ymm1_3 L0x55555556129e;
mov ymm1_4 L0x555555561298;
mov ymm1_5 L0x55555556129a;
mov ymm1_6 L0x55555556129c;
mov ymm1_7 L0x55555556129e;
mov ymm1_8 L0x555555561298;
mov ymm1_9 L0x55555556129a;
mov ymm1_a L0x55555556129c;
mov ymm1_b L0x55555556129e;
mov ymm1_c L0x555555561298;
mov ymm1_d L0x55555556129a;
mov ymm1_e L0x55555556129c;
mov ymm1_f L0x55555556129e;
(* vpbroadcastq 0x378(%rdx),%ymm2                  #! EA = L0x555555561498; Value = 0x0220043d105df5f0; PC = 0x55555555adbc *)
mov ymm2_0 L0x555555561498;
mov ymm2_1 L0x55555556149a;
mov ymm2_2 L0x55555556149c;
mov ymm2_3 L0x55555556149e;
mov ymm2_4 L0x555555561498;
mov ymm2_5 L0x55555556149a;
mov ymm2_6 L0x55555556149c;
mov ymm2_7 L0x55555556149e;
mov ymm2_8 L0x555555561498;
mov ymm2_9 L0x55555556149a;
mov ymm2_a L0x55555556149c;
mov ymm2_b L0x55555556149e;
mov ymm2_c L0x555555561498;
mov ymm2_d L0x55555556149a;
mov ymm2_e L0x55555556149c;
mov ymm2_f L0x55555556149e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555adc5 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555adca *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555adcf *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555add3 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555add7 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555addb *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x170(%rdx),%ymm1                  #! EA = L0x555555561290; Value = 0x18ed15f3860fbeac; PC = 0x55555555addf *)
mov ymm1_0 L0x555555561290;
mov ymm1_1 L0x555555561292;
mov ymm1_2 L0x555555561294;
mov ymm1_3 L0x555555561296;
mov ymm1_4 L0x555555561290;
mov ymm1_5 L0x555555561292;
mov ymm1_6 L0x555555561294;
mov ymm1_7 L0x555555561296;
mov ymm1_8 L0x555555561290;
mov ymm1_9 L0x555555561292;
mov ymm1_a L0x555555561294;
mov ymm1_b L0x555555561296;
mov ymm1_c L0x555555561290;
mov ymm1_d L0x555555561292;
mov ymm1_e L0x555555561294;
mov ymm1_f L0x555555561296;
(* vpbroadcastq 0x370(%rdx),%ymm2                  #! EA = L0x555555561490; Value = 0xfaedf3f3fc0ff6ac; PC = 0x55555555ade8 *)
mov ymm2_0 L0x555555561490;
mov ymm2_1 L0x555555561492;
mov ymm2_2 L0x555555561494;
mov ymm2_3 L0x555555561496;
mov ymm2_4 L0x555555561490;
mov ymm2_5 L0x555555561492;
mov ymm2_6 L0x555555561494;
mov ymm2_7 L0x555555561496;
mov ymm2_8 L0x555555561490;
mov ymm2_9 L0x555555561492;
mov ymm2_a L0x555555561494;
mov ymm2_b L0x555555561496;
mov ymm2_c L0x555555561490;
mov ymm2_d L0x555555561492;
mov ymm2_e L0x555555561494;
mov ymm2_f L0x555555561496;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555adf1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555adf6 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555adfb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555adff *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae03 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555ae07 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x168(%rdx),%ymm1                  #! EA = L0x555555561288; Value = 0x5ce5f2b1500a8458; PC = 0x55555555ae0b *)
mov ymm1_0 L0x555555561288;
mov ymm1_1 L0x55555556128a;
mov ymm1_2 L0x55555556128c;
mov ymm1_3 L0x55555556128e;
mov ymm1_4 L0x555555561288;
mov ymm1_5 L0x55555556128a;
mov ymm1_6 L0x55555556128c;
mov ymm1_7 L0x55555556128e;
mov ymm1_8 L0x555555561288;
mov ymm1_9 L0x55555556128a;
mov ymm1_a L0x55555556128c;
mov ymm1_b L0x55555556128e;
mov ymm1_c L0x555555561288;
mov ymm1_d L0x55555556128a;
mov ymm1_e L0x55555556128c;
mov ymm1_f L0x55555556128e;
(* vpbroadcastq 0x368(%rdx),%ymm2                  #! EA = L0x555555561488; Value = 0xeee5fcb1f40af458; PC = 0x55555555ae14 *)
mov ymm2_0 L0x555555561488;
mov ymm2_1 L0x55555556148a;
mov ymm2_2 L0x55555556148c;
mov ymm2_3 L0x55555556148e;
mov ymm2_4 L0x555555561488;
mov ymm2_5 L0x55555556148a;
mov ymm2_6 L0x55555556148c;
mov ymm2_7 L0x55555556148e;
mov ymm2_8 L0x555555561488;
mov ymm2_9 L0x55555556148a;
mov ymm2_a L0x55555556148c;
mov ymm2_b L0x55555556148e;
mov ymm2_c L0x555555561488;
mov ymm2_d L0x55555556148a;
mov ymm2_e L0x55555556148c;
mov ymm2_f L0x55555556148e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ae1d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ae22 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555ae27 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555ae2b *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae2f *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555ae33 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x160(%rdx),%ymm1                  #! EA = L0x555555561280; Value = 0x3d78e4f41686ebfa; PC = 0x55555555ae38 *)
mov ymm1_0 L0x555555561280;
mov ymm1_1 L0x555555561282;
mov ymm1_2 L0x555555561284;
mov ymm1_3 L0x555555561286;
mov ymm1_4 L0x555555561280;
mov ymm1_5 L0x555555561282;
mov ymm1_6 L0x555555561284;
mov ymm1_7 L0x555555561286;
mov ymm1_8 L0x555555561280;
mov ymm1_9 L0x555555561282;
mov ymm1_a L0x555555561284;
mov ymm1_b L0x555555561286;
mov ymm1_c L0x555555561280;
mov ymm1_d L0x555555561282;
mov ymm1_e L0x555555561284;
mov ymm1_f L0x555555561286;
(* vpbroadcastq 0x360(%rdx),%ymm2                  #! EA = L0x555555561480; Value = 0xed78ecf41286effa; PC = 0x55555555ae41 *)
mov ymm2_0 L0x555555561480;
mov ymm2_1 L0x555555561482;
mov ymm2_2 L0x555555561484;
mov ymm2_3 L0x555555561486;
mov ymm2_4 L0x555555561480;
mov ymm2_5 L0x555555561482;
mov ymm2_6 L0x555555561484;
mov ymm2_7 L0x555555561486;
mov ymm2_8 L0x555555561480;
mov ymm2_9 L0x555555561482;
mov ymm2_a L0x555555561484;
mov ymm2_b L0x555555561486;
mov ymm2_c L0x555555561480;
mov ymm2_d L0x555555561482;
mov ymm2_e L0x555555561484;
mov ymm2_f L0x555555561486;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ae4a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ae4f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555ae54 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555ae58 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae5c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555ae60 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555ae65 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555ae6d *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555ae75 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555ae79 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae7d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555ae81 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555ae85 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555ae89 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae8d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555ae91 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555ae95 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555ae99 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555ae9d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555aea1 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555aea5 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555aea9 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555aead *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555aeb1 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555aeb5 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555aeba *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555aebf *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555aec3 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555aec7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555aecc *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555aed1 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555aed5 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555aed9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555aede *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555aee3 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555aee8 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555aeed *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555aef2 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555aef7 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555aefc *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555af01 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555af05 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555af09 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555af0d *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555af11 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555af16 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555af1b *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555af20 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x13c(%rdx),%ymm1                  #! EA = L0x55555556125c; Value = 0xa62111ed2da347bb; PC = 0x55555555af25 *)
mov ymm1_0 L0x55555556125c;
mov ymm1_1 L0x55555556125e;
mov ymm1_2 L0x55555556125c;
mov ymm1_3 L0x55555556125e;
mov ymm1_4 L0x55555556125c;
mov ymm1_5 L0x55555556125e;
mov ymm1_6 L0x55555556125c;
mov ymm1_7 L0x55555556125e;
mov ymm1_8 L0x55555556125c;
mov ymm1_9 L0x55555556125e;
mov ymm1_a L0x55555556125c;
mov ymm1_b L0x55555556125e;
mov ymm1_c L0x55555556125c;
mov ymm1_d L0x55555556125e;
mov ymm1_e L0x55555556125c;
mov ymm1_f L0x55555556125e;
(* vpbroadcastd 0x33c(%rdx),%ymm2                  #! EA = L0x55555556145c; Value = 0x1021f3edeba3f5bb; PC = 0x55555555af2e *)
mov ymm2_0 L0x55555556145c;
mov ymm2_1 L0x55555556145e;
mov ymm2_2 L0x55555556145c;
mov ymm2_3 L0x55555556145e;
mov ymm2_4 L0x55555556145c;
mov ymm2_5 L0x55555556145e;
mov ymm2_6 L0x55555556145c;
mov ymm2_7 L0x55555556145e;
mov ymm2_8 L0x55555556145c;
mov ymm2_9 L0x55555556145e;
mov ymm2_a L0x55555556145c;
mov ymm2_b L0x55555556145e;
mov ymm2_c L0x55555556145c;
mov ymm2_d L0x55555556145e;
mov ymm2_e L0x55555556145c;
mov ymm2_f L0x55555556145e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555af37 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555af3c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555af41 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555af45 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555af49 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555af4d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x138(%rdx),%ymm1                  #! EA = L0x555555561258; Value = 0x2da347bbf1c9c601; PC = 0x55555555af51 *)
mov ymm1_0 L0x555555561258;
mov ymm1_1 L0x55555556125a;
mov ymm1_2 L0x555555561258;
mov ymm1_3 L0x55555556125a;
mov ymm1_4 L0x555555561258;
mov ymm1_5 L0x55555556125a;
mov ymm1_6 L0x555555561258;
mov ymm1_7 L0x55555556125a;
mov ymm1_8 L0x555555561258;
mov ymm1_9 L0x55555556125a;
mov ymm1_a L0x555555561258;
mov ymm1_b L0x55555556125a;
mov ymm1_c L0x555555561258;
mov ymm1_d L0x55555556125a;
mov ymm1_e L0x555555561258;
mov ymm1_f L0x55555556125a;
(* vpbroadcastd 0x338(%rdx),%ymm2                  #! EA = L0x555555561458; Value = 0xeba3f5bbebc9f001; PC = 0x55555555af5a *)
mov ymm2_0 L0x555555561458;
mov ymm2_1 L0x55555556145a;
mov ymm2_2 L0x555555561458;
mov ymm2_3 L0x55555556145a;
mov ymm2_4 L0x555555561458;
mov ymm2_5 L0x55555556145a;
mov ymm2_6 L0x555555561458;
mov ymm2_7 L0x55555556145a;
mov ymm2_8 L0x555555561458;
mov ymm2_9 L0x55555556145a;
mov ymm2_a L0x555555561458;
mov ymm2_b L0x55555556145a;
mov ymm2_c L0x555555561458;
mov ymm2_d L0x55555556145a;
mov ymm2_e L0x555555561458;
mov ymm2_f L0x55555556145a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555af63 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555af68 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555af6d *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555af71 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555af75 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555af79 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x134(%rdx),%ymm1                  #! EA = L0x555555561254; Value = 0xf1c9c601f0ab2711; PC = 0x55555555af7d *)
mov ymm1_0 L0x555555561254;
mov ymm1_1 L0x555555561256;
mov ymm1_2 L0x555555561254;
mov ymm1_3 L0x555555561256;
mov ymm1_4 L0x555555561254;
mov ymm1_5 L0x555555561256;
mov ymm1_6 L0x555555561254;
mov ymm1_7 L0x555555561256;
mov ymm1_8 L0x555555561254;
mov ymm1_9 L0x555555561256;
mov ymm1_a L0x555555561254;
mov ymm1_b L0x555555561256;
mov ymm1_c L0x555555561254;
mov ymm1_d L0x555555561256;
mov ymm1_e L0x555555561254;
mov ymm1_f L0x555555561256;
(* vpbroadcastd 0x334(%rdx),%ymm2                  #! EA = L0x555555561454; Value = 0xebc9f001feabf111; PC = 0x55555555af86 *)
mov ymm2_0 L0x555555561454;
mov ymm2_1 L0x555555561456;
mov ymm2_2 L0x555555561454;
mov ymm2_3 L0x555555561456;
mov ymm2_4 L0x555555561454;
mov ymm2_5 L0x555555561456;
mov ymm2_6 L0x555555561454;
mov ymm2_7 L0x555555561456;
mov ymm2_8 L0x555555561454;
mov ymm2_9 L0x555555561456;
mov ymm2_a L0x555555561454;
mov ymm2_b L0x555555561456;
mov ymm2_c L0x555555561454;
mov ymm2_d L0x555555561456;
mov ymm2_e L0x555555561454;
mov ymm2_f L0x555555561456;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555af8f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555af94 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555af99 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555af9d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555afa1 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555afa5 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x130(%rdx),%ymm1                  #! EA = L0x555555561250; Value = 0xf0ab2711fcc3398b; PC = 0x55555555afaa *)
mov ymm1_0 L0x555555561250;
mov ymm1_1 L0x555555561252;
mov ymm1_2 L0x555555561250;
mov ymm1_3 L0x555555561252;
mov ymm1_4 L0x555555561250;
mov ymm1_5 L0x555555561252;
mov ymm1_6 L0x555555561250;
mov ymm1_7 L0x555555561252;
mov ymm1_8 L0x555555561250;
mov ymm1_9 L0x555555561252;
mov ymm1_a L0x555555561250;
mov ymm1_b L0x555555561252;
mov ymm1_c L0x555555561250;
mov ymm1_d L0x555555561252;
mov ymm1_e L0x555555561250;
mov ymm1_f L0x555555561252;
(* vpbroadcastd 0x330(%rdx),%ymm2                  #! EA = L0x555555561450; Value = 0xfeabf111fac3078b; PC = 0x55555555afb3 *)
mov ymm2_0 L0x555555561450;
mov ymm2_1 L0x555555561452;
mov ymm2_2 L0x555555561450;
mov ymm2_3 L0x555555561452;
mov ymm2_4 L0x555555561450;
mov ymm2_5 L0x555555561452;
mov ymm2_6 L0x555555561450;
mov ymm2_7 L0x555555561452;
mov ymm2_8 L0x555555561450;
mov ymm2_9 L0x555555561452;
mov ymm2_a L0x555555561450;
mov ymm2_b L0x555555561452;
mov ymm2_c L0x555555561450;
mov ymm2_d L0x555555561452;
mov ymm2_e L0x555555561450;
mov ymm2_f L0x555555561452;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555afbc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555afc1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555afc6 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555afca *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555afce *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555afd2 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555afd7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555afdc *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555afe1 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555afe5 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555afe9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555afee *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555aff3 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555aff7 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555affb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555b000 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555b005 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555b00a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555b00f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555b014 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555b019 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555b01e *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x60d5(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555b023 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555b02b *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555b031 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555b036 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555b03c *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555b041 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555b047 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555b04c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555b052 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555b057 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555b05d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555b062 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555b068 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555b06d *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555b073 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555b078 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555b07e *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;




(**************** LEVELS 0-2, 2 *****************)




(**************** CUT  23 *****************)

cut and [
eqmod (8*inp_poly080**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 100],
eqmod (8*inp_poly081**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10653],
eqmod (8*inp_poly082**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2726],
eqmod (8*inp_poly083**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8027],
eqmod (8*inp_poly084**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10594],
eqmod (8*inp_poly085**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 159],
eqmod (8*inp_poly086**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4053],
eqmod (8*inp_poly087**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6700]
,
eqmod (8*inp_poly088**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6448],
eqmod (8*inp_poly089**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4305],
eqmod (8*inp_poly08a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2004],
eqmod (8*inp_poly08b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8749],
eqmod (8*inp_poly08c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5232],
eqmod (8*inp_poly08d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5521],
eqmod (8*inp_poly08e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8857],
eqmod (8*inp_poly08f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1896]
,
eqmod (8*inp_poly090**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7870],
eqmod (8*inp_poly091**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2883],
eqmod (8*inp_poly092**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5928],
eqmod (8*inp_poly093**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4825],
eqmod (8*inp_poly094**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10068],
eqmod (8*inp_poly095**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 685],
eqmod (8*inp_poly096**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10360],
eqmod (8*inp_poly097**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 393]
,
eqmod (8*inp_poly098**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10669],
eqmod (8*inp_poly099**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 84],
eqmod (8*inp_poly09a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 721],
eqmod (8*inp_poly09b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10032],
eqmod (8*inp_poly09c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5295],
eqmod (8*inp_poly09d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5458],
eqmod (8*inp_poly09e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5628],
eqmod (8*inp_poly09f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5125]
,
eqmod (8*inp_poly0a0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 331],
eqmod (8*inp_poly0a1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10422],
eqmod (8*inp_poly0a2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8808],
eqmod (8*inp_poly0a3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1945],
eqmod (8*inp_poly0a4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9474],
eqmod (8*inp_poly0a5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1279],
eqmod (8*inp_poly0a6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10082],
eqmod (8*inp_poly0a7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 671]
,
eqmod (8*inp_poly0a8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 267],
eqmod (8*inp_poly0a9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10486],
eqmod (8*inp_poly0aa**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5773],
eqmod (8*inp_poly0ab**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4980],
eqmod (8*inp_poly0ac**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10436],
eqmod (8*inp_poly0ad**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 317],
eqmod (8*inp_poly0ae**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3617],
eqmod (8*inp_poly0af**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7136]
,
eqmod (8*inp_poly0b0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5619],
eqmod (8*inp_poly0b1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5134],
eqmod (8*inp_poly0b2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2847],
eqmod (8*inp_poly0b3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7906],
eqmod (8*inp_poly0b4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7948],
eqmod (8*inp_poly0b5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2805],
eqmod (8*inp_poly0b6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10635],
eqmod (8*inp_poly0b7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 118]
,
eqmod (8*inp_poly0b8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7034],
eqmod (8*inp_poly0b9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3719],
eqmod (8*inp_poly0ba**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5935],
eqmod (8*inp_poly0bb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4818],
eqmod (8*inp_poly0bc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10537],
eqmod (8*inp_poly0bd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 216],
eqmod (8*inp_poly0be**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1854],
eqmod (8*inp_poly0bf**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8899]
] prove with [ cuts [ 2 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-11287)@16<=s ymm3_4,ymm3_4<s11287@16,(-11287)@16<=s ymm3_5,ymm3_5<s11287@16,
(-11001)@16<=s ymm3_6,ymm3_6<s11001@16,(-11001)@16<=s ymm3_7,ymm3_7<s11001@16,
( -6244)@16<=s ymm3_8,ymm3_8<s 6244@16,( -6244)@16<=s ymm3_9,ymm3_9<s 6244@16,
( -6233)@16<=s ymm3_a,ymm3_a<s 6233@16,( -6233)@16<=s ymm3_b,ymm3_b<s 6233@16,
( -6244)@16<=s ymm3_c,ymm3_c<s 6244@16,( -6244)@16<=s ymm3_d,ymm3_d<s 6244@16,
( -6233)@16<=s ymm3_e,ymm3_e<s 6233@16,( -6233)@16<=s ymm3_f,ymm3_f<s 6233@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-13023)@16<=s ymm5_4,ymm5_4<s13023@16,(-13023)@16<=s ymm5_5,ymm5_5<s13023@16,
(-11891)@16<=s ymm5_6,ymm5_6<s11891@16,(-11891)@16<=s ymm5_7,ymm5_7<s11891@16,
( -5807)@16<=s ymm5_8,ymm5_8<s 5807@16,( -5807)@16<=s ymm5_9,ymm5_9<s 5807@16,
( -5793)@16<=s ymm5_a,ymm5_a<s 5793@16,( -5793)@16<=s ymm5_b,ymm5_b<s 5793@16,
( -5889)@16<=s ymm5_c,ymm5_c<s 5889@16,( -5889)@16<=s ymm5_d,ymm5_d<s 5889@16,
( -5841)@16<=s ymm5_e,ymm5_e<s 5841@16,( -5841)@16<=s ymm5_f,ymm5_f<s 5841@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12230)@16<=s ymm4_4,ymm4_4<s12230@16,(-12230)@16<=s ymm4_5,ymm4_5<s12230@16,
(-11504)@16<=s ymm4_6,ymm4_6<s11504@16,(-11504)@16<=s ymm4_7,ymm4_7<s11504@16,
( -6166)@16<=s ymm4_8,ymm4_8<s 6166@16,( -6166)@16<=s ymm4_9,ymm4_9<s 6166@16,
( -6133)@16<=s ymm4_a,ymm4_a<s 6133@16,( -6133)@16<=s ymm4_b,ymm4_b<s 6133@16,
( -6285)@16<=s ymm4_c,ymm4_c<s 6285@16,( -6285)@16<=s ymm4_d,ymm4_d<s 6285@16,
( -6264)@16<=s ymm4_e,ymm4_e<s 6264@16,( -6264)@16<=s ymm4_f,ymm4_f<s 6264@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-11877)@16<=s ymm7_4,ymm7_4<s11877@16,(-11877)@16<=s ymm7_5,ymm7_5<s11877@16,
(-11295)@16<=s ymm7_6,ymm7_6<s11295@16,(-11295)@16<=s ymm7_7,ymm7_7<s11295@16,
( -6069)@16<=s ymm7_8,ymm7_8<s 6069@16,( -6069)@16<=s ymm7_9,ymm7_9<s 6069@16,
( -6025)@16<=s ymm7_a,ymm7_a<s 6025@16,( -6025)@16<=s ymm7_b,ymm7_b<s 6025@16,
( -6084)@16<=s ymm7_c,ymm7_c<s 6084@16,( -6084)@16<=s ymm7_d,ymm7_d<s 6084@16,
( -6069)@16<=s ymm7_e,ymm7_e<s 6069@16,( -6069)@16<=s ymm7_f,ymm7_f<s 6069@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-12514)@16<=s ymm6_4,ymm6_4<s12514@16,(-12514)@16<=s ymm6_5,ymm6_5<s12514@16,
(-11615)@16<=s ymm6_6,ymm6_6<s11615@16,(-11615)@16<=s ymm6_7,ymm6_7<s11615@16,
( -5429)@16<=s ymm6_8,ymm6_8<s 5429@16,( -5429)@16<=s ymm6_9,ymm6_9<s 5429@16,
( -5424)@16<=s ymm6_a,ymm6_a<s 5424@16,( -5424)@16<=s ymm6_b,ymm6_b<s 5424@16,
( -5439)@16<=s ymm6_c,ymm6_c<s 5439@16,( -5439)@16<=s ymm6_d,ymm6_d<s 5439@16,
( -5429)@16<=s ymm6_e,ymm6_e<s 5429@16,( -5429)@16<=s ymm6_f,ymm6_f<s 5429@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-12768)@16<=s ymm9_4,ymm9_4<s12768@16,(-12768)@16<=s ymm9_5,ymm9_5<s12768@16,
(-11737)@16<=s ymm9_6,ymm9_6<s11737@16,(-11737)@16<=s ymm9_7,ymm9_7<s11737@16,
( -5998)@16<=s ymm9_8,ymm9_8<s 5998@16,( -5998)@16<=s ymm9_9,ymm9_9<s 5998@16,
( -5966)@16<=s ymm9_a,ymm9_a<s 5966@16,( -5966)@16<=s ymm9_b,ymm9_b<s 5966@16,
( -6099)@16<=s ymm9_c,ymm9_c<s 6099@16,( -6099)@16<=s ymm9_d,ymm9_d<s 6099@16,
( -6035)@16<=s ymm9_e,ymm9_e<s 6035@16,( -6035)@16<=s ymm9_f,ymm9_f<s 6035@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-14000)@16<=s ymm8_4,ymm8_4<s14000@16,(-14000)@16<=s ymm8_5,ymm8_5<s14000@16,
(-12321)@16<=s ymm8_6,ymm8_6<s12321@16,(-12321)@16<=s ymm8_7,ymm8_7<s12321@16,
( -5594)@16<=s ymm8_8,ymm8_8<s 5594@16,( -5594)@16<=s ymm8_9,ymm8_9<s 5594@16,
( -5594)@16<=s ymm8_a,ymm8_a<s 5594@16,( -5594)@16<=s ymm8_b,ymm8_b<s 5594@16,
( -5655)@16<=s ymm8_c,ymm8_c<s 5655@16,( -5655)@16<=s ymm8_d,ymm8_d<s 5655@16,
( -5620)@16<=s ymm8_e,ymm8_e<s 5620@16,( -5620)@16<=s ymm8_f,ymm8_f<s 5620@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-13720)@16<=s ymm11_4,ymm11_4<s13720@16,(-13720)@16<=s ymm11_5,ymm11_5<s13720@16,
(-12240)@16<=s ymm11_6,ymm11_6<s12240@16,(-12240)@16<=s ymm11_7,ymm11_7<s12240@16,
( -5681)@16<=s ymm11_8,ymm11_8<s 5681@16,( -5681)@16<=s ymm11_9,ymm11_9<s 5681@16,
( -5681)@16<=s ymm11_a,ymm11_a<s 5681@16,( -5681)@16<=s ymm11_b,ymm11_b<s 5681@16,
( -5758)@16<=s ymm11_c,ymm11_c<s 5758@16,( -5758)@16<=s ymm11_d,ymm11_d<s 5758@16,
( -5724)@16<=s ymm11_e,ymm11_e<s 5724@16,( -5724)@16<=s ymm11_f,ymm11_f<s 5724@16
] prove with [ precondition ];



(**************** CUT  24 *****************)

ecut and [
eqmod (8*inp_poly080**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 100],
eqmod (8*inp_poly081**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10653],
eqmod (8*inp_poly082**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2726],
eqmod (8*inp_poly083**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8027],
eqmod (8*inp_poly084**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10594],
eqmod (8*inp_poly085**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 159],
eqmod (8*inp_poly086**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4053],
eqmod (8*inp_poly087**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 6700]
,
eqmod (8*inp_poly088**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6448],
eqmod (8*inp_poly089**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4305],
eqmod (8*inp_poly08a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2004],
eqmod (8*inp_poly08b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8749],
eqmod (8*inp_poly08c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5232],
eqmod (8*inp_poly08d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5521],
eqmod (8*inp_poly08e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8857],
eqmod (8*inp_poly08f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1896]
] prove with [ cuts [ 23 ] ];



(**************** CUT  25 *****************)

ecut and [
eqmod (8*inp_poly090**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7870],
eqmod (8*inp_poly091**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2883],
eqmod (8*inp_poly092**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5928],
eqmod (8*inp_poly093**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4825],
eqmod (8*inp_poly094**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10068],
eqmod (8*inp_poly095**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 685],
eqmod (8*inp_poly096**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10360],
eqmod (8*inp_poly097**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 393]
,
eqmod (8*inp_poly098**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10669],
eqmod (8*inp_poly099**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 84],
eqmod (8*inp_poly09a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 721],
eqmod (8*inp_poly09b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10032],
eqmod (8*inp_poly09c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5295],
eqmod (8*inp_poly09d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5458],
eqmod (8*inp_poly09e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5628],
eqmod (8*inp_poly09f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5125]
] prove with [ cuts [ 23 ] ];



(**************** CUT  26 *****************)

ecut and [
eqmod (8*inp_poly0a0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 331],
eqmod (8*inp_poly0a1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10422],
eqmod (8*inp_poly0a2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8808],
eqmod (8*inp_poly0a3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1945],
eqmod (8*inp_poly0a4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9474],
eqmod (8*inp_poly0a5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1279],
eqmod (8*inp_poly0a6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10082],
eqmod (8*inp_poly0a7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 671]
,
eqmod (8*inp_poly0a8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 267],
eqmod (8*inp_poly0a9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10486],
eqmod (8*inp_poly0aa**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5773],
eqmod (8*inp_poly0ab**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 4980],
eqmod (8*inp_poly0ac**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10436],
eqmod (8*inp_poly0ad**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 317],
eqmod (8*inp_poly0ae**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3617],
eqmod (8*inp_poly0af**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7136]
] prove with [ cuts [ 23 ] ];



(**************** CUT  27 *****************)

ecut and [
eqmod (8*inp_poly0b0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5619],
eqmod (8*inp_poly0b1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5134],
eqmod (8*inp_poly0b2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2847],
eqmod (8*inp_poly0b3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7906],
eqmod (8*inp_poly0b4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7948],
eqmod (8*inp_poly0b5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2805],
eqmod (8*inp_poly0b6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10635],
eqmod (8*inp_poly0b7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 118]
,
eqmod (8*inp_poly0b8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7034],
eqmod (8*inp_poly0b9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3719],
eqmod (8*inp_poly0ba**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5935],
eqmod (8*inp_poly0bb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4818],
eqmod (8*inp_poly0bc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10537],
eqmod (8*inp_poly0bd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 216],
eqmod (8*inp_poly0be**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1854],
eqmod (8*inp_poly0bf**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8899]
] prove with [ cuts [ 23 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555b083 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555b087 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555b08b *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555b08f *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555b093 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555b098 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555b09d *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555b0a2 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555b0a7 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555b0af *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x11e(%rdx),%ymm1                  #! EA = L0x55555556123e; Value = 0x92395a10450bc138; PC = 0x55555555b0b7 *)
mov ymm1_0 L0x55555556123e;
mov ymm1_1 L0x55555556123e;
mov ymm1_2 L0x55555556123e;
mov ymm1_3 L0x55555556123e;
mov ymm1_4 L0x55555556123e;
mov ymm1_5 L0x55555556123e;
mov ymm1_6 L0x55555556123e;
mov ymm1_7 L0x55555556123e;
mov ymm1_8 L0x55555556123e;
mov ymm1_9 L0x55555556123e;
mov ymm1_a L0x55555556123e;
mov ymm1_b L0x55555556123e;
mov ymm1_c L0x55555556123e;
mov ymm1_d L0x55555556123e;
mov ymm1_e L0x55555556123e;
mov ymm1_f L0x55555556123e;
(* vpbroadcastw 0x31e(%rdx),%ymm2                  #! EA = L0x55555556143e; Value = 0xec39fa10130bf138; PC = 0x55555555b0c0 *)
mov ymm2_0 L0x55555556143e;
mov ymm2_1 L0x55555556143e;
mov ymm2_2 L0x55555556143e;
mov ymm2_3 L0x55555556143e;
mov ymm2_4 L0x55555556143e;
mov ymm2_5 L0x55555556143e;
mov ymm2_6 L0x55555556143e;
mov ymm2_7 L0x55555556143e;
mov ymm2_8 L0x55555556143e;
mov ymm2_9 L0x55555556143e;
mov ymm2_a L0x55555556143e;
mov ymm2_b L0x55555556143e;
mov ymm2_c L0x55555556143e;
mov ymm2_d L0x55555556143e;
mov ymm2_e L0x55555556143e;
mov ymm2_f L0x55555556143e;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555b0c9 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b0cd *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b0d1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555b0d5 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x11c(%rdx),%ymm1                  #! EA = L0x55555556123c; Value = 0x5a10450bc1382524; PC = 0x55555555b0d9 *)
mov ymm1_0 L0x55555556123c;
mov ymm1_1 L0x55555556123c;
mov ymm1_2 L0x55555556123c;
mov ymm1_3 L0x55555556123c;
mov ymm1_4 L0x55555556123c;
mov ymm1_5 L0x55555556123c;
mov ymm1_6 L0x55555556123c;
mov ymm1_7 L0x55555556123c;
mov ymm1_8 L0x55555556123c;
mov ymm1_9 L0x55555556123c;
mov ymm1_a L0x55555556123c;
mov ymm1_b L0x55555556123c;
mov ymm1_c L0x55555556123c;
mov ymm1_d L0x55555556123c;
mov ymm1_e L0x55555556123c;
mov ymm1_f L0x55555556123c;
(* vpbroadcastw 0x31c(%rdx),%ymm2                  #! EA = L0x55555556143c; Value = 0xfa10130bf1380d24; PC = 0x55555555b0e2 *)
mov ymm2_0 L0x55555556143c;
mov ymm2_1 L0x55555556143c;
mov ymm2_2 L0x55555556143c;
mov ymm2_3 L0x55555556143c;
mov ymm2_4 L0x55555556143c;
mov ymm2_5 L0x55555556143c;
mov ymm2_6 L0x55555556143c;
mov ymm2_7 L0x55555556143c;
mov ymm2_8 L0x55555556143c;
mov ymm2_9 L0x55555556143c;
mov ymm2_a L0x55555556143c;
mov ymm2_b L0x55555556143c;
mov ymm2_c L0x55555556143c;
mov ymm2_d L0x55555556143c;
mov ymm2_e L0x55555556143c;
mov ymm2_f L0x55555556143c;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555b0eb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b0ef *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b0f3 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555b0f7 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x11a(%rdx),%ymm1                  #! EA = L0x55555556123a; Value = 0x450bc138252491c0; PC = 0x55555555b0fb *)
mov ymm1_0 L0x55555556123a;
mov ymm1_1 L0x55555556123a;
mov ymm1_2 L0x55555556123a;
mov ymm1_3 L0x55555556123a;
mov ymm1_4 L0x55555556123a;
mov ymm1_5 L0x55555556123a;
mov ymm1_6 L0x55555556123a;
mov ymm1_7 L0x55555556123a;
mov ymm1_8 L0x55555556123a;
mov ymm1_9 L0x55555556123a;
mov ymm1_a L0x55555556123a;
mov ymm1_b L0x55555556123a;
mov ymm1_c L0x55555556123a;
mov ymm1_d L0x55555556123a;
mov ymm1_e L0x55555556123a;
mov ymm1_f L0x55555556123a;
(* vpbroadcastw 0x31a(%rdx),%ymm2                  #! EA = L0x55555556143a; Value = 0x130bf1380d2411c0; PC = 0x55555555b104 *)
mov ymm2_0 L0x55555556143a;
mov ymm2_1 L0x55555556143a;
mov ymm2_2 L0x55555556143a;
mov ymm2_3 L0x55555556143a;
mov ymm2_4 L0x55555556143a;
mov ymm2_5 L0x55555556143a;
mov ymm2_6 L0x55555556143a;
mov ymm2_7 L0x55555556143a;
mov ymm2_8 L0x55555556143a;
mov ymm2_9 L0x55555556143a;
mov ymm2_a L0x55555556143a;
mov ymm2_b L0x55555556143a;
mov ymm2_c L0x55555556143a;
mov ymm2_d L0x55555556143a;
mov ymm2_e L0x55555556143a;
mov ymm2_f L0x55555556143a;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555b10d *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555b111 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b115 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555b119 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x118(%rdx),%ymm1                  #! EA = L0x555555561238; Value = 0xc138252491c0b857; PC = 0x55555555b11e *)
mov ymm1_0 L0x555555561238;
mov ymm1_1 L0x555555561238;
mov ymm1_2 L0x555555561238;
mov ymm1_3 L0x555555561238;
mov ymm1_4 L0x555555561238;
mov ymm1_5 L0x555555561238;
mov ymm1_6 L0x555555561238;
mov ymm1_7 L0x555555561238;
mov ymm1_8 L0x555555561238;
mov ymm1_9 L0x555555561238;
mov ymm1_a L0x555555561238;
mov ymm1_b L0x555555561238;
mov ymm1_c L0x555555561238;
mov ymm1_d L0x555555561238;
mov ymm1_e L0x555555561238;
mov ymm1_f L0x555555561238;
(* vpbroadcastw 0x318(%rdx),%ymm2                  #! EA = L0x555555561438; Value = 0xf1380d2411c0fe57; PC = 0x55555555b127 *)
mov ymm2_0 L0x555555561438;
mov ymm2_1 L0x555555561438;
mov ymm2_2 L0x555555561438;
mov ymm2_3 L0x555555561438;
mov ymm2_4 L0x555555561438;
mov ymm2_5 L0x555555561438;
mov ymm2_6 L0x555555561438;
mov ymm2_7 L0x555555561438;
mov ymm2_8 L0x555555561438;
mov ymm2_9 L0x555555561438;
mov ymm2_a L0x555555561438;
mov ymm2_b L0x555555561438;
mov ymm2_c L0x555555561438;
mov ymm2_d L0x555555561438;
mov ymm2_e L0x555555561438;
mov ymm2_f L0x555555561438;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555b130 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b134 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b138 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555b13c *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555b141 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555b146 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b14b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555b14f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555b154 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555b159 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b15e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555b162 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555b167 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555b16c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b171 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555b175 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555b17a *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555b17f *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b184 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555b188 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555b18d *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555b191 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555b195 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555b199 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555b19d *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555b1a1 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555b1a5 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555b1aa *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x10e(%rdx),%ymm1                  #! EA = L0x55555556122e; Value = 0x8cf7c126e487ae88; PC = 0x55555555b1af *)
mov ymm1_0 L0x55555556122e;
mov ymm1_1 L0x55555556122e;
mov ymm1_2 L0x55555556122e;
mov ymm1_3 L0x55555556122e;
mov ymm1_4 L0x55555556122e;
mov ymm1_5 L0x55555556122e;
mov ymm1_6 L0x55555556122e;
mov ymm1_7 L0x55555556122e;
mov ymm1_8 L0x55555556122e;
mov ymm1_9 L0x55555556122e;
mov ymm1_a L0x55555556122e;
mov ymm1_b L0x55555556122e;
mov ymm1_c L0x55555556122e;
mov ymm1_d L0x55555556122e;
mov ymm1_e L0x55555556122e;
mov ymm1_f L0x55555556122e;
(* vpbroadcastw 0x30e(%rdx),%ymm2                  #! EA = L0x55555556142e; Value = 0x12f7fd260a87fe88; PC = 0x55555555b1b8 *)
mov ymm2_0 L0x55555556142e;
mov ymm2_1 L0x55555556142e;
mov ymm2_2 L0x55555556142e;
mov ymm2_3 L0x55555556142e;
mov ymm2_4 L0x55555556142e;
mov ymm2_5 L0x55555556142e;
mov ymm2_6 L0x55555556142e;
mov ymm2_7 L0x55555556142e;
mov ymm2_8 L0x55555556142e;
mov ymm2_9 L0x55555556142e;
mov ymm2_a L0x55555556142e;
mov ymm2_b L0x55555556142e;
mov ymm2_c L0x55555556142e;
mov ymm2_d L0x55555556142e;
mov ymm2_e L0x55555556142e;
mov ymm2_f L0x55555556142e;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555b1c1 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555b1c5 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b1c9 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555b1cd *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555b1d1 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b1d5 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b1d9 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555b1dd *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x10c(%rdx),%ymm1                  #! EA = L0x55555556122c; Value = 0xc126e487ae886f65; PC = 0x55555555b1e1 *)
mov ymm1_0 L0x55555556122c;
mov ymm1_1 L0x55555556122c;
mov ymm1_2 L0x55555556122c;
mov ymm1_3 L0x55555556122c;
mov ymm1_4 L0x55555556122c;
mov ymm1_5 L0x55555556122c;
mov ymm1_6 L0x55555556122c;
mov ymm1_7 L0x55555556122c;
mov ymm1_8 L0x55555556122c;
mov ymm1_9 L0x55555556122c;
mov ymm1_a L0x55555556122c;
mov ymm1_b L0x55555556122c;
mov ymm1_c L0x55555556122c;
mov ymm1_d L0x55555556122c;
mov ymm1_e L0x55555556122c;
mov ymm1_f L0x55555556122c;
(* vpbroadcastw 0x30c(%rdx),%ymm2                  #! EA = L0x55555556142c; Value = 0xfd260a87fe880165; PC = 0x55555555b1ea *)
mov ymm2_0 L0x55555556142c;
mov ymm2_1 L0x55555556142c;
mov ymm2_2 L0x55555556142c;
mov ymm2_3 L0x55555556142c;
mov ymm2_4 L0x55555556142c;
mov ymm2_5 L0x55555556142c;
mov ymm2_6 L0x55555556142c;
mov ymm2_7 L0x55555556142c;
mov ymm2_8 L0x55555556142c;
mov ymm2_9 L0x55555556142c;
mov ymm2_a L0x55555556142c;
mov ymm2_b L0x55555556142c;
mov ymm2_c L0x55555556142c;
mov ymm2_d L0x55555556142c;
mov ymm2_e L0x55555556142c;
mov ymm2_f L0x55555556142c;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555b1f3 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555b1f7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b1fb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555b1ff *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555b203 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b207 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b20b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555b20f *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555b214 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555b218 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555b21c *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555b220 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555b224 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555b228 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555b22c *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555b231 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555b236 *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555b23f *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555b248 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b24c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b250 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555b254 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555b258 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555b25c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b260 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555b264 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555b268 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555b26c *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b270 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555b274 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555b278 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b27c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b280 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555b284 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555b289 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555b28e *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b293 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555b297 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555b29b *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555b2a0 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b2a5 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555b2a9 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x200(%rdi)                       #! EA = L0x7fffffffd4e0; PC = 0x55555555b2ad *)
mov L0x7fffffffd4e0 ymm9_0;
mov L0x7fffffffd4e2 ymm9_1;
mov L0x7fffffffd4e4 ymm9_2;
mov L0x7fffffffd4e6 ymm9_3;
mov L0x7fffffffd4e8 ymm9_4;
mov L0x7fffffffd4ea ymm9_5;
mov L0x7fffffffd4ec ymm9_6;
mov L0x7fffffffd4ee ymm9_7;
mov L0x7fffffffd4f0 ymm9_8;
mov L0x7fffffffd4f2 ymm9_9;
mov L0x7fffffffd4f4 ymm9_a;
mov L0x7fffffffd4f6 ymm9_b;
mov L0x7fffffffd4f8 ymm9_c;
mov L0x7fffffffd4fa ymm9_d;
mov L0x7fffffffd4fc ymm9_e;
mov L0x7fffffffd4fe ymm9_f;
(* vmovdqa %ymm8,0x220(%rdi)                       #! EA = L0x7fffffffd500; PC = 0x55555555b2b5 *)
mov L0x7fffffffd500 ymm8_0;
mov L0x7fffffffd502 ymm8_1;
mov L0x7fffffffd504 ymm8_2;
mov L0x7fffffffd506 ymm8_3;
mov L0x7fffffffd508 ymm8_4;
mov L0x7fffffffd50a ymm8_5;
mov L0x7fffffffd50c ymm8_6;
mov L0x7fffffffd50e ymm8_7;
mov L0x7fffffffd510 ymm8_8;
mov L0x7fffffffd512 ymm8_9;
mov L0x7fffffffd514 ymm8_a;
mov L0x7fffffffd516 ymm8_b;
mov L0x7fffffffd518 ymm8_c;
mov L0x7fffffffd51a ymm8_d;
mov L0x7fffffffd51c ymm8_e;
mov L0x7fffffffd51e ymm8_f;
(* vmovdqa %ymm10,0x240(%rdi)                      #! EA = L0x7fffffffd520; PC = 0x55555555b2bd *)
mov L0x7fffffffd520 ymm10_0;
mov L0x7fffffffd522 ymm10_1;
mov L0x7fffffffd524 ymm10_2;
mov L0x7fffffffd526 ymm10_3;
mov L0x7fffffffd528 ymm10_4;
mov L0x7fffffffd52a ymm10_5;
mov L0x7fffffffd52c ymm10_6;
mov L0x7fffffffd52e ymm10_7;
mov L0x7fffffffd530 ymm10_8;
mov L0x7fffffffd532 ymm10_9;
mov L0x7fffffffd534 ymm10_a;
mov L0x7fffffffd536 ymm10_b;
mov L0x7fffffffd538 ymm10_c;
mov L0x7fffffffd53a ymm10_d;
mov L0x7fffffffd53c ymm10_e;
mov L0x7fffffffd53e ymm10_f;
(* vmovdqa %ymm3,0x260(%rdi)                       #! EA = L0x7fffffffd540; PC = 0x55555555b2c5 *)
mov L0x7fffffffd540 ymm3_0;
mov L0x7fffffffd542 ymm3_1;
mov L0x7fffffffd544 ymm3_2;
mov L0x7fffffffd546 ymm3_3;
mov L0x7fffffffd548 ymm3_4;
mov L0x7fffffffd54a ymm3_5;
mov L0x7fffffffd54c ymm3_6;
mov L0x7fffffffd54e ymm3_7;
mov L0x7fffffffd550 ymm3_8;
mov L0x7fffffffd552 ymm3_9;
mov L0x7fffffffd554 ymm3_a;
mov L0x7fffffffd556 ymm3_b;
mov L0x7fffffffd558 ymm3_c;
mov L0x7fffffffd55a ymm3_d;
mov L0x7fffffffd55c ymm3_e;
mov L0x7fffffffd55e ymm3_f;
(* vmovdqa %ymm5,0x280(%rdi)                       #! EA = L0x7fffffffd560; PC = 0x55555555b2cd *)
mov L0x7fffffffd560 ymm5_0;
mov L0x7fffffffd562 ymm5_1;
mov L0x7fffffffd564 ymm5_2;
mov L0x7fffffffd566 ymm5_3;
mov L0x7fffffffd568 ymm5_4;
mov L0x7fffffffd56a ymm5_5;
mov L0x7fffffffd56c ymm5_6;
mov L0x7fffffffd56e ymm5_7;
mov L0x7fffffffd570 ymm5_8;
mov L0x7fffffffd572 ymm5_9;
mov L0x7fffffffd574 ymm5_a;
mov L0x7fffffffd576 ymm5_b;
mov L0x7fffffffd578 ymm5_c;
mov L0x7fffffffd57a ymm5_d;
mov L0x7fffffffd57c ymm5_e;
mov L0x7fffffffd57e ymm5_f;
(* vmovdqa %ymm4,0x2a0(%rdi)                       #! EA = L0x7fffffffd580; PC = 0x55555555b2d5 *)
mov L0x7fffffffd580 ymm4_0;
mov L0x7fffffffd582 ymm4_1;
mov L0x7fffffffd584 ymm4_2;
mov L0x7fffffffd586 ymm4_3;
mov L0x7fffffffd588 ymm4_4;
mov L0x7fffffffd58a ymm4_5;
mov L0x7fffffffd58c ymm4_6;
mov L0x7fffffffd58e ymm4_7;
mov L0x7fffffffd590 ymm4_8;
mov L0x7fffffffd592 ymm4_9;
mov L0x7fffffffd594 ymm4_a;
mov L0x7fffffffd596 ymm4_b;
mov L0x7fffffffd598 ymm4_c;
mov L0x7fffffffd59a ymm4_d;
mov L0x7fffffffd59c ymm4_e;
mov L0x7fffffffd59e ymm4_f;
(* vmovdqa %ymm6,0x2c0(%rdi)                       #! EA = L0x7fffffffd5a0; PC = 0x55555555b2dd *)
mov L0x7fffffffd5a0 ymm6_0;
mov L0x7fffffffd5a2 ymm6_1;
mov L0x7fffffffd5a4 ymm6_2;
mov L0x7fffffffd5a6 ymm6_3;
mov L0x7fffffffd5a8 ymm6_4;
mov L0x7fffffffd5aa ymm6_5;
mov L0x7fffffffd5ac ymm6_6;
mov L0x7fffffffd5ae ymm6_7;
mov L0x7fffffffd5b0 ymm6_8;
mov L0x7fffffffd5b2 ymm6_9;
mov L0x7fffffffd5b4 ymm6_a;
mov L0x7fffffffd5b6 ymm6_b;
mov L0x7fffffffd5b8 ymm6_c;
mov L0x7fffffffd5ba ymm6_d;
mov L0x7fffffffd5bc ymm6_e;
mov L0x7fffffffd5be ymm6_f;
(* vmovdqa %ymm11,0x2e0(%rdi)                      #! EA = L0x7fffffffd5c0; PC = 0x55555555b2e5 *)
mov L0x7fffffffd5c0 ymm11_0;
mov L0x7fffffffd5c2 ymm11_1;
mov L0x7fffffffd5c4 ymm11_2;
mov L0x7fffffffd5c6 ymm11_3;
mov L0x7fffffffd5c8 ymm11_4;
mov L0x7fffffffd5ca ymm11_5;
mov L0x7fffffffd5cc ymm11_6;
mov L0x7fffffffd5ce ymm11_7;
mov L0x7fffffffd5d0 ymm11_8;
mov L0x7fffffffd5d2 ymm11_9;
mov L0x7fffffffd5d4 ymm11_a;
mov L0x7fffffffd5d6 ymm11_b;
mov L0x7fffffffd5d8 ymm11_c;
mov L0x7fffffffd5da ymm11_d;
mov L0x7fffffffd5dc ymm11_e;
mov L0x7fffffffd5de ymm11_f;



(**************** LEVELS 3-5, 2 *****************)

ghost segment2@bit :
segment2 = 
x**  0*(
L0x7fffffffd4e0*x** 0+L0x7fffffffd4e2*x** 1+L0x7fffffffd4e4*x** 2+
L0x7fffffffd4e6*x** 3+L0x7fffffffd4e8*x** 4+L0x7fffffffd4ea*x** 5+
L0x7fffffffd4ec*x** 6+L0x7fffffffd4ee*x** 7+L0x7fffffffd4f0*x** 8+
L0x7fffffffd4f2*x** 9+L0x7fffffffd4f4*x**10+L0x7fffffffd4f6*x**11+
L0x7fffffffd4f8*x**12+L0x7fffffffd4fa*x**13+L0x7fffffffd4fc*x**14+
L0x7fffffffd4fe*x**15)+
x** 16*(
L0x7fffffffd500*x** 0+L0x7fffffffd502*x** 1+L0x7fffffffd504*x** 2+
L0x7fffffffd506*x** 3+L0x7fffffffd508*x** 4+L0x7fffffffd50a*x** 5+
L0x7fffffffd50c*x** 6+L0x7fffffffd50e*x** 7+L0x7fffffffd510*x** 8+
L0x7fffffffd512*x** 9+L0x7fffffffd514*x**10+L0x7fffffffd516*x**11+
L0x7fffffffd518*x**12+L0x7fffffffd51a*x**13+L0x7fffffffd51c*x**14+
L0x7fffffffd51e*x**15)+
x** 32*(
L0x7fffffffd520*x** 0+L0x7fffffffd522*x** 1+L0x7fffffffd524*x** 2+
L0x7fffffffd526*x** 3+L0x7fffffffd528*x** 4+L0x7fffffffd52a*x** 5+
L0x7fffffffd52c*x** 6+L0x7fffffffd52e*x** 7+L0x7fffffffd530*x** 8+
L0x7fffffffd532*x** 9+L0x7fffffffd534*x**10+L0x7fffffffd536*x**11+
L0x7fffffffd538*x**12+L0x7fffffffd53a*x**13+L0x7fffffffd53c*x**14+
L0x7fffffffd53e*x**15)+
x** 48*(
L0x7fffffffd540*x** 0+L0x7fffffffd542*x** 1+L0x7fffffffd544*x** 2+
L0x7fffffffd546*x** 3+L0x7fffffffd548*x** 4+L0x7fffffffd54a*x** 5+
L0x7fffffffd54c*x** 6+L0x7fffffffd54e*x** 7+L0x7fffffffd550*x** 8+
L0x7fffffffd552*x** 9+L0x7fffffffd554*x**10+L0x7fffffffd556*x**11+
L0x7fffffffd558*x**12+L0x7fffffffd55a*x**13+L0x7fffffffd55c*x**14+
L0x7fffffffd55e*x**15)+
x** 64*(
L0x7fffffffd560*x** 0+L0x7fffffffd562*x** 1+L0x7fffffffd564*x** 2+
L0x7fffffffd566*x** 3+L0x7fffffffd568*x** 4+L0x7fffffffd56a*x** 5+
L0x7fffffffd56c*x** 6+L0x7fffffffd56e*x** 7+L0x7fffffffd570*x** 8+
L0x7fffffffd572*x** 9+L0x7fffffffd574*x**10+L0x7fffffffd576*x**11+
L0x7fffffffd578*x**12+L0x7fffffffd57a*x**13+L0x7fffffffd57c*x**14+
L0x7fffffffd57e*x**15)+
x** 80*(
L0x7fffffffd580*x** 0+L0x7fffffffd582*x** 1+L0x7fffffffd584*x** 2+
L0x7fffffffd586*x** 3+L0x7fffffffd588*x** 4+L0x7fffffffd58a*x** 5+
L0x7fffffffd58c*x** 6+L0x7fffffffd58e*x** 7+L0x7fffffffd590*x** 8+
L0x7fffffffd592*x** 9+L0x7fffffffd594*x**10+L0x7fffffffd596*x**11+
L0x7fffffffd598*x**12+L0x7fffffffd59a*x**13+L0x7fffffffd59c*x**14+
L0x7fffffffd59e*x**15)+
x** 96*(
L0x7fffffffd5a0*x** 0+L0x7fffffffd5a2*x** 1+L0x7fffffffd5a4*x** 2+
L0x7fffffffd5a6*x** 3+L0x7fffffffd5a8*x** 4+L0x7fffffffd5aa*x** 5+
L0x7fffffffd5ac*x** 6+L0x7fffffffd5ae*x** 7+L0x7fffffffd5b0*x** 8+
L0x7fffffffd5b2*x** 9+L0x7fffffffd5b4*x**10+L0x7fffffffd5b6*x**11+
L0x7fffffffd5b8*x**12+L0x7fffffffd5ba*x**13+L0x7fffffffd5bc*x**14+
L0x7fffffffd5be*x**15)+
x**112*(
L0x7fffffffd5c0*x** 0+L0x7fffffffd5c2*x** 1+L0x7fffffffd5c4*x** 2+
L0x7fffffffd5c6*x** 3+L0x7fffffffd5c8*x** 4+L0x7fffffffd5ca*x** 5+
L0x7fffffffd5cc*x** 6+L0x7fffffffd5ce*x** 7+L0x7fffffffd5d0*x** 8+
L0x7fffffffd5d2*x** 9+L0x7fffffffd5d4*x**10+L0x7fffffffd5d6*x**11+
L0x7fffffffd5d8*x**12+L0x7fffffffd5da*x**13+L0x7fffffffd5dc*x**14+
L0x7fffffffd5de*x**15)
&& true;


(**************** CUT  28 *****************)

cut
and [
eqmod (64*inp_poly080**2) (segment2) [10753, x**2 - 100],
eqmod (64*inp_poly081**2) (segment2) [10753, x**2 - 10653],
eqmod (64*inp_poly082**2) (segment2) [10753, x**2 - 2726],
eqmod (64*inp_poly083**2) (segment2) [10753, x**2 - 8027],
eqmod (64*inp_poly084**2) (segment2) [10753, x**2 - 10594],
eqmod (64*inp_poly085**2) (segment2) [10753, x**2 - 159],
eqmod (64*inp_poly086**2) (segment2) [10753, x**2 - 4053],
eqmod (64*inp_poly087**2) (segment2) [10753, x**2 - 6700]
,
eqmod (64*inp_poly088**2) (segment2) [10753, x**2 - 6448],
eqmod (64*inp_poly089**2) (segment2) [10753, x**2 - 4305],
eqmod (64*inp_poly08a**2) (segment2) [10753, x**2 - 2004],
eqmod (64*inp_poly08b**2) (segment2) [10753, x**2 - 8749],
eqmod (64*inp_poly08c**2) (segment2) [10753, x**2 - 5232],
eqmod (64*inp_poly08d**2) (segment2) [10753, x**2 - 5521],
eqmod (64*inp_poly08e**2) (segment2) [10753, x**2 - 8857],
eqmod (64*inp_poly08f**2) (segment2) [10753, x**2 - 1896]
] prove with [ cuts [ 24 ] ],
and [
eqmod (64*inp_poly090**2) (segment2) [10753, x**2 - 7870],
eqmod (64*inp_poly091**2) (segment2) [10753, x**2 - 2883],
eqmod (64*inp_poly092**2) (segment2) [10753, x**2 - 5928],
eqmod (64*inp_poly093**2) (segment2) [10753, x**2 - 4825],
eqmod (64*inp_poly094**2) (segment2) [10753, x**2 - 10068],
eqmod (64*inp_poly095**2) (segment2) [10753, x**2 - 685],
eqmod (64*inp_poly096**2) (segment2) [10753, x**2 - 10360],
eqmod (64*inp_poly097**2) (segment2) [10753, x**2 - 393]
,
eqmod (64*inp_poly098**2) (segment2) [10753, x**2 - 10669],
eqmod (64*inp_poly099**2) (segment2) [10753, x**2 - 84],
eqmod (64*inp_poly09a**2) (segment2) [10753, x**2 - 721],
eqmod (64*inp_poly09b**2) (segment2) [10753, x**2 - 10032],
eqmod (64*inp_poly09c**2) (segment2) [10753, x**2 - 5295],
eqmod (64*inp_poly09d**2) (segment2) [10753, x**2 - 5458],
eqmod (64*inp_poly09e**2) (segment2) [10753, x**2 - 5628],
eqmod (64*inp_poly09f**2) (segment2) [10753, x**2 - 5125]
] prove with [ cuts [ 25 ] ],
and [
eqmod (64*inp_poly0a0**2) (segment2) [10753, x**2 - 331],
eqmod (64*inp_poly0a1**2) (segment2) [10753, x**2 - 10422],
eqmod (64*inp_poly0a2**2) (segment2) [10753, x**2 - 8808],
eqmod (64*inp_poly0a3**2) (segment2) [10753, x**2 - 1945],
eqmod (64*inp_poly0a4**2) (segment2) [10753, x**2 - 9474],
eqmod (64*inp_poly0a5**2) (segment2) [10753, x**2 - 1279],
eqmod (64*inp_poly0a6**2) (segment2) [10753, x**2 - 10082],
eqmod (64*inp_poly0a7**2) (segment2) [10753, x**2 - 671]
,
eqmod (64*inp_poly0a8**2) (segment2) [10753, x**2 - 267],
eqmod (64*inp_poly0a9**2) (segment2) [10753, x**2 - 10486],
eqmod (64*inp_poly0aa**2) (segment2) [10753, x**2 - 5773],
eqmod (64*inp_poly0ab**2) (segment2) [10753, x**2 - 4980],
eqmod (64*inp_poly0ac**2) (segment2) [10753, x**2 - 10436],
eqmod (64*inp_poly0ad**2) (segment2) [10753, x**2 - 317],
eqmod (64*inp_poly0ae**2) (segment2) [10753, x**2 - 3617],
eqmod (64*inp_poly0af**2) (segment2) [10753, x**2 - 7136]
] prove with [ cuts [ 26 ] ],
and [
eqmod (64*inp_poly0b0**2) (segment2) [10753, x**2 - 5619],
eqmod (64*inp_poly0b1**2) (segment2) [10753, x**2 - 5134],
eqmod (64*inp_poly0b2**2) (segment2) [10753, x**2 - 2847],
eqmod (64*inp_poly0b3**2) (segment2) [10753, x**2 - 7906],
eqmod (64*inp_poly0b4**2) (segment2) [10753, x**2 - 7948],
eqmod (64*inp_poly0b5**2) (segment2) [10753, x**2 - 2805],
eqmod (64*inp_poly0b6**2) (segment2) [10753, x**2 - 10635],
eqmod (64*inp_poly0b7**2) (segment2) [10753, x**2 - 118]
,
eqmod (64*inp_poly0b8**2) (segment2) [10753, x**2 - 7034],
eqmod (64*inp_poly0b9**2) (segment2) [10753, x**2 - 3719],
eqmod (64*inp_poly0ba**2) (segment2) [10753, x**2 - 5935],
eqmod (64*inp_poly0bb**2) (segment2) [10753, x**2 - 4818],
eqmod (64*inp_poly0bc**2) (segment2) [10753, x**2 - 10537],
eqmod (64*inp_poly0bd**2) (segment2) [10753, x**2 - 216],
eqmod (64*inp_poly0be**2) (segment2) [10753, x**2 - 1854],
eqmod (64*inp_poly0bf**2) (segment2) [10753, x**2 - 8899]
] prove with [ cuts [ 27 ] ] && and [
( -5631)@16<=s L0x7fffffffd4e0,L0x7fffffffd4e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd4e2,L0x7fffffffd4e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd4e4,L0x7fffffffd4e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd4e6,L0x7fffffffd4e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd4e8,L0x7fffffffd4e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd4ea,L0x7fffffffd4ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd4ec,L0x7fffffffd4ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd4ee,L0x7fffffffd4ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd4f0,L0x7fffffffd4f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd4f2,L0x7fffffffd4f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd4f4,L0x7fffffffd4f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd4f6,L0x7fffffffd4f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd4f8,L0x7fffffffd4f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd4fa,L0x7fffffffd4fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd4fc,L0x7fffffffd4fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd4fe,L0x7fffffffd4fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd500,L0x7fffffffd500<s 5631@16,
( -5631)@16<=s L0x7fffffffd502,L0x7fffffffd502<s 5631@16,
( -5631)@16<=s L0x7fffffffd504,L0x7fffffffd504<s 5631@16,
( -5631)@16<=s L0x7fffffffd506,L0x7fffffffd506<s 5631@16,
( -5631)@16<=s L0x7fffffffd508,L0x7fffffffd508<s 5631@16,
( -5631)@16<=s L0x7fffffffd50a,L0x7fffffffd50a<s 5631@16,
( -5631)@16<=s L0x7fffffffd50c,L0x7fffffffd50c<s 5631@16,
( -5631)@16<=s L0x7fffffffd50e,L0x7fffffffd50e<s 5631@16,
( -5631)@16<=s L0x7fffffffd510,L0x7fffffffd510<s 5631@16,
( -5631)@16<=s L0x7fffffffd512,L0x7fffffffd512<s 5631@16,
( -5631)@16<=s L0x7fffffffd514,L0x7fffffffd514<s 5631@16,
( -5631)@16<=s L0x7fffffffd516,L0x7fffffffd516<s 5631@16,
( -5631)@16<=s L0x7fffffffd518,L0x7fffffffd518<s 5631@16,
( -5631)@16<=s L0x7fffffffd51a,L0x7fffffffd51a<s 5631@16,
( -5631)@16<=s L0x7fffffffd51c,L0x7fffffffd51c<s 5631@16,
( -5631)@16<=s L0x7fffffffd51e,L0x7fffffffd51e<s 5631@16,
(-10869)@16<=s L0x7fffffffd520,L0x7fffffffd520<s10869@16,
(-10869)@16<=s L0x7fffffffd522,L0x7fffffffd522<s10869@16,
(-10869)@16<=s L0x7fffffffd524,L0x7fffffffd524<s10869@16,
(-10869)@16<=s L0x7fffffffd526,L0x7fffffffd526<s10869@16,
(-10869)@16<=s L0x7fffffffd528,L0x7fffffffd528<s10869@16,
(-10869)@16<=s L0x7fffffffd52a,L0x7fffffffd52a<s10869@16,
(-10869)@16<=s L0x7fffffffd52c,L0x7fffffffd52c<s10869@16,
(-10869)@16<=s L0x7fffffffd52e,L0x7fffffffd52e<s10869@16,
(-10869)@16<=s L0x7fffffffd530,L0x7fffffffd530<s10869@16,
(-10869)@16<=s L0x7fffffffd532,L0x7fffffffd532<s10869@16,
(-10869)@16<=s L0x7fffffffd534,L0x7fffffffd534<s10869@16,
(-10869)@16<=s L0x7fffffffd536,L0x7fffffffd536<s10869@16,
(-10869)@16<=s L0x7fffffffd538,L0x7fffffffd538<s10869@16,
(-10869)@16<=s L0x7fffffffd53a,L0x7fffffffd53a<s10869@16,
(-10869)@16<=s L0x7fffffffd53c,L0x7fffffffd53c<s10869@16,
(-10869)@16<=s L0x7fffffffd53e,L0x7fffffffd53e<s10869@16,
(-10881)@16<=s L0x7fffffffd540,L0x7fffffffd540<s10881@16,
(-10881)@16<=s L0x7fffffffd542,L0x7fffffffd542<s10881@16,
(-10881)@16<=s L0x7fffffffd544,L0x7fffffffd544<s10881@16,
(-10881)@16<=s L0x7fffffffd546,L0x7fffffffd546<s10881@16,
(-10881)@16<=s L0x7fffffffd548,L0x7fffffffd548<s10881@16,
(-10881)@16<=s L0x7fffffffd54a,L0x7fffffffd54a<s10881@16,
(-10881)@16<=s L0x7fffffffd54c,L0x7fffffffd54c<s10881@16,
(-10881)@16<=s L0x7fffffffd54e,L0x7fffffffd54e<s10881@16,
(-10875)@16<=s L0x7fffffffd550,L0x7fffffffd550<s10875@16,
(-10875)@16<=s L0x7fffffffd552,L0x7fffffffd552<s10875@16,
(-10875)@16<=s L0x7fffffffd554,L0x7fffffffd554<s10875@16,
(-10875)@16<=s L0x7fffffffd556,L0x7fffffffd556<s10875@16,
(-10875)@16<=s L0x7fffffffd558,L0x7fffffffd558<s10875@16,
(-10875)@16<=s L0x7fffffffd55a,L0x7fffffffd55a<s10875@16,
(-10875)@16<=s L0x7fffffffd55c,L0x7fffffffd55c<s10875@16,
(-10875)@16<=s L0x7fffffffd55e,L0x7fffffffd55e<s10875@16
] prove with [ cuts [ 23 ] ];


(**************** CUT  29 *****************)

cut true && true;



(* vmovdqa 0x300(%rsi),%ymm4                       #! EA = L0x7fffffffd5e0; Value = 0x077ff3b8f804efdc; PC = 0x55555555b2ed *)
mov ymm4_0 L0x7fffffffd5e0;
mov ymm4_1 L0x7fffffffd5e2;
mov ymm4_2 L0x7fffffffd5e4;
mov ymm4_3 L0x7fffffffd5e6;
mov ymm4_4 L0x7fffffffd5e8;
mov ymm4_5 L0x7fffffffd5ea;
mov ymm4_6 L0x7fffffffd5ec;
mov ymm4_7 L0x7fffffffd5ee;
mov ymm4_8 L0x7fffffffd5f0;
mov ymm4_9 L0x7fffffffd5f2;
mov ymm4_a L0x7fffffffd5f4;
mov ymm4_b L0x7fffffffd5f6;
mov ymm4_c L0x7fffffffd5f8;
mov ymm4_d L0x7fffffffd5fa;
mov ymm4_e L0x7fffffffd5fc;
mov ymm4_f L0x7fffffffd5fe;
(* vmovdqa 0x320(%rsi),%ymm5                       #! EA = L0x7fffffffd600; Value = 0xfc20fd9e0a8ef509; PC = 0x55555555b2f5 *)
mov ymm5_0 L0x7fffffffd600;
mov ymm5_1 L0x7fffffffd602;
mov ymm5_2 L0x7fffffffd604;
mov ymm5_3 L0x7fffffffd606;
mov ymm5_4 L0x7fffffffd608;
mov ymm5_5 L0x7fffffffd60a;
mov ymm5_6 L0x7fffffffd60c;
mov ymm5_7 L0x7fffffffd60e;
mov ymm5_8 L0x7fffffffd610;
mov ymm5_9 L0x7fffffffd612;
mov ymm5_a L0x7fffffffd614;
mov ymm5_b L0x7fffffffd616;
mov ymm5_c L0x7fffffffd618;
mov ymm5_d L0x7fffffffd61a;
mov ymm5_e L0x7fffffffd61c;
mov ymm5_f L0x7fffffffd61e;
(* vmovdqa 0x340(%rsi),%ymm6                       #! EA = L0x7fffffffd620; Value = 0xf7dcf0f6f7acffa7; PC = 0x55555555b2fd *)
mov ymm6_0 L0x7fffffffd620;
mov ymm6_1 L0x7fffffffd622;
mov ymm6_2 L0x7fffffffd624;
mov ymm6_3 L0x7fffffffd626;
mov ymm6_4 L0x7fffffffd628;
mov ymm6_5 L0x7fffffffd62a;
mov ymm6_6 L0x7fffffffd62c;
mov ymm6_7 L0x7fffffffd62e;
mov ymm6_8 L0x7fffffffd630;
mov ymm6_9 L0x7fffffffd632;
mov ymm6_a L0x7fffffffd634;
mov ymm6_b L0x7fffffffd636;
mov ymm6_c L0x7fffffffd638;
mov ymm6_d L0x7fffffffd63a;
mov ymm6_e L0x7fffffffd63c;
mov ymm6_f L0x7fffffffd63e;
(* vmovdqa 0x360(%rsi),%ymm7                       #! EA = L0x7fffffffd640; Value = 0x0156f13e100beec7; PC = 0x55555555b305 *)
mov ymm7_0 L0x7fffffffd640;
mov ymm7_1 L0x7fffffffd642;
mov ymm7_2 L0x7fffffffd644;
mov ymm7_3 L0x7fffffffd646;
mov ymm7_4 L0x7fffffffd648;
mov ymm7_5 L0x7fffffffd64a;
mov ymm7_6 L0x7fffffffd64c;
mov ymm7_7 L0x7fffffffd64e;
mov ymm7_8 L0x7fffffffd650;
mov ymm7_9 L0x7fffffffd652;
mov ymm7_a L0x7fffffffd654;
mov ymm7_b L0x7fffffffd656;
mov ymm7_c L0x7fffffffd658;
mov ymm7_d L0x7fffffffd65a;
mov ymm7_e L0x7fffffffd65c;
mov ymm7_f L0x7fffffffd65e;
(* vmovdqa 0x380(%rsi),%ymm8                       #! EA = L0x7fffffffd660; Value = 0xfaaaf1110ec8f4b6; PC = 0x55555555b30d *)
mov ymm8_0 L0x7fffffffd660;
mov ymm8_1 L0x7fffffffd662;
mov ymm8_2 L0x7fffffffd664;
mov ymm8_3 L0x7fffffffd666;
mov ymm8_4 L0x7fffffffd668;
mov ymm8_5 L0x7fffffffd66a;
mov ymm8_6 L0x7fffffffd66c;
mov ymm8_7 L0x7fffffffd66e;
mov ymm8_8 L0x7fffffffd670;
mov ymm8_9 L0x7fffffffd672;
mov ymm8_a L0x7fffffffd674;
mov ymm8_b L0x7fffffffd676;
mov ymm8_c L0x7fffffffd678;
mov ymm8_d L0x7fffffffd67a;
mov ymm8_e L0x7fffffffd67c;
mov ymm8_f L0x7fffffffd67e;
(* vmovdqa 0x3a0(%rsi),%ymm9                       #! EA = L0x7fffffffd680; Value = 0xeeeff45b03d7f041; PC = 0x55555555b315 *)
mov ymm9_0 L0x7fffffffd680;
mov ymm9_1 L0x7fffffffd682;
mov ymm9_2 L0x7fffffffd684;
mov ymm9_3 L0x7fffffffd686;
mov ymm9_4 L0x7fffffffd688;
mov ymm9_5 L0x7fffffffd68a;
mov ymm9_6 L0x7fffffffd68c;
mov ymm9_7 L0x7fffffffd68e;
mov ymm9_8 L0x7fffffffd690;
mov ymm9_9 L0x7fffffffd692;
mov ymm9_a L0x7fffffffd694;
mov ymm9_b L0x7fffffffd696;
mov ymm9_c L0x7fffffffd698;
mov ymm9_d L0x7fffffffd69a;
mov ymm9_e L0x7fffffffd69c;
mov ymm9_f L0x7fffffffd69e;
(* vmovdqa 0x3c0(%rsi),%ymm10                      #! EA = L0x7fffffffd6a0; Value = 0xfe21f36907e0f449; PC = 0x55555555b31d *)
mov ymm10_0 L0x7fffffffd6a0;
mov ymm10_1 L0x7fffffffd6a2;
mov ymm10_2 L0x7fffffffd6a4;
mov ymm10_3 L0x7fffffffd6a6;
mov ymm10_4 L0x7fffffffd6a8;
mov ymm10_5 L0x7fffffffd6aa;
mov ymm10_6 L0x7fffffffd6ac;
mov ymm10_7 L0x7fffffffd6ae;
mov ymm10_8 L0x7fffffffd6b0;
mov ymm10_9 L0x7fffffffd6b2;
mov ymm10_a L0x7fffffffd6b4;
mov ymm10_b L0x7fffffffd6b6;
mov ymm10_c L0x7fffffffd6b8;
mov ymm10_d L0x7fffffffd6ba;
mov ymm10_e L0x7fffffffd6bc;
mov ymm10_f L0x7fffffffd6be;
(* vmovdqa 0x3e0(%rsi),%ymm11                      #! EA = L0x7fffffffd6c0; Value = 0xf0630224ebb40755; PC = 0x55555555b325 *)
mov ymm11_0 L0x7fffffffd6c0;
mov ymm11_1 L0x7fffffffd6c2;
mov ymm11_2 L0x7fffffffd6c4;
mov ymm11_3 L0x7fffffffd6c6;
mov ymm11_4 L0x7fffffffd6c8;
mov ymm11_5 L0x7fffffffd6ca;
mov ymm11_6 L0x7fffffffd6cc;
mov ymm11_7 L0x7fffffffd6ce;
mov ymm11_8 L0x7fffffffd6d0;
mov ymm11_9 L0x7fffffffd6d2;
mov ymm11_a L0x7fffffffd6d4;
mov ymm11_b L0x7fffffffd6d6;
mov ymm11_c L0x7fffffffd6d8;
mov ymm11_d L0x7fffffffd6da;
mov ymm11_e L0x7fffffffd6dc;
mov ymm11_f L0x7fffffffd6de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555b32d *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555b331 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555b335 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555b339 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555b33d *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555b342 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555b347 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555b34c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x1b0(%rdx),%ymm1                #! EA = L0x5555555612d0; Value = 0x02cf42c8bc387a3a; PC = 0x55555555b351 *)
mov ymm1_0 L0x5555555612d0;
mov ymm1_1 L0x5555555612d2;
mov ymm1_2 L0x5555555612d4;
mov ymm1_3 L0x5555555612d6;
mov ymm1_4 L0x5555555612d8;
mov ymm1_5 L0x5555555612da;
mov ymm1_6 L0x5555555612dc;
mov ymm1_7 L0x5555555612de;
mov ymm1_8 L0x5555555612d0;
mov ymm1_9 L0x5555555612d2;
mov ymm1_a L0x5555555612d4;
mov ymm1_b L0x5555555612d6;
mov ymm1_c L0x5555555612d8;
mov ymm1_d L0x5555555612da;
mov ymm1_e L0x5555555612dc;
mov ymm1_f L0x5555555612de;
(* vbroadcasti128 0x3b0(%rdx),%ymm2                #! EA = L0x5555555614d0; Value = 0xf8cf12c8ec38fe3a; PC = 0x55555555b35a *)
mov ymm2_0 L0x5555555614d0;
mov ymm2_1 L0x5555555614d2;
mov ymm2_2 L0x5555555614d4;
mov ymm2_3 L0x5555555614d6;
mov ymm2_4 L0x5555555614d8;
mov ymm2_5 L0x5555555614da;
mov ymm2_6 L0x5555555614dc;
mov ymm2_7 L0x5555555614de;
mov ymm2_8 L0x5555555614d0;
mov ymm2_9 L0x5555555614d2;
mov ymm2_a L0x5555555614d4;
mov ymm2_b L0x5555555614d6;
mov ymm2_c L0x5555555614d8;
mov ymm2_d L0x5555555614da;
mov ymm2_e L0x5555555614dc;
mov ymm2_f L0x5555555614de;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b363 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b368 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555b36d *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b371 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555b375 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555b379 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x1a0(%rdx),%ymm1                #! EA = L0x5555555612c0; Value = 0x0ffa1e732e4ef81f; PC = 0x55555555b37d *)
mov ymm1_0 L0x5555555612c0;
mov ymm1_1 L0x5555555612c2;
mov ymm1_2 L0x5555555612c4;
mov ymm1_3 L0x5555555612c6;
mov ymm1_4 L0x5555555612c8;
mov ymm1_5 L0x5555555612ca;
mov ymm1_6 L0x5555555612cc;
mov ymm1_7 L0x5555555612ce;
mov ymm1_8 L0x5555555612c0;
mov ymm1_9 L0x5555555612c2;
mov ymm1_a L0x5555555612c4;
mov ymm1_b L0x5555555612c6;
mov ymm1_c L0x5555555612c8;
mov ymm1_d L0x5555555612ca;
mov ymm1_e L0x5555555612cc;
mov ymm1_f L0x5555555612ce;
(* vbroadcasti128 0x3a0(%rdx),%ymm2                #! EA = L0x5555555614c0; Value = 0x13fafc73fa4e0e1f; PC = 0x55555555b386 *)
mov ymm2_0 L0x5555555614c0;
mov ymm2_1 L0x5555555614c2;
mov ymm2_2 L0x5555555614c4;
mov ymm2_3 L0x5555555614c6;
mov ymm2_4 L0x5555555614c8;
mov ymm2_5 L0x5555555614ca;
mov ymm2_6 L0x5555555614cc;
mov ymm2_7 L0x5555555614ce;
mov ymm2_8 L0x5555555614c0;
mov ymm2_9 L0x5555555614c2;
mov ymm2_a L0x5555555614c4;
mov ymm2_b L0x5555555614c6;
mov ymm2_c L0x5555555614c8;
mov ymm2_d L0x5555555614ca;
mov ymm2_e L0x5555555614cc;
mov ymm2_f L0x5555555614ce;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b38f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b394 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555b399 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b39d *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555b3a1 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555b3a5 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x190(%rdx),%ymm1                #! EA = L0x5555555612b0; Value = 0x095b104f72df44a3; PC = 0x55555555b3a9 *)
mov ymm1_0 L0x5555555612b0;
mov ymm1_1 L0x5555555612b2;
mov ymm1_2 L0x5555555612b4;
mov ymm1_3 L0x5555555612b6;
mov ymm1_4 L0x5555555612b8;
mov ymm1_5 L0x5555555612ba;
mov ymm1_6 L0x5555555612bc;
mov ymm1_7 L0x5555555612be;
mov ymm1_8 L0x5555555612b0;
mov ymm1_9 L0x5555555612b2;
mov ymm1_a L0x5555555612b4;
mov ymm1_b L0x5555555612b6;
mov ymm1_c L0x5555555612b8;
mov ymm1_d L0x5555555612ba;
mov ymm1_e L0x5555555612bc;
mov ymm1_f L0x5555555612be;
(* vbroadcasti128 0x390(%rdx),%ymm2                #! EA = L0x5555555614b0; Value = 0xf75b064f08df02a3; PC = 0x55555555b3b2 *)
mov ymm2_0 L0x5555555614b0;
mov ymm2_1 L0x5555555614b2;
mov ymm2_2 L0x5555555614b4;
mov ymm2_3 L0x5555555614b6;
mov ymm2_4 L0x5555555614b8;
mov ymm2_5 L0x5555555614ba;
mov ymm2_6 L0x5555555614bc;
mov ymm2_7 L0x5555555614be;
mov ymm2_8 L0x5555555614b0;
mov ymm2_9 L0x5555555614b2;
mov ymm2_a L0x5555555614b4;
mov ymm2_b L0x5555555614b6;
mov ymm2_c L0x5555555614b8;
mov ymm2_d L0x5555555614ba;
mov ymm2_e L0x5555555614bc;
mov ymm2_f L0x5555555614be;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b3bb *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b3c0 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555b3c5 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555b3c9 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555b3cd *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555b3d1 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x180(%rdx),%ymm1                #! EA = L0x5555555612a0; Value = 0x9f8203c9bf1afd9f; PC = 0x55555555b3d6 *)
mov ymm1_0 L0x5555555612a0;
mov ymm1_1 L0x5555555612a2;
mov ymm1_2 L0x5555555612a4;
mov ymm1_3 L0x5555555612a6;
mov ymm1_4 L0x5555555612a8;
mov ymm1_5 L0x5555555612aa;
mov ymm1_6 L0x5555555612ac;
mov ymm1_7 L0x5555555612ae;
mov ymm1_8 L0x5555555612a0;
mov ymm1_9 L0x5555555612a2;
mov ymm1_a L0x5555555612a4;
mov ymm1_b L0x5555555612a6;
mov ymm1_c L0x5555555612a8;
mov ymm1_d L0x5555555612aa;
mov ymm1_e L0x5555555612ac;
mov ymm1_f L0x5555555612ae;
(* vbroadcasti128 0x380(%rdx),%ymm2                #! EA = L0x5555555614a0; Value = 0xf382fdc9031a139f; PC = 0x55555555b3df *)
mov ymm2_0 L0x5555555614a0;
mov ymm2_1 L0x5555555614a2;
mov ymm2_2 L0x5555555614a4;
mov ymm2_3 L0x5555555614a6;
mov ymm2_4 L0x5555555614a8;
mov ymm2_5 L0x5555555614aa;
mov ymm2_6 L0x5555555614ac;
mov ymm2_7 L0x5555555614ae;
mov ymm2_8 L0x5555555614a0;
mov ymm2_9 L0x5555555614a2;
mov ymm2_a L0x5555555614a4;
mov ymm2_b L0x5555555614a6;
mov ymm2_c L0x5555555614a8;
mov ymm2_d L0x5555555614aa;
mov ymm2_e L0x5555555614ac;
mov ymm2_f L0x5555555614ae;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b3e8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b3ed *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555b3f2 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b3f6 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555b3fa *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555b3fe *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555b403 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555b408 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555b40d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555b411 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555b415 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555b41a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555b41f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555b423 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555b427 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555b42c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555b431 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555b436 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555b43b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555b440 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555b445 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555b44a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555b44f *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555b453 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555b457 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555b45b *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555b45f *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555b464 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555b469 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555b46e *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x158(%rdx),%ymm1                  #! EA = L0x555555561278; Value = 0xa93fc2084b7ec7fb; PC = 0x55555555b473 *)
mov ymm1_0 L0x555555561278;
mov ymm1_1 L0x55555556127a;
mov ymm1_2 L0x55555556127c;
mov ymm1_3 L0x55555556127e;
mov ymm1_4 L0x555555561278;
mov ymm1_5 L0x55555556127a;
mov ymm1_6 L0x55555556127c;
mov ymm1_7 L0x55555556127e;
mov ymm1_8 L0x555555561278;
mov ymm1_9 L0x55555556127a;
mov ymm1_a L0x55555556127c;
mov ymm1_b L0x55555556127e;
mov ymm1_c L0x555555561278;
mov ymm1_d L0x55555556127a;
mov ymm1_e L0x55555556127c;
mov ymm1_f L0x55555556127e;
(* vpbroadcastq 0x358(%rdx),%ymm2                  #! EA = L0x555555561478; Value = 0xff3f1208f77ef5fb; PC = 0x55555555b47c *)
mov ymm2_0 L0x555555561478;
mov ymm2_1 L0x55555556147a;
mov ymm2_2 L0x55555556147c;
mov ymm2_3 L0x55555556147e;
mov ymm2_4 L0x555555561478;
mov ymm2_5 L0x55555556147a;
mov ymm2_6 L0x55555556147c;
mov ymm2_7 L0x55555556147e;
mov ymm2_8 L0x555555561478;
mov ymm2_9 L0x55555556147a;
mov ymm2_a L0x55555556147c;
mov ymm2_b L0x55555556147e;
mov ymm2_c L0x555555561478;
mov ymm2_d L0x55555556147a;
mov ymm2_e L0x55555556147c;
mov ymm2_f L0x55555556147e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b485 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b48a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555b48f *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b493 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b497 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555b49b *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x150(%rdx),%ymm1                  #! EA = L0x555555561270; Value = 0xa7a15ecddf07cfa6; PC = 0x55555555b49f *)
mov ymm1_0 L0x555555561270;
mov ymm1_1 L0x555555561272;
mov ymm1_2 L0x555555561274;
mov ymm1_3 L0x555555561276;
mov ymm1_4 L0x555555561270;
mov ymm1_5 L0x555555561272;
mov ymm1_6 L0x555555561274;
mov ymm1_7 L0x555555561276;
mov ymm1_8 L0x555555561270;
mov ymm1_9 L0x555555561272;
mov ymm1_a L0x555555561274;
mov ymm1_b L0x555555561276;
mov ymm1_c L0x555555561270;
mov ymm1_d L0x555555561272;
mov ymm1_e L0x555555561274;
mov ymm1_f L0x555555561276;
(* vpbroadcastq 0x350(%rdx),%ymm2                  #! EA = L0x555555561470; Value = 0x11a100cd05070ba6; PC = 0x55555555b4a8 *)
mov ymm2_0 L0x555555561470;
mov ymm2_1 L0x555555561472;
mov ymm2_2 L0x555555561474;
mov ymm2_3 L0x555555561476;
mov ymm2_4 L0x555555561470;
mov ymm2_5 L0x555555561472;
mov ymm2_6 L0x555555561474;
mov ymm2_7 L0x555555561476;
mov ymm2_8 L0x555555561470;
mov ymm2_9 L0x555555561472;
mov ymm2_a L0x555555561474;
mov ymm2_b L0x555555561476;
mov ymm2_c L0x555555561470;
mov ymm2_d L0x555555561472;
mov ymm2_e L0x555555561474;
mov ymm2_f L0x555555561476;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b4b1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b4b6 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555b4bb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b4bf *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b4c3 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555b4c7 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x148(%rdx),%ymm1                  #! EA = L0x555555561268; Value = 0xa1de58045d04090c; PC = 0x55555555b4cb *)
mov ymm1_0 L0x555555561268;
mov ymm1_1 L0x55555556126a;
mov ymm1_2 L0x55555556126c;
mov ymm1_3 L0x55555556126e;
mov ymm1_4 L0x555555561268;
mov ymm1_5 L0x55555556126a;
mov ymm1_6 L0x55555556126c;
mov ymm1_7 L0x55555556126e;
mov ymm1_8 L0x555555561268;
mov ymm1_9 L0x55555556126a;
mov ymm1_a L0x55555556126c;
mov ymm1_b L0x55555556126e;
mov ymm1_c L0x555555561268;
mov ymm1_d L0x55555556126a;
mov ymm1_e L0x55555556126c;
mov ymm1_f L0x55555556126e;
(* vpbroadcastq 0x348(%rdx),%ymm2                  #! EA = L0x555555561468; Value = 0x0dde00040504010c; PC = 0x55555555b4d4 *)
mov ymm2_0 L0x555555561468;
mov ymm2_1 L0x55555556146a;
mov ymm2_2 L0x55555556146c;
mov ymm2_3 L0x55555556146e;
mov ymm2_4 L0x555555561468;
mov ymm2_5 L0x55555556146a;
mov ymm2_6 L0x55555556146c;
mov ymm2_7 L0x55555556146e;
mov ymm2_8 L0x555555561468;
mov ymm2_9 L0x55555556146a;
mov ymm2_a L0x55555556146c;
mov ymm2_b L0x55555556146e;
mov ymm2_c L0x555555561468;
mov ymm2_d L0x55555556146a;
mov ymm2_e L0x55555556146c;
mov ymm2_f L0x55555556146e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b4dd *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b4e2 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555b4e7 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555b4eb *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b4ef *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555b4f3 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x140(%rdx),%ymm1                  #! EA = L0x555555561260; Value = 0x4ee67a89a62111ed; PC = 0x55555555b4f8 *)
mov ymm1_0 L0x555555561260;
mov ymm1_1 L0x555555561262;
mov ymm1_2 L0x555555561264;
mov ymm1_3 L0x555555561266;
mov ymm1_4 L0x555555561260;
mov ymm1_5 L0x555555561262;
mov ymm1_6 L0x555555561264;
mov ymm1_7 L0x555555561266;
mov ymm1_8 L0x555555561260;
mov ymm1_9 L0x555555561262;
mov ymm1_a L0x555555561264;
mov ymm1_b L0x555555561266;
mov ymm1_c L0x555555561260;
mov ymm1_d L0x555555561262;
mov ymm1_e L0x555555561264;
mov ymm1_f L0x555555561266;
(* vpbroadcastq 0x340(%rdx),%ymm2                  #! EA = L0x555555561460; Value = 0x0ae6f4891021f3ed; PC = 0x55555555b501 *)
mov ymm2_0 L0x555555561460;
mov ymm2_1 L0x555555561462;
mov ymm2_2 L0x555555561464;
mov ymm2_3 L0x555555561466;
mov ymm2_4 L0x555555561460;
mov ymm2_5 L0x555555561462;
mov ymm2_6 L0x555555561464;
mov ymm2_7 L0x555555561466;
mov ymm2_8 L0x555555561460;
mov ymm2_9 L0x555555561462;
mov ymm2_a L0x555555561464;
mov ymm2_b L0x555555561466;
mov ymm2_c L0x555555561460;
mov ymm2_d L0x555555561462;
mov ymm2_e L0x555555561464;
mov ymm2_f L0x555555561466;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b50a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b50f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555b514 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b518 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b51c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555b520 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555b525 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555b52d *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555b535 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555b539 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b53d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555b541 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555b545 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555b549 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b54d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555b551 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555b555 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555b559 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b55d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555b561 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555b565 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555b569 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555b56d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555b571 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555b575 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555b57a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555b57f *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555b583 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555b587 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555b58c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555b591 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555b595 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555b599 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555b59e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555b5a3 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555b5a8 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555b5ad *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555b5b2 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555b5b7 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555b5bc *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555b5c1 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555b5c5 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555b5c9 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555b5cd *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555b5d1 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555b5d6 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555b5db *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555b5e0 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x12c(%rdx),%ymm1                  #! EA = L0x55555556124c; Value = 0xfcc3398be2fb1c3c; PC = 0x55555555b5e5 *)
mov ymm1_0 L0x55555556124c;
mov ymm1_1 L0x55555556124e;
mov ymm1_2 L0x55555556124c;
mov ymm1_3 L0x55555556124e;
mov ymm1_4 L0x55555556124c;
mov ymm1_5 L0x55555556124e;
mov ymm1_6 L0x55555556124c;
mov ymm1_7 L0x55555556124e;
mov ymm1_8 L0x55555556124c;
mov ymm1_9 L0x55555556124e;
mov ymm1_a L0x55555556124c;
mov ymm1_b L0x55555556124e;
mov ymm1_c L0x55555556124c;
mov ymm1_d L0x55555556124e;
mov ymm1_e L0x55555556124c;
mov ymm1_f L0x55555556124e;
(* vpbroadcastd 0x32c(%rdx),%ymm2                  #! EA = L0x55555556144c; Value = 0xfac3078b10fbf43c; PC = 0x55555555b5ee *)
mov ymm2_0 L0x55555556144c;
mov ymm2_1 L0x55555556144e;
mov ymm2_2 L0x55555556144c;
mov ymm2_3 L0x55555556144e;
mov ymm2_4 L0x55555556144c;
mov ymm2_5 L0x55555556144e;
mov ymm2_6 L0x55555556144c;
mov ymm2_7 L0x55555556144e;
mov ymm2_8 L0x55555556144c;
mov ymm2_9 L0x55555556144e;
mov ymm2_a L0x55555556144c;
mov ymm2_b L0x55555556144e;
mov ymm2_c L0x55555556144c;
mov ymm2_d L0x55555556144e;
mov ymm2_e L0x55555556144c;
mov ymm2_f L0x55555556144e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b5f7 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b5fc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555b601 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b605 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555b609 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555b60d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x128(%rdx),%ymm1                  #! EA = L0x555555561248; Value = 0xe2fb1c3c679663c7; PC = 0x55555555b611 *)
mov ymm1_0 L0x555555561248;
mov ymm1_1 L0x55555556124a;
mov ymm1_2 L0x555555561248;
mov ymm1_3 L0x55555556124a;
mov ymm1_4 L0x555555561248;
mov ymm1_5 L0x55555556124a;
mov ymm1_6 L0x555555561248;
mov ymm1_7 L0x55555556124a;
mov ymm1_8 L0x555555561248;
mov ymm1_9 L0x55555556124a;
mov ymm1_a L0x555555561248;
mov ymm1_b L0x55555556124a;
mov ymm1_c L0x555555561248;
mov ymm1_d L0x55555556124a;
mov ymm1_e L0x555555561248;
mov ymm1_f L0x55555556124a;
(* vpbroadcastd 0x328(%rdx),%ymm2                  #! EA = L0x555555561448; Value = 0x10fbf43c039609c7; PC = 0x55555555b61a *)
mov ymm2_0 L0x555555561448;
mov ymm2_1 L0x55555556144a;
mov ymm2_2 L0x555555561448;
mov ymm2_3 L0x55555556144a;
mov ymm2_4 L0x555555561448;
mov ymm2_5 L0x55555556144a;
mov ymm2_6 L0x555555561448;
mov ymm2_7 L0x55555556144a;
mov ymm2_8 L0x555555561448;
mov ymm2_9 L0x55555556144a;
mov ymm2_a L0x555555561448;
mov ymm2_b L0x55555556144a;
mov ymm2_c L0x555555561448;
mov ymm2_d L0x55555556144a;
mov ymm2_e L0x555555561448;
mov ymm2_f L0x55555556144a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b623 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b628 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555b62d *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b631 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555b635 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555b639 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x124(%rdx),%ymm1                  #! EA = L0x555555561244; Value = 0x679663c7ee3d9239; PC = 0x55555555b63d *)
mov ymm1_0 L0x555555561244;
mov ymm1_1 L0x555555561246;
mov ymm1_2 L0x555555561244;
mov ymm1_3 L0x555555561246;
mov ymm1_4 L0x555555561244;
mov ymm1_5 L0x555555561246;
mov ymm1_6 L0x555555561244;
mov ymm1_7 L0x555555561246;
mov ymm1_8 L0x555555561244;
mov ymm1_9 L0x555555561246;
mov ymm1_a L0x555555561244;
mov ymm1_b L0x555555561246;
mov ymm1_c L0x555555561244;
mov ymm1_d L0x555555561246;
mov ymm1_e L0x555555561244;
mov ymm1_f L0x555555561246;
(* vpbroadcastd 0x324(%rdx),%ymm2                  #! EA = L0x555555561444; Value = 0x039609c7f03dec39; PC = 0x55555555b646 *)
mov ymm2_0 L0x555555561444;
mov ymm2_1 L0x555555561446;
mov ymm2_2 L0x555555561444;
mov ymm2_3 L0x555555561446;
mov ymm2_4 L0x555555561444;
mov ymm2_5 L0x555555561446;
mov ymm2_6 L0x555555561444;
mov ymm2_7 L0x555555561446;
mov ymm2_8 L0x555555561444;
mov ymm2_9 L0x555555561446;
mov ymm2_a L0x555555561444;
mov ymm2_b L0x555555561446;
mov ymm2_c L0x555555561444;
mov ymm2_d L0x555555561446;
mov ymm2_e L0x555555561444;
mov ymm2_f L0x555555561446;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b64f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b654 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555b659 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555b65d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555b661 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555b665 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x120(%rdx),%ymm1                  #! EA = L0x555555561240; Value = 0xee3d92395a10450b; PC = 0x55555555b66a *)
mov ymm1_0 L0x555555561240;
mov ymm1_1 L0x555555561242;
mov ymm1_2 L0x555555561240;
mov ymm1_3 L0x555555561242;
mov ymm1_4 L0x555555561240;
mov ymm1_5 L0x555555561242;
mov ymm1_6 L0x555555561240;
mov ymm1_7 L0x555555561242;
mov ymm1_8 L0x555555561240;
mov ymm1_9 L0x555555561242;
mov ymm1_a L0x555555561240;
mov ymm1_b L0x555555561242;
mov ymm1_c L0x555555561240;
mov ymm1_d L0x555555561242;
mov ymm1_e L0x555555561240;
mov ymm1_f L0x555555561242;
(* vpbroadcastd 0x320(%rdx),%ymm2                  #! EA = L0x555555561440; Value = 0xf03dec39fa10130b; PC = 0x55555555b673 *)
mov ymm2_0 L0x555555561440;
mov ymm2_1 L0x555555561442;
mov ymm2_2 L0x555555561440;
mov ymm2_3 L0x555555561442;
mov ymm2_4 L0x555555561440;
mov ymm2_5 L0x555555561442;
mov ymm2_6 L0x555555561440;
mov ymm2_7 L0x555555561442;
mov ymm2_8 L0x555555561440;
mov ymm2_9 L0x555555561442;
mov ymm2_a L0x555555561440;
mov ymm2_b L0x555555561442;
mov ymm2_c L0x555555561440;
mov ymm2_d L0x555555561442;
mov ymm2_e L0x555555561440;
mov ymm2_f L0x555555561442;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555b67c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555b681 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555b686 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b68a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555b68e *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555b692 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555b697 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555b69c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555b6a1 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555b6a5 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555b6a9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555b6ae *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555b6b3 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555b6b7 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555b6bb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555b6c0 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555b6c5 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555b6ca *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555b6cf *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555b6d4 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555b6d9 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555b6de *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x5a15(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555b6e3 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555b6eb *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555b6f1 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555b6f6 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555b6fc *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555b701 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555b707 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555b70c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555b712 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555b717 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555b71d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555b722 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555b728 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555b72d *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555b733 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555b738 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555b73e *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 3 *****************)




(**************** CUT  30 *****************)

cut and [
eqmod (8*inp_poly0c0**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10724],
eqmod (8*inp_poly0c1**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 29],
eqmod (8*inp_poly0c2**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1145],
eqmod (8*inp_poly0c3**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9608],
eqmod (8*inp_poly0c4**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1444],
eqmod (8*inp_poly0c5**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9309],
eqmod (8*inp_poly0c6**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1943],
eqmod (8*inp_poly0c7**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8810]
,
eqmod (8*inp_poly0c8**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5012],
eqmod (8*inp_poly0c9**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5741],
eqmod (8*inp_poly0ca**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7161],
eqmod (8*inp_poly0cb**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3592],
eqmod (8*inp_poly0cc**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6655],
eqmod (8*inp_poly0cd**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4098],
eqmod (8*inp_poly0ce**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8292],
eqmod (8*inp_poly0cf**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2461]
,
eqmod (8*inp_poly0d0**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9546],
eqmod (8*inp_poly0d1**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1207],
eqmod (8*inp_poly0d2**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9464],
eqmod (8*inp_poly0d3**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1289],
eqmod (8*inp_poly0d4**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10414],
eqmod (8*inp_poly0d5**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 339],
eqmod (8*inp_poly0d6**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5598],
eqmod (8*inp_poly0d7**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5155]
,
eqmod (8*inp_poly0d8**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9487],
eqmod (8*inp_poly0d9**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1266],
eqmod (8*inp_poly0da**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5490],
eqmod (8*inp_poly0db**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5263],
eqmod (8*inp_poly0dc**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2228],
eqmod (8*inp_poly0dd**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8525],
eqmod (8*inp_poly0de**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9551],
eqmod (8*inp_poly0df**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1202]
,
eqmod (8*inp_poly0e0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8829],
eqmod (8*inp_poly0e1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1924],
eqmod (8*inp_poly0e2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2177],
eqmod (8*inp_poly0e3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8576],
eqmod (8*inp_poly0e4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6070],
eqmod (8*inp_poly0e5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4683],
eqmod (8*inp_poly0e6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10625],
eqmod (8*inp_poly0e7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 128]
,
eqmod (8*inp_poly0e8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3256],
eqmod (8*inp_poly0e9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7497],
eqmod (8*inp_poly0ea**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7896],
eqmod (8*inp_poly0eb**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2857],
eqmod (8*inp_poly0ec**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2135],
eqmod (8*inp_poly0ed**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8618],
eqmod (8*inp_poly0ee**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7661],
eqmod (8*inp_poly0ef**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3092]
,
eqmod (8*inp_poly0f0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5575],
eqmod (8*inp_poly0f1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5178],
eqmod (8*inp_poly0f2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6809],
eqmod (8*inp_poly0f3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3944],
eqmod (8*inp_poly0f4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4577],
eqmod (8*inp_poly0f5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6176],
eqmod (8*inp_poly0f6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2830],
eqmod (8*inp_poly0f7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7923]
,
eqmod (8*inp_poly0f8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4627],
eqmod (8*inp_poly0f9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6126],
eqmod (8*inp_poly0fa**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4193],
eqmod (8*inp_poly0fb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6560],
eqmod (8*inp_poly0fc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1353],
eqmod (8*inp_poly0fd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9400],
eqmod (8*inp_poly0fe**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1828],
eqmod (8*inp_poly0ff**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8925]
] prove with [ cuts [ 3 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-12381)@16<=s ymm3_4,ymm3_4<s12381@16,(-12381)@16<=s ymm3_5,ymm3_5<s12381@16,
(-11537)@16<=s ymm3_6,ymm3_6<s11537@16,(-11537)@16<=s ymm3_7,ymm3_7<s11537@16,
( -6113)@16<=s ymm3_8,ymm3_8<s 6113@16,( -6113)@16<=s ymm3_9,ymm3_9<s 6113@16,
( -6055)@16<=s ymm3_a,ymm3_a<s 6055@16,( -6055)@16<=s ymm3_b,ymm3_b<s 6055@16,
( -6149)@16<=s ymm3_c,ymm3_c<s 6149@16,( -6149)@16<=s ymm3_d,ymm3_d<s 6149@16,
( -6122)@16<=s ymm3_e,ymm3_e<s 6122@16,( -6122)@16<=s ymm3_f,ymm3_f<s 6122@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-12336)@16<=s ymm5_4,ymm5_4<s12336@16,(-12336)@16<=s ymm5_5,ymm5_5<s12336@16,
(-11557)@16<=s ymm5_6,ymm5_6<s11557@16,(-11557)@16<=s ymm5_7,ymm5_7<s11557@16,
( -5854)@16<=s ymm5_8,ymm5_8<s 5854@16,( -5854)@16<=s ymm5_9,ymm5_9<s 5854@16,
( -5852)@16<=s ymm5_a,ymm5_a<s 5852@16,( -5852)@16<=s ymm5_b,ymm5_b<s 5852@16,
( -5862)@16<=s ymm5_c,ymm5_c<s 5862@16,( -5862)@16<=s ymm5_d,ymm5_d<s 5862@16,
( -5856)@16<=s ymm5_e,ymm5_e<s 5856@16,( -5856)@16<=s ymm5_f,ymm5_f<s 5856@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12335)@16<=s ymm4_4,ymm4_4<s12335@16,(-12335)@16<=s ymm4_5,ymm4_5<s12335@16,
(-11573)@16<=s ymm4_6,ymm4_6<s11573@16,(-11573)@16<=s ymm4_7,ymm4_7<s11573@16,
( -5524)@16<=s ymm4_8,ymm4_8<s 5524@16,( -5524)@16<=s ymm4_9,ymm4_9<s 5524@16,
( -5524)@16<=s ymm4_a,ymm4_a<s 5524@16,( -5524)@16<=s ymm4_b,ymm4_b<s 5524@16,
( -5538)@16<=s ymm4_c,ymm4_c<s 5538@16,( -5538)@16<=s ymm4_d,ymm4_d<s 5538@16,
( -5524)@16<=s ymm4_e,ymm4_e<s 5524@16,( -5524)@16<=s ymm4_f,ymm4_f<s 5524@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-12185)@16<=s ymm7_4,ymm7_4<s12185@16,(-12185)@16<=s ymm7_5,ymm7_5<s12185@16,
(-11488)@16<=s ymm7_6,ymm7_6<s11488@16,(-11488)@16<=s ymm7_7,ymm7_7<s11488@16,
( -5777)@16<=s ymm7_8,ymm7_8<s 5777@16,( -5777)@16<=s ymm7_9,ymm7_9<s 5777@16,
( -5777)@16<=s ymm7_a,ymm7_a<s 5777@16,( -5777)@16<=s ymm7_b,ymm7_b<s 5777@16,
( -5809)@16<=s ymm7_c,ymm7_c<s 5809@16,( -5809)@16<=s ymm7_d,ymm7_d<s 5809@16,
( -5793)@16<=s ymm7_e,ymm7_e<s 5793@16,( -5793)@16<=s ymm7_f,ymm7_f<s 5793@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-11929)@16<=s ymm6_4,ymm6_4<s11929@16,(-11929)@16<=s ymm6_5,ymm6_5<s11929@16,
(-11349)@16<=s ymm6_6,ymm6_6<s11349@16,(-11349)@16<=s ymm6_7,ymm6_7<s11349@16,
( -6052)@16<=s ymm6_8,ymm6_8<s 6052@16,( -6052)@16<=s ymm6_9,ymm6_9<s 6052@16,
( -6021)@16<=s ymm6_a,ymm6_a<s 6021@16,( -6021)@16<=s ymm6_b,ymm6_b<s 6021@16,
( -6092)@16<=s ymm6_c,ymm6_c<s 6092@16,( -6092)@16<=s ymm6_d,ymm6_d<s 6092@16,
( -6052)@16<=s ymm6_e,ymm6_e<s 6052@16,( -6052)@16<=s ymm6_f,ymm6_f<s 6052@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-11273)@16<=s ymm9_4,ymm9_4<s11273@16,(-11273)@16<=s ymm9_5,ymm9_5<s11273@16,
(-10999)@16<=s ymm9_6,ymm9_6<s10999@16,(-10999)@16<=s ymm9_7,ymm9_7<s10999@16,
( -6196)@16<=s ymm9_8,ymm9_8<s 6196@16,( -6196)@16<=s ymm9_9,ymm9_9<s 6196@16,
( -6196)@16<=s ymm9_a,ymm9_a<s 6196@16,( -6196)@16<=s ymm9_b,ymm9_b<s 6196@16,
( -6196)@16<=s ymm9_c,ymm9_c<s 6196@16,( -6196)@16<=s ymm9_d,ymm9_d<s 6196@16,
( -6196)@16<=s ymm9_e,ymm9_e<s 6196@16,( -6196)@16<=s ymm9_f,ymm9_f<s 6196@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-12656)@16<=s ymm8_4,ymm8_4<s12656@16,(-12656)@16<=s ymm8_5,ymm8_5<s12656@16,
(-11755)@16<=s ymm8_6,ymm8_6<s11755@16,(-11755)@16<=s ymm8_7,ymm8_7<s11755@16,
( -5628)@16<=s ymm8_8,ymm8_8<s 5628@16,( -5628)@16<=s ymm8_9,ymm8_9<s 5628@16,
( -5621)@16<=s ymm8_a,ymm8_a<s 5621@16,( -5621)@16<=s ymm8_b,ymm8_b<s 5621@16,
( -5649)@16<=s ymm8_c,ymm8_c<s 5649@16,( -5649)@16<=s ymm8_d,ymm8_d<s 5649@16,
( -5635)@16<=s ymm8_e,ymm8_e<s 5635@16,( -5635)@16<=s ymm8_f,ymm8_f<s 5635@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-13168)@16<=s ymm11_4,ymm11_4<s13168@16,(-13168)@16<=s ymm11_5,ymm11_5<s13168@16,
(-11965)@16<=s ymm11_6,ymm11_6<s11965@16,(-11965)@16<=s ymm11_7,ymm11_7<s11965@16,
( -6176)@16<=s ymm11_8,ymm11_8<s 6176@16,( -6176)@16<=s ymm11_9,ymm11_9<s 6176@16,
( -6159)@16<=s ymm11_a,ymm11_a<s 6159@16,( -6159)@16<=s ymm11_b,ymm11_b<s 6159@16,
( -6334)@16<=s ymm11_c,ymm11_c<s 6334@16,( -6334)@16<=s ymm11_d,ymm11_d<s 6334@16,
( -6238)@16<=s ymm11_e,ymm11_e<s 6238@16,( -6238)@16<=s ymm11_f,ymm11_f<s 6238@16
] prove with [ precondition ];



(**************** CUT  31 *****************)

ecut and [
eqmod (8*inp_poly0c0**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10724],
eqmod (8*inp_poly0c1**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 29],
eqmod (8*inp_poly0c2**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1145],
eqmod (8*inp_poly0c3**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9608],
eqmod (8*inp_poly0c4**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1444],
eqmod (8*inp_poly0c5**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9309],
eqmod (8*inp_poly0c6**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1943],
eqmod (8*inp_poly0c7**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8810]
,
eqmod (8*inp_poly0c8**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5012],
eqmod (8*inp_poly0c9**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5741],
eqmod (8*inp_poly0ca**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7161],
eqmod (8*inp_poly0cb**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3592],
eqmod (8*inp_poly0cc**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6655],
eqmod (8*inp_poly0cd**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4098],
eqmod (8*inp_poly0ce**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8292],
eqmod (8*inp_poly0cf**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2461]
] prove with [ cuts [ 30 ] ];



(**************** CUT  32 *****************)

ecut and [
eqmod (8*inp_poly0d0**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9546],
eqmod (8*inp_poly0d1**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1207],
eqmod (8*inp_poly0d2**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9464],
eqmod (8*inp_poly0d3**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1289],
eqmod (8*inp_poly0d4**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 10414],
eqmod (8*inp_poly0d5**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 339],
eqmod (8*inp_poly0d6**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5598],
eqmod (8*inp_poly0d7**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5155]
,
eqmod (8*inp_poly0d8**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9487],
eqmod (8*inp_poly0d9**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1266],
eqmod (8*inp_poly0da**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5490],
eqmod (8*inp_poly0db**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5263],
eqmod (8*inp_poly0dc**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2228],
eqmod (8*inp_poly0dd**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8525],
eqmod (8*inp_poly0de**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9551],
eqmod (8*inp_poly0df**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1202]
] prove with [ cuts [ 30 ] ];



(**************** CUT  33 *****************)

ecut and [
eqmod (8*inp_poly0e0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8829],
eqmod (8*inp_poly0e1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1924],
eqmod (8*inp_poly0e2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2177],
eqmod (8*inp_poly0e3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8576],
eqmod (8*inp_poly0e4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6070],
eqmod (8*inp_poly0e5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4683],
eqmod (8*inp_poly0e6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10625],
eqmod (8*inp_poly0e7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 128]
,
eqmod (8*inp_poly0e8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3256],
eqmod (8*inp_poly0e9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7497],
eqmod (8*inp_poly0ea**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7896],
eqmod (8*inp_poly0eb**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2857],
eqmod (8*inp_poly0ec**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2135],
eqmod (8*inp_poly0ed**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8618],
eqmod (8*inp_poly0ee**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7661],
eqmod (8*inp_poly0ef**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3092]
] prove with [ cuts [ 30 ] ];



(**************** CUT  34 *****************)

ecut and [
eqmod (8*inp_poly0f0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5575],
eqmod (8*inp_poly0f1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5178],
eqmod (8*inp_poly0f2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6809],
eqmod (8*inp_poly0f3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3944],
eqmod (8*inp_poly0f4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4577],
eqmod (8*inp_poly0f5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6176],
eqmod (8*inp_poly0f6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2830],
eqmod (8*inp_poly0f7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7923]
,
eqmod (8*inp_poly0f8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4627],
eqmod (8*inp_poly0f9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6126],
eqmod (8*inp_poly0fa**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4193],
eqmod (8*inp_poly0fb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6560],
eqmod (8*inp_poly0fc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1353],
eqmod (8*inp_poly0fd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9400],
eqmod (8*inp_poly0fe**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1828],
eqmod (8*inp_poly0ff**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8925]
] prove with [ cuts [ 30 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555b743 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555b747 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555b74b *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555b74f *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555b753 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555b758 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555b75d *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555b762 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555b767 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555b76f *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x116(%rdx),%ymm1                  #! EA = L0x555555561236; Value = 0x252491c0b85730bc; PC = 0x55555555b777 *)
mov ymm1_0 L0x555555561236;
mov ymm1_1 L0x555555561236;
mov ymm1_2 L0x555555561236;
mov ymm1_3 L0x555555561236;
mov ymm1_4 L0x555555561236;
mov ymm1_5 L0x555555561236;
mov ymm1_6 L0x555555561236;
mov ymm1_7 L0x555555561236;
mov ymm1_8 L0x555555561236;
mov ymm1_9 L0x555555561236;
mov ymm1_a L0x555555561236;
mov ymm1_b L0x555555561236;
mov ymm1_c L0x555555561236;
mov ymm1_d L0x555555561236;
mov ymm1_e L0x555555561236;
mov ymm1_f L0x555555561236;
(* vpbroadcastw 0x316(%rdx),%ymm2                  #! EA = L0x555555561436; Value = 0x0d2411c0fe5708bc; PC = 0x55555555b780 *)
mov ymm2_0 L0x555555561436;
mov ymm2_1 L0x555555561436;
mov ymm2_2 L0x555555561436;
mov ymm2_3 L0x555555561436;
mov ymm2_4 L0x555555561436;
mov ymm2_5 L0x555555561436;
mov ymm2_6 L0x555555561436;
mov ymm2_7 L0x555555561436;
mov ymm2_8 L0x555555561436;
mov ymm2_9 L0x555555561436;
mov ymm2_a L0x555555561436;
mov ymm2_b L0x555555561436;
mov ymm2_c L0x555555561436;
mov ymm2_d L0x555555561436;
mov ymm2_e L0x555555561436;
mov ymm2_f L0x555555561436;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555b789 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b78d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b791 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555b795 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x114(%rdx),%ymm1                  #! EA = L0x555555561234; Value = 0x91c0b85730bc8cf7; PC = 0x55555555b799 *)
mov ymm1_0 L0x555555561234;
mov ymm1_1 L0x555555561234;
mov ymm1_2 L0x555555561234;
mov ymm1_3 L0x555555561234;
mov ymm1_4 L0x555555561234;
mov ymm1_5 L0x555555561234;
mov ymm1_6 L0x555555561234;
mov ymm1_7 L0x555555561234;
mov ymm1_8 L0x555555561234;
mov ymm1_9 L0x555555561234;
mov ymm1_a L0x555555561234;
mov ymm1_b L0x555555561234;
mov ymm1_c L0x555555561234;
mov ymm1_d L0x555555561234;
mov ymm1_e L0x555555561234;
mov ymm1_f L0x555555561234;
(* vpbroadcastw 0x314(%rdx),%ymm2                  #! EA = L0x555555561434; Value = 0x11c0fe5708bc12f7; PC = 0x55555555b7a2 *)
mov ymm2_0 L0x555555561434;
mov ymm2_1 L0x555555561434;
mov ymm2_2 L0x555555561434;
mov ymm2_3 L0x555555561434;
mov ymm2_4 L0x555555561434;
mov ymm2_5 L0x555555561434;
mov ymm2_6 L0x555555561434;
mov ymm2_7 L0x555555561434;
mov ymm2_8 L0x555555561434;
mov ymm2_9 L0x555555561434;
mov ymm2_a L0x555555561434;
mov ymm2_b L0x555555561434;
mov ymm2_c L0x555555561434;
mov ymm2_d L0x555555561434;
mov ymm2_e L0x555555561434;
mov ymm2_f L0x555555561434;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555b7ab *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b7af *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b7b3 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555b7b7 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x112(%rdx),%ymm1                  #! EA = L0x555555561232; Value = 0xb85730bc8cf7c126; PC = 0x55555555b7bb *)
mov ymm1_0 L0x555555561232;
mov ymm1_1 L0x555555561232;
mov ymm1_2 L0x555555561232;
mov ymm1_3 L0x555555561232;
mov ymm1_4 L0x555555561232;
mov ymm1_5 L0x555555561232;
mov ymm1_6 L0x555555561232;
mov ymm1_7 L0x555555561232;
mov ymm1_8 L0x555555561232;
mov ymm1_9 L0x555555561232;
mov ymm1_a L0x555555561232;
mov ymm1_b L0x555555561232;
mov ymm1_c L0x555555561232;
mov ymm1_d L0x555555561232;
mov ymm1_e L0x555555561232;
mov ymm1_f L0x555555561232;
(* vpbroadcastw 0x312(%rdx),%ymm2                  #! EA = L0x555555561432; Value = 0xfe5708bc12f7fd26; PC = 0x55555555b7c4 *)
mov ymm2_0 L0x555555561432;
mov ymm2_1 L0x555555561432;
mov ymm2_2 L0x555555561432;
mov ymm2_3 L0x555555561432;
mov ymm2_4 L0x555555561432;
mov ymm2_5 L0x555555561432;
mov ymm2_6 L0x555555561432;
mov ymm2_7 L0x555555561432;
mov ymm2_8 L0x555555561432;
mov ymm2_9 L0x555555561432;
mov ymm2_a L0x555555561432;
mov ymm2_b L0x555555561432;
mov ymm2_c L0x555555561432;
mov ymm2_d L0x555555561432;
mov ymm2_e L0x555555561432;
mov ymm2_f L0x555555561432;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555b7cd *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555b7d1 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b7d5 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555b7d9 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x110(%rdx),%ymm1                  #! EA = L0x555555561230; Value = 0x30bc8cf7c126e487; PC = 0x55555555b7de *)
mov ymm1_0 L0x555555561230;
mov ymm1_1 L0x555555561230;
mov ymm1_2 L0x555555561230;
mov ymm1_3 L0x555555561230;
mov ymm1_4 L0x555555561230;
mov ymm1_5 L0x555555561230;
mov ymm1_6 L0x555555561230;
mov ymm1_7 L0x555555561230;
mov ymm1_8 L0x555555561230;
mov ymm1_9 L0x555555561230;
mov ymm1_a L0x555555561230;
mov ymm1_b L0x555555561230;
mov ymm1_c L0x555555561230;
mov ymm1_d L0x555555561230;
mov ymm1_e L0x555555561230;
mov ymm1_f L0x555555561230;
(* vpbroadcastw 0x310(%rdx),%ymm2                  #! EA = L0x555555561430; Value = 0x08bc12f7fd260a87; PC = 0x55555555b7e7 *)
mov ymm2_0 L0x555555561430;
mov ymm2_1 L0x555555561430;
mov ymm2_2 L0x555555561430;
mov ymm2_3 L0x555555561430;
mov ymm2_4 L0x555555561430;
mov ymm2_5 L0x555555561430;
mov ymm2_6 L0x555555561430;
mov ymm2_7 L0x555555561430;
mov ymm2_8 L0x555555561430;
mov ymm2_9 L0x555555561430;
mov ymm2_a L0x555555561430;
mov ymm2_b L0x555555561430;
mov ymm2_c L0x555555561430;
mov ymm2_d L0x555555561430;
mov ymm2_e L0x555555561430;
mov ymm2_f L0x555555561430;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555b7f0 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b7f4 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b7f8 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555b7fc *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555b801 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555b806 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b80b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555b80f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555b814 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555b819 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b81e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555b822 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555b827 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555b82c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b831 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555b835 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555b83a *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555b83f *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555b844 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555b848 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555b84d *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555b851 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555b855 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555b859 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555b85d *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555b861 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555b865 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555b86a *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x10a(%rdx),%ymm1                  #! EA = L0x55555556122a; Value = 0xe487ae886f65ad9a; PC = 0x55555555b86f *)
mov ymm1_0 L0x55555556122a;
mov ymm1_1 L0x55555556122a;
mov ymm1_2 L0x55555556122a;
mov ymm1_3 L0x55555556122a;
mov ymm1_4 L0x55555556122a;
mov ymm1_5 L0x55555556122a;
mov ymm1_6 L0x55555556122a;
mov ymm1_7 L0x55555556122a;
mov ymm1_8 L0x55555556122a;
mov ymm1_9 L0x55555556122a;
mov ymm1_a L0x55555556122a;
mov ymm1_b L0x55555556122a;
mov ymm1_c L0x55555556122a;
mov ymm1_d L0x55555556122a;
mov ymm1_e L0x55555556122a;
mov ymm1_f L0x55555556122a;
(* vpbroadcastw 0x30a(%rdx),%ymm2                  #! EA = L0x55555556142a; Value = 0x0a87fe880165f19a; PC = 0x55555555b878 *)
mov ymm2_0 L0x55555556142a;
mov ymm2_1 L0x55555556142a;
mov ymm2_2 L0x55555556142a;
mov ymm2_3 L0x55555556142a;
mov ymm2_4 L0x55555556142a;
mov ymm2_5 L0x55555556142a;
mov ymm2_6 L0x55555556142a;
mov ymm2_7 L0x55555556142a;
mov ymm2_8 L0x55555556142a;
mov ymm2_9 L0x55555556142a;
mov ymm2_a L0x55555556142a;
mov ymm2_b L0x55555556142a;
mov ymm2_c L0x55555556142a;
mov ymm2_d L0x55555556142a;
mov ymm2_e L0x55555556142a;
mov ymm2_f L0x55555556142a;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555b881 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555b885 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b889 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555b88d *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555b891 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555b895 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b899 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555b89d *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x108(%rdx),%ymm1                  #! EA = L0x555555561228; Value = 0xae886f65ad9a276d; PC = 0x55555555b8a1 *)
mov ymm1_0 L0x555555561228;
mov ymm1_1 L0x555555561228;
mov ymm1_2 L0x555555561228;
mov ymm1_3 L0x555555561228;
mov ymm1_4 L0x555555561228;
mov ymm1_5 L0x555555561228;
mov ymm1_6 L0x555555561228;
mov ymm1_7 L0x555555561228;
mov ymm1_8 L0x555555561228;
mov ymm1_9 L0x555555561228;
mov ymm1_a L0x555555561228;
mov ymm1_b L0x555555561228;
mov ymm1_c L0x555555561228;
mov ymm1_d L0x555555561228;
mov ymm1_e L0x555555561228;
mov ymm1_f L0x555555561228;
(* vpbroadcastw 0x308(%rdx),%ymm2                  #! EA = L0x555555561428; Value = 0xfe880165f19a096d; PC = 0x55555555b8aa *)
mov ymm2_0 L0x555555561428;
mov ymm2_1 L0x555555561428;
mov ymm2_2 L0x555555561428;
mov ymm2_3 L0x555555561428;
mov ymm2_4 L0x555555561428;
mov ymm2_5 L0x555555561428;
mov ymm2_6 L0x555555561428;
mov ymm2_7 L0x555555561428;
mov ymm2_8 L0x555555561428;
mov ymm2_9 L0x555555561428;
mov ymm2_a L0x555555561428;
mov ymm2_b L0x555555561428;
mov ymm2_c L0x555555561428;
mov ymm2_d L0x555555561428;
mov ymm2_e L0x555555561428;
mov ymm2_f L0x555555561428;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555b8b3 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555b8b7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b8bb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555b8bf *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555b8c3 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b8c7 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555b8cb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555b8cf *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555b8d4 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555b8d8 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555b8dc *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555b8e0 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555b8e4 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555b8e8 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555b8ec *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555b8f1 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555b8f6 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555b8ff *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555b908 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555b90c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b910 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555b914 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555b918 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555b91c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b920 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555b924 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555b928 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555b92c *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b930 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555b934 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555b938 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555b93c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b940 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555b944 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555b949 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555b94e *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b953 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555b957 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555b95b *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555b960 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555b965 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555b969 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x300(%rdi)                       #! EA = L0x7fffffffd5e0; PC = 0x55555555b96d *)
mov L0x7fffffffd5e0 ymm9_0;
mov L0x7fffffffd5e2 ymm9_1;
mov L0x7fffffffd5e4 ymm9_2;
mov L0x7fffffffd5e6 ymm9_3;
mov L0x7fffffffd5e8 ymm9_4;
mov L0x7fffffffd5ea ymm9_5;
mov L0x7fffffffd5ec ymm9_6;
mov L0x7fffffffd5ee ymm9_7;
mov L0x7fffffffd5f0 ymm9_8;
mov L0x7fffffffd5f2 ymm9_9;
mov L0x7fffffffd5f4 ymm9_a;
mov L0x7fffffffd5f6 ymm9_b;
mov L0x7fffffffd5f8 ymm9_c;
mov L0x7fffffffd5fa ymm9_d;
mov L0x7fffffffd5fc ymm9_e;
mov L0x7fffffffd5fe ymm9_f;
(* vmovdqa %ymm8,0x320(%rdi)                       #! EA = L0x7fffffffd600; PC = 0x55555555b975 *)
mov L0x7fffffffd600 ymm8_0;
mov L0x7fffffffd602 ymm8_1;
mov L0x7fffffffd604 ymm8_2;
mov L0x7fffffffd606 ymm8_3;
mov L0x7fffffffd608 ymm8_4;
mov L0x7fffffffd60a ymm8_5;
mov L0x7fffffffd60c ymm8_6;
mov L0x7fffffffd60e ymm8_7;
mov L0x7fffffffd610 ymm8_8;
mov L0x7fffffffd612 ymm8_9;
mov L0x7fffffffd614 ymm8_a;
mov L0x7fffffffd616 ymm8_b;
mov L0x7fffffffd618 ymm8_c;
mov L0x7fffffffd61a ymm8_d;
mov L0x7fffffffd61c ymm8_e;
mov L0x7fffffffd61e ymm8_f;
(* vmovdqa %ymm10,0x340(%rdi)                      #! EA = L0x7fffffffd620; PC = 0x55555555b97d *)
mov L0x7fffffffd620 ymm10_0;
mov L0x7fffffffd622 ymm10_1;
mov L0x7fffffffd624 ymm10_2;
mov L0x7fffffffd626 ymm10_3;
mov L0x7fffffffd628 ymm10_4;
mov L0x7fffffffd62a ymm10_5;
mov L0x7fffffffd62c ymm10_6;
mov L0x7fffffffd62e ymm10_7;
mov L0x7fffffffd630 ymm10_8;
mov L0x7fffffffd632 ymm10_9;
mov L0x7fffffffd634 ymm10_a;
mov L0x7fffffffd636 ymm10_b;
mov L0x7fffffffd638 ymm10_c;
mov L0x7fffffffd63a ymm10_d;
mov L0x7fffffffd63c ymm10_e;
mov L0x7fffffffd63e ymm10_f;
(* vmovdqa %ymm3,0x360(%rdi)                       #! EA = L0x7fffffffd640; PC = 0x55555555b985 *)
mov L0x7fffffffd640 ymm3_0;
mov L0x7fffffffd642 ymm3_1;
mov L0x7fffffffd644 ymm3_2;
mov L0x7fffffffd646 ymm3_3;
mov L0x7fffffffd648 ymm3_4;
mov L0x7fffffffd64a ymm3_5;
mov L0x7fffffffd64c ymm3_6;
mov L0x7fffffffd64e ymm3_7;
mov L0x7fffffffd650 ymm3_8;
mov L0x7fffffffd652 ymm3_9;
mov L0x7fffffffd654 ymm3_a;
mov L0x7fffffffd656 ymm3_b;
mov L0x7fffffffd658 ymm3_c;
mov L0x7fffffffd65a ymm3_d;
mov L0x7fffffffd65c ymm3_e;
mov L0x7fffffffd65e ymm3_f;
(* vmovdqa %ymm5,0x380(%rdi)                       #! EA = L0x7fffffffd660; PC = 0x55555555b98d *)
mov L0x7fffffffd660 ymm5_0;
mov L0x7fffffffd662 ymm5_1;
mov L0x7fffffffd664 ymm5_2;
mov L0x7fffffffd666 ymm5_3;
mov L0x7fffffffd668 ymm5_4;
mov L0x7fffffffd66a ymm5_5;
mov L0x7fffffffd66c ymm5_6;
mov L0x7fffffffd66e ymm5_7;
mov L0x7fffffffd670 ymm5_8;
mov L0x7fffffffd672 ymm5_9;
mov L0x7fffffffd674 ymm5_a;
mov L0x7fffffffd676 ymm5_b;
mov L0x7fffffffd678 ymm5_c;
mov L0x7fffffffd67a ymm5_d;
mov L0x7fffffffd67c ymm5_e;
mov L0x7fffffffd67e ymm5_f;
(* vmovdqa %ymm4,0x3a0(%rdi)                       #! EA = L0x7fffffffd680; PC = 0x55555555b995 *)
mov L0x7fffffffd680 ymm4_0;
mov L0x7fffffffd682 ymm4_1;
mov L0x7fffffffd684 ymm4_2;
mov L0x7fffffffd686 ymm4_3;
mov L0x7fffffffd688 ymm4_4;
mov L0x7fffffffd68a ymm4_5;
mov L0x7fffffffd68c ymm4_6;
mov L0x7fffffffd68e ymm4_7;
mov L0x7fffffffd690 ymm4_8;
mov L0x7fffffffd692 ymm4_9;
mov L0x7fffffffd694 ymm4_a;
mov L0x7fffffffd696 ymm4_b;
mov L0x7fffffffd698 ymm4_c;
mov L0x7fffffffd69a ymm4_d;
mov L0x7fffffffd69c ymm4_e;
mov L0x7fffffffd69e ymm4_f;
(* vmovdqa %ymm6,0x3c0(%rdi)                       #! EA = L0x7fffffffd6a0; PC = 0x55555555b99d *)
mov L0x7fffffffd6a0 ymm6_0;
mov L0x7fffffffd6a2 ymm6_1;
mov L0x7fffffffd6a4 ymm6_2;
mov L0x7fffffffd6a6 ymm6_3;
mov L0x7fffffffd6a8 ymm6_4;
mov L0x7fffffffd6aa ymm6_5;
mov L0x7fffffffd6ac ymm6_6;
mov L0x7fffffffd6ae ymm6_7;
mov L0x7fffffffd6b0 ymm6_8;
mov L0x7fffffffd6b2 ymm6_9;
mov L0x7fffffffd6b4 ymm6_a;
mov L0x7fffffffd6b6 ymm6_b;
mov L0x7fffffffd6b8 ymm6_c;
mov L0x7fffffffd6ba ymm6_d;
mov L0x7fffffffd6bc ymm6_e;
mov L0x7fffffffd6be ymm6_f;
(* vmovdqa %ymm11,0x3e0(%rdi)                      #! EA = L0x7fffffffd6c0; PC = 0x55555555b9a5 *)
mov L0x7fffffffd6c0 ymm11_0;
mov L0x7fffffffd6c2 ymm11_1;
mov L0x7fffffffd6c4 ymm11_2;
mov L0x7fffffffd6c6 ymm11_3;
mov L0x7fffffffd6c8 ymm11_4;
mov L0x7fffffffd6ca ymm11_5;
mov L0x7fffffffd6cc ymm11_6;
mov L0x7fffffffd6ce ymm11_7;
mov L0x7fffffffd6d0 ymm11_8;
mov L0x7fffffffd6d2 ymm11_9;
mov L0x7fffffffd6d4 ymm11_a;
mov L0x7fffffffd6d6 ymm11_b;
mov L0x7fffffffd6d8 ymm11_c;
mov L0x7fffffffd6da ymm11_d;
mov L0x7fffffffd6dc ymm11_e;
mov L0x7fffffffd6de ymm11_f;



(**************** LEVELS 3-5, 3 *****************)

ghost segment3@bit :
segment3 = 
x**  0*(
L0x7fffffffd5e0*x** 0+L0x7fffffffd5e2*x** 1+L0x7fffffffd5e4*x** 2+
L0x7fffffffd5e6*x** 3+L0x7fffffffd5e8*x** 4+L0x7fffffffd5ea*x** 5+
L0x7fffffffd5ec*x** 6+L0x7fffffffd5ee*x** 7+L0x7fffffffd5f0*x** 8+
L0x7fffffffd5f2*x** 9+L0x7fffffffd5f4*x**10+L0x7fffffffd5f6*x**11+
L0x7fffffffd5f8*x**12+L0x7fffffffd5fa*x**13+L0x7fffffffd5fc*x**14+
L0x7fffffffd5fe*x**15)+
x** 16*(
L0x7fffffffd600*x** 0+L0x7fffffffd602*x** 1+L0x7fffffffd604*x** 2+
L0x7fffffffd606*x** 3+L0x7fffffffd608*x** 4+L0x7fffffffd60a*x** 5+
L0x7fffffffd60c*x** 6+L0x7fffffffd60e*x** 7+L0x7fffffffd610*x** 8+
L0x7fffffffd612*x** 9+L0x7fffffffd614*x**10+L0x7fffffffd616*x**11+
L0x7fffffffd618*x**12+L0x7fffffffd61a*x**13+L0x7fffffffd61c*x**14+
L0x7fffffffd61e*x**15)+
x** 32*(
L0x7fffffffd620*x** 0+L0x7fffffffd622*x** 1+L0x7fffffffd624*x** 2+
L0x7fffffffd626*x** 3+L0x7fffffffd628*x** 4+L0x7fffffffd62a*x** 5+
L0x7fffffffd62c*x** 6+L0x7fffffffd62e*x** 7+L0x7fffffffd630*x** 8+
L0x7fffffffd632*x** 9+L0x7fffffffd634*x**10+L0x7fffffffd636*x**11+
L0x7fffffffd638*x**12+L0x7fffffffd63a*x**13+L0x7fffffffd63c*x**14+
L0x7fffffffd63e*x**15)+
x** 48*(
L0x7fffffffd640*x** 0+L0x7fffffffd642*x** 1+L0x7fffffffd644*x** 2+
L0x7fffffffd646*x** 3+L0x7fffffffd648*x** 4+L0x7fffffffd64a*x** 5+
L0x7fffffffd64c*x** 6+L0x7fffffffd64e*x** 7+L0x7fffffffd650*x** 8+
L0x7fffffffd652*x** 9+L0x7fffffffd654*x**10+L0x7fffffffd656*x**11+
L0x7fffffffd658*x**12+L0x7fffffffd65a*x**13+L0x7fffffffd65c*x**14+
L0x7fffffffd65e*x**15)+
x** 64*(
L0x7fffffffd660*x** 0+L0x7fffffffd662*x** 1+L0x7fffffffd664*x** 2+
L0x7fffffffd666*x** 3+L0x7fffffffd668*x** 4+L0x7fffffffd66a*x** 5+
L0x7fffffffd66c*x** 6+L0x7fffffffd66e*x** 7+L0x7fffffffd670*x** 8+
L0x7fffffffd672*x** 9+L0x7fffffffd674*x**10+L0x7fffffffd676*x**11+
L0x7fffffffd678*x**12+L0x7fffffffd67a*x**13+L0x7fffffffd67c*x**14+
L0x7fffffffd67e*x**15)+
x** 80*(
L0x7fffffffd680*x** 0+L0x7fffffffd682*x** 1+L0x7fffffffd684*x** 2+
L0x7fffffffd686*x** 3+L0x7fffffffd688*x** 4+L0x7fffffffd68a*x** 5+
L0x7fffffffd68c*x** 6+L0x7fffffffd68e*x** 7+L0x7fffffffd690*x** 8+
L0x7fffffffd692*x** 9+L0x7fffffffd694*x**10+L0x7fffffffd696*x**11+
L0x7fffffffd698*x**12+L0x7fffffffd69a*x**13+L0x7fffffffd69c*x**14+
L0x7fffffffd69e*x**15)+
x** 96*(
L0x7fffffffd6a0*x** 0+L0x7fffffffd6a2*x** 1+L0x7fffffffd6a4*x** 2+
L0x7fffffffd6a6*x** 3+L0x7fffffffd6a8*x** 4+L0x7fffffffd6aa*x** 5+
L0x7fffffffd6ac*x** 6+L0x7fffffffd6ae*x** 7+L0x7fffffffd6b0*x** 8+
L0x7fffffffd6b2*x** 9+L0x7fffffffd6b4*x**10+L0x7fffffffd6b6*x**11+
L0x7fffffffd6b8*x**12+L0x7fffffffd6ba*x**13+L0x7fffffffd6bc*x**14+
L0x7fffffffd6be*x**15)+
x**112*(
L0x7fffffffd6c0*x** 0+L0x7fffffffd6c2*x** 1+L0x7fffffffd6c4*x** 2+
L0x7fffffffd6c6*x** 3+L0x7fffffffd6c8*x** 4+L0x7fffffffd6ca*x** 5+
L0x7fffffffd6cc*x** 6+L0x7fffffffd6ce*x** 7+L0x7fffffffd6d0*x** 8+
L0x7fffffffd6d2*x** 9+L0x7fffffffd6d4*x**10+L0x7fffffffd6d6*x**11+
L0x7fffffffd6d8*x**12+L0x7fffffffd6da*x**13+L0x7fffffffd6dc*x**14+
L0x7fffffffd6de*x**15)
&& true;


(**************** CUT  35 *****************)

cut
and [
eqmod (64*inp_poly0c0**2) (segment3) [10753, x**2 - 10724],
eqmod (64*inp_poly0c1**2) (segment3) [10753, x**2 - 29],
eqmod (64*inp_poly0c2**2) (segment3) [10753, x**2 - 1145],
eqmod (64*inp_poly0c3**2) (segment3) [10753, x**2 - 9608],
eqmod (64*inp_poly0c4**2) (segment3) [10753, x**2 - 1444],
eqmod (64*inp_poly0c5**2) (segment3) [10753, x**2 - 9309],
eqmod (64*inp_poly0c6**2) (segment3) [10753, x**2 - 1943],
eqmod (64*inp_poly0c7**2) (segment3) [10753, x**2 - 8810]
,
eqmod (64*inp_poly0c8**2) (segment3) [10753, x**2 - 5012],
eqmod (64*inp_poly0c9**2) (segment3) [10753, x**2 - 5741],
eqmod (64*inp_poly0ca**2) (segment3) [10753, x**2 - 7161],
eqmod (64*inp_poly0cb**2) (segment3) [10753, x**2 - 3592],
eqmod (64*inp_poly0cc**2) (segment3) [10753, x**2 - 6655],
eqmod (64*inp_poly0cd**2) (segment3) [10753, x**2 - 4098],
eqmod (64*inp_poly0ce**2) (segment3) [10753, x**2 - 8292],
eqmod (64*inp_poly0cf**2) (segment3) [10753, x**2 - 2461]
] prove with [ cuts [ 31 ] ],
and [
eqmod (64*inp_poly0d0**2) (segment3) [10753, x**2 - 9546],
eqmod (64*inp_poly0d1**2) (segment3) [10753, x**2 - 1207],
eqmod (64*inp_poly0d2**2) (segment3) [10753, x**2 - 9464],
eqmod (64*inp_poly0d3**2) (segment3) [10753, x**2 - 1289],
eqmod (64*inp_poly0d4**2) (segment3) [10753, x**2 - 10414],
eqmod (64*inp_poly0d5**2) (segment3) [10753, x**2 - 339],
eqmod (64*inp_poly0d6**2) (segment3) [10753, x**2 - 5598],
eqmod (64*inp_poly0d7**2) (segment3) [10753, x**2 - 5155]
,
eqmod (64*inp_poly0d8**2) (segment3) [10753, x**2 - 9487],
eqmod (64*inp_poly0d9**2) (segment3) [10753, x**2 - 1266],
eqmod (64*inp_poly0da**2) (segment3) [10753, x**2 - 5490],
eqmod (64*inp_poly0db**2) (segment3) [10753, x**2 - 5263],
eqmod (64*inp_poly0dc**2) (segment3) [10753, x**2 - 2228],
eqmod (64*inp_poly0dd**2) (segment3) [10753, x**2 - 8525],
eqmod (64*inp_poly0de**2) (segment3) [10753, x**2 - 9551],
eqmod (64*inp_poly0df**2) (segment3) [10753, x**2 - 1202]
] prove with [ cuts [ 32 ] ],
and [
eqmod (64*inp_poly0e0**2) (segment3) [10753, x**2 - 8829],
eqmod (64*inp_poly0e1**2) (segment3) [10753, x**2 - 1924],
eqmod (64*inp_poly0e2**2) (segment3) [10753, x**2 - 2177],
eqmod (64*inp_poly0e3**2) (segment3) [10753, x**2 - 8576],
eqmod (64*inp_poly0e4**2) (segment3) [10753, x**2 - 6070],
eqmod (64*inp_poly0e5**2) (segment3) [10753, x**2 - 4683],
eqmod (64*inp_poly0e6**2) (segment3) [10753, x**2 - 10625],
eqmod (64*inp_poly0e7**2) (segment3) [10753, x**2 - 128]
,
eqmod (64*inp_poly0e8**2) (segment3) [10753, x**2 - 3256],
eqmod (64*inp_poly0e9**2) (segment3) [10753, x**2 - 7497],
eqmod (64*inp_poly0ea**2) (segment3) [10753, x**2 - 7896],
eqmod (64*inp_poly0eb**2) (segment3) [10753, x**2 - 2857],
eqmod (64*inp_poly0ec**2) (segment3) [10753, x**2 - 2135],
eqmod (64*inp_poly0ed**2) (segment3) [10753, x**2 - 8618],
eqmod (64*inp_poly0ee**2) (segment3) [10753, x**2 - 7661],
eqmod (64*inp_poly0ef**2) (segment3) [10753, x**2 - 3092]
] prove with [ cuts [ 33 ] ],
and [
eqmod (64*inp_poly0f0**2) (segment3) [10753, x**2 - 5575],
eqmod (64*inp_poly0f1**2) (segment3) [10753, x**2 - 5178],
eqmod (64*inp_poly0f2**2) (segment3) [10753, x**2 - 6809],
eqmod (64*inp_poly0f3**2) (segment3) [10753, x**2 - 3944],
eqmod (64*inp_poly0f4**2) (segment3) [10753, x**2 - 4577],
eqmod (64*inp_poly0f5**2) (segment3) [10753, x**2 - 6176],
eqmod (64*inp_poly0f6**2) (segment3) [10753, x**2 - 2830],
eqmod (64*inp_poly0f7**2) (segment3) [10753, x**2 - 7923]
,
eqmod (64*inp_poly0f8**2) (segment3) [10753, x**2 - 4627],
eqmod (64*inp_poly0f9**2) (segment3) [10753, x**2 - 6126],
eqmod (64*inp_poly0fa**2) (segment3) [10753, x**2 - 4193],
eqmod (64*inp_poly0fb**2) (segment3) [10753, x**2 - 6560],
eqmod (64*inp_poly0fc**2) (segment3) [10753, x**2 - 1353],
eqmod (64*inp_poly0fd**2) (segment3) [10753, x**2 - 9400],
eqmod (64*inp_poly0fe**2) (segment3) [10753, x**2 - 1828],
eqmod (64*inp_poly0ff**2) (segment3) [10753, x**2 - 8925]
] prove with [ cuts [ 34 ] ] && and [
( -5631)@16<=s L0x7fffffffd5e0,L0x7fffffffd5e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd5e2,L0x7fffffffd5e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd5e4,L0x7fffffffd5e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd5e6,L0x7fffffffd5e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd5e8,L0x7fffffffd5e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd5ea,L0x7fffffffd5ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd5ec,L0x7fffffffd5ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd5ee,L0x7fffffffd5ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd5f0,L0x7fffffffd5f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd5f2,L0x7fffffffd5f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd5f4,L0x7fffffffd5f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd5f6,L0x7fffffffd5f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd5f8,L0x7fffffffd5f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd5fa,L0x7fffffffd5fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd5fc,L0x7fffffffd5fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd5fe,L0x7fffffffd5fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd600,L0x7fffffffd600<s 5631@16,
( -5631)@16<=s L0x7fffffffd602,L0x7fffffffd602<s 5631@16,
( -5631)@16<=s L0x7fffffffd604,L0x7fffffffd604<s 5631@16,
( -5631)@16<=s L0x7fffffffd606,L0x7fffffffd606<s 5631@16,
( -5631)@16<=s L0x7fffffffd608,L0x7fffffffd608<s 5631@16,
( -5631)@16<=s L0x7fffffffd60a,L0x7fffffffd60a<s 5631@16,
( -5631)@16<=s L0x7fffffffd60c,L0x7fffffffd60c<s 5631@16,
( -5631)@16<=s L0x7fffffffd60e,L0x7fffffffd60e<s 5631@16,
( -5631)@16<=s L0x7fffffffd610,L0x7fffffffd610<s 5631@16,
( -5631)@16<=s L0x7fffffffd612,L0x7fffffffd612<s 5631@16,
( -5631)@16<=s L0x7fffffffd614,L0x7fffffffd614<s 5631@16,
( -5631)@16<=s L0x7fffffffd616,L0x7fffffffd616<s 5631@16,
( -5631)@16<=s L0x7fffffffd618,L0x7fffffffd618<s 5631@16,
( -5631)@16<=s L0x7fffffffd61a,L0x7fffffffd61a<s 5631@16,
( -5631)@16<=s L0x7fffffffd61c,L0x7fffffffd61c<s 5631@16,
( -5631)@16<=s L0x7fffffffd61e,L0x7fffffffd61e<s 5631@16,
(-11770)@16<=s L0x7fffffffd620,L0x7fffffffd620<s11770@16,
(-11770)@16<=s L0x7fffffffd622,L0x7fffffffd622<s11770@16,
(-11770)@16<=s L0x7fffffffd624,L0x7fffffffd624<s11770@16,
(-11770)@16<=s L0x7fffffffd626,L0x7fffffffd626<s11770@16,
(-11770)@16<=s L0x7fffffffd628,L0x7fffffffd628<s11770@16,
(-11770)@16<=s L0x7fffffffd62a,L0x7fffffffd62a<s11770@16,
(-11770)@16<=s L0x7fffffffd62c,L0x7fffffffd62c<s11770@16,
(-11770)@16<=s L0x7fffffffd62e,L0x7fffffffd62e<s11770@16,
(-11729)@16<=s L0x7fffffffd630,L0x7fffffffd630<s11729@16,
(-11729)@16<=s L0x7fffffffd632,L0x7fffffffd632<s11729@16,
(-11729)@16<=s L0x7fffffffd634,L0x7fffffffd634<s11729@16,
(-11729)@16<=s L0x7fffffffd636,L0x7fffffffd636<s11729@16,
(-11729)@16<=s L0x7fffffffd638,L0x7fffffffd638<s11729@16,
(-11729)@16<=s L0x7fffffffd63a,L0x7fffffffd63a<s11729@16,
(-11729)@16<=s L0x7fffffffd63c,L0x7fffffffd63c<s11729@16,
(-11729)@16<=s L0x7fffffffd63e,L0x7fffffffd63e<s11729@16,
(-11876)@16<=s L0x7fffffffd640,L0x7fffffffd640<s11876@16,
(-11876)@16<=s L0x7fffffffd642,L0x7fffffffd642<s11876@16,
(-11876)@16<=s L0x7fffffffd644,L0x7fffffffd644<s11876@16,
(-11876)@16<=s L0x7fffffffd646,L0x7fffffffd646<s11876@16,
(-11915)@16<=s L0x7fffffffd648,L0x7fffffffd648<s11915@16,
(-11915)@16<=s L0x7fffffffd64a,L0x7fffffffd64a<s11915@16,
(-11876)@16<=s L0x7fffffffd64c,L0x7fffffffd64c<s11876@16,
(-11876)@16<=s L0x7fffffffd64e,L0x7fffffffd64e<s11876@16,
(-11825)@16<=s L0x7fffffffd650,L0x7fffffffd650<s11825@16,
(-11825)@16<=s L0x7fffffffd652,L0x7fffffffd652<s11825@16,
(-11825)@16<=s L0x7fffffffd654,L0x7fffffffd654<s11825@16,
(-11825)@16<=s L0x7fffffffd656,L0x7fffffffd656<s11825@16,
(-11825)@16<=s L0x7fffffffd658,L0x7fffffffd658<s11825@16,
(-11825)@16<=s L0x7fffffffd65a,L0x7fffffffd65a<s11825@16,
(-11825)@16<=s L0x7fffffffd65c,L0x7fffffffd65c<s11825@16,
(-11825)@16<=s L0x7fffffffd65e,L0x7fffffffd65e<s11825@16
] prove with [ cuts [ 30 ] ];


(**************** CUT  36 *****************)

cut true && true;



(* vmovdqa 0x400(%rsi),%ymm4                       #! EA = L0x7fffffffd6e0; Value = 0x0616f36df884fe47; PC = 0x55555555b9ad *)
mov ymm4_0 L0x7fffffffd6e0;
mov ymm4_1 L0x7fffffffd6e2;
mov ymm4_2 L0x7fffffffd6e4;
mov ymm4_3 L0x7fffffffd6e6;
mov ymm4_4 L0x7fffffffd6e8;
mov ymm4_5 L0x7fffffffd6ea;
mov ymm4_6 L0x7fffffffd6ec;
mov ymm4_7 L0x7fffffffd6ee;
mov ymm4_8 L0x7fffffffd6f0;
mov ymm4_9 L0x7fffffffd6f2;
mov ymm4_a L0x7fffffffd6f4;
mov ymm4_b L0x7fffffffd6f6;
mov ymm4_c L0x7fffffffd6f8;
mov ymm4_d L0x7fffffffd6fa;
mov ymm4_e L0x7fffffffd6fc;
mov ymm4_f L0x7fffffffd6fe;
(* vmovdqa 0x420(%rsi),%ymm5                       #! EA = L0x7fffffffd700; Value = 0xeee913e70da2f308; PC = 0x55555555b9b5 *)
mov ymm5_0 L0x7fffffffd700;
mov ymm5_1 L0x7fffffffd702;
mov ymm5_2 L0x7fffffffd704;
mov ymm5_3 L0x7fffffffd706;
mov ymm5_4 L0x7fffffffd708;
mov ymm5_5 L0x7fffffffd70a;
mov ymm5_6 L0x7fffffffd70c;
mov ymm5_7 L0x7fffffffd70e;
mov ymm5_8 L0x7fffffffd710;
mov ymm5_9 L0x7fffffffd712;
mov ymm5_a L0x7fffffffd714;
mov ymm5_b L0x7fffffffd716;
mov ymm5_c L0x7fffffffd718;
mov ymm5_d L0x7fffffffd71a;
mov ymm5_e L0x7fffffffd71c;
mov ymm5_f L0x7fffffffd71e;
(* vmovdqa 0x440(%rsi),%ymm6                       #! EA = L0x7fffffffd720; Value = 0x0f2606ec00f8f44e; PC = 0x55555555b9bd *)
mov ymm6_0 L0x7fffffffd720;
mov ymm6_1 L0x7fffffffd722;
mov ymm6_2 L0x7fffffffd724;
mov ymm6_3 L0x7fffffffd726;
mov ymm6_4 L0x7fffffffd728;
mov ymm6_5 L0x7fffffffd72a;
mov ymm6_6 L0x7fffffffd72c;
mov ymm6_7 L0x7fffffffd72e;
mov ymm6_8 L0x7fffffffd730;
mov ymm6_9 L0x7fffffffd732;
mov ymm6_a L0x7fffffffd734;
mov ymm6_b L0x7fffffffd736;
mov ymm6_c L0x7fffffffd738;
mov ymm6_d L0x7fffffffd73a;
mov ymm6_e L0x7fffffffd73c;
mov ymm6_f L0x7fffffffd73e;
(* vmovdqa 0x460(%rsi),%ymm7                       #! EA = L0x7fffffffd740; Value = 0x0858084deb1a12f9; PC = 0x55555555b9c5 *)
mov ymm7_0 L0x7fffffffd740;
mov ymm7_1 L0x7fffffffd742;
mov ymm7_2 L0x7fffffffd744;
mov ymm7_3 L0x7fffffffd746;
mov ymm7_4 L0x7fffffffd748;
mov ymm7_5 L0x7fffffffd74a;
mov ymm7_6 L0x7fffffffd74c;
mov ymm7_7 L0x7fffffffd74e;
mov ymm7_8 L0x7fffffffd750;
mov ymm7_9 L0x7fffffffd752;
mov ymm7_a L0x7fffffffd754;
mov ymm7_b L0x7fffffffd756;
mov ymm7_c L0x7fffffffd758;
mov ymm7_d L0x7fffffffd75a;
mov ymm7_e L0x7fffffffd75c;
mov ymm7_f L0x7fffffffd75e;
(* vmovdqa 0x480(%rsi),%ymm8                       #! EA = L0x7fffffffd760; Value = 0x073f0202fc0efc6d; PC = 0x55555555b9cd *)
mov ymm8_0 L0x7fffffffd760;
mov ymm8_1 L0x7fffffffd762;
mov ymm8_2 L0x7fffffffd764;
mov ymm8_3 L0x7fffffffd766;
mov ymm8_4 L0x7fffffffd768;
mov ymm8_5 L0x7fffffffd76a;
mov ymm8_6 L0x7fffffffd76c;
mov ymm8_7 L0x7fffffffd76e;
mov ymm8_8 L0x7fffffffd770;
mov ymm8_9 L0x7fffffffd772;
mov ymm8_a L0x7fffffffd774;
mov ymm8_b L0x7fffffffd776;
mov ymm8_c L0x7fffffffd778;
mov ymm8_d L0x7fffffffd77a;
mov ymm8_e L0x7fffffffd77c;
mov ymm8_f L0x7fffffffd77e;
(* vmovdqa 0x4a0(%rsi),%ymm9                       #! EA = L0x7fffffffd780; Value = 0xebca131301091120; PC = 0x55555555b9d5 *)
mov ymm9_0 L0x7fffffffd780;
mov ymm9_1 L0x7fffffffd782;
mov ymm9_2 L0x7fffffffd784;
mov ymm9_3 L0x7fffffffd786;
mov ymm9_4 L0x7fffffffd788;
mov ymm9_5 L0x7fffffffd78a;
mov ymm9_6 L0x7fffffffd78c;
mov ymm9_7 L0x7fffffffd78e;
mov ymm9_8 L0x7fffffffd790;
mov ymm9_9 L0x7fffffffd792;
mov ymm9_a L0x7fffffffd794;
mov ymm9_b L0x7fffffffd796;
mov ymm9_c L0x7fffffffd798;
mov ymm9_d L0x7fffffffd79a;
mov ymm9_e L0x7fffffffd79c;
mov ymm9_f L0x7fffffffd79e;
(* vmovdqa 0x4c0(%rsi),%ymm10                      #! EA = L0x7fffffffd7a0; Value = 0x0497fa5106f312cb; PC = 0x55555555b9dd *)
mov ymm10_0 L0x7fffffffd7a0;
mov ymm10_1 L0x7fffffffd7a2;
mov ymm10_2 L0x7fffffffd7a4;
mov ymm10_3 L0x7fffffffd7a6;
mov ymm10_4 L0x7fffffffd7a8;
mov ymm10_5 L0x7fffffffd7aa;
mov ymm10_6 L0x7fffffffd7ac;
mov ymm10_7 L0x7fffffffd7ae;
mov ymm10_8 L0x7fffffffd7b0;
mov ymm10_9 L0x7fffffffd7b2;
mov ymm10_a L0x7fffffffd7b4;
mov ymm10_b L0x7fffffffd7b6;
mov ymm10_c L0x7fffffffd7b8;
mov ymm10_d L0x7fffffffd7ba;
mov ymm10_e L0x7fffffffd7bc;
mov ymm10_f L0x7fffffffd7be;
(* vmovdqa 0x4e0(%rsi),%ymm11                      #! EA = L0x7fffffffd7c0; Value = 0xf66f04a612070a22; PC = 0x55555555b9e5 *)
mov ymm11_0 L0x7fffffffd7c0;
mov ymm11_1 L0x7fffffffd7c2;
mov ymm11_2 L0x7fffffffd7c4;
mov ymm11_3 L0x7fffffffd7c6;
mov ymm11_4 L0x7fffffffd7c8;
mov ymm11_5 L0x7fffffffd7ca;
mov ymm11_6 L0x7fffffffd7cc;
mov ymm11_7 L0x7fffffffd7ce;
mov ymm11_8 L0x7fffffffd7d0;
mov ymm11_9 L0x7fffffffd7d2;
mov ymm11_a L0x7fffffffd7d4;
mov ymm11_b L0x7fffffffd7d6;
mov ymm11_c L0x7fffffffd7d8;
mov ymm11_d L0x7fffffffd7da;
mov ymm11_e L0x7fffffffd7dc;
mov ymm11_f L0x7fffffffd7de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555b9ed *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555b9f1 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555b9f5 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555b9f9 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555b9fd *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555ba02 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555ba07 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555ba0c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x2f0(%rdx),%ymm1                #! EA = L0x555555561410; Value = 0x5e41be57aaf6d0be; PC = 0x55555555ba11 *)
mov ymm1_0 L0x555555561410;
mov ymm1_1 L0x555555561412;
mov ymm1_2 L0x555555561414;
mov ymm1_3 L0x555555561416;
mov ymm1_4 L0x555555561418;
mov ymm1_5 L0x55555556141a;
mov ymm1_6 L0x55555556141c;
mov ymm1_7 L0x55555556141e;
mov ymm1_8 L0x555555561410;
mov ymm1_9 L0x555555561412;
mov ymm1_a L0x555555561414;
mov ymm1_b L0x555555561416;
mov ymm1_c L0x555555561418;
mov ymm1_d L0x55555556141a;
mov ymm1_e L0x55555556141c;
mov ymm1_f L0x55555556141e;
(* vbroadcasti128 0x4f0(%rdx),%ymm2                #! EA = L0x555555561610; Value = 0x0841045706f6fcbe; PC = 0x55555555ba1a *)
mov ymm2_0 L0x555555561610;
mov ymm2_1 L0x555555561612;
mov ymm2_2 L0x555555561614;
mov ymm2_3 L0x555555561616;
mov ymm2_4 L0x555555561618;
mov ymm2_5 L0x55555556161a;
mov ymm2_6 L0x55555556161c;
mov ymm2_7 L0x55555556161e;
mov ymm2_8 L0x555555561610;
mov ymm2_9 L0x555555561612;
mov ymm2_a L0x555555561614;
mov ymm2_b L0x555555561616;
mov ymm2_c L0x555555561618;
mov ymm2_d L0x55555556161a;
mov ymm2_e L0x55555556161c;
mov ymm2_f L0x55555556161e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ba23 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ba28 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555ba2d *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555ba31 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ba35 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555ba39 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x2e0(%rdx),%ymm1                #! EA = L0x555555561400; Value = 0x1e795ae5f9b7ca0d; PC = 0x55555555ba3d *)
mov ymm1_0 L0x555555561400;
mov ymm1_1 L0x555555561402;
mov ymm1_2 L0x555555561404;
mov ymm1_3 L0x555555561406;
mov ymm1_4 L0x555555561408;
mov ymm1_5 L0x55555556140a;
mov ymm1_6 L0x55555556140c;
mov ymm1_7 L0x55555556140e;
mov ymm1_8 L0x555555561400;
mov ymm1_9 L0x555555561402;
mov ymm1_a L0x555555561404;
mov ymm1_b L0x555555561406;
mov ymm1_c L0x555555561408;
mov ymm1_d L0x55555556140a;
mov ymm1_e L0x55555556140c;
mov ymm1_f L0x55555556140e;
(* vbroadcasti128 0x4e0(%rdx),%ymm2                #! EA = L0x555555561600; Value = 0xf879ece5ffb7ec0d; PC = 0x55555555ba46 *)
mov ymm2_0 L0x555555561600;
mov ymm2_1 L0x555555561602;
mov ymm2_2 L0x555555561604;
mov ymm2_3 L0x555555561606;
mov ymm2_4 L0x555555561608;
mov ymm2_5 L0x55555556160a;
mov ymm2_6 L0x55555556160c;
mov ymm2_7 L0x55555556160e;
mov ymm2_8 L0x555555561600;
mov ymm2_9 L0x555555561602;
mov ymm2_a L0x555555561604;
mov ymm2_b L0x555555561606;
mov ymm2_c L0x555555561608;
mov ymm2_d L0x55555556160a;
mov ymm2_e L0x55555556160c;
mov ymm2_f L0x55555556160e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ba4f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ba54 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555ba59 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555ba5d *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ba61 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555ba65 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x2d0(%rdx),%ymm1                #! EA = L0x5555555613f0; Value = 0xcb4450b532e01f5b; PC = 0x55555555ba69 *)
mov ymm1_0 L0x5555555613f0;
mov ymm1_1 L0x5555555613f2;
mov ymm1_2 L0x5555555613f4;
mov ymm1_3 L0x5555555613f6;
mov ymm1_4 L0x5555555613f8;
mov ymm1_5 L0x5555555613fa;
mov ymm1_6 L0x5555555613fc;
mov ymm1_7 L0x5555555613fe;
mov ymm1_8 L0x5555555613f0;
mov ymm1_9 L0x5555555613f2;
mov ymm1_a L0x5555555613f4;
mov ymm1_b L0x5555555613f6;
mov ymm1_c L0x5555555613f8;
mov ymm1_d L0x5555555613fa;
mov ymm1_e L0x5555555613fc;
mov ymm1_f L0x5555555613fe;
(* vbroadcasti128 0x4d0(%rdx),%ymm2                #! EA = L0x5555555615f0; Value = 0xf34402b5f2e00d5b; PC = 0x55555555ba72 *)
mov ymm2_0 L0x5555555615f0;
mov ymm2_1 L0x5555555615f2;
mov ymm2_2 L0x5555555615f4;
mov ymm2_3 L0x5555555615f6;
mov ymm2_4 L0x5555555615f8;
mov ymm2_5 L0x5555555615fa;
mov ymm2_6 L0x5555555615fc;
mov ymm2_7 L0x5555555615fe;
mov ymm2_8 L0x5555555615f0;
mov ymm2_9 L0x5555555615f2;
mov ymm2_a L0x5555555615f4;
mov ymm2_b L0x5555555615f6;
mov ymm2_c L0x5555555615f8;
mov ymm2_d L0x5555555615fa;
mov ymm2_e L0x5555555615fc;
mov ymm2_f L0x5555555615fe;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ba7b *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ba80 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555ba85 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555ba89 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ba8d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555ba91 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x2c0(%rdx),%ymm1                #! EA = L0x5555555613e0; Value = 0x316da839ef6806e7; PC = 0x55555555ba96 *)
mov ymm1_0 L0x5555555613e0;
mov ymm1_1 L0x5555555613e2;
mov ymm1_2 L0x5555555613e4;
mov ymm1_3 L0x5555555613e6;
mov ymm1_4 L0x5555555613e8;
mov ymm1_5 L0x5555555613ea;
mov ymm1_6 L0x5555555613ec;
mov ymm1_7 L0x5555555613ee;
mov ymm1_8 L0x5555555613e0;
mov ymm1_9 L0x5555555613e2;
mov ymm1_a L0x5555555613e4;
mov ymm1_b L0x5555555613e6;
mov ymm1_c L0x5555555613e8;
mov ymm1_d L0x5555555613ea;
mov ymm1_e L0x5555555613ec;
mov ymm1_f L0x5555555613ee;
(* vbroadcasti128 0x4c0(%rdx),%ymm2                #! EA = L0x5555555615e0; Value = 0x136d0239ff68ece7; PC = 0x55555555ba9f *)
mov ymm2_0 L0x5555555615e0;
mov ymm2_1 L0x5555555615e2;
mov ymm2_2 L0x5555555615e4;
mov ymm2_3 L0x5555555615e6;
mov ymm2_4 L0x5555555615e8;
mov ymm2_5 L0x5555555615ea;
mov ymm2_6 L0x5555555615ec;
mov ymm2_7 L0x5555555615ee;
mov ymm2_8 L0x5555555615e0;
mov ymm2_9 L0x5555555615e2;
mov ymm2_a L0x5555555615e4;
mov ymm2_b L0x5555555615e6;
mov ymm2_c L0x5555555615e8;
mov ymm2_d L0x5555555615ea;
mov ymm2_e L0x5555555615ec;
mov ymm2_f L0x5555555615ee;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555baa8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555baad *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555bab2 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555bab6 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555baba *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555babe *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555bac3 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555bac8 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555bacd *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555bad1 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555bad5 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555bada *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555badf *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555bae3 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555bae7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555baec *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555baf1 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555baf6 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555bafb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555bb00 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555bb05 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555bb0a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555bb0f *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555bb13 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555bb17 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555bb1b *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555bb1f *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555bb24 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555bb29 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555bb2e *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x1f8(%rdx),%ymm1                  #! EA = L0x555555561318; Value = 0xd47bdfca9c2d91d8; PC = 0x55555555bb33 *)
mov ymm1_0 L0x555555561318;
mov ymm1_1 L0x55555556131a;
mov ymm1_2 L0x55555556131c;
mov ymm1_3 L0x55555556131e;
mov ymm1_4 L0x555555561318;
mov ymm1_5 L0x55555556131a;
mov ymm1_6 L0x55555556131c;
mov ymm1_7 L0x55555556131e;
mov ymm1_8 L0x555555561318;
mov ymm1_9 L0x55555556131a;
mov ymm1_a L0x55555556131c;
mov ymm1_b L0x55555556131e;
mov ymm1_c L0x555555561318;
mov ymm1_d L0x55555556131a;
mov ymm1_e L0x55555556131c;
mov ymm1_f L0x55555556131e;
(* vpbroadcastq 0x3f8(%rdx),%ymm2                  #! EA = L0x555555561518; Value = 0x027b03cafe2d01d8; PC = 0x55555555bb3c *)
mov ymm2_0 L0x555555561518;
mov ymm2_1 L0x55555556151a;
mov ymm2_2 L0x55555556151c;
mov ymm2_3 L0x55555556151e;
mov ymm2_4 L0x555555561518;
mov ymm2_5 L0x55555556151a;
mov ymm2_6 L0x55555556151c;
mov ymm2_7 L0x55555556151e;
mov ymm2_8 L0x555555561518;
mov ymm2_9 L0x55555556151a;
mov ymm2_a L0x55555556151c;
mov ymm2_b L0x55555556151e;
mov ymm2_c L0x555555561518;
mov ymm2_d L0x55555556151a;
mov ymm2_e L0x55555556151c;
mov ymm2_f L0x55555556151e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bb45 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bb4a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555bb4f *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555bb53 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bb57 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555bb5b *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x1f0(%rdx),%ymm1                  #! EA = L0x555555561310; Value = 0xbca093095de57b46; PC = 0x55555555bb5f *)
mov ymm1_0 L0x555555561310;
mov ymm1_1 L0x555555561312;
mov ymm1_2 L0x555555561314;
mov ymm1_3 L0x555555561316;
mov ymm1_4 L0x555555561310;
mov ymm1_5 L0x555555561312;
mov ymm1_6 L0x555555561314;
mov ymm1_7 L0x555555561316;
mov ymm1_8 L0x555555561310;
mov ymm1_9 L0x555555561312;
mov ymm1_a L0x555555561314;
mov ymm1_b L0x555555561316;
mov ymm1_c L0x555555561310;
mov ymm1_d L0x555555561312;
mov ymm1_e L0x555555561314;
mov ymm1_f L0x555555561316;
(* vpbroadcastq 0x3f0(%rdx),%ymm2                  #! EA = L0x555555561510; Value = 0xfca00d09efe5f746; PC = 0x55555555bb68 *)
mov ymm2_0 L0x555555561510;
mov ymm2_1 L0x555555561512;
mov ymm2_2 L0x555555561514;
mov ymm2_3 L0x555555561516;
mov ymm2_4 L0x555555561510;
mov ymm2_5 L0x555555561512;
mov ymm2_6 L0x555555561514;
mov ymm2_7 L0x555555561516;
mov ymm2_8 L0x555555561510;
mov ymm2_9 L0x555555561512;
mov ymm2_a L0x555555561514;
mov ymm2_b L0x555555561516;
mov ymm2_c L0x555555561510;
mov ymm2_d L0x555555561512;
mov ymm2_e L0x555555561514;
mov ymm2_f L0x555555561516;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bb71 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bb76 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555bb7b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555bb7f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bb83 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555bb87 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x1e8(%rdx),%ymm1                  #! EA = L0x555555561308; Value = 0x499dcd2c4404b27c; PC = 0x55555555bb8b *)
mov ymm1_0 L0x555555561308;
mov ymm1_1 L0x55555556130a;
mov ymm1_2 L0x55555556130c;
mov ymm1_3 L0x55555556130e;
mov ymm1_4 L0x555555561308;
mov ymm1_5 L0x55555556130a;
mov ymm1_6 L0x55555556130c;
mov ymm1_7 L0x55555556130e;
mov ymm1_8 L0x555555561308;
mov ymm1_9 L0x55555556130a;
mov ymm1_a L0x55555556130c;
mov ymm1_b L0x55555556130e;
mov ymm1_c L0x555555561308;
mov ymm1_d L0x55555556130a;
mov ymm1_e L0x55555556130c;
mov ymm1_f L0x55555556130e;
(* vpbroadcastq 0x3e8(%rdx),%ymm2                  #! EA = L0x555555561508; Value = 0x0b9d052cec040a7c; PC = 0x55555555bb94 *)
mov ymm2_0 L0x555555561508;
mov ymm2_1 L0x55555556150a;
mov ymm2_2 L0x55555556150c;
mov ymm2_3 L0x55555556150e;
mov ymm2_4 L0x555555561508;
mov ymm2_5 L0x55555556150a;
mov ymm2_6 L0x55555556150c;
mov ymm2_7 L0x55555556150e;
mov ymm2_8 L0x555555561508;
mov ymm2_9 L0x55555556150a;
mov ymm2_a L0x55555556150c;
mov ymm2_b L0x55555556150e;
mov ymm2_c L0x555555561508;
mov ymm2_d L0x55555556150a;
mov ymm2_e L0x55555556150c;
mov ymm2_f L0x55555556150e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bb9d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bba2 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555bba7 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555bbab *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bbaf *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555bbb3 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x1e0(%rdx),%ymm1                  #! EA = L0x555555561300; Value = 0x030c6f7dcc2c2dce; PC = 0x55555555bbb8 *)
mov ymm1_0 L0x555555561300;
mov ymm1_1 L0x555555561302;
mov ymm1_2 L0x555555561304;
mov ymm1_3 L0x555555561306;
mov ymm1_4 L0x555555561300;
mov ymm1_5 L0x555555561302;
mov ymm1_6 L0x555555561304;
mov ymm1_7 L0x555555561306;
mov ymm1_8 L0x555555561300;
mov ymm1_9 L0x555555561302;
mov ymm1_a L0x555555561304;
mov ymm1_b L0x555555561306;
mov ymm1_c L0x555555561300;
mov ymm1_d L0x555555561302;
mov ymm1_e L0x555555561304;
mov ymm1_f L0x555555561306;
(* vpbroadcastq 0x3e0(%rdx),%ymm2                  #! EA = L0x555555561500; Value = 0xfb0cf17d042cf9ce; PC = 0x55555555bbc1 *)
mov ymm2_0 L0x555555561500;
mov ymm2_1 L0x555555561502;
mov ymm2_2 L0x555555561504;
mov ymm2_3 L0x555555561506;
mov ymm2_4 L0x555555561500;
mov ymm2_5 L0x555555561502;
mov ymm2_6 L0x555555561504;
mov ymm2_7 L0x555555561506;
mov ymm2_8 L0x555555561500;
mov ymm2_9 L0x555555561502;
mov ymm2_a L0x555555561504;
mov ymm2_b L0x555555561506;
mov ymm2_c L0x555555561500;
mov ymm2_d L0x555555561502;
mov ymm2_e L0x555555561504;
mov ymm2_f L0x555555561506;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bbca *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bbcf *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555bbd4 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555bbd8 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bbdc *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555bbe0 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555bbe5 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555bbed *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555bbf5 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555bbf9 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bbfd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555bc01 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555bc05 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555bc09 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bc0d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555bc11 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555bc15 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555bc19 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bc1d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555bc21 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555bc25 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555bc29 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555bc2d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555bc31 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555bc35 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555bc3a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555bc3f *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555bc43 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555bc47 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555bc4c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555bc51 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555bc55 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555bc59 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555bc5e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555bc63 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555bc68 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555bc6d *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555bc72 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555bc77 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555bc7c *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555bc81 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555bc85 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555bc89 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555bc8d *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555bc91 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555bc96 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555bc9b *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555bca0 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x17c(%rdx),%ymm1                  #! EA = L0x55555556129c; Value = 0xbf1afd9fc220023d; PC = 0x55555555bca5 *)
mov ymm1_0 L0x55555556129c;
mov ymm1_1 L0x55555556129e;
mov ymm1_2 L0x55555556129c;
mov ymm1_3 L0x55555556129e;
mov ymm1_4 L0x55555556129c;
mov ymm1_5 L0x55555556129e;
mov ymm1_6 L0x55555556129c;
mov ymm1_7 L0x55555556129e;
mov ymm1_8 L0x55555556129c;
mov ymm1_9 L0x55555556129e;
mov ymm1_a L0x55555556129c;
mov ymm1_b L0x55555556129e;
mov ymm1_c L0x55555556129c;
mov ymm1_d L0x55555556129e;
mov ymm1_e L0x55555556129c;
mov ymm1_f L0x55555556129e;
(* vpbroadcastd 0x37c(%rdx),%ymm2                  #! EA = L0x55555556149c; Value = 0x031a139f0220043d; PC = 0x55555555bcae *)
mov ymm2_0 L0x55555556149c;
mov ymm2_1 L0x55555556149e;
mov ymm2_2 L0x55555556149c;
mov ymm2_3 L0x55555556149e;
mov ymm2_4 L0x55555556149c;
mov ymm2_5 L0x55555556149e;
mov ymm2_6 L0x55555556149c;
mov ymm2_7 L0x55555556149e;
mov ymm2_8 L0x55555556149c;
mov ymm2_9 L0x55555556149e;
mov ymm2_a L0x55555556149c;
mov ymm2_b L0x55555556149e;
mov ymm2_c L0x55555556149c;
mov ymm2_d L0x55555556149e;
mov ymm2_e L0x55555556149c;
mov ymm2_f L0x55555556149e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bcb7 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bcbc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555bcc1 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555bcc5 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555bcc9 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555bccd *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x178(%rdx),%ymm1                  #! EA = L0x555555561298; Value = 0xc220023dce5d95f0; PC = 0x55555555bcd1 *)
mov ymm1_0 L0x555555561298;
mov ymm1_1 L0x55555556129a;
mov ymm1_2 L0x555555561298;
mov ymm1_3 L0x55555556129a;
mov ymm1_4 L0x555555561298;
mov ymm1_5 L0x55555556129a;
mov ymm1_6 L0x555555561298;
mov ymm1_7 L0x55555556129a;
mov ymm1_8 L0x555555561298;
mov ymm1_9 L0x55555556129a;
mov ymm1_a L0x555555561298;
mov ymm1_b L0x55555556129a;
mov ymm1_c L0x555555561298;
mov ymm1_d L0x55555556129a;
mov ymm1_e L0x555555561298;
mov ymm1_f L0x55555556129a;
(* vpbroadcastd 0x378(%rdx),%ymm2                  #! EA = L0x555555561498; Value = 0x0220043d105df5f0; PC = 0x55555555bcda *)
mov ymm2_0 L0x555555561498;
mov ymm2_1 L0x55555556149a;
mov ymm2_2 L0x555555561498;
mov ymm2_3 L0x55555556149a;
mov ymm2_4 L0x555555561498;
mov ymm2_5 L0x55555556149a;
mov ymm2_6 L0x555555561498;
mov ymm2_7 L0x55555556149a;
mov ymm2_8 L0x555555561498;
mov ymm2_9 L0x55555556149a;
mov ymm2_a L0x555555561498;
mov ymm2_b L0x55555556149a;
mov ymm2_c L0x555555561498;
mov ymm2_d L0x55555556149a;
mov ymm2_e L0x555555561498;
mov ymm2_f L0x55555556149a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bce3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bce8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555bced *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555bcf1 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555bcf5 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555bcf9 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x174(%rdx),%ymm1                  #! EA = L0x555555561294; Value = 0xce5d95f018ed15f3; PC = 0x55555555bcfd *)
mov ymm1_0 L0x555555561294;
mov ymm1_1 L0x555555561296;
mov ymm1_2 L0x555555561294;
mov ymm1_3 L0x555555561296;
mov ymm1_4 L0x555555561294;
mov ymm1_5 L0x555555561296;
mov ymm1_6 L0x555555561294;
mov ymm1_7 L0x555555561296;
mov ymm1_8 L0x555555561294;
mov ymm1_9 L0x555555561296;
mov ymm1_a L0x555555561294;
mov ymm1_b L0x555555561296;
mov ymm1_c L0x555555561294;
mov ymm1_d L0x555555561296;
mov ymm1_e L0x555555561294;
mov ymm1_f L0x555555561296;
(* vpbroadcastd 0x374(%rdx),%ymm2                  #! EA = L0x555555561494; Value = 0x105df5f0faedf3f3; PC = 0x55555555bd06 *)
mov ymm2_0 L0x555555561494;
mov ymm2_1 L0x555555561496;
mov ymm2_2 L0x555555561494;
mov ymm2_3 L0x555555561496;
mov ymm2_4 L0x555555561494;
mov ymm2_5 L0x555555561496;
mov ymm2_6 L0x555555561494;
mov ymm2_7 L0x555555561496;
mov ymm2_8 L0x555555561494;
mov ymm2_9 L0x555555561496;
mov ymm2_a L0x555555561494;
mov ymm2_b L0x555555561496;
mov ymm2_c L0x555555561494;
mov ymm2_d L0x555555561496;
mov ymm2_e L0x555555561494;
mov ymm2_f L0x555555561496;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bd0f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bd14 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555bd19 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555bd1d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555bd21 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555bd25 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x170(%rdx),%ymm1                  #! EA = L0x555555561290; Value = 0x18ed15f3860fbeac; PC = 0x55555555bd2a *)
mov ymm1_0 L0x555555561290;
mov ymm1_1 L0x555555561292;
mov ymm1_2 L0x555555561290;
mov ymm1_3 L0x555555561292;
mov ymm1_4 L0x555555561290;
mov ymm1_5 L0x555555561292;
mov ymm1_6 L0x555555561290;
mov ymm1_7 L0x555555561292;
mov ymm1_8 L0x555555561290;
mov ymm1_9 L0x555555561292;
mov ymm1_a L0x555555561290;
mov ymm1_b L0x555555561292;
mov ymm1_c L0x555555561290;
mov ymm1_d L0x555555561292;
mov ymm1_e L0x555555561290;
mov ymm1_f L0x555555561292;
(* vpbroadcastd 0x370(%rdx),%ymm2                  #! EA = L0x555555561490; Value = 0xfaedf3f3fc0ff6ac; PC = 0x55555555bd33 *)
mov ymm2_0 L0x555555561490;
mov ymm2_1 L0x555555561492;
mov ymm2_2 L0x555555561490;
mov ymm2_3 L0x555555561492;
mov ymm2_4 L0x555555561490;
mov ymm2_5 L0x555555561492;
mov ymm2_6 L0x555555561490;
mov ymm2_7 L0x555555561492;
mov ymm2_8 L0x555555561490;
mov ymm2_9 L0x555555561492;
mov ymm2_a L0x555555561490;
mov ymm2_b L0x555555561492;
mov ymm2_c L0x555555561490;
mov ymm2_d L0x555555561492;
mov ymm2_e L0x555555561490;
mov ymm2_f L0x555555561492;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555bd3c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555bd41 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555bd46 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555bd4a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555bd4e *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555bd52 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555bd57 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555bd5c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555bd61 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555bd65 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555bd69 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555bd6e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555bd73 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555bd77 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555bd7b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555bd80 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555bd85 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555bd8a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555bd8f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555bd94 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555bd99 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555bd9e *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x5355(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555bda3 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555bdab *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555bdb1 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555bdb6 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555bdbc *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555bdc1 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555bdc7 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555bdcc *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555bdd2 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555bdd7 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555bddd *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555bde2 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555bde8 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555bded *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555bdf3 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555bdf8 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555bdfe *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 4 *****************)




(**************** CUT  37 *****************)

cut and [
eqmod (8*inp_poly100**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10],
eqmod (8*inp_poly101**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10743],
eqmod (8*inp_poly102**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8875],
eqmod (8*inp_poly103**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1878],
eqmod (8*inp_poly104**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3210],
eqmod (8*inp_poly105**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7543],
eqmod (8*inp_poly106**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10083],
eqmod (8*inp_poly107**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 670]
,
eqmod (8*inp_poly108**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4946],
eqmod (8*inp_poly109**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5807],
eqmod (8*inp_poly10a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2351],
eqmod (8*inp_poly10b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8402],
eqmod (8*inp_poly10c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6975],
eqmod (8*inp_poly10d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3778],
eqmod (8*inp_poly10e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1961],
eqmod (8*inp_poly10f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8792]
,
eqmod (8*inp_poly110**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 787],
eqmod (8*inp_poly111**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9966],
eqmod (8*inp_poly112**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4894],
eqmod (8*inp_poly113**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5859],
eqmod (8*inp_poly114**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5308],
eqmod (8*inp_poly115**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5445],
eqmod (8*inp_poly116**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1036],
eqmod (8*inp_poly117**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9717]
,
eqmod (8*inp_poly118**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8594],
eqmod (8*inp_poly119**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2159],
eqmod (8*inp_poly11a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3298],
eqmod (8*inp_poly11b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7455],
eqmod (8*inp_poly11c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5906],
eqmod (8*inp_poly11d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4847],
eqmod (8*inp_poly11e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4864],
eqmod (8*inp_poly11f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5889]
,
eqmod (8*inp_poly120**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3259],
eqmod (8*inp_poly121**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7494],
eqmod (8*inp_poly122**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 5182],
eqmod (8*inp_poly123**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 5571],
eqmod (8*inp_poly124**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3098],
eqmod (8*inp_poly125**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7655],
eqmod (8*inp_poly126**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7460],
eqmod (8*inp_poly127**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3293]
,
eqmod (8*inp_poly128**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1102],
eqmod (8*inp_poly129**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9651],
eqmod (8*inp_poly12a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10255],
eqmod (8*inp_poly12b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 498],
eqmod (8*inp_poly12c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9646],
eqmod (8*inp_poly12d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1107],
eqmod (8*inp_poly12e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1437],
eqmod (8*inp_poly12f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9316]
,
eqmod (8*inp_poly130**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8089],
eqmod (8*inp_poly131**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2664],
eqmod (8*inp_poly132**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1360],
eqmod (8*inp_poly133**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9393],
eqmod (8*inp_poly134**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5096],
eqmod (8*inp_poly135**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5657],
eqmod (8*inp_poly136**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6440],
eqmod (8*inp_poly137**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4313]
,
eqmod (8*inp_poly138**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2854],
eqmod (8*inp_poly139**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7899],
eqmod (8*inp_poly13a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5970],
eqmod (8*inp_poly13b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4783],
eqmod (8*inp_poly13c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2129],
eqmod (8*inp_poly13d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8624],
eqmod (8*inp_poly13e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2336],
eqmod (8*inp_poly13f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8417]
] prove with [ cuts [ 4 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-11280)@16<=s ymm3_4,ymm3_4<s11280@16,(-11280)@16<=s ymm3_5,ymm3_5<s11280@16,
(-11024)@16<=s ymm3_6,ymm3_6<s11024@16,(-11024)@16<=s ymm3_7,ymm3_7<s11024@16,
( -5455)@16<=s ymm3_8,ymm3_8<s 5455@16,( -5455)@16<=s ymm3_9,ymm3_9<s 5455@16,
( -5455)@16<=s ymm3_a,ymm3_a<s 5455@16,( -5455)@16<=s ymm3_b,ymm3_b<s 5455@16,
( -5470)@16<=s ymm3_c,ymm3_c<s 5470@16,( -5470)@16<=s ymm3_d,ymm3_d<s 5470@16,
( -5455)@16<=s ymm3_e,ymm3_e<s 5455@16,( -5455)@16<=s ymm3_f,ymm3_f<s 5455@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-11031)@16<=s ymm5_4,ymm5_4<s11031@16,(-11031)@16<=s ymm5_5,ymm5_5<s11031@16,
(-10877)@16<=s ymm5_6,ymm5_6<s10877@16,(-10877)@16<=s ymm5_7,ymm5_7<s10877@16,
( -5546)@16<=s ymm5_8,ymm5_8<s 5546@16,( -5546)@16<=s ymm5_9,ymm5_9<s 5546@16,
( -5546)@16<=s ymm5_a,ymm5_a<s 5546@16,( -5546)@16<=s ymm5_b,ymm5_b<s 5546@16,
( -5546)@16<=s ymm5_c,ymm5_c<s 5546@16,( -5546)@16<=s ymm5_d,ymm5_d<s 5546@16,
( -5546)@16<=s ymm5_e,ymm5_e<s 5546@16,( -5546)@16<=s ymm5_f,ymm5_f<s 5546@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12163)@16<=s ymm4_4,ymm4_4<s12163@16,(-12163)@16<=s ymm4_5,ymm4_5<s12163@16,
(-11486)@16<=s ymm4_6,ymm4_6<s11486@16,(-11486)@16<=s ymm4_7,ymm4_7<s11486@16,
( -6067)@16<=s ymm4_8,ymm4_8<s 6067@16,( -6067)@16<=s ymm4_9,ymm4_9<s 6067@16,
( -6067)@16<=s ymm4_a,ymm4_a<s 6067@16,( -6067)@16<=s ymm4_b,ymm4_b<s 6067@16,
( -6132)@16<=s ymm4_c,ymm4_c<s 6132@16,( -6132)@16<=s ymm4_d,ymm4_d<s 6132@16,
( -6088)@16<=s ymm4_e,ymm4_e<s 6088@16,( -6088)@16<=s ymm4_f,ymm4_f<s 6088@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-12902)@16<=s ymm7_4,ymm7_4<s12902@16,(-12902)@16<=s ymm7_5,ymm7_5<s12902@16,
(-11841)@16<=s ymm7_6,ymm7_6<s11841@16,(-11841)@16<=s ymm7_7,ymm7_7<s11841@16,
( -5795)@16<=s ymm7_8,ymm7_8<s 5795@16,( -5795)@16<=s ymm7_9,ymm7_9<s 5795@16,
( -5779)@16<=s ymm7_a,ymm7_a<s 5779@16,( -5779)@16<=s ymm7_b,ymm7_b<s 5779@16,
( -5853)@16<=s ymm7_c,ymm7_c<s 5853@16,( -5853)@16<=s ymm7_d,ymm7_d<s 5853@16,
( -5824)@16<=s ymm7_e,ymm7_e<s 5824@16,( -5824)@16<=s ymm7_f,ymm7_f<s 5824@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-12201)@16<=s ymm6_4,ymm6_4<s12201@16,(-12201)@16<=s ymm6_5,ymm6_5<s12201@16,
(-11470)@16<=s ymm6_6,ymm6_6<s11470@16,(-11470)@16<=s ymm6_7,ymm6_7<s11470@16,
( -5576)@16<=s ymm6_8,ymm6_8<s 5576@16,( -5576)@16<=s ymm6_9,ymm6_9<s 5576@16,
( -5576)@16<=s ymm6_a,ymm6_a<s 5576@16,( -5576)@16<=s ymm6_b,ymm6_b<s 5576@16,
( -5601)@16<=s ymm6_c,ymm6_c<s 5601@16,( -5601)@16<=s ymm6_d,ymm6_d<s 5601@16,
( -5601)@16<=s ymm6_e,ymm6_e<s 5601@16,( -5601)@16<=s ymm6_f,ymm6_f<s 5601@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-13378)@16<=s ymm9_4,ymm9_4<s13378@16,(-13378)@16<=s ymm9_5,ymm9_5<s13378@16,
(-12105)@16<=s ymm9_6,ymm9_6<s12105@16,(-12105)@16<=s ymm9_7,ymm9_7<s12105@16,
( -5887)@16<=s ymm9_8,ymm9_8<s 5887@16,( -5887)@16<=s ymm9_9,ymm9_9<s 5887@16,
( -5887)@16<=s ymm9_a,ymm9_a<s 5887@16,( -5887)@16<=s ymm9_b,ymm9_b<s 5887@16,
( -5991)@16<=s ymm9_c,ymm9_c<s 5991@16,( -5991)@16<=s ymm9_d,ymm9_d<s 5991@16,
( -5939)@16<=s ymm9_e,ymm9_e<s 5939@16,( -5939)@16<=s ymm9_f,ymm9_f<s 5939@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-12410)@16<=s ymm8_4,ymm8_4<s12410@16,(-12410)@16<=s ymm8_5,ymm8_5<s12410@16,
(-11546)@16<=s ymm8_6,ymm8_6<s11546@16,(-11546)@16<=s ymm8_7,ymm8_7<s11546@16,
( -5535)@16<=s ymm8_8,ymm8_8<s 5535@16,( -5535)@16<=s ymm8_9,ymm8_9<s 5535@16,
( -5535)@16<=s ymm8_a,ymm8_a<s 5535@16,( -5535)@16<=s ymm8_b,ymm8_b<s 5535@16,
( -5558)@16<=s ymm8_c,ymm8_c<s 5558@16,( -5558)@16<=s ymm8_d,ymm8_d<s 5558@16,
( -5535)@16<=s ymm8_e,ymm8_e<s 5535@16,( -5535)@16<=s ymm8_f,ymm8_f<s 5535@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-11588)@16<=s ymm11_4,ymm11_4<s11588@16,(-11588)@16<=s ymm11_5,ymm11_5<s11588@16,
(-11198)@16<=s ymm11_6,ymm11_6<s11198@16,(-11198)@16<=s ymm11_7,ymm11_7<s11198@16,
( -5760)@16<=s ymm11_8,ymm11_8<s 5760@16,( -5760)@16<=s ymm11_9,ymm11_9<s 5760@16,
( -5749)@16<=s ymm11_a,ymm11_a<s 5749@16,( -5749)@16<=s ymm11_b,ymm11_b<s 5749@16,
( -5771)@16<=s ymm11_c,ymm11_c<s 5771@16,( -5771)@16<=s ymm11_d,ymm11_d<s 5771@16,
( -5760)@16<=s ymm11_e,ymm11_e<s 5760@16,( -5760)@16<=s ymm11_f,ymm11_f<s 5760@16
] prove with [ precondition ];



(**************** CUT  38 *****************)

ecut and [
eqmod (8*inp_poly100**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10],
eqmod (8*inp_poly101**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10743],
eqmod (8*inp_poly102**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8875],
eqmod (8*inp_poly103**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1878],
eqmod (8*inp_poly104**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3210],
eqmod (8*inp_poly105**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7543],
eqmod (8*inp_poly106**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10083],
eqmod (8*inp_poly107**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 670]
,
eqmod (8*inp_poly108**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4946],
eqmod (8*inp_poly109**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 5807],
eqmod (8*inp_poly10a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2351],
eqmod (8*inp_poly10b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8402],
eqmod (8*inp_poly10c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6975],
eqmod (8*inp_poly10d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3778],
eqmod (8*inp_poly10e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1961],
eqmod (8*inp_poly10f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8792]
] prove with [ cuts [ 37 ] ];



(**************** CUT  39 *****************)

ecut and [
eqmod (8*inp_poly110**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 787],
eqmod (8*inp_poly111**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9966],
eqmod (8*inp_poly112**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4894],
eqmod (8*inp_poly113**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5859],
eqmod (8*inp_poly114**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5308],
eqmod (8*inp_poly115**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5445],
eqmod (8*inp_poly116**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1036],
eqmod (8*inp_poly117**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9717]
,
eqmod (8*inp_poly118**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8594],
eqmod (8*inp_poly119**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2159],
eqmod (8*inp_poly11a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3298],
eqmod (8*inp_poly11b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7455],
eqmod (8*inp_poly11c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5906],
eqmod (8*inp_poly11d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4847],
eqmod (8*inp_poly11e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4864],
eqmod (8*inp_poly11f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 5889]
] prove with [ cuts [ 37 ] ];



(**************** CUT  40 *****************)

ecut and [
eqmod (8*inp_poly120**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3259],
eqmod (8*inp_poly121**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7494],
eqmod (8*inp_poly122**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 5182],
eqmod (8*inp_poly123**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 5571],
eqmod (8*inp_poly124**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3098],
eqmod (8*inp_poly125**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7655],
eqmod (8*inp_poly126**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7460],
eqmod (8*inp_poly127**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3293]
,
eqmod (8*inp_poly128**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1102],
eqmod (8*inp_poly129**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9651],
eqmod (8*inp_poly12a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10255],
eqmod (8*inp_poly12b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 498],
eqmod (8*inp_poly12c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9646],
eqmod (8*inp_poly12d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1107],
eqmod (8*inp_poly12e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1437],
eqmod (8*inp_poly12f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9316]
] prove with [ cuts [ 37 ] ];



(**************** CUT  41 *****************)

ecut and [
eqmod (8*inp_poly130**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8089],
eqmod (8*inp_poly131**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2664],
eqmod (8*inp_poly132**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1360],
eqmod (8*inp_poly133**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9393],
eqmod (8*inp_poly134**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5096],
eqmod (8*inp_poly135**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5657],
eqmod (8*inp_poly136**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6440],
eqmod (8*inp_poly137**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4313]
,
eqmod (8*inp_poly138**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2854],
eqmod (8*inp_poly139**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7899],
eqmod (8*inp_poly13a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5970],
eqmod (8*inp_poly13b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4783],
eqmod (8*inp_poly13c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2129],
eqmod (8*inp_poly13d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8624],
eqmod (8*inp_poly13e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2336],
eqmod (8*inp_poly13f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8417]
] prove with [ cuts [ 37 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555be03 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555be07 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555be0b *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555be0f *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555be13 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555be18 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555be1d *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555be22 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555be27 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555be2f *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x13e(%rdx),%ymm1                  #! EA = L0x55555556125e; Value = 0x7a89a62111ed2da3; PC = 0x55555555be37 *)
mov ymm1_0 L0x55555556125e;
mov ymm1_1 L0x55555556125e;
mov ymm1_2 L0x55555556125e;
mov ymm1_3 L0x55555556125e;
mov ymm1_4 L0x55555556125e;
mov ymm1_5 L0x55555556125e;
mov ymm1_6 L0x55555556125e;
mov ymm1_7 L0x55555556125e;
mov ymm1_8 L0x55555556125e;
mov ymm1_9 L0x55555556125e;
mov ymm1_a L0x55555556125e;
mov ymm1_b L0x55555556125e;
mov ymm1_c L0x55555556125e;
mov ymm1_d L0x55555556125e;
mov ymm1_e L0x55555556125e;
mov ymm1_f L0x55555556125e;
(* vpbroadcastw 0x33e(%rdx),%ymm2                  #! EA = L0x55555556145e; Value = 0xf4891021f3edeba3; PC = 0x55555555be40 *)
mov ymm2_0 L0x55555556145e;
mov ymm2_1 L0x55555556145e;
mov ymm2_2 L0x55555556145e;
mov ymm2_3 L0x55555556145e;
mov ymm2_4 L0x55555556145e;
mov ymm2_5 L0x55555556145e;
mov ymm2_6 L0x55555556145e;
mov ymm2_7 L0x55555556145e;
mov ymm2_8 L0x55555556145e;
mov ymm2_9 L0x55555556145e;
mov ymm2_a L0x55555556145e;
mov ymm2_b L0x55555556145e;
mov ymm2_c L0x55555556145e;
mov ymm2_d L0x55555556145e;
mov ymm2_e L0x55555556145e;
mov ymm2_f L0x55555556145e;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555be49 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555be4d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555be51 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555be55 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x13c(%rdx),%ymm1                  #! EA = L0x55555556125c; Value = 0xa62111ed2da347bb; PC = 0x55555555be59 *)
mov ymm1_0 L0x55555556125c;
mov ymm1_1 L0x55555556125c;
mov ymm1_2 L0x55555556125c;
mov ymm1_3 L0x55555556125c;
mov ymm1_4 L0x55555556125c;
mov ymm1_5 L0x55555556125c;
mov ymm1_6 L0x55555556125c;
mov ymm1_7 L0x55555556125c;
mov ymm1_8 L0x55555556125c;
mov ymm1_9 L0x55555556125c;
mov ymm1_a L0x55555556125c;
mov ymm1_b L0x55555556125c;
mov ymm1_c L0x55555556125c;
mov ymm1_d L0x55555556125c;
mov ymm1_e L0x55555556125c;
mov ymm1_f L0x55555556125c;
(* vpbroadcastw 0x33c(%rdx),%ymm2                  #! EA = L0x55555556145c; Value = 0x1021f3edeba3f5bb; PC = 0x55555555be62 *)
mov ymm2_0 L0x55555556145c;
mov ymm2_1 L0x55555556145c;
mov ymm2_2 L0x55555556145c;
mov ymm2_3 L0x55555556145c;
mov ymm2_4 L0x55555556145c;
mov ymm2_5 L0x55555556145c;
mov ymm2_6 L0x55555556145c;
mov ymm2_7 L0x55555556145c;
mov ymm2_8 L0x55555556145c;
mov ymm2_9 L0x55555556145c;
mov ymm2_a L0x55555556145c;
mov ymm2_b L0x55555556145c;
mov ymm2_c L0x55555556145c;
mov ymm2_d L0x55555556145c;
mov ymm2_e L0x55555556145c;
mov ymm2_f L0x55555556145c;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555be6b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555be6f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555be73 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555be77 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x13a(%rdx),%ymm1                  #! EA = L0x55555556125a; Value = 0x11ed2da347bbf1c9; PC = 0x55555555be7b *)
mov ymm1_0 L0x55555556125a;
mov ymm1_1 L0x55555556125a;
mov ymm1_2 L0x55555556125a;
mov ymm1_3 L0x55555556125a;
mov ymm1_4 L0x55555556125a;
mov ymm1_5 L0x55555556125a;
mov ymm1_6 L0x55555556125a;
mov ymm1_7 L0x55555556125a;
mov ymm1_8 L0x55555556125a;
mov ymm1_9 L0x55555556125a;
mov ymm1_a L0x55555556125a;
mov ymm1_b L0x55555556125a;
mov ymm1_c L0x55555556125a;
mov ymm1_d L0x55555556125a;
mov ymm1_e L0x55555556125a;
mov ymm1_f L0x55555556125a;
(* vpbroadcastw 0x33a(%rdx),%ymm2                  #! EA = L0x55555556145a; Value = 0xf3edeba3f5bbebc9; PC = 0x55555555be84 *)
mov ymm2_0 L0x55555556145a;
mov ymm2_1 L0x55555556145a;
mov ymm2_2 L0x55555556145a;
mov ymm2_3 L0x55555556145a;
mov ymm2_4 L0x55555556145a;
mov ymm2_5 L0x55555556145a;
mov ymm2_6 L0x55555556145a;
mov ymm2_7 L0x55555556145a;
mov ymm2_8 L0x55555556145a;
mov ymm2_9 L0x55555556145a;
mov ymm2_a L0x55555556145a;
mov ymm2_b L0x55555556145a;
mov ymm2_c L0x55555556145a;
mov ymm2_d L0x55555556145a;
mov ymm2_e L0x55555556145a;
mov ymm2_f L0x55555556145a;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555be8d *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555be91 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555be95 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555be99 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x138(%rdx),%ymm1                  #! EA = L0x555555561258; Value = 0x2da347bbf1c9c601; PC = 0x55555555be9e *)
mov ymm1_0 L0x555555561258;
mov ymm1_1 L0x555555561258;
mov ymm1_2 L0x555555561258;
mov ymm1_3 L0x555555561258;
mov ymm1_4 L0x555555561258;
mov ymm1_5 L0x555555561258;
mov ymm1_6 L0x555555561258;
mov ymm1_7 L0x555555561258;
mov ymm1_8 L0x555555561258;
mov ymm1_9 L0x555555561258;
mov ymm1_a L0x555555561258;
mov ymm1_b L0x555555561258;
mov ymm1_c L0x555555561258;
mov ymm1_d L0x555555561258;
mov ymm1_e L0x555555561258;
mov ymm1_f L0x555555561258;
(* vpbroadcastw 0x338(%rdx),%ymm2                  #! EA = L0x555555561458; Value = 0xeba3f5bbebc9f001; PC = 0x55555555bea7 *)
mov ymm2_0 L0x555555561458;
mov ymm2_1 L0x555555561458;
mov ymm2_2 L0x555555561458;
mov ymm2_3 L0x555555561458;
mov ymm2_4 L0x555555561458;
mov ymm2_5 L0x555555561458;
mov ymm2_6 L0x555555561458;
mov ymm2_7 L0x555555561458;
mov ymm2_8 L0x555555561458;
mov ymm2_9 L0x555555561458;
mov ymm2_a L0x555555561458;
mov ymm2_b L0x555555561458;
mov ymm2_c L0x555555561458;
mov ymm2_d L0x555555561458;
mov ymm2_e L0x555555561458;
mov ymm2_f L0x555555561458;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555beb0 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555beb4 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555beb8 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555bebc *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555bec1 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555bec6 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555becb *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555becf *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555bed4 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555bed9 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555bede *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555bee2 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555bee7 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555beec *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555bef1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555bef5 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555befa *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555beff *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555bf04 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555bf08 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555bf0d *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555bf11 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555bf15 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555bf19 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555bf1d *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555bf21 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555bf25 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555bf2a *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x11e(%rdx),%ymm1                  #! EA = L0x55555556123e; Value = 0x92395a10450bc138; PC = 0x55555555bf2f *)
mov ymm1_0 L0x55555556123e;
mov ymm1_1 L0x55555556123e;
mov ymm1_2 L0x55555556123e;
mov ymm1_3 L0x55555556123e;
mov ymm1_4 L0x55555556123e;
mov ymm1_5 L0x55555556123e;
mov ymm1_6 L0x55555556123e;
mov ymm1_7 L0x55555556123e;
mov ymm1_8 L0x55555556123e;
mov ymm1_9 L0x55555556123e;
mov ymm1_a L0x55555556123e;
mov ymm1_b L0x55555556123e;
mov ymm1_c L0x55555556123e;
mov ymm1_d L0x55555556123e;
mov ymm1_e L0x55555556123e;
mov ymm1_f L0x55555556123e;
(* vpbroadcastw 0x31e(%rdx),%ymm2                  #! EA = L0x55555556143e; Value = 0xec39fa10130bf138; PC = 0x55555555bf38 *)
mov ymm2_0 L0x55555556143e;
mov ymm2_1 L0x55555556143e;
mov ymm2_2 L0x55555556143e;
mov ymm2_3 L0x55555556143e;
mov ymm2_4 L0x55555556143e;
mov ymm2_5 L0x55555556143e;
mov ymm2_6 L0x55555556143e;
mov ymm2_7 L0x55555556143e;
mov ymm2_8 L0x55555556143e;
mov ymm2_9 L0x55555556143e;
mov ymm2_a L0x55555556143e;
mov ymm2_b L0x55555556143e;
mov ymm2_c L0x55555556143e;
mov ymm2_d L0x55555556143e;
mov ymm2_e L0x55555556143e;
mov ymm2_f L0x55555556143e;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555bf41 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555bf45 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555bf49 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555bf4d *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555bf51 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555bf55 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555bf59 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555bf5d *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x11c(%rdx),%ymm1                  #! EA = L0x55555556123c; Value = 0x5a10450bc1382524; PC = 0x55555555bf61 *)
mov ymm1_0 L0x55555556123c;
mov ymm1_1 L0x55555556123c;
mov ymm1_2 L0x55555556123c;
mov ymm1_3 L0x55555556123c;
mov ymm1_4 L0x55555556123c;
mov ymm1_5 L0x55555556123c;
mov ymm1_6 L0x55555556123c;
mov ymm1_7 L0x55555556123c;
mov ymm1_8 L0x55555556123c;
mov ymm1_9 L0x55555556123c;
mov ymm1_a L0x55555556123c;
mov ymm1_b L0x55555556123c;
mov ymm1_c L0x55555556123c;
mov ymm1_d L0x55555556123c;
mov ymm1_e L0x55555556123c;
mov ymm1_f L0x55555556123c;
(* vpbroadcastw 0x31c(%rdx),%ymm2                  #! EA = L0x55555556143c; Value = 0xfa10130bf1380d24; PC = 0x55555555bf6a *)
mov ymm2_0 L0x55555556143c;
mov ymm2_1 L0x55555556143c;
mov ymm2_2 L0x55555556143c;
mov ymm2_3 L0x55555556143c;
mov ymm2_4 L0x55555556143c;
mov ymm2_5 L0x55555556143c;
mov ymm2_6 L0x55555556143c;
mov ymm2_7 L0x55555556143c;
mov ymm2_8 L0x55555556143c;
mov ymm2_9 L0x55555556143c;
mov ymm2_a L0x55555556143c;
mov ymm2_b L0x55555556143c;
mov ymm2_c L0x55555556143c;
mov ymm2_d L0x55555556143c;
mov ymm2_e L0x55555556143c;
mov ymm2_f L0x55555556143c;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555bf73 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555bf77 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555bf7b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555bf7f *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555bf83 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555bf87 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555bf8b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555bf8f *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555bf94 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555bf98 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555bf9c *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555bfa0 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555bfa4 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555bfa8 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555bfac *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555bfb1 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x10e(%rdx),%ymm1                  #! EA = L0x55555556122e; Value = 0x8cf7c126e487ae88; PC = 0x55555555bfb6 *)
mov ymm1_0 L0x55555556122e;
mov ymm1_1 L0x55555556122e;
mov ymm1_2 L0x55555556122e;
mov ymm1_3 L0x55555556122e;
mov ymm1_4 L0x55555556122e;
mov ymm1_5 L0x55555556122e;
mov ymm1_6 L0x55555556122e;
mov ymm1_7 L0x55555556122e;
mov ymm1_8 L0x55555556122e;
mov ymm1_9 L0x55555556122e;
mov ymm1_a L0x55555556122e;
mov ymm1_b L0x55555556122e;
mov ymm1_c L0x55555556122e;
mov ymm1_d L0x55555556122e;
mov ymm1_e L0x55555556122e;
mov ymm1_f L0x55555556122e;
(* vpbroadcastw 0x30e(%rdx),%ymm2                  #! EA = L0x55555556142e; Value = 0x12f7fd260a87fe88; PC = 0x55555555bfbf *)
mov ymm2_0 L0x55555556142e;
mov ymm2_1 L0x55555556142e;
mov ymm2_2 L0x55555556142e;
mov ymm2_3 L0x55555556142e;
mov ymm2_4 L0x55555556142e;
mov ymm2_5 L0x55555556142e;
mov ymm2_6 L0x55555556142e;
mov ymm2_7 L0x55555556142e;
mov ymm2_8 L0x55555556142e;
mov ymm2_9 L0x55555556142e;
mov ymm2_a L0x55555556142e;
mov ymm2_b L0x55555556142e;
mov ymm2_c L0x55555556142e;
mov ymm2_d L0x55555556142e;
mov ymm2_e L0x55555556142e;
mov ymm2_f L0x55555556142e;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555bfc8 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555bfcc *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555bfd0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555bfd4 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555bfd8 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555bfdc *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555bfe0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555bfe4 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555bfe8 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555bfec *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555bff0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555bff4 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555bff8 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555bffc *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c000 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555c004 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555c009 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555c00e *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c013 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c017 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555c01b *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555c020 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c025 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555c029 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x400(%rdi)                       #! EA = L0x7fffffffd6e0; PC = 0x55555555c02d *)
mov L0x7fffffffd6e0 ymm9_0;
mov L0x7fffffffd6e2 ymm9_1;
mov L0x7fffffffd6e4 ymm9_2;
mov L0x7fffffffd6e6 ymm9_3;
mov L0x7fffffffd6e8 ymm9_4;
mov L0x7fffffffd6ea ymm9_5;
mov L0x7fffffffd6ec ymm9_6;
mov L0x7fffffffd6ee ymm9_7;
mov L0x7fffffffd6f0 ymm9_8;
mov L0x7fffffffd6f2 ymm9_9;
mov L0x7fffffffd6f4 ymm9_a;
mov L0x7fffffffd6f6 ymm9_b;
mov L0x7fffffffd6f8 ymm9_c;
mov L0x7fffffffd6fa ymm9_d;
mov L0x7fffffffd6fc ymm9_e;
mov L0x7fffffffd6fe ymm9_f;
(* vmovdqa %ymm8,0x420(%rdi)                       #! EA = L0x7fffffffd700; PC = 0x55555555c035 *)
mov L0x7fffffffd700 ymm8_0;
mov L0x7fffffffd702 ymm8_1;
mov L0x7fffffffd704 ymm8_2;
mov L0x7fffffffd706 ymm8_3;
mov L0x7fffffffd708 ymm8_4;
mov L0x7fffffffd70a ymm8_5;
mov L0x7fffffffd70c ymm8_6;
mov L0x7fffffffd70e ymm8_7;
mov L0x7fffffffd710 ymm8_8;
mov L0x7fffffffd712 ymm8_9;
mov L0x7fffffffd714 ymm8_a;
mov L0x7fffffffd716 ymm8_b;
mov L0x7fffffffd718 ymm8_c;
mov L0x7fffffffd71a ymm8_d;
mov L0x7fffffffd71c ymm8_e;
mov L0x7fffffffd71e ymm8_f;
(* vmovdqa %ymm10,0x440(%rdi)                      #! EA = L0x7fffffffd720; PC = 0x55555555c03d *)
mov L0x7fffffffd720 ymm10_0;
mov L0x7fffffffd722 ymm10_1;
mov L0x7fffffffd724 ymm10_2;
mov L0x7fffffffd726 ymm10_3;
mov L0x7fffffffd728 ymm10_4;
mov L0x7fffffffd72a ymm10_5;
mov L0x7fffffffd72c ymm10_6;
mov L0x7fffffffd72e ymm10_7;
mov L0x7fffffffd730 ymm10_8;
mov L0x7fffffffd732 ymm10_9;
mov L0x7fffffffd734 ymm10_a;
mov L0x7fffffffd736 ymm10_b;
mov L0x7fffffffd738 ymm10_c;
mov L0x7fffffffd73a ymm10_d;
mov L0x7fffffffd73c ymm10_e;
mov L0x7fffffffd73e ymm10_f;
(* vmovdqa %ymm3,0x460(%rdi)                       #! EA = L0x7fffffffd740; PC = 0x55555555c045 *)
mov L0x7fffffffd740 ymm3_0;
mov L0x7fffffffd742 ymm3_1;
mov L0x7fffffffd744 ymm3_2;
mov L0x7fffffffd746 ymm3_3;
mov L0x7fffffffd748 ymm3_4;
mov L0x7fffffffd74a ymm3_5;
mov L0x7fffffffd74c ymm3_6;
mov L0x7fffffffd74e ymm3_7;
mov L0x7fffffffd750 ymm3_8;
mov L0x7fffffffd752 ymm3_9;
mov L0x7fffffffd754 ymm3_a;
mov L0x7fffffffd756 ymm3_b;
mov L0x7fffffffd758 ymm3_c;
mov L0x7fffffffd75a ymm3_d;
mov L0x7fffffffd75c ymm3_e;
mov L0x7fffffffd75e ymm3_f;
(* vmovdqa %ymm5,0x480(%rdi)                       #! EA = L0x7fffffffd760; PC = 0x55555555c04d *)
mov L0x7fffffffd760 ymm5_0;
mov L0x7fffffffd762 ymm5_1;
mov L0x7fffffffd764 ymm5_2;
mov L0x7fffffffd766 ymm5_3;
mov L0x7fffffffd768 ymm5_4;
mov L0x7fffffffd76a ymm5_5;
mov L0x7fffffffd76c ymm5_6;
mov L0x7fffffffd76e ymm5_7;
mov L0x7fffffffd770 ymm5_8;
mov L0x7fffffffd772 ymm5_9;
mov L0x7fffffffd774 ymm5_a;
mov L0x7fffffffd776 ymm5_b;
mov L0x7fffffffd778 ymm5_c;
mov L0x7fffffffd77a ymm5_d;
mov L0x7fffffffd77c ymm5_e;
mov L0x7fffffffd77e ymm5_f;
(* vmovdqa %ymm4,0x4a0(%rdi)                       #! EA = L0x7fffffffd780; PC = 0x55555555c055 *)
mov L0x7fffffffd780 ymm4_0;
mov L0x7fffffffd782 ymm4_1;
mov L0x7fffffffd784 ymm4_2;
mov L0x7fffffffd786 ymm4_3;
mov L0x7fffffffd788 ymm4_4;
mov L0x7fffffffd78a ymm4_5;
mov L0x7fffffffd78c ymm4_6;
mov L0x7fffffffd78e ymm4_7;
mov L0x7fffffffd790 ymm4_8;
mov L0x7fffffffd792 ymm4_9;
mov L0x7fffffffd794 ymm4_a;
mov L0x7fffffffd796 ymm4_b;
mov L0x7fffffffd798 ymm4_c;
mov L0x7fffffffd79a ymm4_d;
mov L0x7fffffffd79c ymm4_e;
mov L0x7fffffffd79e ymm4_f;
(* vmovdqa %ymm6,0x4c0(%rdi)                       #! EA = L0x7fffffffd7a0; PC = 0x55555555c05d *)
mov L0x7fffffffd7a0 ymm6_0;
mov L0x7fffffffd7a2 ymm6_1;
mov L0x7fffffffd7a4 ymm6_2;
mov L0x7fffffffd7a6 ymm6_3;
mov L0x7fffffffd7a8 ymm6_4;
mov L0x7fffffffd7aa ymm6_5;
mov L0x7fffffffd7ac ymm6_6;
mov L0x7fffffffd7ae ymm6_7;
mov L0x7fffffffd7b0 ymm6_8;
mov L0x7fffffffd7b2 ymm6_9;
mov L0x7fffffffd7b4 ymm6_a;
mov L0x7fffffffd7b6 ymm6_b;
mov L0x7fffffffd7b8 ymm6_c;
mov L0x7fffffffd7ba ymm6_d;
mov L0x7fffffffd7bc ymm6_e;
mov L0x7fffffffd7be ymm6_f;
(* vmovdqa %ymm11,0x4e0(%rdi)                      #! EA = L0x7fffffffd7c0; PC = 0x55555555c065 *)
mov L0x7fffffffd7c0 ymm11_0;
mov L0x7fffffffd7c2 ymm11_1;
mov L0x7fffffffd7c4 ymm11_2;
mov L0x7fffffffd7c6 ymm11_3;
mov L0x7fffffffd7c8 ymm11_4;
mov L0x7fffffffd7ca ymm11_5;
mov L0x7fffffffd7cc ymm11_6;
mov L0x7fffffffd7ce ymm11_7;
mov L0x7fffffffd7d0 ymm11_8;
mov L0x7fffffffd7d2 ymm11_9;
mov L0x7fffffffd7d4 ymm11_a;
mov L0x7fffffffd7d6 ymm11_b;
mov L0x7fffffffd7d8 ymm11_c;
mov L0x7fffffffd7da ymm11_d;
mov L0x7fffffffd7dc ymm11_e;
mov L0x7fffffffd7de ymm11_f;



(**************** LEVELS 3-5, 4 *****************)

ghost segment4@bit :
segment4 = 
x**  0*(
L0x7fffffffd6e0*x** 0+L0x7fffffffd6e2*x** 1+L0x7fffffffd6e4*x** 2+
L0x7fffffffd6e6*x** 3+L0x7fffffffd6e8*x** 4+L0x7fffffffd6ea*x** 5+
L0x7fffffffd6ec*x** 6+L0x7fffffffd6ee*x** 7+L0x7fffffffd6f0*x** 8+
L0x7fffffffd6f2*x** 9+L0x7fffffffd6f4*x**10+L0x7fffffffd6f6*x**11+
L0x7fffffffd6f8*x**12+L0x7fffffffd6fa*x**13+L0x7fffffffd6fc*x**14+
L0x7fffffffd6fe*x**15)+
x** 16*(
L0x7fffffffd700*x** 0+L0x7fffffffd702*x** 1+L0x7fffffffd704*x** 2+
L0x7fffffffd706*x** 3+L0x7fffffffd708*x** 4+L0x7fffffffd70a*x** 5+
L0x7fffffffd70c*x** 6+L0x7fffffffd70e*x** 7+L0x7fffffffd710*x** 8+
L0x7fffffffd712*x** 9+L0x7fffffffd714*x**10+L0x7fffffffd716*x**11+
L0x7fffffffd718*x**12+L0x7fffffffd71a*x**13+L0x7fffffffd71c*x**14+
L0x7fffffffd71e*x**15)+
x** 32*(
L0x7fffffffd720*x** 0+L0x7fffffffd722*x** 1+L0x7fffffffd724*x** 2+
L0x7fffffffd726*x** 3+L0x7fffffffd728*x** 4+L0x7fffffffd72a*x** 5+
L0x7fffffffd72c*x** 6+L0x7fffffffd72e*x** 7+L0x7fffffffd730*x** 8+
L0x7fffffffd732*x** 9+L0x7fffffffd734*x**10+L0x7fffffffd736*x**11+
L0x7fffffffd738*x**12+L0x7fffffffd73a*x**13+L0x7fffffffd73c*x**14+
L0x7fffffffd73e*x**15)+
x** 48*(
L0x7fffffffd740*x** 0+L0x7fffffffd742*x** 1+L0x7fffffffd744*x** 2+
L0x7fffffffd746*x** 3+L0x7fffffffd748*x** 4+L0x7fffffffd74a*x** 5+
L0x7fffffffd74c*x** 6+L0x7fffffffd74e*x** 7+L0x7fffffffd750*x** 8+
L0x7fffffffd752*x** 9+L0x7fffffffd754*x**10+L0x7fffffffd756*x**11+
L0x7fffffffd758*x**12+L0x7fffffffd75a*x**13+L0x7fffffffd75c*x**14+
L0x7fffffffd75e*x**15)+
x** 64*(
L0x7fffffffd760*x** 0+L0x7fffffffd762*x** 1+L0x7fffffffd764*x** 2+
L0x7fffffffd766*x** 3+L0x7fffffffd768*x** 4+L0x7fffffffd76a*x** 5+
L0x7fffffffd76c*x** 6+L0x7fffffffd76e*x** 7+L0x7fffffffd770*x** 8+
L0x7fffffffd772*x** 9+L0x7fffffffd774*x**10+L0x7fffffffd776*x**11+
L0x7fffffffd778*x**12+L0x7fffffffd77a*x**13+L0x7fffffffd77c*x**14+
L0x7fffffffd77e*x**15)+
x** 80*(
L0x7fffffffd780*x** 0+L0x7fffffffd782*x** 1+L0x7fffffffd784*x** 2+
L0x7fffffffd786*x** 3+L0x7fffffffd788*x** 4+L0x7fffffffd78a*x** 5+
L0x7fffffffd78c*x** 6+L0x7fffffffd78e*x** 7+L0x7fffffffd790*x** 8+
L0x7fffffffd792*x** 9+L0x7fffffffd794*x**10+L0x7fffffffd796*x**11+
L0x7fffffffd798*x**12+L0x7fffffffd79a*x**13+L0x7fffffffd79c*x**14+
L0x7fffffffd79e*x**15)+
x** 96*(
L0x7fffffffd7a0*x** 0+L0x7fffffffd7a2*x** 1+L0x7fffffffd7a4*x** 2+
L0x7fffffffd7a6*x** 3+L0x7fffffffd7a8*x** 4+L0x7fffffffd7aa*x** 5+
L0x7fffffffd7ac*x** 6+L0x7fffffffd7ae*x** 7+L0x7fffffffd7b0*x** 8+
L0x7fffffffd7b2*x** 9+L0x7fffffffd7b4*x**10+L0x7fffffffd7b6*x**11+
L0x7fffffffd7b8*x**12+L0x7fffffffd7ba*x**13+L0x7fffffffd7bc*x**14+
L0x7fffffffd7be*x**15)+
x**112*(
L0x7fffffffd7c0*x** 0+L0x7fffffffd7c2*x** 1+L0x7fffffffd7c4*x** 2+
L0x7fffffffd7c6*x** 3+L0x7fffffffd7c8*x** 4+L0x7fffffffd7ca*x** 5+
L0x7fffffffd7cc*x** 6+L0x7fffffffd7ce*x** 7+L0x7fffffffd7d0*x** 8+
L0x7fffffffd7d2*x** 9+L0x7fffffffd7d4*x**10+L0x7fffffffd7d6*x**11+
L0x7fffffffd7d8*x**12+L0x7fffffffd7da*x**13+L0x7fffffffd7dc*x**14+
L0x7fffffffd7de*x**15)
&& true;


(**************** CUT  42 *****************)

cut
and [
eqmod (64*inp_poly100**2) (segment4) [10753, x**2 - 10],
eqmod (64*inp_poly101**2) (segment4) [10753, x**2 - 10743],
eqmod (64*inp_poly102**2) (segment4) [10753, x**2 - 8875],
eqmod (64*inp_poly103**2) (segment4) [10753, x**2 - 1878],
eqmod (64*inp_poly104**2) (segment4) [10753, x**2 - 3210],
eqmod (64*inp_poly105**2) (segment4) [10753, x**2 - 7543],
eqmod (64*inp_poly106**2) (segment4) [10753, x**2 - 10083],
eqmod (64*inp_poly107**2) (segment4) [10753, x**2 - 670]
,
eqmod (64*inp_poly108**2) (segment4) [10753, x**2 - 4946],
eqmod (64*inp_poly109**2) (segment4) [10753, x**2 - 5807],
eqmod (64*inp_poly10a**2) (segment4) [10753, x**2 - 2351],
eqmod (64*inp_poly10b**2) (segment4) [10753, x**2 - 8402],
eqmod (64*inp_poly10c**2) (segment4) [10753, x**2 - 6975],
eqmod (64*inp_poly10d**2) (segment4) [10753, x**2 - 3778],
eqmod (64*inp_poly10e**2) (segment4) [10753, x**2 - 1961],
eqmod (64*inp_poly10f**2) (segment4) [10753, x**2 - 8792]
] prove with [ cuts [ 38 ] ],
and [
eqmod (64*inp_poly110**2) (segment4) [10753, x**2 - 787],
eqmod (64*inp_poly111**2) (segment4) [10753, x**2 - 9966],
eqmod (64*inp_poly112**2) (segment4) [10753, x**2 - 4894],
eqmod (64*inp_poly113**2) (segment4) [10753, x**2 - 5859],
eqmod (64*inp_poly114**2) (segment4) [10753, x**2 - 5308],
eqmod (64*inp_poly115**2) (segment4) [10753, x**2 - 5445],
eqmod (64*inp_poly116**2) (segment4) [10753, x**2 - 1036],
eqmod (64*inp_poly117**2) (segment4) [10753, x**2 - 9717]
,
eqmod (64*inp_poly118**2) (segment4) [10753, x**2 - 8594],
eqmod (64*inp_poly119**2) (segment4) [10753, x**2 - 2159],
eqmod (64*inp_poly11a**2) (segment4) [10753, x**2 - 3298],
eqmod (64*inp_poly11b**2) (segment4) [10753, x**2 - 7455],
eqmod (64*inp_poly11c**2) (segment4) [10753, x**2 - 5906],
eqmod (64*inp_poly11d**2) (segment4) [10753, x**2 - 4847],
eqmod (64*inp_poly11e**2) (segment4) [10753, x**2 - 4864],
eqmod (64*inp_poly11f**2) (segment4) [10753, x**2 - 5889]
] prove with [ cuts [ 39 ] ],
and [
eqmod (64*inp_poly120**2) (segment4) [10753, x**2 - 3259],
eqmod (64*inp_poly121**2) (segment4) [10753, x**2 - 7494],
eqmod (64*inp_poly122**2) (segment4) [10753, x**2 - 5182],
eqmod (64*inp_poly123**2) (segment4) [10753, x**2 - 5571],
eqmod (64*inp_poly124**2) (segment4) [10753, x**2 - 3098],
eqmod (64*inp_poly125**2) (segment4) [10753, x**2 - 7655],
eqmod (64*inp_poly126**2) (segment4) [10753, x**2 - 7460],
eqmod (64*inp_poly127**2) (segment4) [10753, x**2 - 3293]
,
eqmod (64*inp_poly128**2) (segment4) [10753, x**2 - 1102],
eqmod (64*inp_poly129**2) (segment4) [10753, x**2 - 9651],
eqmod (64*inp_poly12a**2) (segment4) [10753, x**2 - 10255],
eqmod (64*inp_poly12b**2) (segment4) [10753, x**2 - 498],
eqmod (64*inp_poly12c**2) (segment4) [10753, x**2 - 9646],
eqmod (64*inp_poly12d**2) (segment4) [10753, x**2 - 1107],
eqmod (64*inp_poly12e**2) (segment4) [10753, x**2 - 1437],
eqmod (64*inp_poly12f**2) (segment4) [10753, x**2 - 9316]
] prove with [ cuts [ 40 ] ],
and [
eqmod (64*inp_poly130**2) (segment4) [10753, x**2 - 8089],
eqmod (64*inp_poly131**2) (segment4) [10753, x**2 - 2664],
eqmod (64*inp_poly132**2) (segment4) [10753, x**2 - 1360],
eqmod (64*inp_poly133**2) (segment4) [10753, x**2 - 9393],
eqmod (64*inp_poly134**2) (segment4) [10753, x**2 - 5096],
eqmod (64*inp_poly135**2) (segment4) [10753, x**2 - 5657],
eqmod (64*inp_poly136**2) (segment4) [10753, x**2 - 6440],
eqmod (64*inp_poly137**2) (segment4) [10753, x**2 - 4313]
,
eqmod (64*inp_poly138**2) (segment4) [10753, x**2 - 2854],
eqmod (64*inp_poly139**2) (segment4) [10753, x**2 - 7899],
eqmod (64*inp_poly13a**2) (segment4) [10753, x**2 - 5970],
eqmod (64*inp_poly13b**2) (segment4) [10753, x**2 - 4783],
eqmod (64*inp_poly13c**2) (segment4) [10753, x**2 - 2129],
eqmod (64*inp_poly13d**2) (segment4) [10753, x**2 - 8624],
eqmod (64*inp_poly13e**2) (segment4) [10753, x**2 - 2336],
eqmod (64*inp_poly13f**2) (segment4) [10753, x**2 - 8417]
] prove with [ cuts [ 41 ] ] && and [
( -5631)@16<=s L0x7fffffffd6e0,L0x7fffffffd6e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd6e2,L0x7fffffffd6e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd6e4,L0x7fffffffd6e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd6e6,L0x7fffffffd6e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd6e8,L0x7fffffffd6e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd6ea,L0x7fffffffd6ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd6ec,L0x7fffffffd6ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd6ee,L0x7fffffffd6ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd6f0,L0x7fffffffd6f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd6f2,L0x7fffffffd6f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd6f4,L0x7fffffffd6f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd6f6,L0x7fffffffd6f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd6f8,L0x7fffffffd6f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd6fa,L0x7fffffffd6fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd6fc,L0x7fffffffd6fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd6fe,L0x7fffffffd6fe<s 5631@16,
( -5727)@16<=s L0x7fffffffd700,L0x7fffffffd700<s 5727@16,
( -5727)@16<=s L0x7fffffffd702,L0x7fffffffd702<s 5727@16,
( -5631)@16<=s L0x7fffffffd704,L0x7fffffffd704<s 5631@16,
( -5631)@16<=s L0x7fffffffd706,L0x7fffffffd706<s 5631@16,
( -5800)@16<=s L0x7fffffffd708,L0x7fffffffd708<s 5800@16,
( -5800)@16<=s L0x7fffffffd70a,L0x7fffffffd70a<s 5800@16,
( -5800)@16<=s L0x7fffffffd70c,L0x7fffffffd70c<s 5800@16,
( -5800)@16<=s L0x7fffffffd70e,L0x7fffffffd70e<s 5800@16,
( -5631)@16<=s L0x7fffffffd710,L0x7fffffffd710<s 5631@16,
( -5631)@16<=s L0x7fffffffd712,L0x7fffffffd712<s 5631@16,
( -5631)@16<=s L0x7fffffffd714,L0x7fffffffd714<s 5631@16,
( -5631)@16<=s L0x7fffffffd716,L0x7fffffffd716<s 5631@16,
( -5631)@16<=s L0x7fffffffd718,L0x7fffffffd718<s 5631@16,
( -5631)@16<=s L0x7fffffffd71a,L0x7fffffffd71a<s 5631@16,
( -5631)@16<=s L0x7fffffffd71c,L0x7fffffffd71c<s 5631@16,
( -5631)@16<=s L0x7fffffffd71e,L0x7fffffffd71e<s 5631@16,
(-11915)@16<=s L0x7fffffffd720,L0x7fffffffd720<s11915@16,
(-11915)@16<=s L0x7fffffffd722,L0x7fffffffd722<s11915@16,
(-11915)@16<=s L0x7fffffffd724,L0x7fffffffd724<s11915@16,
(-11915)@16<=s L0x7fffffffd726,L0x7fffffffd726<s11915@16,
(-11915)@16<=s L0x7fffffffd728,L0x7fffffffd728<s11915@16,
(-11915)@16<=s L0x7fffffffd72a,L0x7fffffffd72a<s11915@16,
(-11915)@16<=s L0x7fffffffd72c,L0x7fffffffd72c<s11915@16,
(-11915)@16<=s L0x7fffffffd72e,L0x7fffffffd72e<s11915@16,
(-11888)@16<=s L0x7fffffffd730,L0x7fffffffd730<s11888@16,
(-11888)@16<=s L0x7fffffffd732,L0x7fffffffd732<s11888@16,
(-11888)@16<=s L0x7fffffffd734,L0x7fffffffd734<s11888@16,
(-11888)@16<=s L0x7fffffffd736,L0x7fffffffd736<s11888@16,
(-11888)@16<=s L0x7fffffffd738,L0x7fffffffd738<s11888@16,
(-11888)@16<=s L0x7fffffffd73a,L0x7fffffffd73a<s11888@16,
(-11888)@16<=s L0x7fffffffd73c,L0x7fffffffd73c<s11888@16,
(-11888)@16<=s L0x7fffffffd73e,L0x7fffffffd73e<s11888@16,
(-12204)@16<=s L0x7fffffffd740,L0x7fffffffd740<s12204@16,
(-12204)@16<=s L0x7fffffffd742,L0x7fffffffd742<s12204@16,
(-12147)@16<=s L0x7fffffffd744,L0x7fffffffd744<s12147@16,
(-12147)@16<=s L0x7fffffffd746,L0x7fffffffd746<s12147@16,
(-12212)@16<=s L0x7fffffffd748,L0x7fffffffd748<s12212@16,
(-12212)@16<=s L0x7fffffffd74a,L0x7fffffffd74a<s12212@16,
(-12204)@16<=s L0x7fffffffd74c,L0x7fffffffd74c<s12204@16,
(-12204)@16<=s L0x7fffffffd74e,L0x7fffffffd74e<s12204@16,
(-12030)@16<=s L0x7fffffffd750,L0x7fffffffd750<s12030@16,
(-12030)@16<=s L0x7fffffffd752,L0x7fffffffd752<s12030@16,
(-12030)@16<=s L0x7fffffffd754,L0x7fffffffd754<s12030@16,
(-12030)@16<=s L0x7fffffffd756,L0x7fffffffd756<s12030@16,
(-12030)@16<=s L0x7fffffffd758,L0x7fffffffd758<s12030@16,
(-12030)@16<=s L0x7fffffffd75a,L0x7fffffffd75a<s12030@16,
(-12030)@16<=s L0x7fffffffd75c,L0x7fffffffd75c<s12030@16,
(-12030)@16<=s L0x7fffffffd75e,L0x7fffffffd75e<s12030@16
] prove with [ cuts [ 37 ] ];


(**************** CUT  43 *****************)

cut true && true;



(* vmovdqa 0x500(%rsi),%ymm4                       #! EA = L0x7fffffffd7e0; Value = 0xf3000624005e1198; PC = 0x55555555c06d *)
mov ymm4_0 L0x7fffffffd7e0;
mov ymm4_1 L0x7fffffffd7e2;
mov ymm4_2 L0x7fffffffd7e4;
mov ymm4_3 L0x7fffffffd7e6;
mov ymm4_4 L0x7fffffffd7e8;
mov ymm4_5 L0x7fffffffd7ea;
mov ymm4_6 L0x7fffffffd7ec;
mov ymm4_7 L0x7fffffffd7ee;
mov ymm4_8 L0x7fffffffd7f0;
mov ymm4_9 L0x7fffffffd7f2;
mov ymm4_a L0x7fffffffd7f4;
mov ymm4_b L0x7fffffffd7f6;
mov ymm4_c L0x7fffffffd7f8;
mov ymm4_d L0x7fffffffd7fa;
mov ymm4_e L0x7fffffffd7fc;
mov ymm4_f L0x7fffffffd7fe;
(* vmovdqa 0x520(%rsi),%ymm5                       #! EA = L0x7fffffffd800; Value = 0x0548ffe7fc78039d; PC = 0x55555555c075 *)
mov ymm5_0 L0x7fffffffd800;
mov ymm5_1 L0x7fffffffd802;
mov ymm5_2 L0x7fffffffd804;
mov ymm5_3 L0x7fffffffd806;
mov ymm5_4 L0x7fffffffd808;
mov ymm5_5 L0x7fffffffd80a;
mov ymm5_6 L0x7fffffffd80c;
mov ymm5_7 L0x7fffffffd80e;
mov ymm5_8 L0x7fffffffd810;
mov ymm5_9 L0x7fffffffd812;
mov ymm5_a L0x7fffffffd814;
mov ymm5_b L0x7fffffffd816;
mov ymm5_c L0x7fffffffd818;
mov ymm5_d L0x7fffffffd81a;
mov ymm5_e L0x7fffffffd81c;
mov ymm5_f L0x7fffffffd81e;
(* vmovdqa 0x540(%rsi),%ymm6                       #! EA = L0x7fffffffd820; Value = 0x10a4147c0606115a; PC = 0x55555555c07d *)
mov ymm6_0 L0x7fffffffd820;
mov ymm6_1 L0x7fffffffd822;
mov ymm6_2 L0x7fffffffd824;
mov ymm6_3 L0x7fffffffd826;
mov ymm6_4 L0x7fffffffd828;
mov ymm6_5 L0x7fffffffd82a;
mov ymm6_6 L0x7fffffffd82c;
mov ymm6_7 L0x7fffffffd82e;
mov ymm6_8 L0x7fffffffd830;
mov ymm6_9 L0x7fffffffd832;
mov ymm6_a L0x7fffffffd834;
mov ymm6_b L0x7fffffffd836;
mov ymm6_c L0x7fffffffd838;
mov ymm6_d L0x7fffffffd83a;
mov ymm6_e L0x7fffffffd83c;
mov ymm6_f L0x7fffffffd83e;
(* vmovdqa 0x560(%rsi),%ymm7                       #! EA = L0x7fffffffd840; Value = 0xfc53f720f6b6fd42; PC = 0x55555555c085 *)
mov ymm7_0 L0x7fffffffd840;
mov ymm7_1 L0x7fffffffd842;
mov ymm7_2 L0x7fffffffd844;
mov ymm7_3 L0x7fffffffd846;
mov ymm7_4 L0x7fffffffd848;
mov ymm7_5 L0x7fffffffd84a;
mov ymm7_6 L0x7fffffffd84c;
mov ymm7_7 L0x7fffffffd84e;
mov ymm7_8 L0x7fffffffd850;
mov ymm7_9 L0x7fffffffd852;
mov ymm7_a L0x7fffffffd854;
mov ymm7_b L0x7fffffffd856;
mov ymm7_c L0x7fffffffd858;
mov ymm7_d L0x7fffffffd85a;
mov ymm7_e L0x7fffffffd85c;
mov ymm7_f L0x7fffffffd85e;
(* vmovdqa 0x580(%rsi),%ymm8                       #! EA = L0x7fffffffd860; Value = 0x0100fb70f885f695; PC = 0x55555555c08d *)
mov ymm8_0 L0x7fffffffd860;
mov ymm8_1 L0x7fffffffd862;
mov ymm8_2 L0x7fffffffd864;
mov ymm8_3 L0x7fffffffd866;
mov ymm8_4 L0x7fffffffd868;
mov ymm8_5 L0x7fffffffd86a;
mov ymm8_6 L0x7fffffffd86c;
mov ymm8_7 L0x7fffffffd86e;
mov ymm8_8 L0x7fffffffd870;
mov ymm8_9 L0x7fffffffd872;
mov ymm8_a L0x7fffffffd874;
mov ymm8_b L0x7fffffffd876;
mov ymm8_c L0x7fffffffd878;
mov ymm8_d L0x7fffffffd87a;
mov ymm8_e L0x7fffffffd87c;
mov ymm8_f L0x7fffffffd87e;
(* vmovdqa 0x5a0(%rsi),%ymm9                       #! EA = L0x7fffffffd880; Value = 0xfdbf03d707ecfd14; PC = 0x55555555c095 *)
mov ymm9_0 L0x7fffffffd880;
mov ymm9_1 L0x7fffffffd882;
mov ymm9_2 L0x7fffffffd884;
mov ymm9_3 L0x7fffffffd886;
mov ymm9_4 L0x7fffffffd888;
mov ymm9_5 L0x7fffffffd88a;
mov ymm9_6 L0x7fffffffd88c;
mov ymm9_7 L0x7fffffffd88e;
mov ymm9_8 L0x7fffffffd890;
mov ymm9_9 L0x7fffffffd892;
mov ymm9_a L0x7fffffffd894;
mov ymm9_b L0x7fffffffd896;
mov ymm9_c L0x7fffffffd898;
mov ymm9_d L0x7fffffffd89a;
mov ymm9_e L0x7fffffffd89c;
mov ymm9_f L0x7fffffffd89e;
(* vmovdqa 0x5c0(%rsi),%ymm10                      #! EA = L0x7fffffffd8a0; Value = 0xf3740e1d07ab0687; PC = 0x55555555c09d *)
mov ymm10_0 L0x7fffffffd8a0;
mov ymm10_1 L0x7fffffffd8a2;
mov ymm10_2 L0x7fffffffd8a4;
mov ymm10_3 L0x7fffffffd8a6;
mov ymm10_4 L0x7fffffffd8a8;
mov ymm10_5 L0x7fffffffd8aa;
mov ymm10_6 L0x7fffffffd8ac;
mov ymm10_7 L0x7fffffffd8ae;
mov ymm10_8 L0x7fffffffd8b0;
mov ymm10_9 L0x7fffffffd8b2;
mov ymm10_a L0x7fffffffd8b4;
mov ymm10_b L0x7fffffffd8b6;
mov ymm10_c L0x7fffffffd8b8;
mov ymm10_d L0x7fffffffd8ba;
mov ymm10_e L0x7fffffffd8bc;
mov ymm10_f L0x7fffffffd8be;
(* vmovdqa 0x5e0(%rsi),%ymm11                      #! EA = L0x7fffffffd8c0; Value = 0x1247075ffbbb0b1c; PC = 0x55555555c0a5 *)
mov ymm11_0 L0x7fffffffd8c0;
mov ymm11_1 L0x7fffffffd8c2;
mov ymm11_2 L0x7fffffffd8c4;
mov ymm11_3 L0x7fffffffd8c6;
mov ymm11_4 L0x7fffffffd8c8;
mov ymm11_5 L0x7fffffffd8ca;
mov ymm11_6 L0x7fffffffd8cc;
mov ymm11_7 L0x7fffffffd8ce;
mov ymm11_8 L0x7fffffffd8d0;
mov ymm11_9 L0x7fffffffd8d2;
mov ymm11_a L0x7fffffffd8d4;
mov ymm11_b L0x7fffffffd8d6;
mov ymm11_c L0x7fffffffd8d8;
mov ymm11_d L0x7fffffffd8da;
mov ymm11_e L0x7fffffffd8dc;
mov ymm11_f L0x7fffffffd8de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555c0ad *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555c0b1 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555c0b5 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555c0b9 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555c0bd *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555c0c2 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555c0c7 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555c0cc *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x2b0(%rdx),%ymm1                #! EA = L0x5555555613d0; Value = 0x1c189bcc5a35c644; PC = 0x55555555c0d1 *)
mov ymm1_0 L0x5555555613d0;
mov ymm1_1 L0x5555555613d2;
mov ymm1_2 L0x5555555613d4;
mov ymm1_3 L0x5555555613d6;
mov ymm1_4 L0x5555555613d8;
mov ymm1_5 L0x5555555613da;
mov ymm1_6 L0x5555555613dc;
mov ymm1_7 L0x5555555613de;
mov ymm1_8 L0x5555555613d0;
mov ymm1_9 L0x5555555613d2;
mov ymm1_a L0x5555555613d4;
mov ymm1_b L0x5555555613d6;
mov ymm1_c L0x5555555613d8;
mov ymm1_d L0x5555555613da;
mov ymm1_e L0x5555555613dc;
mov ymm1_f L0x5555555613de;
(* vbroadcasti128 0x4b0(%rdx),%ymm2                #! EA = L0x5555555615d0; Value = 0x0c1813cc0c35ee44; PC = 0x55555555c0da *)
mov ymm2_0 L0x5555555615d0;
mov ymm2_1 L0x5555555615d2;
mov ymm2_2 L0x5555555615d4;
mov ymm2_3 L0x5555555615d6;
mov ymm2_4 L0x5555555615d8;
mov ymm2_5 L0x5555555615da;
mov ymm2_6 L0x5555555615dc;
mov ymm2_7 L0x5555555615de;
mov ymm2_8 L0x5555555615d0;
mov ymm2_9 L0x5555555615d2;
mov ymm2_a L0x5555555615d4;
mov ymm2_b L0x5555555615d6;
mov ymm2_c L0x5555555615d8;
mov ymm2_d L0x5555555615da;
mov ymm2_e L0x5555555615dc;
mov ymm2_f L0x5555555615de;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c0e3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c0e8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555c0ed *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c0f1 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c0f5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555c0f9 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x2a0(%rdx),%ymm1                #! EA = L0x5555555613c0; Value = 0x9fbf307fcf0db133; PC = 0x55555555c0fd *)
mov ymm1_0 L0x5555555613c0;
mov ymm1_1 L0x5555555613c2;
mov ymm1_2 L0x5555555613c4;
mov ymm1_3 L0x5555555613c6;
mov ymm1_4 L0x5555555613c8;
mov ymm1_5 L0x5555555613ca;
mov ymm1_6 L0x5555555613cc;
mov ymm1_7 L0x5555555613ce;
mov ymm1_8 L0x5555555613c0;
mov ymm1_9 L0x5555555613c2;
mov ymm1_a L0x5555555613c4;
mov ymm1_b L0x5555555613c6;
mov ymm1_c L0x5555555613c8;
mov ymm1_d L0x5555555613ca;
mov ymm1_e L0x5555555613cc;
mov ymm1_f L0x5555555613ce;
(* vbroadcasti128 0x4a0(%rdx),%ymm2                #! EA = L0x5555555615c0; Value = 0xf5bf067ff10d0f33; PC = 0x55555555c106 *)
mov ymm2_0 L0x5555555615c0;
mov ymm2_1 L0x5555555615c2;
mov ymm2_2 L0x5555555615c4;
mov ymm2_3 L0x5555555615c6;
mov ymm2_4 L0x5555555615c8;
mov ymm2_5 L0x5555555615ca;
mov ymm2_6 L0x5555555615cc;
mov ymm2_7 L0x5555555615ce;
mov ymm2_8 L0x5555555615c0;
mov ymm2_9 L0x5555555615c2;
mov ymm2_a L0x5555555615c4;
mov ymm2_b L0x5555555615c6;
mov ymm2_c L0x5555555615c8;
mov ymm2_d L0x5555555615ca;
mov ymm2_e L0x5555555615cc;
mov ymm2_f L0x5555555615ce;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c10f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c114 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555c119 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c11d *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c121 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555c125 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x290(%rdx),%ymm1                #! EA = L0x5555555613b0; Value = 0x5d90a3147cb4ae5d; PC = 0x55555555c129 *)
mov ymm1_0 L0x5555555613b0;
mov ymm1_1 L0x5555555613b2;
mov ymm1_2 L0x5555555613b4;
mov ymm1_3 L0x5555555613b6;
mov ymm1_4 L0x5555555613b8;
mov ymm1_5 L0x5555555613ba;
mov ymm1_6 L0x5555555613bc;
mov ymm1_7 L0x5555555613be;
mov ymm1_8 L0x5555555613b0;
mov ymm1_9 L0x5555555613b2;
mov ymm1_a L0x5555555613b4;
mov ymm1_b L0x5555555613b6;
mov ymm1_c L0x5555555613b8;
mov ymm1_d L0x5555555613ba;
mov ymm1_e L0x5555555613bc;
mov ymm1_f L0x5555555613be;
(* vbroadcasti128 0x490(%rdx),%ymm2                #! EA = L0x5555555615b0; Value = 0xfd90eb1404b4f05d; PC = 0x55555555c132 *)
mov ymm2_0 L0x5555555615b0;
mov ymm2_1 L0x5555555615b2;
mov ymm2_2 L0x5555555615b4;
mov ymm2_3 L0x5555555615b6;
mov ymm2_4 L0x5555555615b8;
mov ymm2_5 L0x5555555615ba;
mov ymm2_6 L0x5555555615bc;
mov ymm2_7 L0x5555555615be;
mov ymm2_8 L0x5555555615b0;
mov ymm2_9 L0x5555555615b2;
mov ymm2_a L0x5555555615b4;
mov ymm2_b L0x5555555615b6;
mov ymm2_c L0x5555555615b8;
mov ymm2_d L0x5555555615ba;
mov ymm2_e L0x5555555615bc;
mov ymm2_f L0x5555555615be;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c13b *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c140 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555c145 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c149 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c14d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555c151 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x280(%rdx),%ymm1                #! EA = L0x5555555613a0; Value = 0x3b1725db7703e831; PC = 0x55555555c156 *)
mov ymm1_0 L0x5555555613a0;
mov ymm1_1 L0x5555555613a2;
mov ymm1_2 L0x5555555613a4;
mov ymm1_3 L0x5555555613a6;
mov ymm1_4 L0x5555555613a8;
mov ymm1_5 L0x5555555613aa;
mov ymm1_6 L0x5555555613ac;
mov ymm1_7 L0x5555555613ae;
mov ymm1_8 L0x5555555613a0;
mov ymm1_9 L0x5555555613a2;
mov ymm1_a L0x5555555613a4;
mov ymm1_b L0x5555555613a6;
mov ymm1_c L0x5555555613a8;
mov ymm1_d L0x5555555613aa;
mov ymm1_e L0x5555555613ac;
mov ymm1_f L0x5555555613ae;
(* vbroadcasti128 0x480(%rdx),%ymm2                #! EA = L0x5555555615a0; Value = 0x011713dbf503f231; PC = 0x55555555c15f *)
mov ymm2_0 L0x5555555615a0;
mov ymm2_1 L0x5555555615a2;
mov ymm2_2 L0x5555555615a4;
mov ymm2_3 L0x5555555615a6;
mov ymm2_4 L0x5555555615a8;
mov ymm2_5 L0x5555555615aa;
mov ymm2_6 L0x5555555615ac;
mov ymm2_7 L0x5555555615ae;
mov ymm2_8 L0x5555555615a0;
mov ymm2_9 L0x5555555615a2;
mov ymm2_a L0x5555555615a4;
mov ymm2_b L0x5555555615a6;
mov ymm2_c L0x5555555615a8;
mov ymm2_d L0x5555555615aa;
mov ymm2_e L0x5555555615ac;
mov ymm2_f L0x5555555615ae;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c168 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c16d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555c172 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c176 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c17a *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555c17e *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555c183 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555c188 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555c18d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555c191 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555c195 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555c19a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555c19f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555c1a3 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555c1a7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555c1ac *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555c1b1 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555c1b6 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555c1bb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555c1c0 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555c1c5 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555c1ca *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555c1cf *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555c1d3 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555c1d7 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555c1db *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555c1df *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555c1e4 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555c1e9 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555c1ee *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x1d8(%rdx),%ymm1                  #! EA = L0x5555555612f8; Value = 0x1c9ecaf57d4c1e24; PC = 0x55555555c1f3 *)
mov ymm1_0 L0x5555555612f8;
mov ymm1_1 L0x5555555612fa;
mov ymm1_2 L0x5555555612fc;
mov ymm1_3 L0x5555555612fe;
mov ymm1_4 L0x5555555612f8;
mov ymm1_5 L0x5555555612fa;
mov ymm1_6 L0x5555555612fc;
mov ymm1_7 L0x5555555612fe;
mov ymm1_8 L0x5555555612f8;
mov ymm1_9 L0x5555555612fa;
mov ymm1_a L0x5555555612fc;
mov ymm1_b L0x5555555612fe;
mov ymm1_c L0x5555555612f8;
mov ymm1_d L0x5555555612fa;
mov ymm1_e L0x5555555612fc;
mov ymm1_f L0x5555555612fe;
(* vpbroadcastq 0x3d8(%rdx),%ymm2                  #! EA = L0x5555555614f8; Value = 0x089efcf5f54c0624; PC = 0x55555555c1fc *)
mov ymm2_0 L0x5555555614f8;
mov ymm2_1 L0x5555555614fa;
mov ymm2_2 L0x5555555614fc;
mov ymm2_3 L0x5555555614fe;
mov ymm2_4 L0x5555555614f8;
mov ymm2_5 L0x5555555614fa;
mov ymm2_6 L0x5555555614fc;
mov ymm2_7 L0x5555555614fe;
mov ymm2_8 L0x5555555614f8;
mov ymm2_9 L0x5555555614fa;
mov ymm2_a L0x5555555614fc;
mov ymm2_b L0x5555555614fe;
mov ymm2_c L0x5555555614f8;
mov ymm2_d L0x5555555614fa;
mov ymm2_e L0x5555555614fc;
mov ymm2_f L0x5555555614fe;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c205 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c20a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555c20f *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c213 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c217 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555c21b *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x1d0(%rdx),%ymm1                  #! EA = L0x5555555612f0; Value = 0x7aba08121eb01cbc; PC = 0x55555555c21f *)
mov ymm1_0 L0x5555555612f0;
mov ymm1_1 L0x5555555612f2;
mov ymm1_2 L0x5555555612f4;
mov ymm1_3 L0x5555555612f6;
mov ymm1_4 L0x5555555612f0;
mov ymm1_5 L0x5555555612f2;
mov ymm1_6 L0x5555555612f4;
mov ymm1_7 L0x5555555612f6;
mov ymm1_8 L0x5555555612f0;
mov ymm1_9 L0x5555555612f2;
mov ymm1_a L0x5555555612f4;
mov ymm1_b L0x5555555612f6;
mov ymm1_c L0x5555555612f0;
mov ymm1_d L0x5555555612f2;
mov ymm1_e L0x5555555612f4;
mov ymm1_f L0x5555555612f6;
(* vpbroadcastq 0x3d0(%rdx),%ymm2                  #! EA = L0x5555555614f0; Value = 0xfebafc12feb0f4bc; PC = 0x55555555c228 *)
mov ymm2_0 L0x5555555614f0;
mov ymm2_1 L0x5555555614f2;
mov ymm2_2 L0x5555555614f4;
mov ymm2_3 L0x5555555614f6;
mov ymm2_4 L0x5555555614f0;
mov ymm2_5 L0x5555555614f2;
mov ymm2_6 L0x5555555614f4;
mov ymm2_7 L0x5555555614f6;
mov ymm2_8 L0x5555555614f0;
mov ymm2_9 L0x5555555614f2;
mov ymm2_a L0x5555555614f4;
mov ymm2_b L0x5555555614f6;
mov ymm2_c L0x5555555614f0;
mov ymm2_d L0x5555555614f2;
mov ymm2_e L0x5555555614f4;
mov ymm2_f L0x5555555614f6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c231 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c236 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555c23b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c23f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c243 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555c247 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x1c8(%rdx),%ymm1                  #! EA = L0x5555555612e8; Value = 0x3a976190558488ae; PC = 0x55555555c24b *)
mov ymm1_0 L0x5555555612e8;
mov ymm1_1 L0x5555555612ea;
mov ymm1_2 L0x5555555612ec;
mov ymm1_3 L0x5555555612ee;
mov ymm1_4 L0x5555555612e8;
mov ymm1_5 L0x5555555612ea;
mov ymm1_6 L0x5555555612ec;
mov ymm1_7 L0x5555555612ee;
mov ymm1_8 L0x5555555612e8;
mov ymm1_9 L0x5555555612ea;
mov ymm1_a L0x5555555612ec;
mov ymm1_b L0x5555555612ee;
mov ymm1_c L0x5555555612e8;
mov ymm1_d L0x5555555612ea;
mov ymm1_e L0x5555555612ec;
mov ymm1_f L0x5555555612ee;
(* vpbroadcastq 0x3c8(%rdx),%ymm2                  #! EA = L0x5555555614e8; Value = 0x00970190fd8414ae; PC = 0x55555555c254 *)
mov ymm2_0 L0x5555555614e8;
mov ymm2_1 L0x5555555614ea;
mov ymm2_2 L0x5555555614ec;
mov ymm2_3 L0x5555555614ee;
mov ymm2_4 L0x5555555614e8;
mov ymm2_5 L0x5555555614ea;
mov ymm2_6 L0x5555555614ec;
mov ymm2_7 L0x5555555614ee;
mov ymm2_8 L0x5555555614e8;
mov ymm2_9 L0x5555555614ea;
mov ymm2_a L0x5555555614ec;
mov ymm2_b L0x5555555614ee;
mov ymm2_c L0x5555555614e8;
mov ymm2_d L0x5555555614ea;
mov ymm2_e L0x5555555614ec;
mov ymm2_f L0x5555555614ee;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c25d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c262 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555c267 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c26b *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c26f *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555c273 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x1c0(%rdx),%ymm1                  #! EA = L0x5555555612e0; Value = 0xd1bedd9fe4be00b1; PC = 0x55555555c278 *)
mov ymm1_0 L0x5555555612e0;
mov ymm1_1 L0x5555555612e2;
mov ymm1_2 L0x5555555612e4;
mov ymm1_3 L0x5555555612e6;
mov ymm1_4 L0x5555555612e0;
mov ymm1_5 L0x5555555612e2;
mov ymm1_6 L0x5555555612e4;
mov ymm1_7 L0x5555555612e6;
mov ymm1_8 L0x5555555612e0;
mov ymm1_9 L0x5555555612e2;
mov ymm1_a L0x5555555612e4;
mov ymm1_b L0x5555555612e6;
mov ymm1_c L0x5555555612e0;
mov ymm1_d L0x5555555612e2;
mov ymm1_e L0x5555555612e4;
mov ymm1_f L0x5555555612e6;
(* vpbroadcastq 0x3c0(%rdx),%ymm2                  #! EA = L0x5555555614e0; Value = 0xfdbef39f10be0ab1; PC = 0x55555555c281 *)
mov ymm2_0 L0x5555555614e0;
mov ymm2_1 L0x5555555614e2;
mov ymm2_2 L0x5555555614e4;
mov ymm2_3 L0x5555555614e6;
mov ymm2_4 L0x5555555614e0;
mov ymm2_5 L0x5555555614e2;
mov ymm2_6 L0x5555555614e4;
mov ymm2_7 L0x5555555614e6;
mov ymm2_8 L0x5555555614e0;
mov ymm2_9 L0x5555555614e2;
mov ymm2_a L0x5555555614e4;
mov ymm2_b L0x5555555614e6;
mov ymm2_c L0x5555555614e0;
mov ymm2_d L0x5555555614e2;
mov ymm2_e L0x5555555614e4;
mov ymm2_f L0x5555555614e6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c28a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c28f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555c294 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c298 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c29c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555c2a0 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555c2a5 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555c2ad *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555c2b5 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555c2b9 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c2bd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c2c1 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555c2c5 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555c2c9 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c2cd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c2d1 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555c2d5 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555c2d9 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c2dd *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555c2e1 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555c2e5 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555c2e9 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c2ed *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555c2f1 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555c2f5 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555c2fa *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555c2ff *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555c303 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555c307 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555c30c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555c311 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555c315 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555c319 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555c31e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555c323 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555c328 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555c32d *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555c332 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555c337 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555c33c *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555c341 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555c345 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555c349 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555c34d *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555c351 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555c356 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555c35b *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555c360 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x16c(%rdx),%ymm1                  #! EA = L0x55555556128c; Value = 0x860fbeac5ce5f2b1; PC = 0x55555555c365 *)
mov ymm1_0 L0x55555556128c;
mov ymm1_1 L0x55555556128e;
mov ymm1_2 L0x55555556128c;
mov ymm1_3 L0x55555556128e;
mov ymm1_4 L0x55555556128c;
mov ymm1_5 L0x55555556128e;
mov ymm1_6 L0x55555556128c;
mov ymm1_7 L0x55555556128e;
mov ymm1_8 L0x55555556128c;
mov ymm1_9 L0x55555556128e;
mov ymm1_a L0x55555556128c;
mov ymm1_b L0x55555556128e;
mov ymm1_c L0x55555556128c;
mov ymm1_d L0x55555556128e;
mov ymm1_e L0x55555556128c;
mov ymm1_f L0x55555556128e;
(* vpbroadcastd 0x36c(%rdx),%ymm2                  #! EA = L0x55555556148c; Value = 0xfc0ff6aceee5fcb1; PC = 0x55555555c36e *)
mov ymm2_0 L0x55555556148c;
mov ymm2_1 L0x55555556148e;
mov ymm2_2 L0x55555556148c;
mov ymm2_3 L0x55555556148e;
mov ymm2_4 L0x55555556148c;
mov ymm2_5 L0x55555556148e;
mov ymm2_6 L0x55555556148c;
mov ymm2_7 L0x55555556148e;
mov ymm2_8 L0x55555556148c;
mov ymm2_9 L0x55555556148e;
mov ymm2_a L0x55555556148c;
mov ymm2_b L0x55555556148e;
mov ymm2_c L0x55555556148c;
mov ymm2_d L0x55555556148e;
mov ymm2_e L0x55555556148c;
mov ymm2_f L0x55555556148e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c377 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c37c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555c381 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c385 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555c389 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555c38d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x168(%rdx),%ymm1                  #! EA = L0x555555561288; Value = 0x5ce5f2b1500a8458; PC = 0x55555555c391 *)
mov ymm1_0 L0x555555561288;
mov ymm1_1 L0x55555556128a;
mov ymm1_2 L0x555555561288;
mov ymm1_3 L0x55555556128a;
mov ymm1_4 L0x555555561288;
mov ymm1_5 L0x55555556128a;
mov ymm1_6 L0x555555561288;
mov ymm1_7 L0x55555556128a;
mov ymm1_8 L0x555555561288;
mov ymm1_9 L0x55555556128a;
mov ymm1_a L0x555555561288;
mov ymm1_b L0x55555556128a;
mov ymm1_c L0x555555561288;
mov ymm1_d L0x55555556128a;
mov ymm1_e L0x555555561288;
mov ymm1_f L0x55555556128a;
(* vpbroadcastd 0x368(%rdx),%ymm2                  #! EA = L0x555555561488; Value = 0xeee5fcb1f40af458; PC = 0x55555555c39a *)
mov ymm2_0 L0x555555561488;
mov ymm2_1 L0x55555556148a;
mov ymm2_2 L0x555555561488;
mov ymm2_3 L0x55555556148a;
mov ymm2_4 L0x555555561488;
mov ymm2_5 L0x55555556148a;
mov ymm2_6 L0x555555561488;
mov ymm2_7 L0x55555556148a;
mov ymm2_8 L0x555555561488;
mov ymm2_9 L0x55555556148a;
mov ymm2_a L0x555555561488;
mov ymm2_b L0x55555556148a;
mov ymm2_c L0x555555561488;
mov ymm2_d L0x55555556148a;
mov ymm2_e L0x555555561488;
mov ymm2_f L0x55555556148a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c3a3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c3a8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555c3ad *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c3b1 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555c3b5 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555c3b9 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x164(%rdx),%ymm1                  #! EA = L0x555555561284; Value = 0x500a84583d78e4f4; PC = 0x55555555c3bd *)
mov ymm1_0 L0x555555561284;
mov ymm1_1 L0x555555561286;
mov ymm1_2 L0x555555561284;
mov ymm1_3 L0x555555561286;
mov ymm1_4 L0x555555561284;
mov ymm1_5 L0x555555561286;
mov ymm1_6 L0x555555561284;
mov ymm1_7 L0x555555561286;
mov ymm1_8 L0x555555561284;
mov ymm1_9 L0x555555561286;
mov ymm1_a L0x555555561284;
mov ymm1_b L0x555555561286;
mov ymm1_c L0x555555561284;
mov ymm1_d L0x555555561286;
mov ymm1_e L0x555555561284;
mov ymm1_f L0x555555561286;
(* vpbroadcastd 0x364(%rdx),%ymm2                  #! EA = L0x555555561484; Value = 0xf40af458ed78ecf4; PC = 0x55555555c3c6 *)
mov ymm2_0 L0x555555561484;
mov ymm2_1 L0x555555561486;
mov ymm2_2 L0x555555561484;
mov ymm2_3 L0x555555561486;
mov ymm2_4 L0x555555561484;
mov ymm2_5 L0x555555561486;
mov ymm2_6 L0x555555561484;
mov ymm2_7 L0x555555561486;
mov ymm2_8 L0x555555561484;
mov ymm2_9 L0x555555561486;
mov ymm2_a L0x555555561484;
mov ymm2_b L0x555555561486;
mov ymm2_c L0x555555561484;
mov ymm2_d L0x555555561486;
mov ymm2_e L0x555555561484;
mov ymm2_f L0x555555561486;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c3cf *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c3d4 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555c3d9 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c3dd *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555c3e1 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555c3e5 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x160(%rdx),%ymm1                  #! EA = L0x555555561280; Value = 0x3d78e4f41686ebfa; PC = 0x55555555c3ea *)
mov ymm1_0 L0x555555561280;
mov ymm1_1 L0x555555561282;
mov ymm1_2 L0x555555561280;
mov ymm1_3 L0x555555561282;
mov ymm1_4 L0x555555561280;
mov ymm1_5 L0x555555561282;
mov ymm1_6 L0x555555561280;
mov ymm1_7 L0x555555561282;
mov ymm1_8 L0x555555561280;
mov ymm1_9 L0x555555561282;
mov ymm1_a L0x555555561280;
mov ymm1_b L0x555555561282;
mov ymm1_c L0x555555561280;
mov ymm1_d L0x555555561282;
mov ymm1_e L0x555555561280;
mov ymm1_f L0x555555561282;
(* vpbroadcastd 0x360(%rdx),%ymm2                  #! EA = L0x555555561480; Value = 0xed78ecf41286effa; PC = 0x55555555c3f3 *)
mov ymm2_0 L0x555555561480;
mov ymm2_1 L0x555555561482;
mov ymm2_2 L0x555555561480;
mov ymm2_3 L0x555555561482;
mov ymm2_4 L0x555555561480;
mov ymm2_5 L0x555555561482;
mov ymm2_6 L0x555555561480;
mov ymm2_7 L0x555555561482;
mov ymm2_8 L0x555555561480;
mov ymm2_9 L0x555555561482;
mov ymm2_a L0x555555561480;
mov ymm2_b L0x555555561482;
mov ymm2_c L0x555555561480;
mov ymm2_d L0x555555561482;
mov ymm2_e L0x555555561480;
mov ymm2_f L0x555555561482;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c3fc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c401 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555c406 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c40a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555c40e *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555c412 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555c417 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555c41c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555c421 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555c425 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555c429 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555c42e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555c433 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555c437 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555c43b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555c440 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555c445 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555c44a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555c44f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555c454 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555c459 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555c45e *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x4c95(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555c463 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555c46b *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555c471 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555c476 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555c47c *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555c481 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555c487 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555c48c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555c492 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555c497 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555c49d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555c4a2 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555c4a8 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555c4ad *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555c4b3 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555c4b8 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555c4be *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 5 *****************)




(**************** CUT  44 *****************)

cut and [
eqmod (8*inp_poly140**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3223],
eqmod (8*inp_poly141**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7530],
eqmod (8*inp_poly142**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5491],
eqmod (8*inp_poly143**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5262],
eqmod (8*inp_poly144**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2295],
eqmod (8*inp_poly145**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8458],
eqmod (8*inp_poly146**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9872],
eqmod (8*inp_poly147**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 881]
,
eqmod (8*inp_poly148**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6953],
eqmod (8*inp_poly149**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3800],
eqmod (8*inp_poly14a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3942],
eqmod (8*inp_poly14b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6811],
eqmod (8*inp_poly14c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6042],
eqmod (8*inp_poly14d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4711],
eqmod (8*inp_poly14e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7281],
eqmod (8*inp_poly14f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3472]
,
eqmod (8*inp_poly150**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9557],
eqmod (8*inp_poly151**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1196],
eqmod (8*inp_poly152**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3097],
eqmod (8*inp_poly153**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7656],
eqmod (8*inp_poly154**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3192],
eqmod (8*inp_poly155**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7561],
eqmod (8*inp_poly156**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4861],
eqmod (8*inp_poly157**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5892]
,
eqmod (8*inp_poly158**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2024],
eqmod (8*inp_poly159**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8729],
eqmod (8*inp_poly15a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 549],
eqmod (8*inp_poly15b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10204],
eqmod (8*inp_poly15c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4524],
eqmod (8*inp_poly15d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6229],
eqmod (8*inp_poly15e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4181],
eqmod (8*inp_poly15f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6572]
,
eqmod (8*inp_poly160**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8410],
eqmod (8*inp_poly161**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2343],
eqmod (8*inp_poly162**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1293],
eqmod (8*inp_poly163**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9460],
eqmod (8*inp_poly164**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 607],
eqmod (8*inp_poly165**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10146],
eqmod (8*inp_poly166**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6439],
eqmod (8*inp_poly167**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4314]
,
eqmod (8*inp_poly168**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8928],
eqmod (8*inp_poly169**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1825],
eqmod (8*inp_poly16a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9392],
eqmod (8*inp_poly16b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1361],
eqmod (8*inp_poly16c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5590],
eqmod (8*inp_poly16d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5163],
eqmod (8*inp_poly16e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3992],
eqmod (8*inp_poly16f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6761]
,
eqmod (8*inp_poly170**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5934],
eqmod (8*inp_poly171**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4819],
eqmod (8*inp_poly172**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8208],
eqmod (8*inp_poly173**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2545],
eqmod (8*inp_poly174**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1533],
eqmod (8*inp_poly175**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9220],
eqmod (8*inp_poly176**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 283],
eqmod (8*inp_poly177**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10470]
,
eqmod (8*inp_poly178**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1538],
eqmod (8*inp_poly179**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9215],
eqmod (8*inp_poly17a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10097],
eqmod (8*inp_poly17b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 656],
eqmod (8*inp_poly17c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9813],
eqmod (8*inp_poly17d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 940],
eqmod (8*inp_poly17e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4484],
eqmod (8*inp_poly17f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6269]
] prove with [ cuts [ 5 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-11734)@16<=s ymm3_4,ymm3_4<s11734@16,(-11734)@16<=s ymm3_5,ymm3_5<s11734@16,
(-11250)@16<=s ymm3_6,ymm3_6<s11250@16,(-11250)@16<=s ymm3_7,ymm3_7<s11250@16,
( -6110)@16<=s ymm3_8,ymm3_8<s 6110@16,( -6110)@16<=s ymm3_9,ymm3_9<s 6110@16,
( -6078)@16<=s ymm3_a,ymm3_a<s 6078@16,( -6078)@16<=s ymm3_b,ymm3_b<s 6078@16,
( -6142)@16<=s ymm3_c,ymm3_c<s 6142@16,( -6142)@16<=s ymm3_d,ymm3_d<s 6142@16,
( -6110)@16<=s ymm3_e,ymm3_e<s 6110@16,( -6110)@16<=s ymm3_f,ymm3_f<s 6110@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-12186)@16<=s ymm5_4,ymm5_4<s12186@16,(-12186)@16<=s ymm5_5,ymm5_5<s12186@16,
(-11501)@16<=s ymm5_6,ymm5_6<s11501@16,(-11501)@16<=s ymm5_7,ymm5_7<s11501@16,
( -5504)@16<=s ymm5_8,ymm5_8<s 5504@16,( -5504)@16<=s ymm5_9,ymm5_9<s 5504@16,
( -5504)@16<=s ymm5_a,ymm5_a<s 5504@16,( -5504)@16<=s ymm5_b,ymm5_b<s 5504@16,
( -5521)@16<=s ymm5_c,ymm5_c<s 5521@16,( -5521)@16<=s ymm5_d,ymm5_d<s 5521@16,
( -5505)@16<=s ymm5_e,ymm5_e<s 5505@16,( -5505)@16<=s ymm5_f,ymm5_f<s 5505@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-11191)@16<=s ymm4_4,ymm4_4<s11191@16,(-11191)@16<=s ymm4_5,ymm4_5<s11191@16,
(-10945)@16<=s ymm4_6,ymm4_6<s10945@16,(-10945)@16<=s ymm4_7,ymm4_7<s10945@16,
( -5876)@16<=s ymm4_8,ymm4_8<s 5876@16,( -5876)@16<=s ymm4_9,ymm4_9<s 5876@16,
( -5868)@16<=s ymm4_a,ymm4_a<s 5868@16,( -5868)@16<=s ymm4_b,ymm4_b<s 5868@16,
( -5876)@16<=s ymm4_c,ymm4_c<s 5876@16,( -5876)@16<=s ymm4_d,ymm4_d<s 5876@16,
( -5868)@16<=s ymm4_e,ymm4_e<s 5868@16,( -5868)@16<=s ymm4_f,ymm4_f<s 5868@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-11753)@16<=s ymm7_4,ymm7_4<s11753@16,(-11753)@16<=s ymm7_5,ymm7_5<s11753@16,
(-11283)@16<=s ymm7_6,ymm7_6<s11283@16,(-11283)@16<=s ymm7_7,ymm7_7<s11283@16,
( -5869)@16<=s ymm7_8,ymm7_8<s 5869@16,( -5869)@16<=s ymm7_9,ymm7_9<s 5869@16,
( -5869)@16<=s ymm7_a,ymm7_a<s 5869@16,( -5869)@16<=s ymm7_b,ymm7_b<s 5869@16,
( -5875)@16<=s ymm7_c,ymm7_c<s 5875@16,( -5875)@16<=s ymm7_d,ymm7_d<s 5875@16,
( -5869)@16<=s ymm7_e,ymm7_e<s 5869@16,( -5869)@16<=s ymm7_f,ymm7_f<s 5869@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-10923)@16<=s ymm6_4,ymm6_4<s10923@16,(-10923)@16<=s ymm6_5,ymm6_5<s10923@16,
(-10841)@16<=s ymm6_6,ymm6_6<s10841@16,(-10841)@16<=s ymm6_7,ymm6_7<s10841@16,
( -6165)@16<=s ymm6_8,ymm6_8<s 6165@16,( -6165)@16<=s ymm6_9,ymm6_9<s 6165@16,
( -6142)@16<=s ymm6_a,ymm6_a<s 6142@16,( -6142)@16<=s ymm6_b,ymm6_b<s 6142@16,
( -6142)@16<=s ymm6_c,ymm6_c<s 6142@16,( -6142)@16<=s ymm6_d,ymm6_d<s 6142@16,
( -6119)@16<=s ymm6_e,ymm6_e<s 6119@16,( -6119)@16<=s ymm6_f,ymm6_f<s 6119@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-12704)@16<=s ymm9_4,ymm9_4<s12704@16,(-12704)@16<=s ymm9_5,ymm9_5<s12704@16,
(-11773)@16<=s ymm9_6,ymm9_6<s11773@16,(-11773)@16<=s ymm9_7,ymm9_7<s11773@16,
( -6175)@16<=s ymm9_8,ymm9_8<s 6175@16,( -6175)@16<=s ymm9_9,ymm9_9<s 6175@16,
( -6148)@16<=s ymm9_a,ymm9_a<s 6148@16,( -6148)@16<=s ymm9_b,ymm9_b<s 6148@16,
( -6300)@16<=s ymm9_c,ymm9_c<s 6300@16,( -6300)@16<=s ymm9_d,ymm9_d<s 6300@16,
( -6246)@16<=s ymm9_e,ymm9_e<s 6246@16,( -6246)@16<=s ymm9_f,ymm9_f<s 6246@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-11995)@16<=s ymm8_4,ymm8_4<s11995@16,(-11995)@16<=s ymm8_5,ymm8_5<s11995@16,
(-11374)@16<=s ymm8_6,ymm8_6<s11374@16,(-11374)@16<=s ymm8_7,ymm8_7<s11374@16,
( -6155)@16<=s ymm8_8,ymm8_8<s 6155@16,( -6155)@16<=s ymm8_9,ymm8_9<s 6155@16,
( -6151)@16<=s ymm8_a,ymm8_a<s 6151@16,( -6151)@16<=s ymm8_b,ymm8_b<s 6151@16,
( -6225)@16<=s ymm8_c,ymm8_c<s 6225@16,( -6225)@16<=s ymm8_d,ymm8_d<s 6225@16,
( -6155)@16<=s ymm8_e,ymm8_e<s 6155@16,( -6155)@16<=s ymm8_f,ymm8_f<s 6155@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-13128)@16<=s ymm11_4,ymm11_4<s13128@16,(-13128)@16<=s ymm11_5,ymm11_5<s13128@16,
(-11973)@16<=s ymm11_6,ymm11_6<s11973@16,(-11973)@16<=s ymm11_7,ymm11_7<s11973@16,
( -6014)@16<=s ymm11_8,ymm11_8<s 6014@16,( -6014)@16<=s ymm11_9,ymm11_9<s 6014@16,
( -6008)@16<=s ymm11_a,ymm11_a<s 6008@16,( -6008)@16<=s ymm11_b,ymm11_b<s 6008@16,
( -6165)@16<=s ymm11_c,ymm11_c<s 6165@16,( -6165)@16<=s ymm11_d,ymm11_d<s 6165@16,
( -6085)@16<=s ymm11_e,ymm11_e<s 6085@16,( -6085)@16<=s ymm11_f,ymm11_f<s 6085@16
] prove with [ precondition ];



(**************** CUT  45 *****************)

ecut and [
eqmod (8*inp_poly140**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3223],
eqmod (8*inp_poly141**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7530],
eqmod (8*inp_poly142**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5491],
eqmod (8*inp_poly143**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5262],
eqmod (8*inp_poly144**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2295],
eqmod (8*inp_poly145**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8458],
eqmod (8*inp_poly146**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9872],
eqmod (8*inp_poly147**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 881]
,
eqmod (8*inp_poly148**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6953],
eqmod (8*inp_poly149**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3800],
eqmod (8*inp_poly14a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3942],
eqmod (8*inp_poly14b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6811],
eqmod (8*inp_poly14c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 6042],
eqmod (8*inp_poly14d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 4711],
eqmod (8*inp_poly14e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7281],
eqmod (8*inp_poly14f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3472]
] prove with [ cuts [ 44 ] ];



(**************** CUT  46 *****************)

ecut and [
eqmod (8*inp_poly150**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9557],
eqmod (8*inp_poly151**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1196],
eqmod (8*inp_poly152**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3097],
eqmod (8*inp_poly153**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7656],
eqmod (8*inp_poly154**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3192],
eqmod (8*inp_poly155**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7561],
eqmod (8*inp_poly156**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 4861],
eqmod (8*inp_poly157**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5892]
,
eqmod (8*inp_poly158**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2024],
eqmod (8*inp_poly159**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8729],
eqmod (8*inp_poly15a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 549],
eqmod (8*inp_poly15b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 10204],
eqmod (8*inp_poly15c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4524],
eqmod (8*inp_poly15d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6229],
eqmod (8*inp_poly15e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 4181],
eqmod (8*inp_poly15f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 6572]
] prove with [ cuts [ 44 ] ];



(**************** CUT  47 *****************)

ecut and [
eqmod (8*inp_poly160**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8410],
eqmod (8*inp_poly161**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2343],
eqmod (8*inp_poly162**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1293],
eqmod (8*inp_poly163**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9460],
eqmod (8*inp_poly164**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 607],
eqmod (8*inp_poly165**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10146],
eqmod (8*inp_poly166**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6439],
eqmod (8*inp_poly167**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4314]
,
eqmod (8*inp_poly168**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8928],
eqmod (8*inp_poly169**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1825],
eqmod (8*inp_poly16a**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9392],
eqmod (8*inp_poly16b**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1361],
eqmod (8*inp_poly16c**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5590],
eqmod (8*inp_poly16d**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 5163],
eqmod (8*inp_poly16e**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3992],
eqmod (8*inp_poly16f**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6761]
] prove with [ cuts [ 44 ] ];



(**************** CUT  48 *****************)

ecut and [
eqmod (8*inp_poly170**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 5934],
eqmod (8*inp_poly171**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4819],
eqmod (8*inp_poly172**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8208],
eqmod (8*inp_poly173**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2545],
eqmod (8*inp_poly174**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1533],
eqmod (8*inp_poly175**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9220],
eqmod (8*inp_poly176**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 283],
eqmod (8*inp_poly177**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 10470]
,
eqmod (8*inp_poly178**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1538],
eqmod (8*inp_poly179**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9215],
eqmod (8*inp_poly17a**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 10097],
eqmod (8*inp_poly17b**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 656],
eqmod (8*inp_poly17c**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9813],
eqmod (8*inp_poly17d**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 940],
eqmod (8*inp_poly17e**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4484],
eqmod (8*inp_poly17f**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 6269]
] prove with [ cuts [ 44 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555c4c3 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555c4c7 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555c4cb *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555c4cf *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555c4d3 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555c4d8 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555c4dd *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555c4e2 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555c4e7 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555c4ef *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x136(%rdx),%ymm1                  #! EA = L0x555555561256; Value = 0x47bbf1c9c601f0ab; PC = 0x55555555c4f7 *)
mov ymm1_0 L0x555555561256;
mov ymm1_1 L0x555555561256;
mov ymm1_2 L0x555555561256;
mov ymm1_3 L0x555555561256;
mov ymm1_4 L0x555555561256;
mov ymm1_5 L0x555555561256;
mov ymm1_6 L0x555555561256;
mov ymm1_7 L0x555555561256;
mov ymm1_8 L0x555555561256;
mov ymm1_9 L0x555555561256;
mov ymm1_a L0x555555561256;
mov ymm1_b L0x555555561256;
mov ymm1_c L0x555555561256;
mov ymm1_d L0x555555561256;
mov ymm1_e L0x555555561256;
mov ymm1_f L0x555555561256;
(* vpbroadcastw 0x336(%rdx),%ymm2                  #! EA = L0x555555561456; Value = 0xf5bbebc9f001feab; PC = 0x55555555c500 *)
mov ymm2_0 L0x555555561456;
mov ymm2_1 L0x555555561456;
mov ymm2_2 L0x555555561456;
mov ymm2_3 L0x555555561456;
mov ymm2_4 L0x555555561456;
mov ymm2_5 L0x555555561456;
mov ymm2_6 L0x555555561456;
mov ymm2_7 L0x555555561456;
mov ymm2_8 L0x555555561456;
mov ymm2_9 L0x555555561456;
mov ymm2_a L0x555555561456;
mov ymm2_b L0x555555561456;
mov ymm2_c L0x555555561456;
mov ymm2_d L0x555555561456;
mov ymm2_e L0x555555561456;
mov ymm2_f L0x555555561456;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555c509 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c50d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c511 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555c515 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x134(%rdx),%ymm1                  #! EA = L0x555555561254; Value = 0xf1c9c601f0ab2711; PC = 0x55555555c519 *)
mov ymm1_0 L0x555555561254;
mov ymm1_1 L0x555555561254;
mov ymm1_2 L0x555555561254;
mov ymm1_3 L0x555555561254;
mov ymm1_4 L0x555555561254;
mov ymm1_5 L0x555555561254;
mov ymm1_6 L0x555555561254;
mov ymm1_7 L0x555555561254;
mov ymm1_8 L0x555555561254;
mov ymm1_9 L0x555555561254;
mov ymm1_a L0x555555561254;
mov ymm1_b L0x555555561254;
mov ymm1_c L0x555555561254;
mov ymm1_d L0x555555561254;
mov ymm1_e L0x555555561254;
mov ymm1_f L0x555555561254;
(* vpbroadcastw 0x334(%rdx),%ymm2                  #! EA = L0x555555561454; Value = 0xebc9f001feabf111; PC = 0x55555555c522 *)
mov ymm2_0 L0x555555561454;
mov ymm2_1 L0x555555561454;
mov ymm2_2 L0x555555561454;
mov ymm2_3 L0x555555561454;
mov ymm2_4 L0x555555561454;
mov ymm2_5 L0x555555561454;
mov ymm2_6 L0x555555561454;
mov ymm2_7 L0x555555561454;
mov ymm2_8 L0x555555561454;
mov ymm2_9 L0x555555561454;
mov ymm2_a L0x555555561454;
mov ymm2_b L0x555555561454;
mov ymm2_c L0x555555561454;
mov ymm2_d L0x555555561454;
mov ymm2_e L0x555555561454;
mov ymm2_f L0x555555561454;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555c52b *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c52f *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c533 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555c537 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x132(%rdx),%ymm1                  #! EA = L0x555555561252; Value = 0xc601f0ab2711fcc3; PC = 0x55555555c53b *)
mov ymm1_0 L0x555555561252;
mov ymm1_1 L0x555555561252;
mov ymm1_2 L0x555555561252;
mov ymm1_3 L0x555555561252;
mov ymm1_4 L0x555555561252;
mov ymm1_5 L0x555555561252;
mov ymm1_6 L0x555555561252;
mov ymm1_7 L0x555555561252;
mov ymm1_8 L0x555555561252;
mov ymm1_9 L0x555555561252;
mov ymm1_a L0x555555561252;
mov ymm1_b L0x555555561252;
mov ymm1_c L0x555555561252;
mov ymm1_d L0x555555561252;
mov ymm1_e L0x555555561252;
mov ymm1_f L0x555555561252;
(* vpbroadcastw 0x332(%rdx),%ymm2                  #! EA = L0x555555561452; Value = 0xf001feabf111fac3; PC = 0x55555555c544 *)
mov ymm2_0 L0x555555561452;
mov ymm2_1 L0x555555561452;
mov ymm2_2 L0x555555561452;
mov ymm2_3 L0x555555561452;
mov ymm2_4 L0x555555561452;
mov ymm2_5 L0x555555561452;
mov ymm2_6 L0x555555561452;
mov ymm2_7 L0x555555561452;
mov ymm2_8 L0x555555561452;
mov ymm2_9 L0x555555561452;
mov ymm2_a L0x555555561452;
mov ymm2_b L0x555555561452;
mov ymm2_c L0x555555561452;
mov ymm2_d L0x555555561452;
mov ymm2_e L0x555555561452;
mov ymm2_f L0x555555561452;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555c54d *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c551 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c555 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555c559 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x130(%rdx),%ymm1                  #! EA = L0x555555561250; Value = 0xf0ab2711fcc3398b; PC = 0x55555555c55e *)
mov ymm1_0 L0x555555561250;
mov ymm1_1 L0x555555561250;
mov ymm1_2 L0x555555561250;
mov ymm1_3 L0x555555561250;
mov ymm1_4 L0x555555561250;
mov ymm1_5 L0x555555561250;
mov ymm1_6 L0x555555561250;
mov ymm1_7 L0x555555561250;
mov ymm1_8 L0x555555561250;
mov ymm1_9 L0x555555561250;
mov ymm1_a L0x555555561250;
mov ymm1_b L0x555555561250;
mov ymm1_c L0x555555561250;
mov ymm1_d L0x555555561250;
mov ymm1_e L0x555555561250;
mov ymm1_f L0x555555561250;
(* vpbroadcastw 0x330(%rdx),%ymm2                  #! EA = L0x555555561450; Value = 0xfeabf111fac3078b; PC = 0x55555555c567 *)
mov ymm2_0 L0x555555561450;
mov ymm2_1 L0x555555561450;
mov ymm2_2 L0x555555561450;
mov ymm2_3 L0x555555561450;
mov ymm2_4 L0x555555561450;
mov ymm2_5 L0x555555561450;
mov ymm2_6 L0x555555561450;
mov ymm2_7 L0x555555561450;
mov ymm2_8 L0x555555561450;
mov ymm2_9 L0x555555561450;
mov ymm2_a L0x555555561450;
mov ymm2_b L0x555555561450;
mov ymm2_c L0x555555561450;
mov ymm2_d L0x555555561450;
mov ymm2_e L0x555555561450;
mov ymm2_f L0x555555561450;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555c570 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c574 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c578 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555c57c *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555c581 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555c586 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c58b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555c58f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555c594 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555c599 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c59e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555c5a2 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555c5a7 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555c5ac *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c5b1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555c5b5 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555c5ba *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555c5bf *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555c5c4 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555c5c8 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555c5cd *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555c5d1 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555c5d5 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555c5d9 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555c5dd *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555c5e1 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555c5e5 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555c5ea *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x11a(%rdx),%ymm1                  #! EA = L0x55555556123a; Value = 0x450bc138252491c0; PC = 0x55555555c5ef *)
mov ymm1_0 L0x55555556123a;
mov ymm1_1 L0x55555556123a;
mov ymm1_2 L0x55555556123a;
mov ymm1_3 L0x55555556123a;
mov ymm1_4 L0x55555556123a;
mov ymm1_5 L0x55555556123a;
mov ymm1_6 L0x55555556123a;
mov ymm1_7 L0x55555556123a;
mov ymm1_8 L0x55555556123a;
mov ymm1_9 L0x55555556123a;
mov ymm1_a L0x55555556123a;
mov ymm1_b L0x55555556123a;
mov ymm1_c L0x55555556123a;
mov ymm1_d L0x55555556123a;
mov ymm1_e L0x55555556123a;
mov ymm1_f L0x55555556123a;
(* vpbroadcastw 0x31a(%rdx),%ymm2                  #! EA = L0x55555556143a; Value = 0x130bf1380d2411c0; PC = 0x55555555c5f8 *)
mov ymm2_0 L0x55555556143a;
mov ymm2_1 L0x55555556143a;
mov ymm2_2 L0x55555556143a;
mov ymm2_3 L0x55555556143a;
mov ymm2_4 L0x55555556143a;
mov ymm2_5 L0x55555556143a;
mov ymm2_6 L0x55555556143a;
mov ymm2_7 L0x55555556143a;
mov ymm2_8 L0x55555556143a;
mov ymm2_9 L0x55555556143a;
mov ymm2_a L0x55555556143a;
mov ymm2_b L0x55555556143a;
mov ymm2_c L0x55555556143a;
mov ymm2_d L0x55555556143a;
mov ymm2_e L0x55555556143a;
mov ymm2_f L0x55555556143a;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555c601 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555c605 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555c609 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555c60d *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555c611 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c615 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555c619 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555c61d *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x118(%rdx),%ymm1                  #! EA = L0x555555561238; Value = 0xc138252491c0b857; PC = 0x55555555c621 *)
mov ymm1_0 L0x555555561238;
mov ymm1_1 L0x555555561238;
mov ymm1_2 L0x555555561238;
mov ymm1_3 L0x555555561238;
mov ymm1_4 L0x555555561238;
mov ymm1_5 L0x555555561238;
mov ymm1_6 L0x555555561238;
mov ymm1_7 L0x555555561238;
mov ymm1_8 L0x555555561238;
mov ymm1_9 L0x555555561238;
mov ymm1_a L0x555555561238;
mov ymm1_b L0x555555561238;
mov ymm1_c L0x555555561238;
mov ymm1_d L0x555555561238;
mov ymm1_e L0x555555561238;
mov ymm1_f L0x555555561238;
(* vpbroadcastw 0x318(%rdx),%ymm2                  #! EA = L0x555555561438; Value = 0xf1380d2411c0fe57; PC = 0x55555555c62a *)
mov ymm2_0 L0x555555561438;
mov ymm2_1 L0x555555561438;
mov ymm2_2 L0x555555561438;
mov ymm2_3 L0x555555561438;
mov ymm2_4 L0x555555561438;
mov ymm2_5 L0x555555561438;
mov ymm2_6 L0x555555561438;
mov ymm2_7 L0x555555561438;
mov ymm2_8 L0x555555561438;
mov ymm2_9 L0x555555561438;
mov ymm2_a L0x555555561438;
mov ymm2_b L0x555555561438;
mov ymm2_c L0x555555561438;
mov ymm2_d L0x555555561438;
mov ymm2_e L0x555555561438;
mov ymm2_f L0x555555561438;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555c633 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555c637 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555c63b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555c63f *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555c643 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c647 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555c64b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555c64f *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555c654 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555c658 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555c65c *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555c660 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555c664 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555c668 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555c66c *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555c671 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x10c(%rdx),%ymm1                  #! EA = L0x55555556122c; Value = 0xc126e487ae886f65; PC = 0x55555555c676 *)
mov ymm1_0 L0x55555556122c;
mov ymm1_1 L0x55555556122c;
mov ymm1_2 L0x55555556122c;
mov ymm1_3 L0x55555556122c;
mov ymm1_4 L0x55555556122c;
mov ymm1_5 L0x55555556122c;
mov ymm1_6 L0x55555556122c;
mov ymm1_7 L0x55555556122c;
mov ymm1_8 L0x55555556122c;
mov ymm1_9 L0x55555556122c;
mov ymm1_a L0x55555556122c;
mov ymm1_b L0x55555556122c;
mov ymm1_c L0x55555556122c;
mov ymm1_d L0x55555556122c;
mov ymm1_e L0x55555556122c;
mov ymm1_f L0x55555556122c;
(* vpbroadcastw 0x30c(%rdx),%ymm2                  #! EA = L0x55555556142c; Value = 0xfd260a87fe880165; PC = 0x55555555c67f *)
mov ymm2_0 L0x55555556142c;
mov ymm2_1 L0x55555556142c;
mov ymm2_2 L0x55555556142c;
mov ymm2_3 L0x55555556142c;
mov ymm2_4 L0x55555556142c;
mov ymm2_5 L0x55555556142c;
mov ymm2_6 L0x55555556142c;
mov ymm2_7 L0x55555556142c;
mov ymm2_8 L0x55555556142c;
mov ymm2_9 L0x55555556142c;
mov ymm2_a L0x55555556142c;
mov ymm2_b L0x55555556142c;
mov ymm2_c L0x55555556142c;
mov ymm2_d L0x55555556142c;
mov ymm2_e L0x55555556142c;
mov ymm2_f L0x55555556142c;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555c688 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c68c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c690 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555c694 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555c698 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555c69c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c6a0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555c6a4 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555c6a8 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555c6ac *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c6b0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555c6b4 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555c6b8 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c6bc *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c6c0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555c6c4 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555c6c9 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555c6ce *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c6d3 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555c6d7 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555c6db *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555c6e0 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555c6e5 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555c6e9 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x500(%rdi)                       #! EA = L0x7fffffffd7e0; PC = 0x55555555c6ed *)
mov L0x7fffffffd7e0 ymm9_0;
mov L0x7fffffffd7e2 ymm9_1;
mov L0x7fffffffd7e4 ymm9_2;
mov L0x7fffffffd7e6 ymm9_3;
mov L0x7fffffffd7e8 ymm9_4;
mov L0x7fffffffd7ea ymm9_5;
mov L0x7fffffffd7ec ymm9_6;
mov L0x7fffffffd7ee ymm9_7;
mov L0x7fffffffd7f0 ymm9_8;
mov L0x7fffffffd7f2 ymm9_9;
mov L0x7fffffffd7f4 ymm9_a;
mov L0x7fffffffd7f6 ymm9_b;
mov L0x7fffffffd7f8 ymm9_c;
mov L0x7fffffffd7fa ymm9_d;
mov L0x7fffffffd7fc ymm9_e;
mov L0x7fffffffd7fe ymm9_f;
(* vmovdqa %ymm8,0x520(%rdi)                       #! EA = L0x7fffffffd800; PC = 0x55555555c6f5 *)
mov L0x7fffffffd800 ymm8_0;
mov L0x7fffffffd802 ymm8_1;
mov L0x7fffffffd804 ymm8_2;
mov L0x7fffffffd806 ymm8_3;
mov L0x7fffffffd808 ymm8_4;
mov L0x7fffffffd80a ymm8_5;
mov L0x7fffffffd80c ymm8_6;
mov L0x7fffffffd80e ymm8_7;
mov L0x7fffffffd810 ymm8_8;
mov L0x7fffffffd812 ymm8_9;
mov L0x7fffffffd814 ymm8_a;
mov L0x7fffffffd816 ymm8_b;
mov L0x7fffffffd818 ymm8_c;
mov L0x7fffffffd81a ymm8_d;
mov L0x7fffffffd81c ymm8_e;
mov L0x7fffffffd81e ymm8_f;
(* vmovdqa %ymm10,0x540(%rdi)                      #! EA = L0x7fffffffd820; PC = 0x55555555c6fd *)
mov L0x7fffffffd820 ymm10_0;
mov L0x7fffffffd822 ymm10_1;
mov L0x7fffffffd824 ymm10_2;
mov L0x7fffffffd826 ymm10_3;
mov L0x7fffffffd828 ymm10_4;
mov L0x7fffffffd82a ymm10_5;
mov L0x7fffffffd82c ymm10_6;
mov L0x7fffffffd82e ymm10_7;
mov L0x7fffffffd830 ymm10_8;
mov L0x7fffffffd832 ymm10_9;
mov L0x7fffffffd834 ymm10_a;
mov L0x7fffffffd836 ymm10_b;
mov L0x7fffffffd838 ymm10_c;
mov L0x7fffffffd83a ymm10_d;
mov L0x7fffffffd83c ymm10_e;
mov L0x7fffffffd83e ymm10_f;
(* vmovdqa %ymm3,0x560(%rdi)                       #! EA = L0x7fffffffd840; PC = 0x55555555c705 *)
mov L0x7fffffffd840 ymm3_0;
mov L0x7fffffffd842 ymm3_1;
mov L0x7fffffffd844 ymm3_2;
mov L0x7fffffffd846 ymm3_3;
mov L0x7fffffffd848 ymm3_4;
mov L0x7fffffffd84a ymm3_5;
mov L0x7fffffffd84c ymm3_6;
mov L0x7fffffffd84e ymm3_7;
mov L0x7fffffffd850 ymm3_8;
mov L0x7fffffffd852 ymm3_9;
mov L0x7fffffffd854 ymm3_a;
mov L0x7fffffffd856 ymm3_b;
mov L0x7fffffffd858 ymm3_c;
mov L0x7fffffffd85a ymm3_d;
mov L0x7fffffffd85c ymm3_e;
mov L0x7fffffffd85e ymm3_f;
(* vmovdqa %ymm5,0x580(%rdi)                       #! EA = L0x7fffffffd860; PC = 0x55555555c70d *)
mov L0x7fffffffd860 ymm5_0;
mov L0x7fffffffd862 ymm5_1;
mov L0x7fffffffd864 ymm5_2;
mov L0x7fffffffd866 ymm5_3;
mov L0x7fffffffd868 ymm5_4;
mov L0x7fffffffd86a ymm5_5;
mov L0x7fffffffd86c ymm5_6;
mov L0x7fffffffd86e ymm5_7;
mov L0x7fffffffd870 ymm5_8;
mov L0x7fffffffd872 ymm5_9;
mov L0x7fffffffd874 ymm5_a;
mov L0x7fffffffd876 ymm5_b;
mov L0x7fffffffd878 ymm5_c;
mov L0x7fffffffd87a ymm5_d;
mov L0x7fffffffd87c ymm5_e;
mov L0x7fffffffd87e ymm5_f;
(* vmovdqa %ymm4,0x5a0(%rdi)                       #! EA = L0x7fffffffd880; PC = 0x55555555c715 *)
mov L0x7fffffffd880 ymm4_0;
mov L0x7fffffffd882 ymm4_1;
mov L0x7fffffffd884 ymm4_2;
mov L0x7fffffffd886 ymm4_3;
mov L0x7fffffffd888 ymm4_4;
mov L0x7fffffffd88a ymm4_5;
mov L0x7fffffffd88c ymm4_6;
mov L0x7fffffffd88e ymm4_7;
mov L0x7fffffffd890 ymm4_8;
mov L0x7fffffffd892 ymm4_9;
mov L0x7fffffffd894 ymm4_a;
mov L0x7fffffffd896 ymm4_b;
mov L0x7fffffffd898 ymm4_c;
mov L0x7fffffffd89a ymm4_d;
mov L0x7fffffffd89c ymm4_e;
mov L0x7fffffffd89e ymm4_f;
(* vmovdqa %ymm6,0x5c0(%rdi)                       #! EA = L0x7fffffffd8a0; PC = 0x55555555c71d *)
mov L0x7fffffffd8a0 ymm6_0;
mov L0x7fffffffd8a2 ymm6_1;
mov L0x7fffffffd8a4 ymm6_2;
mov L0x7fffffffd8a6 ymm6_3;
mov L0x7fffffffd8a8 ymm6_4;
mov L0x7fffffffd8aa ymm6_5;
mov L0x7fffffffd8ac ymm6_6;
mov L0x7fffffffd8ae ymm6_7;
mov L0x7fffffffd8b0 ymm6_8;
mov L0x7fffffffd8b2 ymm6_9;
mov L0x7fffffffd8b4 ymm6_a;
mov L0x7fffffffd8b6 ymm6_b;
mov L0x7fffffffd8b8 ymm6_c;
mov L0x7fffffffd8ba ymm6_d;
mov L0x7fffffffd8bc ymm6_e;
mov L0x7fffffffd8be ymm6_f;
(* vmovdqa %ymm11,0x5e0(%rdi)                      #! EA = L0x7fffffffd8c0; PC = 0x55555555c725 *)
mov L0x7fffffffd8c0 ymm11_0;
mov L0x7fffffffd8c2 ymm11_1;
mov L0x7fffffffd8c4 ymm11_2;
mov L0x7fffffffd8c6 ymm11_3;
mov L0x7fffffffd8c8 ymm11_4;
mov L0x7fffffffd8ca ymm11_5;
mov L0x7fffffffd8cc ymm11_6;
mov L0x7fffffffd8ce ymm11_7;
mov L0x7fffffffd8d0 ymm11_8;
mov L0x7fffffffd8d2 ymm11_9;
mov L0x7fffffffd8d4 ymm11_a;
mov L0x7fffffffd8d6 ymm11_b;
mov L0x7fffffffd8d8 ymm11_c;
mov L0x7fffffffd8da ymm11_d;
mov L0x7fffffffd8dc ymm11_e;
mov L0x7fffffffd8de ymm11_f;



(**************** LEVELS 3-5, 5 *****************)

ghost segment5@bit :
segment5 = 
x**  0*(
L0x7fffffffd7e0*x** 0+L0x7fffffffd7e2*x** 1+L0x7fffffffd7e4*x** 2+
L0x7fffffffd7e6*x** 3+L0x7fffffffd7e8*x** 4+L0x7fffffffd7ea*x** 5+
L0x7fffffffd7ec*x** 6+L0x7fffffffd7ee*x** 7+L0x7fffffffd7f0*x** 8+
L0x7fffffffd7f2*x** 9+L0x7fffffffd7f4*x**10+L0x7fffffffd7f6*x**11+
L0x7fffffffd7f8*x**12+L0x7fffffffd7fa*x**13+L0x7fffffffd7fc*x**14+
L0x7fffffffd7fe*x**15)+
x** 16*(
L0x7fffffffd800*x** 0+L0x7fffffffd802*x** 1+L0x7fffffffd804*x** 2+
L0x7fffffffd806*x** 3+L0x7fffffffd808*x** 4+L0x7fffffffd80a*x** 5+
L0x7fffffffd80c*x** 6+L0x7fffffffd80e*x** 7+L0x7fffffffd810*x** 8+
L0x7fffffffd812*x** 9+L0x7fffffffd814*x**10+L0x7fffffffd816*x**11+
L0x7fffffffd818*x**12+L0x7fffffffd81a*x**13+L0x7fffffffd81c*x**14+
L0x7fffffffd81e*x**15)+
x** 32*(
L0x7fffffffd820*x** 0+L0x7fffffffd822*x** 1+L0x7fffffffd824*x** 2+
L0x7fffffffd826*x** 3+L0x7fffffffd828*x** 4+L0x7fffffffd82a*x** 5+
L0x7fffffffd82c*x** 6+L0x7fffffffd82e*x** 7+L0x7fffffffd830*x** 8+
L0x7fffffffd832*x** 9+L0x7fffffffd834*x**10+L0x7fffffffd836*x**11+
L0x7fffffffd838*x**12+L0x7fffffffd83a*x**13+L0x7fffffffd83c*x**14+
L0x7fffffffd83e*x**15)+
x** 48*(
L0x7fffffffd840*x** 0+L0x7fffffffd842*x** 1+L0x7fffffffd844*x** 2+
L0x7fffffffd846*x** 3+L0x7fffffffd848*x** 4+L0x7fffffffd84a*x** 5+
L0x7fffffffd84c*x** 6+L0x7fffffffd84e*x** 7+L0x7fffffffd850*x** 8+
L0x7fffffffd852*x** 9+L0x7fffffffd854*x**10+L0x7fffffffd856*x**11+
L0x7fffffffd858*x**12+L0x7fffffffd85a*x**13+L0x7fffffffd85c*x**14+
L0x7fffffffd85e*x**15)+
x** 64*(
L0x7fffffffd860*x** 0+L0x7fffffffd862*x** 1+L0x7fffffffd864*x** 2+
L0x7fffffffd866*x** 3+L0x7fffffffd868*x** 4+L0x7fffffffd86a*x** 5+
L0x7fffffffd86c*x** 6+L0x7fffffffd86e*x** 7+L0x7fffffffd870*x** 8+
L0x7fffffffd872*x** 9+L0x7fffffffd874*x**10+L0x7fffffffd876*x**11+
L0x7fffffffd878*x**12+L0x7fffffffd87a*x**13+L0x7fffffffd87c*x**14+
L0x7fffffffd87e*x**15)+
x** 80*(
L0x7fffffffd880*x** 0+L0x7fffffffd882*x** 1+L0x7fffffffd884*x** 2+
L0x7fffffffd886*x** 3+L0x7fffffffd888*x** 4+L0x7fffffffd88a*x** 5+
L0x7fffffffd88c*x** 6+L0x7fffffffd88e*x** 7+L0x7fffffffd890*x** 8+
L0x7fffffffd892*x** 9+L0x7fffffffd894*x**10+L0x7fffffffd896*x**11+
L0x7fffffffd898*x**12+L0x7fffffffd89a*x**13+L0x7fffffffd89c*x**14+
L0x7fffffffd89e*x**15)+
x** 96*(
L0x7fffffffd8a0*x** 0+L0x7fffffffd8a2*x** 1+L0x7fffffffd8a4*x** 2+
L0x7fffffffd8a6*x** 3+L0x7fffffffd8a8*x** 4+L0x7fffffffd8aa*x** 5+
L0x7fffffffd8ac*x** 6+L0x7fffffffd8ae*x** 7+L0x7fffffffd8b0*x** 8+
L0x7fffffffd8b2*x** 9+L0x7fffffffd8b4*x**10+L0x7fffffffd8b6*x**11+
L0x7fffffffd8b8*x**12+L0x7fffffffd8ba*x**13+L0x7fffffffd8bc*x**14+
L0x7fffffffd8be*x**15)+
x**112*(
L0x7fffffffd8c0*x** 0+L0x7fffffffd8c2*x** 1+L0x7fffffffd8c4*x** 2+
L0x7fffffffd8c6*x** 3+L0x7fffffffd8c8*x** 4+L0x7fffffffd8ca*x** 5+
L0x7fffffffd8cc*x** 6+L0x7fffffffd8ce*x** 7+L0x7fffffffd8d0*x** 8+
L0x7fffffffd8d2*x** 9+L0x7fffffffd8d4*x**10+L0x7fffffffd8d6*x**11+
L0x7fffffffd8d8*x**12+L0x7fffffffd8da*x**13+L0x7fffffffd8dc*x**14+
L0x7fffffffd8de*x**15)
&& true;


(**************** CUT  49 *****************)

cut
and [
eqmod (64*inp_poly140**2) (segment5) [10753, x**2 - 3223],
eqmod (64*inp_poly141**2) (segment5) [10753, x**2 - 7530],
eqmod (64*inp_poly142**2) (segment5) [10753, x**2 - 5491],
eqmod (64*inp_poly143**2) (segment5) [10753, x**2 - 5262],
eqmod (64*inp_poly144**2) (segment5) [10753, x**2 - 2295],
eqmod (64*inp_poly145**2) (segment5) [10753, x**2 - 8458],
eqmod (64*inp_poly146**2) (segment5) [10753, x**2 - 9872],
eqmod (64*inp_poly147**2) (segment5) [10753, x**2 - 881]
,
eqmod (64*inp_poly148**2) (segment5) [10753, x**2 - 6953],
eqmod (64*inp_poly149**2) (segment5) [10753, x**2 - 3800],
eqmod (64*inp_poly14a**2) (segment5) [10753, x**2 - 3942],
eqmod (64*inp_poly14b**2) (segment5) [10753, x**2 - 6811],
eqmod (64*inp_poly14c**2) (segment5) [10753, x**2 - 6042],
eqmod (64*inp_poly14d**2) (segment5) [10753, x**2 - 4711],
eqmod (64*inp_poly14e**2) (segment5) [10753, x**2 - 7281],
eqmod (64*inp_poly14f**2) (segment5) [10753, x**2 - 3472]
] prove with [ cuts [ 45 ] ],
and [
eqmod (64*inp_poly150**2) (segment5) [10753, x**2 - 9557],
eqmod (64*inp_poly151**2) (segment5) [10753, x**2 - 1196],
eqmod (64*inp_poly152**2) (segment5) [10753, x**2 - 3097],
eqmod (64*inp_poly153**2) (segment5) [10753, x**2 - 7656],
eqmod (64*inp_poly154**2) (segment5) [10753, x**2 - 3192],
eqmod (64*inp_poly155**2) (segment5) [10753, x**2 - 7561],
eqmod (64*inp_poly156**2) (segment5) [10753, x**2 - 4861],
eqmod (64*inp_poly157**2) (segment5) [10753, x**2 - 5892]
,
eqmod (64*inp_poly158**2) (segment5) [10753, x**2 - 2024],
eqmod (64*inp_poly159**2) (segment5) [10753, x**2 - 8729],
eqmod (64*inp_poly15a**2) (segment5) [10753, x**2 - 549],
eqmod (64*inp_poly15b**2) (segment5) [10753, x**2 - 10204],
eqmod (64*inp_poly15c**2) (segment5) [10753, x**2 - 4524],
eqmod (64*inp_poly15d**2) (segment5) [10753, x**2 - 6229],
eqmod (64*inp_poly15e**2) (segment5) [10753, x**2 - 4181],
eqmod (64*inp_poly15f**2) (segment5) [10753, x**2 - 6572]
] prove with [ cuts [ 46 ] ],
and [
eqmod (64*inp_poly160**2) (segment5) [10753, x**2 - 8410],
eqmod (64*inp_poly161**2) (segment5) [10753, x**2 - 2343],
eqmod (64*inp_poly162**2) (segment5) [10753, x**2 - 1293],
eqmod (64*inp_poly163**2) (segment5) [10753, x**2 - 9460],
eqmod (64*inp_poly164**2) (segment5) [10753, x**2 - 607],
eqmod (64*inp_poly165**2) (segment5) [10753, x**2 - 10146],
eqmod (64*inp_poly166**2) (segment5) [10753, x**2 - 6439],
eqmod (64*inp_poly167**2) (segment5) [10753, x**2 - 4314]
,
eqmod (64*inp_poly168**2) (segment5) [10753, x**2 - 8928],
eqmod (64*inp_poly169**2) (segment5) [10753, x**2 - 1825],
eqmod (64*inp_poly16a**2) (segment5) [10753, x**2 - 9392],
eqmod (64*inp_poly16b**2) (segment5) [10753, x**2 - 1361],
eqmod (64*inp_poly16c**2) (segment5) [10753, x**2 - 5590],
eqmod (64*inp_poly16d**2) (segment5) [10753, x**2 - 5163],
eqmod (64*inp_poly16e**2) (segment5) [10753, x**2 - 3992],
eqmod (64*inp_poly16f**2) (segment5) [10753, x**2 - 6761]
] prove with [ cuts [ 47 ] ],
and [
eqmod (64*inp_poly170**2) (segment5) [10753, x**2 - 5934],
eqmod (64*inp_poly171**2) (segment5) [10753, x**2 - 4819],
eqmod (64*inp_poly172**2) (segment5) [10753, x**2 - 8208],
eqmod (64*inp_poly173**2) (segment5) [10753, x**2 - 2545],
eqmod (64*inp_poly174**2) (segment5) [10753, x**2 - 1533],
eqmod (64*inp_poly175**2) (segment5) [10753, x**2 - 9220],
eqmod (64*inp_poly176**2) (segment5) [10753, x**2 - 283],
eqmod (64*inp_poly177**2) (segment5) [10753, x**2 - 10470]
,
eqmod (64*inp_poly178**2) (segment5) [10753, x**2 - 1538],
eqmod (64*inp_poly179**2) (segment5) [10753, x**2 - 9215],
eqmod (64*inp_poly17a**2) (segment5) [10753, x**2 - 10097],
eqmod (64*inp_poly17b**2) (segment5) [10753, x**2 - 656],
eqmod (64*inp_poly17c**2) (segment5) [10753, x**2 - 9813],
eqmod (64*inp_poly17d**2) (segment5) [10753, x**2 - 940],
eqmod (64*inp_poly17e**2) (segment5) [10753, x**2 - 4484],
eqmod (64*inp_poly17f**2) (segment5) [10753, x**2 - 6269]
] prove with [ cuts [ 48 ] ] && and [
( -5631)@16<=s L0x7fffffffd7e0,L0x7fffffffd7e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd7e2,L0x7fffffffd7e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd7e4,L0x7fffffffd7e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd7e6,L0x7fffffffd7e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd7e8,L0x7fffffffd7e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd7ea,L0x7fffffffd7ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd7ec,L0x7fffffffd7ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd7ee,L0x7fffffffd7ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd7f0,L0x7fffffffd7f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd7f2,L0x7fffffffd7f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd7f4,L0x7fffffffd7f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd7f6,L0x7fffffffd7f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd7f8,L0x7fffffffd7f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd7fa,L0x7fffffffd7fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd7fc,L0x7fffffffd7fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd7fe,L0x7fffffffd7fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd800,L0x7fffffffd800<s 5631@16,
( -5631)@16<=s L0x7fffffffd802,L0x7fffffffd802<s 5631@16,
( -5631)@16<=s L0x7fffffffd804,L0x7fffffffd804<s 5631@16,
( -5631)@16<=s L0x7fffffffd806,L0x7fffffffd806<s 5631@16,
( -5631)@16<=s L0x7fffffffd808,L0x7fffffffd808<s 5631@16,
( -5631)@16<=s L0x7fffffffd80a,L0x7fffffffd80a<s 5631@16,
( -5631)@16<=s L0x7fffffffd80c,L0x7fffffffd80c<s 5631@16,
( -5631)@16<=s L0x7fffffffd80e,L0x7fffffffd80e<s 5631@16,
( -5631)@16<=s L0x7fffffffd810,L0x7fffffffd810<s 5631@16,
( -5631)@16<=s L0x7fffffffd812,L0x7fffffffd812<s 5631@16,
( -5631)@16<=s L0x7fffffffd814,L0x7fffffffd814<s 5631@16,
( -5631)@16<=s L0x7fffffffd816,L0x7fffffffd816<s 5631@16,
( -5631)@16<=s L0x7fffffffd818,L0x7fffffffd818<s 5631@16,
( -5631)@16<=s L0x7fffffffd81a,L0x7fffffffd81a<s 5631@16,
( -5631)@16<=s L0x7fffffffd81c,L0x7fffffffd81c<s 5631@16,
( -5631)@16<=s L0x7fffffffd81e,L0x7fffffffd81e<s 5631@16,
(-11564)@16<=s L0x7fffffffd820,L0x7fffffffd820<s11564@16,
(-11564)@16<=s L0x7fffffffd822,L0x7fffffffd822<s11564@16,
(-11564)@16<=s L0x7fffffffd824,L0x7fffffffd824<s11564@16,
(-11564)@16<=s L0x7fffffffd826,L0x7fffffffd826<s11564@16,
(-11564)@16<=s L0x7fffffffd828,L0x7fffffffd828<s11564@16,
(-11564)@16<=s L0x7fffffffd82a,L0x7fffffffd82a<s11564@16,
(-11564)@16<=s L0x7fffffffd82c,L0x7fffffffd82c<s11564@16,
(-11564)@16<=s L0x7fffffffd82e,L0x7fffffffd82e<s11564@16,
(-11559)@16<=s L0x7fffffffd830,L0x7fffffffd830<s11559@16,
(-11559)@16<=s L0x7fffffffd832,L0x7fffffffd832<s11559@16,
(-11559)@16<=s L0x7fffffffd834,L0x7fffffffd834<s11559@16,
(-11559)@16<=s L0x7fffffffd836,L0x7fffffffd836<s11559@16,
(-11559)@16<=s L0x7fffffffd838,L0x7fffffffd838<s11559@16,
(-11559)@16<=s L0x7fffffffd83a,L0x7fffffffd83a<s11559@16,
(-11559)@16<=s L0x7fffffffd83c,L0x7fffffffd83c<s11559@16,
(-11559)@16<=s L0x7fffffffd83e,L0x7fffffffd83e<s11559@16,
(-11640)@16<=s L0x7fffffffd840,L0x7fffffffd840<s11640@16,
(-11640)@16<=s L0x7fffffffd842,L0x7fffffffd842<s11640@16,
(-11640)@16<=s L0x7fffffffd844,L0x7fffffffd844<s11640@16,
(-11640)@16<=s L0x7fffffffd846,L0x7fffffffd846<s11640@16,
(-11640)@16<=s L0x7fffffffd848,L0x7fffffffd848<s11640@16,
(-11640)@16<=s L0x7fffffffd84a,L0x7fffffffd84a<s11640@16,
(-11640)@16<=s L0x7fffffffd84c,L0x7fffffffd84c<s11640@16,
(-11640)@16<=s L0x7fffffffd84e,L0x7fffffffd84e<s11640@16,
(-11575)@16<=s L0x7fffffffd850,L0x7fffffffd850<s11575@16,
(-11575)@16<=s L0x7fffffffd852,L0x7fffffffd852<s11575@16,
(-11575)@16<=s L0x7fffffffd854,L0x7fffffffd854<s11575@16,
(-11575)@16<=s L0x7fffffffd856,L0x7fffffffd856<s11575@16,
(-11575)@16<=s L0x7fffffffd858,L0x7fffffffd858<s11575@16,
(-11575)@16<=s L0x7fffffffd85a,L0x7fffffffd85a<s11575@16,
(-11575)@16<=s L0x7fffffffd85c,L0x7fffffffd85c<s11575@16,
(-11575)@16<=s L0x7fffffffd85e,L0x7fffffffd85e<s11575@16
] prove with [ cuts [ 44 ] ];


(**************** CUT  50 *****************)

cut true && true;



(* vmovdqa 0x600(%rsi),%ymm4                       #! EA = L0x7fffffffd8e0; Value = 0xf08705c1f123fec1; PC = 0x55555555c72d *)
mov ymm4_0 L0x7fffffffd8e0;
mov ymm4_1 L0x7fffffffd8e2;
mov ymm4_2 L0x7fffffffd8e4;
mov ymm4_3 L0x7fffffffd8e6;
mov ymm4_4 L0x7fffffffd8e8;
mov ymm4_5 L0x7fffffffd8ea;
mov ymm4_6 L0x7fffffffd8ec;
mov ymm4_7 L0x7fffffffd8ee;
mov ymm4_8 L0x7fffffffd8f0;
mov ymm4_9 L0x7fffffffd8f2;
mov ymm4_a L0x7fffffffd8f4;
mov ymm4_b L0x7fffffffd8f6;
mov ymm4_c L0x7fffffffd8f8;
mov ymm4_d L0x7fffffffd8fa;
mov ymm4_e L0x7fffffffd8fc;
mov ymm4_f L0x7fffffffd8fe;
(* vmovdqa 0x620(%rsi),%ymm5                       #! EA = L0x7fffffffd900; Value = 0xf52ef242f3620d47; PC = 0x55555555c735 *)
mov ymm5_0 L0x7fffffffd900;
mov ymm5_1 L0x7fffffffd902;
mov ymm5_2 L0x7fffffffd904;
mov ymm5_3 L0x7fffffffd906;
mov ymm5_4 L0x7fffffffd908;
mov ymm5_5 L0x7fffffffd90a;
mov ymm5_6 L0x7fffffffd90c;
mov ymm5_7 L0x7fffffffd90e;
mov ymm5_8 L0x7fffffffd910;
mov ymm5_9 L0x7fffffffd912;
mov ymm5_a L0x7fffffffd914;
mov ymm5_b L0x7fffffffd916;
mov ymm5_c L0x7fffffffd918;
mov ymm5_d L0x7fffffffd91a;
mov ymm5_e L0x7fffffffd91c;
mov ymm5_f L0x7fffffffd91e;
(* vmovdqa 0x640(%rsi),%ymm6                       #! EA = L0x7fffffffd920; Value = 0xfec0066ff1d7fb9e; PC = 0x55555555c73d *)
mov ymm6_0 L0x7fffffffd920;
mov ymm6_1 L0x7fffffffd922;
mov ymm6_2 L0x7fffffffd924;
mov ymm6_3 L0x7fffffffd926;
mov ymm6_4 L0x7fffffffd928;
mov ymm6_5 L0x7fffffffd92a;
mov ymm6_6 L0x7fffffffd92c;
mov ymm6_7 L0x7fffffffd92e;
mov ymm6_8 L0x7fffffffd930;
mov ymm6_9 L0x7fffffffd932;
mov ymm6_a L0x7fffffffd934;
mov ymm6_b L0x7fffffffd936;
mov ymm6_c L0x7fffffffd938;
mov ymm6_d L0x7fffffffd93a;
mov ymm6_e L0x7fffffffd93c;
mov ymm6_f L0x7fffffffd93e;
(* vmovdqa 0x660(%rsi),%ymm7                       #! EA = L0x7fffffffd940; Value = 0xfe85f85afc591472; PC = 0x55555555c745 *)
mov ymm7_0 L0x7fffffffd940;
mov ymm7_1 L0x7fffffffd942;
mov ymm7_2 L0x7fffffffd944;
mov ymm7_3 L0x7fffffffd946;
mov ymm7_4 L0x7fffffffd948;
mov ymm7_5 L0x7fffffffd94a;
mov ymm7_6 L0x7fffffffd94c;
mov ymm7_7 L0x7fffffffd94e;
mov ymm7_8 L0x7fffffffd950;
mov ymm7_9 L0x7fffffffd952;
mov ymm7_a L0x7fffffffd954;
mov ymm7_b L0x7fffffffd956;
mov ymm7_c L0x7fffffffd958;
mov ymm7_d L0x7fffffffd95a;
mov ymm7_e L0x7fffffffd95c;
mov ymm7_f L0x7fffffffd95e;
(* vmovdqa 0x680(%rsi),%ymm8                       #! EA = L0x7fffffffd960; Value = 0x0538f6d7f7f011d9; PC = 0x55555555c74d *)
mov ymm8_0 L0x7fffffffd960;
mov ymm8_1 L0x7fffffffd962;
mov ymm8_2 L0x7fffffffd964;
mov ymm8_3 L0x7fffffffd966;
mov ymm8_4 L0x7fffffffd968;
mov ymm8_5 L0x7fffffffd96a;
mov ymm8_6 L0x7fffffffd96c;
mov ymm8_7 L0x7fffffffd96e;
mov ymm8_8 L0x7fffffffd970;
mov ymm8_9 L0x7fffffffd972;
mov ymm8_a L0x7fffffffd974;
mov ymm8_b L0x7fffffffd976;
mov ymm8_c L0x7fffffffd978;
mov ymm8_d L0x7fffffffd97a;
mov ymm8_e L0x7fffffffd97c;
mov ymm8_f L0x7fffffffd97e;
(* vmovdqa 0x6a0(%rsi),%ymm9                       #! EA = L0x7fffffffd980; Value = 0x0ccaebfbf42df66a; PC = 0x55555555c755 *)
mov ymm9_0 L0x7fffffffd980;
mov ymm9_1 L0x7fffffffd982;
mov ymm9_2 L0x7fffffffd984;
mov ymm9_3 L0x7fffffffd986;
mov ymm9_4 L0x7fffffffd988;
mov ymm9_5 L0x7fffffffd98a;
mov ymm9_6 L0x7fffffffd98c;
mov ymm9_7 L0x7fffffffd98e;
mov ymm9_8 L0x7fffffffd990;
mov ymm9_9 L0x7fffffffd992;
mov ymm9_a L0x7fffffffd994;
mov ymm9_b L0x7fffffffd996;
mov ymm9_c L0x7fffffffd998;
mov ymm9_d L0x7fffffffd99a;
mov ymm9_e L0x7fffffffd99c;
mov ymm9_f L0x7fffffffd99e;
(* vmovdqa 0x6c0(%rsi),%ymm10                      #! EA = L0x7fffffffd9a0; Value = 0xf26c13e2120e0677; PC = 0x55555555c75d *)
mov ymm10_0 L0x7fffffffd9a0;
mov ymm10_1 L0x7fffffffd9a2;
mov ymm10_2 L0x7fffffffd9a4;
mov ymm10_3 L0x7fffffffd9a6;
mov ymm10_4 L0x7fffffffd9a8;
mov ymm10_5 L0x7fffffffd9aa;
mov ymm10_6 L0x7fffffffd9ac;
mov ymm10_7 L0x7fffffffd9ae;
mov ymm10_8 L0x7fffffffd9b0;
mov ymm10_9 L0x7fffffffd9b2;
mov ymm10_a L0x7fffffffd9b4;
mov ymm10_b L0x7fffffffd9b6;
mov ymm10_c L0x7fffffffd9b8;
mov ymm10_d L0x7fffffffd9ba;
mov ymm10_e L0x7fffffffd9bc;
mov ymm10_f L0x7fffffffd9be;
(* vmovdqa 0x6e0(%rsi),%ymm11                      #! EA = L0x7fffffffd9c0; Value = 0x0446eb8a05dff0a2; PC = 0x55555555c765 *)
mov ymm11_0 L0x7fffffffd9c0;
mov ymm11_1 L0x7fffffffd9c2;
mov ymm11_2 L0x7fffffffd9c4;
mov ymm11_3 L0x7fffffffd9c6;
mov ymm11_4 L0x7fffffffd9c8;
mov ymm11_5 L0x7fffffffd9ca;
mov ymm11_6 L0x7fffffffd9cc;
mov ymm11_7 L0x7fffffffd9ce;
mov ymm11_8 L0x7fffffffd9d0;
mov ymm11_9 L0x7fffffffd9d2;
mov ymm11_a L0x7fffffffd9d4;
mov ymm11_b L0x7fffffffd9d6;
mov ymm11_c L0x7fffffffd9d8;
mov ymm11_d L0x7fffffffd9da;
mov ymm11_e L0x7fffffffd9dc;
mov ymm11_f L0x7fffffffd9de;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555c76d *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555c771 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555c775 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555c779 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555c77d *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555c782 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555c787 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555c78c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x270(%rdx),%ymm1                #! EA = L0x555555561390; Value = 0xf943db813c9772ba; PC = 0x55555555c791 *)
mov ymm1_0 L0x555555561390;
mov ymm1_1 L0x555555561392;
mov ymm1_2 L0x555555561394;
mov ymm1_3 L0x555555561396;
mov ymm1_4 L0x555555561398;
mov ymm1_5 L0x55555556139a;
mov ymm1_6 L0x55555556139c;
mov ymm1_7 L0x55555556139e;
mov ymm1_8 L0x555555561390;
mov ymm1_9 L0x555555561392;
mov ymm1_a L0x555555561394;
mov ymm1_b L0x555555561396;
mov ymm1_c L0x555555561398;
mov ymm1_d L0x55555556139a;
mov ymm1_e L0x55555556139c;
mov ymm1_f L0x55555556139e;
(* vbroadcasti128 0x470(%rdx),%ymm2                #! EA = L0x555555561590; Value = 0xf74305810297f6ba; PC = 0x55555555c79a *)
mov ymm2_0 L0x555555561590;
mov ymm2_1 L0x555555561592;
mov ymm2_2 L0x555555561594;
mov ymm2_3 L0x555555561596;
mov ymm2_4 L0x555555561598;
mov ymm2_5 L0x55555556159a;
mov ymm2_6 L0x55555556159c;
mov ymm2_7 L0x55555556159e;
mov ymm2_8 L0x555555561590;
mov ymm2_9 L0x555555561592;
mov ymm2_a L0x555555561594;
mov ymm2_b L0x555555561596;
mov ymm2_c L0x555555561598;
mov ymm2_d L0x55555556159a;
mov ymm2_e L0x55555556159c;
mov ymm2_f L0x55555556159e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c7a3 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c7a8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555c7ad *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c7b1 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c7b5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555c7b9 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x260(%rdx),%ymm1                #! EA = L0x555555561380; Value = 0x66b4f18de13837c8; PC = 0x55555555c7bd *)
mov ymm1_0 L0x555555561380;
mov ymm1_1 L0x555555561382;
mov ymm1_2 L0x555555561384;
mov ymm1_3 L0x555555561386;
mov ymm1_4 L0x555555561388;
mov ymm1_5 L0x55555556138a;
mov ymm1_6 L0x55555556138c;
mov ymm1_7 L0x55555556138e;
mov ymm1_8 L0x555555561380;
mov ymm1_9 L0x555555561382;
mov ymm1_a L0x555555561384;
mov ymm1_b L0x555555561386;
mov ymm1_c L0x555555561388;
mov ymm1_d L0x55555556138a;
mov ymm1_e L0x55555556138c;
mov ymm1_f L0x55555556138e;
(* vbroadcasti128 0x460(%rdx),%ymm2                #! EA = L0x555555561580; Value = 0xeeb4138d113807c8; PC = 0x55555555c7c6 *)
mov ymm2_0 L0x555555561580;
mov ymm2_1 L0x555555561582;
mov ymm2_2 L0x555555561584;
mov ymm2_3 L0x555555561586;
mov ymm2_4 L0x555555561588;
mov ymm2_5 L0x55555556158a;
mov ymm2_6 L0x55555556158c;
mov ymm2_7 L0x55555556158e;
mov ymm2_8 L0x555555561580;
mov ymm2_9 L0x555555561582;
mov ymm2_a L0x555555561584;
mov ymm2_b L0x555555561586;
mov ymm2_c L0x555555561588;
mov ymm2_d L0x55555556158a;
mov ymm2_e L0x55555556158c;
mov ymm2_f L0x55555556158e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c7cf *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c7d4 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555c7d9 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c7dd *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c7e1 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555c7e5 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x250(%rdx),%ymm1                #! EA = L0x555555561370; Value = 0x8c46b402b6451c79; PC = 0x55555555c7e9 *)
mov ymm1_0 L0x555555561370;
mov ymm1_1 L0x555555561372;
mov ymm1_2 L0x555555561374;
mov ymm1_3 L0x555555561376;
mov ymm1_4 L0x555555561378;
mov ymm1_5 L0x55555556137a;
mov ymm1_6 L0x55555556137c;
mov ymm1_7 L0x55555556137e;
mov ymm1_8 L0x555555561370;
mov ymm1_9 L0x555555561372;
mov ymm1_a L0x555555561374;
mov ymm1_b L0x555555561376;
mov ymm1_c L0x555555561378;
mov ymm1_d L0x55555556137a;
mov ymm1_e L0x55555556137c;
mov ymm1_f L0x55555556137e;
(* vbroadcasti128 0x450(%rdx),%ymm2                #! EA = L0x555555561570; Value = 0x084608020845f679; PC = 0x55555555c7f2 *)
mov ymm2_0 L0x555555561570;
mov ymm2_1 L0x555555561572;
mov ymm2_2 L0x555555561574;
mov ymm2_3 L0x555555561576;
mov ymm2_4 L0x555555561578;
mov ymm2_5 L0x55555556157a;
mov ymm2_6 L0x55555556157c;
mov ymm2_7 L0x55555556157e;
mov ymm2_8 L0x555555561570;
mov ymm2_9 L0x555555561572;
mov ymm2_a L0x555555561574;
mov ymm2_b L0x555555561576;
mov ymm2_c L0x555555561578;
mov ymm2_d L0x55555556157a;
mov ymm2_e L0x55555556157c;
mov ymm2_f L0x55555556157e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c7fb *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c800 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555c805 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c809 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c80d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555c811 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x240(%rdx),%ymm1                #! EA = L0x555555561360; Value = 0x14f9c95d7d46b345; PC = 0x55555555c816 *)
mov ymm1_0 L0x555555561360;
mov ymm1_1 L0x555555561362;
mov ymm1_2 L0x555555561364;
mov ymm1_3 L0x555555561366;
mov ymm1_4 L0x555555561368;
mov ymm1_5 L0x55555556136a;
mov ymm1_6 L0x55555556136c;
mov ymm1_7 L0x55555556136e;
mov ymm1_8 L0x555555561360;
mov ymm1_9 L0x555555561362;
mov ymm1_a L0x555555561364;
mov ymm1_b L0x555555561366;
mov ymm1_c L0x555555561368;
mov ymm1_d L0x55555556136a;
mov ymm1_e L0x55555556136c;
mov ymm1_f L0x55555556136e;
(* vbroadcasti128 0x440(%rdx),%ymm2                #! EA = L0x555555561560; Value = 0xeef90b5df9460545; PC = 0x55555555c81f *)
mov ymm2_0 L0x555555561560;
mov ymm2_1 L0x555555561562;
mov ymm2_2 L0x555555561564;
mov ymm2_3 L0x555555561566;
mov ymm2_4 L0x555555561568;
mov ymm2_5 L0x55555556156a;
mov ymm2_6 L0x55555556156c;
mov ymm2_7 L0x55555556156e;
mov ymm2_8 L0x555555561560;
mov ymm2_9 L0x555555561562;
mov ymm2_a L0x555555561564;
mov ymm2_b L0x555555561566;
mov ymm2_c L0x555555561568;
mov ymm2_d L0x55555556156a;
mov ymm2_e L0x55555556156c;
mov ymm2_f L0x55555556156e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c828 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c82d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555c832 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c836 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555c83a *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555c83e *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555c843 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555c848 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555c84d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555c851 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555c855 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555c85a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555c85f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555c863 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555c867 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555c86c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555c871 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555c876 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555c87b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555c880 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555c885 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555c88a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555c88f *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555c893 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555c897 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555c89b *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555c89f *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555c8a4 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555c8a9 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555c8ae *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x1b8(%rdx),%ymm1                  #! EA = L0x5555555612d8; Value = 0xd3dc052472b4588a; PC = 0x55555555c8b3 *)
mov ymm1_0 L0x5555555612d8;
mov ymm1_1 L0x5555555612da;
mov ymm1_2 L0x5555555612dc;
mov ymm1_3 L0x5555555612de;
mov ymm1_4 L0x5555555612d8;
mov ymm1_5 L0x5555555612da;
mov ymm1_6 L0x5555555612dc;
mov ymm1_7 L0x5555555612de;
mov ymm1_8 L0x5555555612d8;
mov ymm1_9 L0x5555555612da;
mov ymm1_a L0x5555555612dc;
mov ymm1_b L0x5555555612de;
mov ymm1_c L0x5555555612d8;
mov ymm1_d L0x5555555612da;
mov ymm1_e L0x5555555612dc;
mov ymm1_f L0x5555555612de;
(* vpbroadcastq 0x3b8(%rdx),%ymm2                  #! EA = L0x5555555614d8; Value = 0xebdced24fab4fc8a; PC = 0x55555555c8bc *)
mov ymm2_0 L0x5555555614d8;
mov ymm2_1 L0x5555555614da;
mov ymm2_2 L0x5555555614dc;
mov ymm2_3 L0x5555555614de;
mov ymm2_4 L0x5555555614d8;
mov ymm2_5 L0x5555555614da;
mov ymm2_6 L0x5555555614dc;
mov ymm2_7 L0x5555555614de;
mov ymm2_8 L0x5555555614d8;
mov ymm2_9 L0x5555555614da;
mov ymm2_a L0x5555555614dc;
mov ymm2_b L0x5555555614de;
mov ymm2_c L0x5555555614d8;
mov ymm2_d L0x5555555614da;
mov ymm2_e L0x5555555614dc;
mov ymm2_f L0x5555555614de;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c8c5 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c8ca *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555c8cf *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555c8d3 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c8d7 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555c8db *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x1b0(%rdx),%ymm1                  #! EA = L0x5555555612d0; Value = 0x02cf42c8bc387a3a; PC = 0x55555555c8df *)
mov ymm1_0 L0x5555555612d0;
mov ymm1_1 L0x5555555612d2;
mov ymm1_2 L0x5555555612d4;
mov ymm1_3 L0x5555555612d6;
mov ymm1_4 L0x5555555612d0;
mov ymm1_5 L0x5555555612d2;
mov ymm1_6 L0x5555555612d4;
mov ymm1_7 L0x5555555612d6;
mov ymm1_8 L0x5555555612d0;
mov ymm1_9 L0x5555555612d2;
mov ymm1_a L0x5555555612d4;
mov ymm1_b L0x5555555612d6;
mov ymm1_c L0x5555555612d0;
mov ymm1_d L0x5555555612d2;
mov ymm1_e L0x5555555612d4;
mov ymm1_f L0x5555555612d6;
(* vpbroadcastq 0x3b0(%rdx),%ymm2                  #! EA = L0x5555555614d0; Value = 0xf8cf12c8ec38fe3a; PC = 0x55555555c8e8 *)
mov ymm2_0 L0x5555555614d0;
mov ymm2_1 L0x5555555614d2;
mov ymm2_2 L0x5555555614d4;
mov ymm2_3 L0x5555555614d6;
mov ymm2_4 L0x5555555614d0;
mov ymm2_5 L0x5555555614d2;
mov ymm2_6 L0x5555555614d4;
mov ymm2_7 L0x5555555614d6;
mov ymm2_8 L0x5555555614d0;
mov ymm2_9 L0x5555555614d2;
mov ymm2_a L0x5555555614d4;
mov ymm2_b L0x5555555614d6;
mov ymm2_c L0x5555555614d0;
mov ymm2_d L0x5555555614d2;
mov ymm2_e L0x5555555614d4;
mov ymm2_f L0x5555555614d6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c8f1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c8f6 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555c8fb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555c8ff *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c903 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555c907 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x1a8(%rdx),%ymm1                  #! EA = L0x5555555612c8; Value = 0xa9e4078c768ff9a5; PC = 0x55555555c90b *)
mov ymm1_0 L0x5555555612c8;
mov ymm1_1 L0x5555555612ca;
mov ymm1_2 L0x5555555612cc;
mov ymm1_3 L0x5555555612ce;
mov ymm1_4 L0x5555555612c8;
mov ymm1_5 L0x5555555612ca;
mov ymm1_6 L0x5555555612cc;
mov ymm1_7 L0x5555555612ce;
mov ymm1_8 L0x5555555612c8;
mov ymm1_9 L0x5555555612ca;
mov ymm1_a L0x5555555612cc;
mov ymm1_b L0x5555555612ce;
mov ymm1_c L0x5555555612c8;
mov ymm1_d L0x5555555612ca;
mov ymm1_e L0x5555555612cc;
mov ymm1_f L0x5555555612ce;
(* vpbroadcastq 0x3a8(%rdx),%ymm2                  #! EA = L0x5555555614c8; Value = 0x11e4ff8cec8f0ba5; PC = 0x55555555c914 *)
mov ymm2_0 L0x5555555614c8;
mov ymm2_1 L0x5555555614ca;
mov ymm2_2 L0x5555555614cc;
mov ymm2_3 L0x5555555614ce;
mov ymm2_4 L0x5555555614c8;
mov ymm2_5 L0x5555555614ca;
mov ymm2_6 L0x5555555614cc;
mov ymm2_7 L0x5555555614ce;
mov ymm2_8 L0x5555555614c8;
mov ymm2_9 L0x5555555614ca;
mov ymm2_a L0x5555555614cc;
mov ymm2_b L0x5555555614ce;
mov ymm2_c L0x5555555614c8;
mov ymm2_d L0x5555555614ca;
mov ymm2_e L0x5555555614cc;
mov ymm2_f L0x5555555614ce;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c91d *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c922 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555c927 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555c92b *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c92f *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555c933 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x1a0(%rdx),%ymm1                  #! EA = L0x5555555612c0; Value = 0x0ffa1e732e4ef81f; PC = 0x55555555c938 *)
mov ymm1_0 L0x5555555612c0;
mov ymm1_1 L0x5555555612c2;
mov ymm1_2 L0x5555555612c4;
mov ymm1_3 L0x5555555612c6;
mov ymm1_4 L0x5555555612c0;
mov ymm1_5 L0x5555555612c2;
mov ymm1_6 L0x5555555612c4;
mov ymm1_7 L0x5555555612c6;
mov ymm1_8 L0x5555555612c0;
mov ymm1_9 L0x5555555612c2;
mov ymm1_a L0x5555555612c4;
mov ymm1_b L0x5555555612c6;
mov ymm1_c L0x5555555612c0;
mov ymm1_d L0x5555555612c2;
mov ymm1_e L0x5555555612c4;
mov ymm1_f L0x5555555612c6;
(* vpbroadcastq 0x3a0(%rdx),%ymm2                  #! EA = L0x5555555614c0; Value = 0x13fafc73fa4e0e1f; PC = 0x55555555c941 *)
mov ymm2_0 L0x5555555614c0;
mov ymm2_1 L0x5555555614c2;
mov ymm2_2 L0x5555555614c4;
mov ymm2_3 L0x5555555614c6;
mov ymm2_4 L0x5555555614c0;
mov ymm2_5 L0x5555555614c2;
mov ymm2_6 L0x5555555614c4;
mov ymm2_7 L0x5555555614c6;
mov ymm2_8 L0x5555555614c0;
mov ymm2_9 L0x5555555614c2;
mov ymm2_a L0x5555555614c4;
mov ymm2_b L0x5555555614c6;
mov ymm2_c L0x5555555614c0;
mov ymm2_d L0x5555555614c2;
mov ymm2_e L0x5555555614c4;
mov ymm2_f L0x5555555614c6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555c94a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555c94f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555c954 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555c958 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c95c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555c960 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555c965 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555c96d *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555c975 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555c979 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c97d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555c981 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555c985 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555c989 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c98d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555c991 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555c995 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555c999 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c99d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555c9a1 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555c9a5 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555c9a9 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555c9ad *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555c9b1 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555c9b5 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555c9ba *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555c9bf *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555c9c3 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555c9c7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555c9cc *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555c9d1 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555c9d5 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555c9d9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555c9de *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555c9e3 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555c9e8 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555c9ed *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555c9f2 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555c9f7 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555c9fc *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555ca01 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555ca05 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555ca09 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555ca0d *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555ca11 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555ca16 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555ca1b *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555ca20 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x15c(%rdx),%ymm1                  #! EA = L0x55555556127c; Value = 0x1686ebfaa93fc208; PC = 0x55555555ca25 *)
mov ymm1_0 L0x55555556127c;
mov ymm1_1 L0x55555556127e;
mov ymm1_2 L0x55555556127c;
mov ymm1_3 L0x55555556127e;
mov ymm1_4 L0x55555556127c;
mov ymm1_5 L0x55555556127e;
mov ymm1_6 L0x55555556127c;
mov ymm1_7 L0x55555556127e;
mov ymm1_8 L0x55555556127c;
mov ymm1_9 L0x55555556127e;
mov ymm1_a L0x55555556127c;
mov ymm1_b L0x55555556127e;
mov ymm1_c L0x55555556127c;
mov ymm1_d L0x55555556127e;
mov ymm1_e L0x55555556127c;
mov ymm1_f L0x55555556127e;
(* vpbroadcastd 0x35c(%rdx),%ymm2                  #! EA = L0x55555556147c; Value = 0x1286effaff3f1208; PC = 0x55555555ca2e *)
mov ymm2_0 L0x55555556147c;
mov ymm2_1 L0x55555556147e;
mov ymm2_2 L0x55555556147c;
mov ymm2_3 L0x55555556147e;
mov ymm2_4 L0x55555556147c;
mov ymm2_5 L0x55555556147e;
mov ymm2_6 L0x55555556147c;
mov ymm2_7 L0x55555556147e;
mov ymm2_8 L0x55555556147c;
mov ymm2_9 L0x55555556147e;
mov ymm2_a L0x55555556147c;
mov ymm2_b L0x55555556147e;
mov ymm2_c L0x55555556147c;
mov ymm2_d L0x55555556147e;
mov ymm2_e L0x55555556147c;
mov ymm2_f L0x55555556147e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ca37 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ca3c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555ca41 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555ca45 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555ca49 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555ca4d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x158(%rdx),%ymm1                  #! EA = L0x555555561278; Value = 0xa93fc2084b7ec7fb; PC = 0x55555555ca51 *)
mov ymm1_0 L0x555555561278;
mov ymm1_1 L0x55555556127a;
mov ymm1_2 L0x555555561278;
mov ymm1_3 L0x55555556127a;
mov ymm1_4 L0x555555561278;
mov ymm1_5 L0x55555556127a;
mov ymm1_6 L0x555555561278;
mov ymm1_7 L0x55555556127a;
mov ymm1_8 L0x555555561278;
mov ymm1_9 L0x55555556127a;
mov ymm1_a L0x555555561278;
mov ymm1_b L0x55555556127a;
mov ymm1_c L0x555555561278;
mov ymm1_d L0x55555556127a;
mov ymm1_e L0x555555561278;
mov ymm1_f L0x55555556127a;
(* vpbroadcastd 0x358(%rdx),%ymm2                  #! EA = L0x555555561478; Value = 0xff3f1208f77ef5fb; PC = 0x55555555ca5a *)
mov ymm2_0 L0x555555561478;
mov ymm2_1 L0x55555556147a;
mov ymm2_2 L0x555555561478;
mov ymm2_3 L0x55555556147a;
mov ymm2_4 L0x555555561478;
mov ymm2_5 L0x55555556147a;
mov ymm2_6 L0x555555561478;
mov ymm2_7 L0x55555556147a;
mov ymm2_8 L0x555555561478;
mov ymm2_9 L0x55555556147a;
mov ymm2_a L0x555555561478;
mov ymm2_b L0x55555556147a;
mov ymm2_c L0x555555561478;
mov ymm2_d L0x55555556147a;
mov ymm2_e L0x555555561478;
mov ymm2_f L0x55555556147a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ca63 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ca68 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555ca6d *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555ca71 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555ca75 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555ca79 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x154(%rdx),%ymm1                  #! EA = L0x555555561274; Value = 0x4b7ec7fba7a15ecd; PC = 0x55555555ca7d *)
mov ymm1_0 L0x555555561274;
mov ymm1_1 L0x555555561276;
mov ymm1_2 L0x555555561274;
mov ymm1_3 L0x555555561276;
mov ymm1_4 L0x555555561274;
mov ymm1_5 L0x555555561276;
mov ymm1_6 L0x555555561274;
mov ymm1_7 L0x555555561276;
mov ymm1_8 L0x555555561274;
mov ymm1_9 L0x555555561276;
mov ymm1_a L0x555555561274;
mov ymm1_b L0x555555561276;
mov ymm1_c L0x555555561274;
mov ymm1_d L0x555555561276;
mov ymm1_e L0x555555561274;
mov ymm1_f L0x555555561276;
(* vpbroadcastd 0x354(%rdx),%ymm2                  #! EA = L0x555555561474; Value = 0xf77ef5fb11a100cd; PC = 0x55555555ca86 *)
mov ymm2_0 L0x555555561474;
mov ymm2_1 L0x555555561476;
mov ymm2_2 L0x555555561474;
mov ymm2_3 L0x555555561476;
mov ymm2_4 L0x555555561474;
mov ymm2_5 L0x555555561476;
mov ymm2_6 L0x555555561474;
mov ymm2_7 L0x555555561476;
mov ymm2_8 L0x555555561474;
mov ymm2_9 L0x555555561476;
mov ymm2_a L0x555555561474;
mov ymm2_b L0x555555561476;
mov ymm2_c L0x555555561474;
mov ymm2_d L0x555555561476;
mov ymm2_e L0x555555561474;
mov ymm2_f L0x555555561476;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ca8f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ca94 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555ca99 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555ca9d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555caa1 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555caa5 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x150(%rdx),%ymm1                  #! EA = L0x555555561270; Value = 0xa7a15ecddf07cfa6; PC = 0x55555555caaa *)
mov ymm1_0 L0x555555561270;
mov ymm1_1 L0x555555561272;
mov ymm1_2 L0x555555561270;
mov ymm1_3 L0x555555561272;
mov ymm1_4 L0x555555561270;
mov ymm1_5 L0x555555561272;
mov ymm1_6 L0x555555561270;
mov ymm1_7 L0x555555561272;
mov ymm1_8 L0x555555561270;
mov ymm1_9 L0x555555561272;
mov ymm1_a L0x555555561270;
mov ymm1_b L0x555555561272;
mov ymm1_c L0x555555561270;
mov ymm1_d L0x555555561272;
mov ymm1_e L0x555555561270;
mov ymm1_f L0x555555561272;
(* vpbroadcastd 0x350(%rdx),%ymm2                  #! EA = L0x555555561470; Value = 0x11a100cd05070ba6; PC = 0x55555555cab3 *)
mov ymm2_0 L0x555555561470;
mov ymm2_1 L0x555555561472;
mov ymm2_2 L0x555555561470;
mov ymm2_3 L0x555555561472;
mov ymm2_4 L0x555555561470;
mov ymm2_5 L0x555555561472;
mov ymm2_6 L0x555555561470;
mov ymm2_7 L0x555555561472;
mov ymm2_8 L0x555555561470;
mov ymm2_9 L0x555555561472;
mov ymm2_a L0x555555561470;
mov ymm2_b L0x555555561472;
mov ymm2_c L0x555555561470;
mov ymm2_d L0x555555561472;
mov ymm2_e L0x555555561470;
mov ymm2_f L0x555555561472;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cabc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555cac1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555cac6 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555caca *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555cace *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555cad2 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555cad7 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555cadc *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555cae1 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555cae5 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555cae9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555caee *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555caf3 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555caf7 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555cafb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555cb00 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555cb05 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555cb0a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555cb0f *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555cb14 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555cb19 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555cb1e *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x45d5(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555cb23 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555cb2b *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555cb31 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555cb36 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555cb3c *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555cb41 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555cb47 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555cb4c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555cb52 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555cb57 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555cb5d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555cb62 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555cb68 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555cb6d *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555cb73 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555cb78 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555cb7e *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 6 *****************)




(**************** CUT  51 *****************)

cut and [
eqmod (8*inp_poly180**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1000],
eqmod (8*inp_poly181**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9753],
eqmod (8*inp_poly182**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5754],
eqmod (8*inp_poly183**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4999],
eqmod (8*inp_poly184**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9163],
eqmod (8*inp_poly185**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1590],
eqmod (8*inp_poly186**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8271],
eqmod (8*inp_poly187**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2482]
,
eqmod (8*inp_poly188**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 10715],
eqmod (8*inp_poly189**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 38],
eqmod (8*inp_poly18a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9287],
eqmod (8*inp_poly18b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1466],
eqmod (8*inp_poly18c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9308],
eqmod (8*inp_poly18d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1445],
eqmod (8*inp_poly18e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2546],
eqmod (8*inp_poly18f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8207]
,
eqmod (8*inp_poly190**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3429],
eqmod (8*inp_poly191**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7324],
eqmod (8*inp_poly192**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5515],
eqmod (8*inp_poly193**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5238],
eqmod (8*inp_poly194**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3903],
eqmod (8*inp_poly195**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6850],
eqmod (8*inp_poly196**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6823],
eqmod (8*inp_poly197**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3930]
,
eqmod (8*inp_poly198**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9913],
eqmod (8*inp_poly199**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 840],
eqmod (8*inp_poly19a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7210],
eqmod (8*inp_poly19b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3543],
eqmod (8*inp_poly19c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9938],
eqmod (8*inp_poly19d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 815],
eqmod (8*inp_poly19e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2515],
eqmod (8*inp_poly19f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8238]
,
eqmod (8*inp_poly1a0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3310],
eqmod (8*inp_poly1a1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7443],
eqmod (8*inp_poly1a2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2056],
eqmod (8*inp_poly1a3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8697],
eqmod (8*inp_poly1a4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8716],
eqmod (8*inp_poly1a5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2037],
eqmod (8*inp_poly1a6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4043],
eqmod (8*inp_poly1a7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6710]
,
eqmod (8*inp_poly1a8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2670],
eqmod (8*inp_poly1a9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8083],
eqmod (8*inp_poly1aa**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3965],
eqmod (8*inp_poly1ab**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6788],
eqmod (8*inp_poly1ac**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7583],
eqmod (8*inp_poly1ad**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3170],
eqmod (8*inp_poly1ae**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3911],
eqmod (8*inp_poly1af**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6842]
,
eqmod (8*inp_poly1b0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2425],
eqmod (8*inp_poly1b1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8328],
eqmod (8*inp_poly1b2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6964],
eqmod (8*inp_poly1b3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3789],
eqmod (8*inp_poly1b4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4209],
eqmod (8*inp_poly1b5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6544],
eqmod (8*inp_poly1b6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9573],
eqmod (8*inp_poly1b7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1180]
,
eqmod (8*inp_poly1b8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5822],
eqmod (8*inp_poly1b9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4931],
eqmod (8*inp_poly1ba**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5585],
eqmod (8*inp_poly1bb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5168],
eqmod (8*inp_poly1bc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8593],
eqmod (8*inp_poly1bd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2160],
eqmod (8*inp_poly1be**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7787],
eqmod (8*inp_poly1bf**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2966]
] prove with [ cuts [ 6 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-14068)@16<=s ymm3_4,ymm3_4<s14068@16,(-14068)@16<=s ymm3_5,ymm3_5<s14068@16,
(-12477)@16<=s ymm3_6,ymm3_6<s12477@16,(-12477)@16<=s ymm3_7,ymm3_7<s12477@16,
( -5409)@16<=s ymm3_8,ymm3_8<s 5409@16,( -5409)@16<=s ymm3_9,ymm3_9<s 5409@16,
( -5395)@16<=s ymm3_a,ymm3_a<s 5395@16,( -5395)@16<=s ymm3_b,ymm3_b<s 5395@16,
( -5412)@16<=s ymm3_c,ymm3_c<s 5412@16,( -5412)@16<=s ymm3_d,ymm3_d<s 5412@16,
( -5410)@16<=s ymm3_e,ymm3_e<s 5410@16,( -5410)@16<=s ymm3_f,ymm3_f<s 5410@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-11489)@16<=s ymm5_4,ymm5_4<s11489@16,(-11489)@16<=s ymm5_5,ymm5_5<s11489@16,
(-11112)@16<=s ymm5_6,ymm5_6<s11112@16,(-11112)@16<=s ymm5_7,ymm5_7<s11112@16,
( -6127)@16<=s ymm5_8,ymm5_8<s 6127@16,( -6127)@16<=s ymm5_9,ymm5_9<s 6127@16,
( -6104)@16<=s ymm5_a,ymm5_a<s 6104@16,( -6104)@16<=s ymm5_b,ymm5_b<s 6104@16,
( -6150)@16<=s ymm5_c,ymm5_c<s 6150@16,( -6150)@16<=s ymm5_d,ymm5_d<s 6150@16,
( -6127)@16<=s ymm5_e,ymm5_e<s 6127@16,( -6127)@16<=s ymm5_f,ymm5_f<s 6127@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12880)@16<=s ymm4_4,ymm4_4<s12880@16,(-12880)@16<=s ymm4_5,ymm4_5<s12880@16,
(-11828)@16<=s ymm4_6,ymm4_6<s11828@16,(-11828)@16<=s ymm4_7,ymm4_7<s11828@16,
( -5746)@16<=s ymm4_8,ymm4_8<s 5746@16,( -5746)@16<=s ymm4_9,ymm4_9<s 5746@16,
( -5717)@16<=s ymm4_a,ymm4_a<s 5717@16,( -5717)@16<=s ymm4_b,ymm4_b<s 5717@16,
( -5785)@16<=s ymm4_c,ymm4_c<s 5785@16,( -5785)@16<=s ymm4_d,ymm4_d<s 5785@16,
( -5756)@16<=s ymm4_e,ymm4_e<s 5756@16,( -5756)@16<=s ymm4_f,ymm4_f<s 5756@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-12622)@16<=s ymm7_4,ymm7_4<s12622@16,(-12622)@16<=s ymm7_5,ymm7_5<s12622@16,
(-11715)@16<=s ymm7_6,ymm7_6<s11715@16,(-11715)@16<=s ymm7_7,ymm7_7<s11715@16,
( -5797)@16<=s ymm7_8,ymm7_8<s 5797@16,( -5797)@16<=s ymm7_9,ymm7_9<s 5797@16,
( -5793)@16<=s ymm7_a,ymm7_a<s 5793@16,( -5793)@16<=s ymm7_b,ymm7_b<s 5793@16,
( -5834)@16<=s ymm7_c,ymm7_c<s 5834@16,( -5834)@16<=s ymm7_d,ymm7_d<s 5834@16,
( -5801)@16<=s ymm7_e,ymm7_e<s 5801@16,( -5801)@16<=s ymm7_f,ymm7_f<s 5801@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-12328)@16<=s ymm6_4,ymm6_4<s12328@16,(-12328)@16<=s ymm6_5,ymm6_5<s12328@16,
(-11512)@16<=s ymm6_6,ymm6_6<s11512@16,(-11512)@16<=s ymm6_7,ymm6_7<s11512@16,
( -6130)@16<=s ymm6_8,ymm6_8<s 6130@16,( -6130)@16<=s ymm6_9,ymm6_9<s 6130@16,
( -6099)@16<=s ymm6_a,ymm6_a<s 6099@16,( -6099)@16<=s ymm6_b,ymm6_b<s 6099@16,
( -6194)@16<=s ymm6_c,ymm6_c<s 6194@16,( -6194)@16<=s ymm6_d,ymm6_d<s 6194@16,
( -6161)@16<=s ymm6_e,ymm6_e<s 6161@16,( -6161)@16<=s ymm6_f,ymm6_f<s 6161@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-13452)@16<=s ymm9_4,ymm9_4<s13452@16,(-13452)@16<=s ymm9_5,ymm9_5<s13452@16,
(-12088)@16<=s ymm9_6,ymm9_6<s12088@16,(-12088)@16<=s ymm9_7,ymm9_7<s12088@16,
( -5405)@16<=s ymm9_8,ymm9_8<s 5405@16,( -5405)@16<=s ymm9_9,ymm9_9<s 5405@16,
( -5405)@16<=s ymm9_a,ymm9_a<s 5405@16,( -5405)@16<=s ymm9_b,ymm9_b<s 5405@16,
( -5412)@16<=s ymm9_c,ymm9_c<s 5412@16,( -5412)@16<=s ymm9_d,ymm9_d<s 5412@16,
( -5412)@16<=s ymm9_e,ymm9_e<s 5412@16,( -5412)@16<=s ymm9_f,ymm9_f<s 5412@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-12712)@16<=s ymm8_4,ymm8_4<s12712@16,(-12712)@16<=s ymm8_5,ymm8_5<s12712@16,
(-11726)@16<=s ymm8_6,ymm8_6<s11726@16,(-11726)@16<=s ymm8_7,ymm8_7<s11726@16,
( -5579)@16<=s ymm8_8,ymm8_8<s 5579@16,( -5579)@16<=s ymm8_9,ymm8_9<s 5579@16,
( -5579)@16<=s ymm8_a,ymm8_a<s 5579@16,( -5579)@16<=s ymm8_b,ymm8_b<s 5579@16,
( -5614)@16<=s ymm8_c,ymm8_c<s 5614@16,( -5614)@16<=s ymm8_d,ymm8_d<s 5614@16,
( -5596)@16<=s ymm8_e,ymm8_e<s 5596@16,( -5596)@16<=s ymm8_f,ymm8_f<s 5596@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-12450)@16<=s ymm11_4,ymm11_4<s12450@16,(-12450)@16<=s ymm11_5,ymm11_5<s12450@16,
(-11604)@16<=s ymm11_6,ymm11_6<s11604@16,(-11604)@16<=s ymm11_7,ymm11_7<s11604@16,
( -5856)@16<=s ymm11_8,ymm11_8<s 5856@16,( -5856)@16<=s ymm11_9,ymm11_9<s 5856@16,
( -5856)@16<=s ymm11_a,ymm11_a<s 5856@16,( -5856)@16<=s ymm11_b,ymm11_b<s 5856@16,
( -5917)@16<=s ymm11_c,ymm11_c<s 5917@16,( -5917)@16<=s ymm11_d,ymm11_d<s 5917@16,
( -5892)@16<=s ymm11_e,ymm11_e<s 5892@16,( -5892)@16<=s ymm11_f,ymm11_f<s 5892@16
] prove with [ precondition ];



(**************** CUT  52 *****************)

ecut and [
eqmod (8*inp_poly180**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1000],
eqmod (8*inp_poly181**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9753],
eqmod (8*inp_poly182**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 5754],
eqmod (8*inp_poly183**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 4999],
eqmod (8*inp_poly184**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 9163],
eqmod (8*inp_poly185**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 1590],
eqmod (8*inp_poly186**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8271],
eqmod (8*inp_poly187**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2482]
,
eqmod (8*inp_poly188**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 10715],
eqmod (8*inp_poly189**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 38],
eqmod (8*inp_poly18a**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9287],
eqmod (8*inp_poly18b**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1466],
eqmod (8*inp_poly18c**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 9308],
eqmod (8*inp_poly18d**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 1445],
eqmod (8*inp_poly18e**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2546],
eqmod (8*inp_poly18f**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8207]
] prove with [ cuts [ 51 ] ];



(**************** CUT  53 *****************)

ecut and [
eqmod (8*inp_poly190**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3429],
eqmod (8*inp_poly191**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7324],
eqmod (8*inp_poly192**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5515],
eqmod (8*inp_poly193**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 5238],
eqmod (8*inp_poly194**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3903],
eqmod (8*inp_poly195**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6850],
eqmod (8*inp_poly196**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 6823],
eqmod (8*inp_poly197**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3930]
,
eqmod (8*inp_poly198**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9913],
eqmod (8*inp_poly199**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 840],
eqmod (8*inp_poly19a**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 7210],
eqmod (8*inp_poly19b**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 3543],
eqmod (8*inp_poly19c**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9938],
eqmod (8*inp_poly19d**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 815],
eqmod (8*inp_poly19e**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 2515],
eqmod (8*inp_poly19f**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8238]
] prove with [ cuts [ 51 ] ];



(**************** CUT  54 *****************)

ecut and [
eqmod (8*inp_poly1a0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3310],
eqmod (8*inp_poly1a1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 7443],
eqmod (8*inp_poly1a2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2056],
eqmod (8*inp_poly1a3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8697],
eqmod (8*inp_poly1a4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8716],
eqmod (8*inp_poly1a5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2037],
eqmod (8*inp_poly1a6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 4043],
eqmod (8*inp_poly1a7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6710]
,
eqmod (8*inp_poly1a8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 2670],
eqmod (8*inp_poly1a9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 8083],
eqmod (8*inp_poly1aa**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3965],
eqmod (8*inp_poly1ab**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6788],
eqmod (8*inp_poly1ac**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7583],
eqmod (8*inp_poly1ad**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3170],
eqmod (8*inp_poly1ae**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3911],
eqmod (8*inp_poly1af**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 6842]
] prove with [ cuts [ 51 ] ];



(**************** CUT  55 *****************)

ecut and [
eqmod (8*inp_poly1b0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2425],
eqmod (8*inp_poly1b1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8328],
eqmod (8*inp_poly1b2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6964],
eqmod (8*inp_poly1b3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3789],
eqmod (8*inp_poly1b4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 4209],
eqmod (8*inp_poly1b5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6544],
eqmod (8*inp_poly1b6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 9573],
eqmod (8*inp_poly1b7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1180]
,
eqmod (8*inp_poly1b8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5822],
eqmod (8*inp_poly1b9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 4931],
eqmod (8*inp_poly1ba**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5585],
eqmod (8*inp_poly1bb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 5168],
eqmod (8*inp_poly1bc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 8593],
eqmod (8*inp_poly1bd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2160],
eqmod (8*inp_poly1be**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7787],
eqmod (8*inp_poly1bf**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2966]
] prove with [ cuts [ 51 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555cb83 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555cb87 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555cb8b *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555cb8f *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555cb93 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555cb98 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555cb9d *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555cba2 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555cba7 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555cbaf *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x12e(%rdx),%ymm1                  #! EA = L0x55555556124e; Value = 0x2711fcc3398be2fb; PC = 0x55555555cbb7 *)
mov ymm1_0 L0x55555556124e;
mov ymm1_1 L0x55555556124e;
mov ymm1_2 L0x55555556124e;
mov ymm1_3 L0x55555556124e;
mov ymm1_4 L0x55555556124e;
mov ymm1_5 L0x55555556124e;
mov ymm1_6 L0x55555556124e;
mov ymm1_7 L0x55555556124e;
mov ymm1_8 L0x55555556124e;
mov ymm1_9 L0x55555556124e;
mov ymm1_a L0x55555556124e;
mov ymm1_b L0x55555556124e;
mov ymm1_c L0x55555556124e;
mov ymm1_d L0x55555556124e;
mov ymm1_e L0x55555556124e;
mov ymm1_f L0x55555556124e;
(* vpbroadcastw 0x32e(%rdx),%ymm2                  #! EA = L0x55555556144e; Value = 0xf111fac3078b10fb; PC = 0x55555555cbc0 *)
mov ymm2_0 L0x55555556144e;
mov ymm2_1 L0x55555556144e;
mov ymm2_2 L0x55555556144e;
mov ymm2_3 L0x55555556144e;
mov ymm2_4 L0x55555556144e;
mov ymm2_5 L0x55555556144e;
mov ymm2_6 L0x55555556144e;
mov ymm2_7 L0x55555556144e;
mov ymm2_8 L0x55555556144e;
mov ymm2_9 L0x55555556144e;
mov ymm2_a L0x55555556144e;
mov ymm2_b L0x55555556144e;
mov ymm2_c L0x55555556144e;
mov ymm2_d L0x55555556144e;
mov ymm2_e L0x55555556144e;
mov ymm2_f L0x55555556144e;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555cbc9 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555cbcd *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cbd1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555cbd5 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x12c(%rdx),%ymm1                  #! EA = L0x55555556124c; Value = 0xfcc3398be2fb1c3c; PC = 0x55555555cbd9 *)
mov ymm1_0 L0x55555556124c;
mov ymm1_1 L0x55555556124c;
mov ymm1_2 L0x55555556124c;
mov ymm1_3 L0x55555556124c;
mov ymm1_4 L0x55555556124c;
mov ymm1_5 L0x55555556124c;
mov ymm1_6 L0x55555556124c;
mov ymm1_7 L0x55555556124c;
mov ymm1_8 L0x55555556124c;
mov ymm1_9 L0x55555556124c;
mov ymm1_a L0x55555556124c;
mov ymm1_b L0x55555556124c;
mov ymm1_c L0x55555556124c;
mov ymm1_d L0x55555556124c;
mov ymm1_e L0x55555556124c;
mov ymm1_f L0x55555556124c;
(* vpbroadcastw 0x32c(%rdx),%ymm2                  #! EA = L0x55555556144c; Value = 0xfac3078b10fbf43c; PC = 0x55555555cbe2 *)
mov ymm2_0 L0x55555556144c;
mov ymm2_1 L0x55555556144c;
mov ymm2_2 L0x55555556144c;
mov ymm2_3 L0x55555556144c;
mov ymm2_4 L0x55555556144c;
mov ymm2_5 L0x55555556144c;
mov ymm2_6 L0x55555556144c;
mov ymm2_7 L0x55555556144c;
mov ymm2_8 L0x55555556144c;
mov ymm2_9 L0x55555556144c;
mov ymm2_a L0x55555556144c;
mov ymm2_b L0x55555556144c;
mov ymm2_c L0x55555556144c;
mov ymm2_d L0x55555556144c;
mov ymm2_e L0x55555556144c;
mov ymm2_f L0x55555556144c;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555cbeb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555cbef *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cbf3 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555cbf7 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x12a(%rdx),%ymm1                  #! EA = L0x55555556124a; Value = 0x398be2fb1c3c6796; PC = 0x55555555cbfb *)
mov ymm1_0 L0x55555556124a;
mov ymm1_1 L0x55555556124a;
mov ymm1_2 L0x55555556124a;
mov ymm1_3 L0x55555556124a;
mov ymm1_4 L0x55555556124a;
mov ymm1_5 L0x55555556124a;
mov ymm1_6 L0x55555556124a;
mov ymm1_7 L0x55555556124a;
mov ymm1_8 L0x55555556124a;
mov ymm1_9 L0x55555556124a;
mov ymm1_a L0x55555556124a;
mov ymm1_b L0x55555556124a;
mov ymm1_c L0x55555556124a;
mov ymm1_d L0x55555556124a;
mov ymm1_e L0x55555556124a;
mov ymm1_f L0x55555556124a;
(* vpbroadcastw 0x32a(%rdx),%ymm2                  #! EA = L0x55555556144a; Value = 0x078b10fbf43c0396; PC = 0x55555555cc04 *)
mov ymm2_0 L0x55555556144a;
mov ymm2_1 L0x55555556144a;
mov ymm2_2 L0x55555556144a;
mov ymm2_3 L0x55555556144a;
mov ymm2_4 L0x55555556144a;
mov ymm2_5 L0x55555556144a;
mov ymm2_6 L0x55555556144a;
mov ymm2_7 L0x55555556144a;
mov ymm2_8 L0x55555556144a;
mov ymm2_9 L0x55555556144a;
mov ymm2_a L0x55555556144a;
mov ymm2_b L0x55555556144a;
mov ymm2_c L0x55555556144a;
mov ymm2_d L0x55555556144a;
mov ymm2_e L0x55555556144a;
mov ymm2_f L0x55555556144a;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555cc0d *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555cc11 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc15 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555cc19 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x128(%rdx),%ymm1                  #! EA = L0x555555561248; Value = 0xe2fb1c3c679663c7; PC = 0x55555555cc1e *)
mov ymm1_0 L0x555555561248;
mov ymm1_1 L0x555555561248;
mov ymm1_2 L0x555555561248;
mov ymm1_3 L0x555555561248;
mov ymm1_4 L0x555555561248;
mov ymm1_5 L0x555555561248;
mov ymm1_6 L0x555555561248;
mov ymm1_7 L0x555555561248;
mov ymm1_8 L0x555555561248;
mov ymm1_9 L0x555555561248;
mov ymm1_a L0x555555561248;
mov ymm1_b L0x555555561248;
mov ymm1_c L0x555555561248;
mov ymm1_d L0x555555561248;
mov ymm1_e L0x555555561248;
mov ymm1_f L0x555555561248;
(* vpbroadcastw 0x328(%rdx),%ymm2                  #! EA = L0x555555561448; Value = 0x10fbf43c039609c7; PC = 0x55555555cc27 *)
mov ymm2_0 L0x555555561448;
mov ymm2_1 L0x555555561448;
mov ymm2_2 L0x555555561448;
mov ymm2_3 L0x555555561448;
mov ymm2_4 L0x555555561448;
mov ymm2_5 L0x555555561448;
mov ymm2_6 L0x555555561448;
mov ymm2_7 L0x555555561448;
mov ymm2_8 L0x555555561448;
mov ymm2_9 L0x555555561448;
mov ymm2_a L0x555555561448;
mov ymm2_b L0x555555561448;
mov ymm2_c L0x555555561448;
mov ymm2_d L0x555555561448;
mov ymm2_e L0x555555561448;
mov ymm2_f L0x555555561448;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555cc30 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555cc34 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc38 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555cc3c *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555cc41 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555cc46 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc4b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555cc4f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555cc54 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555cc59 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc5e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555cc62 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555cc67 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555cc6c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc71 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555cc75 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555cc7a *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555cc7f *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555cc84 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555cc88 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555cc8d *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555cc91 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555cc95 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555cc99 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555cc9d *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555cca1 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555cca5 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555ccaa *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x116(%rdx),%ymm1                  #! EA = L0x555555561236; Value = 0x252491c0b85730bc; PC = 0x55555555ccaf *)
mov ymm1_0 L0x555555561236;
mov ymm1_1 L0x555555561236;
mov ymm1_2 L0x555555561236;
mov ymm1_3 L0x555555561236;
mov ymm1_4 L0x555555561236;
mov ymm1_5 L0x555555561236;
mov ymm1_6 L0x555555561236;
mov ymm1_7 L0x555555561236;
mov ymm1_8 L0x555555561236;
mov ymm1_9 L0x555555561236;
mov ymm1_a L0x555555561236;
mov ymm1_b L0x555555561236;
mov ymm1_c L0x555555561236;
mov ymm1_d L0x555555561236;
mov ymm1_e L0x555555561236;
mov ymm1_f L0x555555561236;
(* vpbroadcastw 0x316(%rdx),%ymm2                  #! EA = L0x555555561436; Value = 0x0d2411c0fe5708bc; PC = 0x55555555ccb8 *)
mov ymm2_0 L0x555555561436;
mov ymm2_1 L0x555555561436;
mov ymm2_2 L0x555555561436;
mov ymm2_3 L0x555555561436;
mov ymm2_4 L0x555555561436;
mov ymm2_5 L0x555555561436;
mov ymm2_6 L0x555555561436;
mov ymm2_7 L0x555555561436;
mov ymm2_8 L0x555555561436;
mov ymm2_9 L0x555555561436;
mov ymm2_a L0x555555561436;
mov ymm2_b L0x555555561436;
mov ymm2_c L0x555555561436;
mov ymm2_d L0x555555561436;
mov ymm2_e L0x555555561436;
mov ymm2_f L0x555555561436;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555ccc1 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555ccc5 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ccc9 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555cccd *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555ccd1 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555ccd5 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ccd9 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555ccdd *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x114(%rdx),%ymm1                  #! EA = L0x555555561234; Value = 0x91c0b85730bc8cf7; PC = 0x55555555cce1 *)
mov ymm1_0 L0x555555561234;
mov ymm1_1 L0x555555561234;
mov ymm1_2 L0x555555561234;
mov ymm1_3 L0x555555561234;
mov ymm1_4 L0x555555561234;
mov ymm1_5 L0x555555561234;
mov ymm1_6 L0x555555561234;
mov ymm1_7 L0x555555561234;
mov ymm1_8 L0x555555561234;
mov ymm1_9 L0x555555561234;
mov ymm1_a L0x555555561234;
mov ymm1_b L0x555555561234;
mov ymm1_c L0x555555561234;
mov ymm1_d L0x555555561234;
mov ymm1_e L0x555555561234;
mov ymm1_f L0x555555561234;
(* vpbroadcastw 0x314(%rdx),%ymm2                  #! EA = L0x555555561434; Value = 0x11c0fe5708bc12f7; PC = 0x55555555ccea *)
mov ymm2_0 L0x555555561434;
mov ymm2_1 L0x555555561434;
mov ymm2_2 L0x555555561434;
mov ymm2_3 L0x555555561434;
mov ymm2_4 L0x555555561434;
mov ymm2_5 L0x555555561434;
mov ymm2_6 L0x555555561434;
mov ymm2_7 L0x555555561434;
mov ymm2_8 L0x555555561434;
mov ymm2_9 L0x555555561434;
mov ymm2_a L0x555555561434;
mov ymm2_b L0x555555561434;
mov ymm2_c L0x555555561434;
mov ymm2_d L0x555555561434;
mov ymm2_e L0x555555561434;
mov ymm2_f L0x555555561434;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555ccf3 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555ccf7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555ccfb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555ccff *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555cd03 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555cd07 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555cd0b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555cd0f *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555cd14 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555cd18 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555cd1c *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555cd20 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555cd24 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555cd28 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555cd2c *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555cd31 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x10a(%rdx),%ymm1                  #! EA = L0x55555556122a; Value = 0xe487ae886f65ad9a; PC = 0x55555555cd36 *)
mov ymm1_0 L0x55555556122a;
mov ymm1_1 L0x55555556122a;
mov ymm1_2 L0x55555556122a;
mov ymm1_3 L0x55555556122a;
mov ymm1_4 L0x55555556122a;
mov ymm1_5 L0x55555556122a;
mov ymm1_6 L0x55555556122a;
mov ymm1_7 L0x55555556122a;
mov ymm1_8 L0x55555556122a;
mov ymm1_9 L0x55555556122a;
mov ymm1_a L0x55555556122a;
mov ymm1_b L0x55555556122a;
mov ymm1_c L0x55555556122a;
mov ymm1_d L0x55555556122a;
mov ymm1_e L0x55555556122a;
mov ymm1_f L0x55555556122a;
(* vpbroadcastw 0x30a(%rdx),%ymm2                  #! EA = L0x55555556142a; Value = 0x0a87fe880165f19a; PC = 0x55555555cd3f *)
mov ymm2_0 L0x55555556142a;
mov ymm2_1 L0x55555556142a;
mov ymm2_2 L0x55555556142a;
mov ymm2_3 L0x55555556142a;
mov ymm2_4 L0x55555556142a;
mov ymm2_5 L0x55555556142a;
mov ymm2_6 L0x55555556142a;
mov ymm2_7 L0x55555556142a;
mov ymm2_8 L0x55555556142a;
mov ymm2_9 L0x55555556142a;
mov ymm2_a L0x55555556142a;
mov ymm2_b L0x55555556142a;
mov ymm2_c L0x55555556142a;
mov ymm2_d L0x55555556142a;
mov ymm2_e L0x55555556142a;
mov ymm2_f L0x55555556142a;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555cd48 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555cd4c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cd50 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555cd54 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555cd58 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555cd5c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cd60 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555cd64 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555cd68 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555cd6c *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cd70 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555cd74 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555cd78 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555cd7c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cd80 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555cd84 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555cd89 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555cd8e *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cd93 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555cd97 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555cd9b *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555cda0 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555cda5 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555cda9 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x600(%rdi)                       #! EA = L0x7fffffffd8e0; PC = 0x55555555cdad *)
mov L0x7fffffffd8e0 ymm9_0;
mov L0x7fffffffd8e2 ymm9_1;
mov L0x7fffffffd8e4 ymm9_2;
mov L0x7fffffffd8e6 ymm9_3;
mov L0x7fffffffd8e8 ymm9_4;
mov L0x7fffffffd8ea ymm9_5;
mov L0x7fffffffd8ec ymm9_6;
mov L0x7fffffffd8ee ymm9_7;
mov L0x7fffffffd8f0 ymm9_8;
mov L0x7fffffffd8f2 ymm9_9;
mov L0x7fffffffd8f4 ymm9_a;
mov L0x7fffffffd8f6 ymm9_b;
mov L0x7fffffffd8f8 ymm9_c;
mov L0x7fffffffd8fa ymm9_d;
mov L0x7fffffffd8fc ymm9_e;
mov L0x7fffffffd8fe ymm9_f;
(* vmovdqa %ymm8,0x620(%rdi)                       #! EA = L0x7fffffffd900; PC = 0x55555555cdb5 *)
mov L0x7fffffffd900 ymm8_0;
mov L0x7fffffffd902 ymm8_1;
mov L0x7fffffffd904 ymm8_2;
mov L0x7fffffffd906 ymm8_3;
mov L0x7fffffffd908 ymm8_4;
mov L0x7fffffffd90a ymm8_5;
mov L0x7fffffffd90c ymm8_6;
mov L0x7fffffffd90e ymm8_7;
mov L0x7fffffffd910 ymm8_8;
mov L0x7fffffffd912 ymm8_9;
mov L0x7fffffffd914 ymm8_a;
mov L0x7fffffffd916 ymm8_b;
mov L0x7fffffffd918 ymm8_c;
mov L0x7fffffffd91a ymm8_d;
mov L0x7fffffffd91c ymm8_e;
mov L0x7fffffffd91e ymm8_f;
(* vmovdqa %ymm10,0x640(%rdi)                      #! EA = L0x7fffffffd920; PC = 0x55555555cdbd *)
mov L0x7fffffffd920 ymm10_0;
mov L0x7fffffffd922 ymm10_1;
mov L0x7fffffffd924 ymm10_2;
mov L0x7fffffffd926 ymm10_3;
mov L0x7fffffffd928 ymm10_4;
mov L0x7fffffffd92a ymm10_5;
mov L0x7fffffffd92c ymm10_6;
mov L0x7fffffffd92e ymm10_7;
mov L0x7fffffffd930 ymm10_8;
mov L0x7fffffffd932 ymm10_9;
mov L0x7fffffffd934 ymm10_a;
mov L0x7fffffffd936 ymm10_b;
mov L0x7fffffffd938 ymm10_c;
mov L0x7fffffffd93a ymm10_d;
mov L0x7fffffffd93c ymm10_e;
mov L0x7fffffffd93e ymm10_f;
(* vmovdqa %ymm3,0x660(%rdi)                       #! EA = L0x7fffffffd940; PC = 0x55555555cdc5 *)
mov L0x7fffffffd940 ymm3_0;
mov L0x7fffffffd942 ymm3_1;
mov L0x7fffffffd944 ymm3_2;
mov L0x7fffffffd946 ymm3_3;
mov L0x7fffffffd948 ymm3_4;
mov L0x7fffffffd94a ymm3_5;
mov L0x7fffffffd94c ymm3_6;
mov L0x7fffffffd94e ymm3_7;
mov L0x7fffffffd950 ymm3_8;
mov L0x7fffffffd952 ymm3_9;
mov L0x7fffffffd954 ymm3_a;
mov L0x7fffffffd956 ymm3_b;
mov L0x7fffffffd958 ymm3_c;
mov L0x7fffffffd95a ymm3_d;
mov L0x7fffffffd95c ymm3_e;
mov L0x7fffffffd95e ymm3_f;
(* vmovdqa %ymm5,0x680(%rdi)                       #! EA = L0x7fffffffd960; PC = 0x55555555cdcd *)
mov L0x7fffffffd960 ymm5_0;
mov L0x7fffffffd962 ymm5_1;
mov L0x7fffffffd964 ymm5_2;
mov L0x7fffffffd966 ymm5_3;
mov L0x7fffffffd968 ymm5_4;
mov L0x7fffffffd96a ymm5_5;
mov L0x7fffffffd96c ymm5_6;
mov L0x7fffffffd96e ymm5_7;
mov L0x7fffffffd970 ymm5_8;
mov L0x7fffffffd972 ymm5_9;
mov L0x7fffffffd974 ymm5_a;
mov L0x7fffffffd976 ymm5_b;
mov L0x7fffffffd978 ymm5_c;
mov L0x7fffffffd97a ymm5_d;
mov L0x7fffffffd97c ymm5_e;
mov L0x7fffffffd97e ymm5_f;
(* vmovdqa %ymm4,0x6a0(%rdi)                       #! EA = L0x7fffffffd980; PC = 0x55555555cdd5 *)
mov L0x7fffffffd980 ymm4_0;
mov L0x7fffffffd982 ymm4_1;
mov L0x7fffffffd984 ymm4_2;
mov L0x7fffffffd986 ymm4_3;
mov L0x7fffffffd988 ymm4_4;
mov L0x7fffffffd98a ymm4_5;
mov L0x7fffffffd98c ymm4_6;
mov L0x7fffffffd98e ymm4_7;
mov L0x7fffffffd990 ymm4_8;
mov L0x7fffffffd992 ymm4_9;
mov L0x7fffffffd994 ymm4_a;
mov L0x7fffffffd996 ymm4_b;
mov L0x7fffffffd998 ymm4_c;
mov L0x7fffffffd99a ymm4_d;
mov L0x7fffffffd99c ymm4_e;
mov L0x7fffffffd99e ymm4_f;
(* vmovdqa %ymm6,0x6c0(%rdi)                       #! EA = L0x7fffffffd9a0; PC = 0x55555555cddd *)
mov L0x7fffffffd9a0 ymm6_0;
mov L0x7fffffffd9a2 ymm6_1;
mov L0x7fffffffd9a4 ymm6_2;
mov L0x7fffffffd9a6 ymm6_3;
mov L0x7fffffffd9a8 ymm6_4;
mov L0x7fffffffd9aa ymm6_5;
mov L0x7fffffffd9ac ymm6_6;
mov L0x7fffffffd9ae ymm6_7;
mov L0x7fffffffd9b0 ymm6_8;
mov L0x7fffffffd9b2 ymm6_9;
mov L0x7fffffffd9b4 ymm6_a;
mov L0x7fffffffd9b6 ymm6_b;
mov L0x7fffffffd9b8 ymm6_c;
mov L0x7fffffffd9ba ymm6_d;
mov L0x7fffffffd9bc ymm6_e;
mov L0x7fffffffd9be ymm6_f;
(* vmovdqa %ymm11,0x6e0(%rdi)                      #! EA = L0x7fffffffd9c0; PC = 0x55555555cde5 *)
mov L0x7fffffffd9c0 ymm11_0;
mov L0x7fffffffd9c2 ymm11_1;
mov L0x7fffffffd9c4 ymm11_2;
mov L0x7fffffffd9c6 ymm11_3;
mov L0x7fffffffd9c8 ymm11_4;
mov L0x7fffffffd9ca ymm11_5;
mov L0x7fffffffd9cc ymm11_6;
mov L0x7fffffffd9ce ymm11_7;
mov L0x7fffffffd9d0 ymm11_8;
mov L0x7fffffffd9d2 ymm11_9;
mov L0x7fffffffd9d4 ymm11_a;
mov L0x7fffffffd9d6 ymm11_b;
mov L0x7fffffffd9d8 ymm11_c;
mov L0x7fffffffd9da ymm11_d;
mov L0x7fffffffd9dc ymm11_e;
mov L0x7fffffffd9de ymm11_f;



(**************** LEVELS 3-5, 6 *****************)

ghost segment6@bit :
segment6 = 
x**  0*(
L0x7fffffffd8e0*x** 0+L0x7fffffffd8e2*x** 1+L0x7fffffffd8e4*x** 2+
L0x7fffffffd8e6*x** 3+L0x7fffffffd8e8*x** 4+L0x7fffffffd8ea*x** 5+
L0x7fffffffd8ec*x** 6+L0x7fffffffd8ee*x** 7+L0x7fffffffd8f0*x** 8+
L0x7fffffffd8f2*x** 9+L0x7fffffffd8f4*x**10+L0x7fffffffd8f6*x**11+
L0x7fffffffd8f8*x**12+L0x7fffffffd8fa*x**13+L0x7fffffffd8fc*x**14+
L0x7fffffffd8fe*x**15)+
x** 16*(
L0x7fffffffd900*x** 0+L0x7fffffffd902*x** 1+L0x7fffffffd904*x** 2+
L0x7fffffffd906*x** 3+L0x7fffffffd908*x** 4+L0x7fffffffd90a*x** 5+
L0x7fffffffd90c*x** 6+L0x7fffffffd90e*x** 7+L0x7fffffffd910*x** 8+
L0x7fffffffd912*x** 9+L0x7fffffffd914*x**10+L0x7fffffffd916*x**11+
L0x7fffffffd918*x**12+L0x7fffffffd91a*x**13+L0x7fffffffd91c*x**14+
L0x7fffffffd91e*x**15)+
x** 32*(
L0x7fffffffd920*x** 0+L0x7fffffffd922*x** 1+L0x7fffffffd924*x** 2+
L0x7fffffffd926*x** 3+L0x7fffffffd928*x** 4+L0x7fffffffd92a*x** 5+
L0x7fffffffd92c*x** 6+L0x7fffffffd92e*x** 7+L0x7fffffffd930*x** 8+
L0x7fffffffd932*x** 9+L0x7fffffffd934*x**10+L0x7fffffffd936*x**11+
L0x7fffffffd938*x**12+L0x7fffffffd93a*x**13+L0x7fffffffd93c*x**14+
L0x7fffffffd93e*x**15)+
x** 48*(
L0x7fffffffd940*x** 0+L0x7fffffffd942*x** 1+L0x7fffffffd944*x** 2+
L0x7fffffffd946*x** 3+L0x7fffffffd948*x** 4+L0x7fffffffd94a*x** 5+
L0x7fffffffd94c*x** 6+L0x7fffffffd94e*x** 7+L0x7fffffffd950*x** 8+
L0x7fffffffd952*x** 9+L0x7fffffffd954*x**10+L0x7fffffffd956*x**11+
L0x7fffffffd958*x**12+L0x7fffffffd95a*x**13+L0x7fffffffd95c*x**14+
L0x7fffffffd95e*x**15)+
x** 64*(
L0x7fffffffd960*x** 0+L0x7fffffffd962*x** 1+L0x7fffffffd964*x** 2+
L0x7fffffffd966*x** 3+L0x7fffffffd968*x** 4+L0x7fffffffd96a*x** 5+
L0x7fffffffd96c*x** 6+L0x7fffffffd96e*x** 7+L0x7fffffffd970*x** 8+
L0x7fffffffd972*x** 9+L0x7fffffffd974*x**10+L0x7fffffffd976*x**11+
L0x7fffffffd978*x**12+L0x7fffffffd97a*x**13+L0x7fffffffd97c*x**14+
L0x7fffffffd97e*x**15)+
x** 80*(
L0x7fffffffd980*x** 0+L0x7fffffffd982*x** 1+L0x7fffffffd984*x** 2+
L0x7fffffffd986*x** 3+L0x7fffffffd988*x** 4+L0x7fffffffd98a*x** 5+
L0x7fffffffd98c*x** 6+L0x7fffffffd98e*x** 7+L0x7fffffffd990*x** 8+
L0x7fffffffd992*x** 9+L0x7fffffffd994*x**10+L0x7fffffffd996*x**11+
L0x7fffffffd998*x**12+L0x7fffffffd99a*x**13+L0x7fffffffd99c*x**14+
L0x7fffffffd99e*x**15)+
x** 96*(
L0x7fffffffd9a0*x** 0+L0x7fffffffd9a2*x** 1+L0x7fffffffd9a4*x** 2+
L0x7fffffffd9a6*x** 3+L0x7fffffffd9a8*x** 4+L0x7fffffffd9aa*x** 5+
L0x7fffffffd9ac*x** 6+L0x7fffffffd9ae*x** 7+L0x7fffffffd9b0*x** 8+
L0x7fffffffd9b2*x** 9+L0x7fffffffd9b4*x**10+L0x7fffffffd9b6*x**11+
L0x7fffffffd9b8*x**12+L0x7fffffffd9ba*x**13+L0x7fffffffd9bc*x**14+
L0x7fffffffd9be*x**15)+
x**112*(
L0x7fffffffd9c0*x** 0+L0x7fffffffd9c2*x** 1+L0x7fffffffd9c4*x** 2+
L0x7fffffffd9c6*x** 3+L0x7fffffffd9c8*x** 4+L0x7fffffffd9ca*x** 5+
L0x7fffffffd9cc*x** 6+L0x7fffffffd9ce*x** 7+L0x7fffffffd9d0*x** 8+
L0x7fffffffd9d2*x** 9+L0x7fffffffd9d4*x**10+L0x7fffffffd9d6*x**11+
L0x7fffffffd9d8*x**12+L0x7fffffffd9da*x**13+L0x7fffffffd9dc*x**14+
L0x7fffffffd9de*x**15)
&& true;


(**************** CUT  56 *****************)

cut
and [
eqmod (64*inp_poly180**2) (segment6) [10753, x**2 - 1000],
eqmod (64*inp_poly181**2) (segment6) [10753, x**2 - 9753],
eqmod (64*inp_poly182**2) (segment6) [10753, x**2 - 5754],
eqmod (64*inp_poly183**2) (segment6) [10753, x**2 - 4999],
eqmod (64*inp_poly184**2) (segment6) [10753, x**2 - 9163],
eqmod (64*inp_poly185**2) (segment6) [10753, x**2 - 1590],
eqmod (64*inp_poly186**2) (segment6) [10753, x**2 - 8271],
eqmod (64*inp_poly187**2) (segment6) [10753, x**2 - 2482]
,
eqmod (64*inp_poly188**2) (segment6) [10753, x**2 - 10715],
eqmod (64*inp_poly189**2) (segment6) [10753, x**2 - 38],
eqmod (64*inp_poly18a**2) (segment6) [10753, x**2 - 9287],
eqmod (64*inp_poly18b**2) (segment6) [10753, x**2 - 1466],
eqmod (64*inp_poly18c**2) (segment6) [10753, x**2 - 9308],
eqmod (64*inp_poly18d**2) (segment6) [10753, x**2 - 1445],
eqmod (64*inp_poly18e**2) (segment6) [10753, x**2 - 2546],
eqmod (64*inp_poly18f**2) (segment6) [10753, x**2 - 8207]
] prove with [ cuts [ 52 ] ],
and [
eqmod (64*inp_poly190**2) (segment6) [10753, x**2 - 3429],
eqmod (64*inp_poly191**2) (segment6) [10753, x**2 - 7324],
eqmod (64*inp_poly192**2) (segment6) [10753, x**2 - 5515],
eqmod (64*inp_poly193**2) (segment6) [10753, x**2 - 5238],
eqmod (64*inp_poly194**2) (segment6) [10753, x**2 - 3903],
eqmod (64*inp_poly195**2) (segment6) [10753, x**2 - 6850],
eqmod (64*inp_poly196**2) (segment6) [10753, x**2 - 6823],
eqmod (64*inp_poly197**2) (segment6) [10753, x**2 - 3930]
,
eqmod (64*inp_poly198**2) (segment6) [10753, x**2 - 9913],
eqmod (64*inp_poly199**2) (segment6) [10753, x**2 - 840],
eqmod (64*inp_poly19a**2) (segment6) [10753, x**2 - 7210],
eqmod (64*inp_poly19b**2) (segment6) [10753, x**2 - 3543],
eqmod (64*inp_poly19c**2) (segment6) [10753, x**2 - 9938],
eqmod (64*inp_poly19d**2) (segment6) [10753, x**2 - 815],
eqmod (64*inp_poly19e**2) (segment6) [10753, x**2 - 2515],
eqmod (64*inp_poly19f**2) (segment6) [10753, x**2 - 8238]
] prove with [ cuts [ 53 ] ],
and [
eqmod (64*inp_poly1a0**2) (segment6) [10753, x**2 - 3310],
eqmod (64*inp_poly1a1**2) (segment6) [10753, x**2 - 7443],
eqmod (64*inp_poly1a2**2) (segment6) [10753, x**2 - 2056],
eqmod (64*inp_poly1a3**2) (segment6) [10753, x**2 - 8697],
eqmod (64*inp_poly1a4**2) (segment6) [10753, x**2 - 8716],
eqmod (64*inp_poly1a5**2) (segment6) [10753, x**2 - 2037],
eqmod (64*inp_poly1a6**2) (segment6) [10753, x**2 - 4043],
eqmod (64*inp_poly1a7**2) (segment6) [10753, x**2 - 6710]
,
eqmod (64*inp_poly1a8**2) (segment6) [10753, x**2 - 2670],
eqmod (64*inp_poly1a9**2) (segment6) [10753, x**2 - 8083],
eqmod (64*inp_poly1aa**2) (segment6) [10753, x**2 - 3965],
eqmod (64*inp_poly1ab**2) (segment6) [10753, x**2 - 6788],
eqmod (64*inp_poly1ac**2) (segment6) [10753, x**2 - 7583],
eqmod (64*inp_poly1ad**2) (segment6) [10753, x**2 - 3170],
eqmod (64*inp_poly1ae**2) (segment6) [10753, x**2 - 3911],
eqmod (64*inp_poly1af**2) (segment6) [10753, x**2 - 6842]
] prove with [ cuts [ 54 ] ],
and [
eqmod (64*inp_poly1b0**2) (segment6) [10753, x**2 - 2425],
eqmod (64*inp_poly1b1**2) (segment6) [10753, x**2 - 8328],
eqmod (64*inp_poly1b2**2) (segment6) [10753, x**2 - 6964],
eqmod (64*inp_poly1b3**2) (segment6) [10753, x**2 - 3789],
eqmod (64*inp_poly1b4**2) (segment6) [10753, x**2 - 4209],
eqmod (64*inp_poly1b5**2) (segment6) [10753, x**2 - 6544],
eqmod (64*inp_poly1b6**2) (segment6) [10753, x**2 - 9573],
eqmod (64*inp_poly1b7**2) (segment6) [10753, x**2 - 1180]
,
eqmod (64*inp_poly1b8**2) (segment6) [10753, x**2 - 5822],
eqmod (64*inp_poly1b9**2) (segment6) [10753, x**2 - 4931],
eqmod (64*inp_poly1ba**2) (segment6) [10753, x**2 - 5585],
eqmod (64*inp_poly1bb**2) (segment6) [10753, x**2 - 5168],
eqmod (64*inp_poly1bc**2) (segment6) [10753, x**2 - 8593],
eqmod (64*inp_poly1bd**2) (segment6) [10753, x**2 - 2160],
eqmod (64*inp_poly1be**2) (segment6) [10753, x**2 - 7787],
eqmod (64*inp_poly1bf**2) (segment6) [10753, x**2 - 2966]
] prove with [ cuts [ 55 ] ] && and [
( -5631)@16<=s L0x7fffffffd8e0,L0x7fffffffd8e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd8e2,L0x7fffffffd8e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd8e4,L0x7fffffffd8e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd8e6,L0x7fffffffd8e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd8e8,L0x7fffffffd8e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd8ea,L0x7fffffffd8ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd8ec,L0x7fffffffd8ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd8ee,L0x7fffffffd8ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd8f0,L0x7fffffffd8f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd8f2,L0x7fffffffd8f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd8f4,L0x7fffffffd8f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd8f6,L0x7fffffffd8f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd8f8,L0x7fffffffd8f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd8fa,L0x7fffffffd8fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd8fc,L0x7fffffffd8fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd8fe,L0x7fffffffd8fe<s 5631@16,
( -5631)@16<=s L0x7fffffffd900,L0x7fffffffd900<s 5631@16,
( -5631)@16<=s L0x7fffffffd902,L0x7fffffffd902<s 5631@16,
( -5631)@16<=s L0x7fffffffd904,L0x7fffffffd904<s 5631@16,
( -5631)@16<=s L0x7fffffffd906,L0x7fffffffd906<s 5631@16,
( -5631)@16<=s L0x7fffffffd908,L0x7fffffffd908<s 5631@16,
( -5631)@16<=s L0x7fffffffd90a,L0x7fffffffd90a<s 5631@16,
( -5631)@16<=s L0x7fffffffd90c,L0x7fffffffd90c<s 5631@16,
( -5631)@16<=s L0x7fffffffd90e,L0x7fffffffd90e<s 5631@16,
( -5631)@16<=s L0x7fffffffd910,L0x7fffffffd910<s 5631@16,
( -5631)@16<=s L0x7fffffffd912,L0x7fffffffd912<s 5631@16,
( -5631)@16<=s L0x7fffffffd914,L0x7fffffffd914<s 5631@16,
( -5631)@16<=s L0x7fffffffd916,L0x7fffffffd916<s 5631@16,
( -5631)@16<=s L0x7fffffffd918,L0x7fffffffd918<s 5631@16,
( -5631)@16<=s L0x7fffffffd91a,L0x7fffffffd91a<s 5631@16,
( -5631)@16<=s L0x7fffffffd91c,L0x7fffffffd91c<s 5631@16,
( -5631)@16<=s L0x7fffffffd91e,L0x7fffffffd91e<s 5631@16,
(-11904)@16<=s L0x7fffffffd920,L0x7fffffffd920<s11904@16,
(-11904)@16<=s L0x7fffffffd922,L0x7fffffffd922<s11904@16,
(-11904)@16<=s L0x7fffffffd924,L0x7fffffffd924<s11904@16,
(-11904)@16<=s L0x7fffffffd926,L0x7fffffffd926<s11904@16,
(-11904)@16<=s L0x7fffffffd928,L0x7fffffffd928<s11904@16,
(-11904)@16<=s L0x7fffffffd92a,L0x7fffffffd92a<s11904@16,
(-11904)@16<=s L0x7fffffffd92c,L0x7fffffffd92c<s11904@16,
(-11904)@16<=s L0x7fffffffd92e,L0x7fffffffd92e<s11904@16,
(-11860)@16<=s L0x7fffffffd930,L0x7fffffffd930<s11860@16,
(-11860)@16<=s L0x7fffffffd932,L0x7fffffffd932<s11860@16,
(-11860)@16<=s L0x7fffffffd934,L0x7fffffffd934<s11860@16,
(-11860)@16<=s L0x7fffffffd936,L0x7fffffffd936<s11860@16,
(-11860)@16<=s L0x7fffffffd938,L0x7fffffffd938<s11860@16,
(-11860)@16<=s L0x7fffffffd93a,L0x7fffffffd93a<s11860@16,
(-11860)@16<=s L0x7fffffffd93c,L0x7fffffffd93c<s11860@16,
(-11860)@16<=s L0x7fffffffd93e,L0x7fffffffd93e<s11860@16,
(-12033)@16<=s L0x7fffffffd940,L0x7fffffffd940<s12033@16,
(-12033)@16<=s L0x7fffffffd942,L0x7fffffffd942<s12033@16,
(-12033)@16<=s L0x7fffffffd944,L0x7fffffffd944<s12033@16,
(-12033)@16<=s L0x7fffffffd946,L0x7fffffffd946<s12033@16,
(-12040)@16<=s L0x7fffffffd948,L0x7fffffffd948<s12040@16,
(-12040)@16<=s L0x7fffffffd94a,L0x7fffffffd94a<s12040@16,
(-12033)@16<=s L0x7fffffffd94c,L0x7fffffffd94c<s12033@16,
(-12033)@16<=s L0x7fffffffd94e,L0x7fffffffd94e<s12033@16,
(-11943)@16<=s L0x7fffffffd950,L0x7fffffffd950<s11943@16,
(-11943)@16<=s L0x7fffffffd952,L0x7fffffffd952<s11943@16,
(-11943)@16<=s L0x7fffffffd954,L0x7fffffffd954<s11943@16,
(-11943)@16<=s L0x7fffffffd956,L0x7fffffffd956<s11943@16,
(-11943)@16<=s L0x7fffffffd958,L0x7fffffffd958<s11943@16,
(-11943)@16<=s L0x7fffffffd95a,L0x7fffffffd95a<s11943@16,
(-11943)@16<=s L0x7fffffffd95c,L0x7fffffffd95c<s11943@16,
(-11943)@16<=s L0x7fffffffd95e,L0x7fffffffd95e<s11943@16
] prove with [ cuts [ 51 ] ];


(**************** CUT  57 *****************)

cut true && true;



(* vmovdqa 0x700(%rsi),%ymm4                       #! EA = L0x7fffffffd9e0; Value = 0x0bc3f7c003130a93; PC = 0x55555555cded *)
mov ymm4_0 L0x7fffffffd9e0;
mov ymm4_1 L0x7fffffffd9e2;
mov ymm4_2 L0x7fffffffd9e4;
mov ymm4_3 L0x7fffffffd9e6;
mov ymm4_4 L0x7fffffffd9e8;
mov ymm4_5 L0x7fffffffd9ea;
mov ymm4_6 L0x7fffffffd9ec;
mov ymm4_7 L0x7fffffffd9ee;
mov ymm4_8 L0x7fffffffd9f0;
mov ymm4_9 L0x7fffffffd9f2;
mov ymm4_a L0x7fffffffd9f4;
mov ymm4_b L0x7fffffffd9f6;
mov ymm4_c L0x7fffffffd9f8;
mov ymm4_d L0x7fffffffd9fa;
mov ymm4_e L0x7fffffffd9fc;
mov ymm4_f L0x7fffffffd9fe;
(* vmovdqa 0x720(%rsi),%ymm5                       #! EA = L0x7fffffffda00; Value = 0xfeb00856ee0e0ee2; PC = 0x55555555cdf5 *)
mov ymm5_0 L0x7fffffffda00;
mov ymm5_1 L0x7fffffffda02;
mov ymm5_2 L0x7fffffffda04;
mov ymm5_3 L0x7fffffffda06;
mov ymm5_4 L0x7fffffffda08;
mov ymm5_5 L0x7fffffffda0a;
mov ymm5_6 L0x7fffffffda0c;
mov ymm5_7 L0x7fffffffda0e;
mov ymm5_8 L0x7fffffffda10;
mov ymm5_9 L0x7fffffffda12;
mov ymm5_a L0x7fffffffda14;
mov ymm5_b L0x7fffffffda16;
mov ymm5_c L0x7fffffffda18;
mov ymm5_d L0x7fffffffda1a;
mov ymm5_e L0x7fffffffda1c;
mov ymm5_f L0x7fffffffda1e;
(* vmovdqa 0x740(%rsi),%ymm6                       #! EA = L0x7fffffffda20; Value = 0x1275f771efae0d06; PC = 0x55555555cdfd *)
mov ymm6_0 L0x7fffffffda20;
mov ymm6_1 L0x7fffffffda22;
mov ymm6_2 L0x7fffffffda24;
mov ymm6_3 L0x7fffffffda26;
mov ymm6_4 L0x7fffffffda28;
mov ymm6_5 L0x7fffffffda2a;
mov ymm6_6 L0x7fffffffda2c;
mov ymm6_7 L0x7fffffffda2e;
mov ymm6_8 L0x7fffffffda30;
mov ymm6_9 L0x7fffffffda32;
mov ymm6_a L0x7fffffffda34;
mov ymm6_b L0x7fffffffda36;
mov ymm6_c L0x7fffffffda38;
mov ymm6_d L0x7fffffffda3a;
mov ymm6_e L0x7fffffffda3c;
mov ymm6_f L0x7fffffffda3e;
(* vmovdqa 0x760(%rsi),%ymm7                       #! EA = L0x7fffffffda40; Value = 0xf2550d830ee9f6b5; PC = 0x55555555ce05 *)
mov ymm7_0 L0x7fffffffda40;
mov ymm7_1 L0x7fffffffda42;
mov ymm7_2 L0x7fffffffda44;
mov ymm7_3 L0x7fffffffda46;
mov ymm7_4 L0x7fffffffda48;
mov ymm7_5 L0x7fffffffda4a;
mov ymm7_6 L0x7fffffffda4c;
mov ymm7_7 L0x7fffffffda4e;
mov ymm7_8 L0x7fffffffda50;
mov ymm7_9 L0x7fffffffda52;
mov ymm7_a L0x7fffffffda54;
mov ymm7_b L0x7fffffffda56;
mov ymm7_c L0x7fffffffda58;
mov ymm7_d L0x7fffffffda5a;
mov ymm7_e L0x7fffffffda5c;
mov ymm7_f L0x7fffffffda5e;
(* vmovdqa 0x780(%rsi),%ymm8                       #! EA = L0x7fffffffda60; Value = 0xede2ee87f5411237; PC = 0x55555555ce0d *)
mov ymm8_0 L0x7fffffffda60;
mov ymm8_1 L0x7fffffffda62;
mov ymm8_2 L0x7fffffffda64;
mov ymm8_3 L0x7fffffffda66;
mov ymm8_4 L0x7fffffffda68;
mov ymm8_5 L0x7fffffffda6a;
mov ymm8_6 L0x7fffffffda6c;
mov ymm8_7 L0x7fffffffda6e;
mov ymm8_8 L0x7fffffffda70;
mov ymm8_9 L0x7fffffffda72;
mov ymm8_a L0x7fffffffda74;
mov ymm8_b L0x7fffffffda76;
mov ymm8_c L0x7fffffffda78;
mov ymm8_d L0x7fffffffda7a;
mov ymm8_e L0x7fffffffda7c;
mov ymm8_f L0x7fffffffda7e;
(* vmovdqa 0x7a0(%rsi),%ymm9                       #! EA = L0x7fffffffda80; Value = 0xfeb0f2270912f612; PC = 0x55555555ce15 *)
mov ymm9_0 L0x7fffffffda80;
mov ymm9_1 L0x7fffffffda82;
mov ymm9_2 L0x7fffffffda84;
mov ymm9_3 L0x7fffffffda86;
mov ymm9_4 L0x7fffffffda88;
mov ymm9_5 L0x7fffffffda8a;
mov ymm9_6 L0x7fffffffda8c;
mov ymm9_7 L0x7fffffffda8e;
mov ymm9_8 L0x7fffffffda90;
mov ymm9_9 L0x7fffffffda92;
mov ymm9_a L0x7fffffffda94;
mov ymm9_b L0x7fffffffda96;
mov ymm9_c L0x7fffffffda98;
mov ymm9_d L0x7fffffffda9a;
mov ymm9_e L0x7fffffffda9c;
mov ymm9_f L0x7fffffffda9e;
(* vmovdqa 0x7c0(%rsi),%ymm10                      #! EA = L0x7fffffffdaa0; Value = 0xf5db0e84f50d0b1e; PC = 0x55555555ce1d *)
mov ymm10_0 L0x7fffffffdaa0;
mov ymm10_1 L0x7fffffffdaa2;
mov ymm10_2 L0x7fffffffdaa4;
mov ymm10_3 L0x7fffffffdaa6;
mov ymm10_4 L0x7fffffffdaa8;
mov ymm10_5 L0x7fffffffdaaa;
mov ymm10_6 L0x7fffffffdaac;
mov ymm10_7 L0x7fffffffdaae;
mov ymm10_8 L0x7fffffffdab0;
mov ymm10_9 L0x7fffffffdab2;
mov ymm10_a L0x7fffffffdab4;
mov ymm10_b L0x7fffffffdab6;
mov ymm10_c L0x7fffffffdab8;
mov ymm10_d L0x7fffffffdaba;
mov ymm10_e L0x7fffffffdabc;
mov ymm10_f L0x7fffffffdabe;
(* vmovdqa 0x7e0(%rsi),%ymm11                      #! EA = L0x7fffffffdac0; Value = 0x0dc4ee4afb50fd1e; PC = 0x55555555ce25 *)
mov ymm11_0 L0x7fffffffdac0;
mov ymm11_1 L0x7fffffffdac2;
mov ymm11_2 L0x7fffffffdac4;
mov ymm11_3 L0x7fffffffdac6;
mov ymm11_4 L0x7fffffffdac8;
mov ymm11_5 L0x7fffffffdaca;
mov ymm11_6 L0x7fffffffdacc;
mov ymm11_7 L0x7fffffffdace;
mov ymm11_8 L0x7fffffffdad0;
mov ymm11_9 L0x7fffffffdad2;
mov ymm11_a L0x7fffffffdad4;
mov ymm11_b L0x7fffffffdad6;
mov ymm11_c L0x7fffffffdad8;
mov ymm11_d L0x7fffffffdada;
mov ymm11_e L0x7fffffffdadc;
mov ymm11_f L0x7fffffffdade;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555ce2d *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555ce31 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555ce35 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555ce39 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555ce3d *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555ce42 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555ce47 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555ce4c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vbroadcasti128 0x230(%rdx),%ymm1                #! EA = L0x555555561350; Value = 0x66ae86aedf9f3f6c; PC = 0x55555555ce51 *)
mov ymm1_0 L0x555555561350;
mov ymm1_1 L0x555555561352;
mov ymm1_2 L0x555555561354;
mov ymm1_3 L0x555555561356;
mov ymm1_4 L0x555555561358;
mov ymm1_5 L0x55555556135a;
mov ymm1_6 L0x55555556135c;
mov ymm1_7 L0x55555556135e;
mov ymm1_8 L0x555555561350;
mov ymm1_9 L0x555555561352;
mov ymm1_a L0x555555561354;
mov ymm1_b L0x555555561356;
mov ymm1_c L0x555555561358;
mov ymm1_d L0x55555556135a;
mov ymm1_e L0x55555556135c;
mov ymm1_f L0x55555556135e;
(* vbroadcasti128 0x430(%rdx),%ymm2                #! EA = L0x555555561550; Value = 0xf2ae12aef59ff76c; PC = 0x55555555ce5a *)
mov ymm2_0 L0x555555561550;
mov ymm2_1 L0x555555561552;
mov ymm2_2 L0x555555561554;
mov ymm2_3 L0x555555561556;
mov ymm2_4 L0x555555561558;
mov ymm2_5 L0x55555556155a;
mov ymm2_6 L0x55555556155c;
mov ymm2_7 L0x55555556155e;
mov ymm2_8 L0x555555561550;
mov ymm2_9 L0x555555561552;
mov ymm2_a L0x555555561554;
mov ymm2_b L0x555555561556;
mov ymm2_c L0x555555561558;
mov ymm2_d L0x55555556155a;
mov ymm2_e L0x55555556155c;
mov ymm2_f L0x55555556155e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ce63 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ce68 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm10                      #! PC = 0x55555555ce6d *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555ce71 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ce75 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555ce79 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vbroadcasti128 0x220(%rdx),%ymm1                #! EA = L0x555555561340; Value = 0x4e66b63f84a1b269; PC = 0x55555555ce7d *)
mov ymm1_0 L0x555555561340;
mov ymm1_1 L0x555555561342;
mov ymm1_2 L0x555555561344;
mov ymm1_3 L0x555555561346;
mov ymm1_4 L0x555555561348;
mov ymm1_5 L0x55555556134a;
mov ymm1_6 L0x55555556134c;
mov ymm1_7 L0x55555556134e;
mov ymm1_8 L0x555555561340;
mov ymm1_9 L0x555555561342;
mov ymm1_a L0x555555561344;
mov ymm1_b L0x555555561346;
mov ymm1_c L0x555555561348;
mov ymm1_d L0x55555556134a;
mov ymm1_e L0x55555556134c;
mov ymm1_f L0x55555556134e;
(* vbroadcasti128 0x420(%rdx),%ymm2                #! EA = L0x555555561540; Value = 0x0a660c3feea1ec69; PC = 0x55555555ce86 *)
mov ymm2_0 L0x555555561540;
mov ymm2_1 L0x555555561542;
mov ymm2_2 L0x555555561544;
mov ymm2_3 L0x555555561546;
mov ymm2_4 L0x555555561548;
mov ymm2_5 L0x55555556154a;
mov ymm2_6 L0x55555556154c;
mov ymm2_7 L0x55555556154e;
mov ymm2_8 L0x555555561540;
mov ymm2_9 L0x555555561542;
mov ymm2_a L0x555555561544;
mov ymm2_b L0x555555561546;
mov ymm2_c L0x555555561548;
mov ymm2_d L0x55555556154a;
mov ymm2_e L0x55555556154c;
mov ymm2_f L0x55555556154e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555ce8f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ce94 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555ce99 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555ce9d *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555cea1 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555cea5 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vbroadcasti128 0x210(%rdx),%ymm1                #! EA = L0x555555561330; Value = 0xe75681a18b7ded43; PC = 0x55555555cea9 *)
mov ymm1_0 L0x555555561330;
mov ymm1_1 L0x555555561332;
mov ymm1_2 L0x555555561334;
mov ymm1_3 L0x555555561336;
mov ymm1_4 L0x555555561338;
mov ymm1_5 L0x55555556133a;
mov ymm1_6 L0x55555556133c;
mov ymm1_7 L0x55555556133e;
mov ymm1_8 L0x555555561330;
mov ymm1_9 L0x555555561332;
mov ymm1_a L0x555555561334;
mov ymm1_b L0x555555561336;
mov ymm1_c L0x555555561338;
mov ymm1_d L0x55555556133a;
mov ymm1_e L0x55555556133c;
mov ymm1_f L0x55555556133e;
(* vbroadcasti128 0x410(%rdx),%ymm2                #! EA = L0x555555561530; Value = 0x0356eba10d7deb43; PC = 0x55555555ceb2 *)
mov ymm2_0 L0x555555561530;
mov ymm2_1 L0x555555561532;
mov ymm2_2 L0x555555561534;
mov ymm2_3 L0x555555561536;
mov ymm2_4 L0x555555561538;
mov ymm2_5 L0x55555556153a;
mov ymm2_6 L0x55555556153c;
mov ymm2_7 L0x55555556153e;
mov ymm2_8 L0x555555561530;
mov ymm2_9 L0x555555561532;
mov ymm2_a L0x555555561534;
mov ymm2_b L0x555555561536;
mov ymm2_c L0x555555561538;
mov ymm2_d L0x55555556153a;
mov ymm2_e L0x55555556153c;
mov ymm2_f L0x55555556153e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cebb *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555cec0 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555cec5 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555cec9 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555cecd *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555ced1 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vbroadcasti128 0x200(%rdx),%ymm1                #! EA = L0x555555561320; Value = 0x0ff3b3942cb6ffc3; PC = 0x55555555ced6 *)
mov ymm1_0 L0x555555561320;
mov ymm1_1 L0x555555561322;
mov ymm1_2 L0x555555561324;
mov ymm1_3 L0x555555561326;
mov ymm1_4 L0x555555561328;
mov ymm1_5 L0x55555556132a;
mov ymm1_6 L0x55555556132c;
mov ymm1_7 L0x55555556132e;
mov ymm1_8 L0x555555561320;
mov ymm1_9 L0x555555561322;
mov ymm1_a L0x555555561324;
mov ymm1_b L0x555555561326;
mov ymm1_c L0x555555561328;
mov ymm1_d L0x55555556132a;
mov ymm1_e L0x55555556132c;
mov ymm1_f L0x55555556132e;
(* vbroadcasti128 0x400(%rdx),%ymm2                #! EA = L0x555555561520; Value = 0xedf3fb9408b6fdc3; PC = 0x55555555cedf *)
mov ymm2_0 L0x555555561520;
mov ymm2_1 L0x555555561522;
mov ymm2_2 L0x555555561524;
mov ymm2_3 L0x555555561526;
mov ymm2_4 L0x555555561528;
mov ymm2_5 L0x55555556152a;
mov ymm2_6 L0x55555556152c;
mov ymm2_7 L0x55555556152e;
mov ymm2_8 L0x555555561520;
mov ymm2_9 L0x555555561522;
mov ymm2_a L0x555555561524;
mov ymm2_b L0x555555561526;
mov ymm2_c L0x555555561528;
mov ymm2_d L0x55555556152a;
mov ymm2_e L0x55555556152c;
mov ymm2_f L0x55555556152e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cee8 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555ceed *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555cef2 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555cef6 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555cefa *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555cefe *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555cf03 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555cf08 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm3,%ymm10                  #! PC = 0x55555555cf0d *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm3,%ymm5                   #! PC = 0x55555555cf11 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555cf15 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555cf1a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm4,%ymm3                   #! PC = 0x55555555cf1f *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm4,%ymm7                   #! PC = 0x55555555cf23 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555cf27 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555cf2c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm6,%ymm4                   #! PC = 0x55555555cf31 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm6,%ymm9                   #! PC = 0x55555555cf36 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555cf3b *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555cf40 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm8,%ymm6                  #! PC = 0x55555555cf45 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm8,%ymm11                 #! PC = 0x55555555cf4a *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm10,%ymm8                       #! PC = 0x55555555cf4f *)
add ymm8_0 ymm10_0 ymm5_0;
add ymm8_1 ymm10_1 ymm5_1;
add ymm8_2 ymm10_2 ymm5_2;
add ymm8_3 ymm10_3 ymm5_3;
add ymm8_4 ymm10_4 ymm5_4;
add ymm8_5 ymm10_5 ymm5_5;
add ymm8_6 ymm10_6 ymm5_6;
add ymm8_7 ymm10_7 ymm5_7;
add ymm8_8 ymm10_8 ymm5_8;
add ymm8_9 ymm10_9 ymm5_9;
add ymm8_a ymm10_a ymm5_a;
add ymm8_b ymm10_b ymm5_b;
add ymm8_c ymm10_c ymm5_c;
add ymm8_d ymm10_d ymm5_d;
add ymm8_e ymm10_e ymm5_e;
add ymm8_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555cf53 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm7,%ymm3,%ymm10                       #! PC = 0x55555555cf57 *)
add ymm10_0 ymm3_0 ymm7_0;
add ymm10_1 ymm3_1 ymm7_1;
add ymm10_2 ymm3_2 ymm7_2;
add ymm10_3 ymm3_3 ymm7_3;
add ymm10_4 ymm3_4 ymm7_4;
add ymm10_5 ymm3_5 ymm7_5;
add ymm10_6 ymm3_6 ymm7_6;
add ymm10_7 ymm3_7 ymm7_7;
add ymm10_8 ymm3_8 ymm7_8;
add ymm10_9 ymm3_9 ymm7_9;
add ymm10_a ymm3_a ymm7_a;
add ymm10_b ymm3_b ymm7_b;
add ymm10_c ymm3_c ymm7_c;
add ymm10_d ymm3_d ymm7_d;
add ymm10_e ymm3_e ymm7_e;
add ymm10_f ymm3_f ymm7_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555cf5b *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpaddw %ymm9,%ymm4,%ymm3                        #! PC = 0x55555555cf5f *)
add ymm3_0 ymm4_0 ymm9_0;
add ymm3_1 ymm4_1 ymm9_1;
add ymm3_2 ymm4_2 ymm9_2;
add ymm3_3 ymm4_3 ymm9_3;
add ymm3_4 ymm4_4 ymm9_4;
add ymm3_5 ymm4_5 ymm9_5;
add ymm3_6 ymm4_6 ymm9_6;
add ymm3_7 ymm4_7 ymm9_7;
add ymm3_8 ymm4_8 ymm9_8;
add ymm3_9 ymm4_9 ymm9_9;
add ymm3_a ymm4_a ymm9_a;
add ymm3_b ymm4_b ymm9_b;
add ymm3_c ymm4_c ymm9_c;
add ymm3_d ymm4_d ymm9_d;
add ymm3_e ymm4_e ymm9_e;
add ymm3_f ymm4_f ymm9_f;
(* vpsubw %ymm9,%ymm4,%ymm9                        #! PC = 0x55555555cf64 *)
sub ymm9_0 ymm4_0 ymm9_0;
sub ymm9_1 ymm4_1 ymm9_1;
sub ymm9_2 ymm4_2 ymm9_2;
sub ymm9_3 ymm4_3 ymm9_3;
sub ymm9_4 ymm4_4 ymm9_4;
sub ymm9_5 ymm4_5 ymm9_5;
sub ymm9_6 ymm4_6 ymm9_6;
sub ymm9_7 ymm4_7 ymm9_7;
sub ymm9_8 ymm4_8 ymm9_8;
sub ymm9_9 ymm4_9 ymm9_9;
sub ymm9_a ymm4_a ymm9_a;
sub ymm9_b ymm4_b ymm9_b;
sub ymm9_c ymm4_c ymm9_c;
sub ymm9_d ymm4_d ymm9_d;
sub ymm9_e ymm4_e ymm9_e;
sub ymm9_f ymm4_f ymm9_f;
(* vpaddw %ymm11,%ymm6,%ymm4                       #! PC = 0x55555555cf69 *)
add ymm4_0 ymm6_0 ymm11_0;
add ymm4_1 ymm6_1 ymm11_1;
add ymm4_2 ymm6_2 ymm11_2;
add ymm4_3 ymm6_3 ymm11_3;
add ymm4_4 ymm6_4 ymm11_4;
add ymm4_5 ymm6_5 ymm11_5;
add ymm4_6 ymm6_6 ymm11_6;
add ymm4_7 ymm6_7 ymm11_7;
add ymm4_8 ymm6_8 ymm11_8;
add ymm4_9 ymm6_9 ymm11_9;
add ymm4_a ymm6_a ymm11_a;
add ymm4_b ymm6_b ymm11_b;
add ymm4_c ymm6_c ymm11_c;
add ymm4_d ymm6_d ymm11_d;
add ymm4_e ymm6_e ymm11_e;
add ymm4_f ymm6_f ymm11_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555cf6e *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vpbroadcastq 0x198(%rdx),%ymm1                  #! EA = L0x5555555612b8; Value = 0x7a0381f1eed60200; PC = 0x55555555cf73 *)
mov ymm1_0 L0x5555555612b8;
mov ymm1_1 L0x5555555612ba;
mov ymm1_2 L0x5555555612bc;
mov ymm1_3 L0x5555555612be;
mov ymm1_4 L0x5555555612b8;
mov ymm1_5 L0x5555555612ba;
mov ymm1_6 L0x5555555612bc;
mov ymm1_7 L0x5555555612be;
mov ymm1_8 L0x5555555612b8;
mov ymm1_9 L0x5555555612ba;
mov ymm1_a L0x5555555612bc;
mov ymm1_b L0x5555555612be;
mov ymm1_c L0x5555555612b8;
mov ymm1_d L0x5555555612ba;
mov ymm1_e L0x5555555612bc;
mov ymm1_f L0x5555555612be;
(* vpbroadcastq 0x398(%rdx),%ymm2                  #! EA = L0x5555555614b8; Value = 0xf8030bf10ad60200; PC = 0x55555555cf7c *)
mov ymm2_0 L0x5555555614b8;
mov ymm2_1 L0x5555555614ba;
mov ymm2_2 L0x5555555614bc;
mov ymm2_3 L0x5555555614be;
mov ymm2_4 L0x5555555614b8;
mov ymm2_5 L0x5555555614ba;
mov ymm2_6 L0x5555555614bc;
mov ymm2_7 L0x5555555614be;
mov ymm2_8 L0x5555555614b8;
mov ymm2_9 L0x5555555614ba;
mov ymm2_a L0x5555555614bc;
mov ymm2_b L0x5555555614be;
mov ymm2_c L0x5555555614b8;
mov ymm2_d L0x5555555614ba;
mov ymm2_e L0x5555555614bc;
mov ymm2_f L0x5555555614be;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cf85 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555cf8a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm6                       #! PC = 0x55555555cf8f *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555cf93 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555cf97 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555cf9b *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpbroadcastq 0x190(%rdx),%ymm1                  #! EA = L0x5555555612b0; Value = 0x095b104f72df44a3; PC = 0x55555555cf9f *)
mov ymm1_0 L0x5555555612b0;
mov ymm1_1 L0x5555555612b2;
mov ymm1_2 L0x5555555612b4;
mov ymm1_3 L0x5555555612b6;
mov ymm1_4 L0x5555555612b0;
mov ymm1_5 L0x5555555612b2;
mov ymm1_6 L0x5555555612b4;
mov ymm1_7 L0x5555555612b6;
mov ymm1_8 L0x5555555612b0;
mov ymm1_9 L0x5555555612b2;
mov ymm1_a L0x5555555612b4;
mov ymm1_b L0x5555555612b6;
mov ymm1_c L0x5555555612b0;
mov ymm1_d L0x5555555612b2;
mov ymm1_e L0x5555555612b4;
mov ymm1_f L0x5555555612b6;
(* vpbroadcastq 0x390(%rdx),%ymm2                  #! EA = L0x5555555614b0; Value = 0xf75b064f08df02a3; PC = 0x55555555cfa8 *)
mov ymm2_0 L0x5555555614b0;
mov ymm2_1 L0x5555555614b2;
mov ymm2_2 L0x5555555614b4;
mov ymm2_3 L0x5555555614b6;
mov ymm2_4 L0x5555555614b0;
mov ymm2_5 L0x5555555614b2;
mov ymm2_6 L0x5555555614b4;
mov ymm2_7 L0x5555555614b6;
mov ymm2_8 L0x5555555614b0;
mov ymm2_9 L0x5555555614b2;
mov ymm2_a L0x5555555614b4;
mov ymm2_b L0x5555555614b6;
mov ymm2_c L0x5555555614b0;
mov ymm2_d L0x5555555614b2;
mov ymm2_e L0x5555555614b4;
mov ymm2_f L0x5555555614b6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cfb1 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555cfb6 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm6                       #! PC = 0x55555555cfbb *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555cfbf *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555cfc3 *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555cfc7 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpbroadcastq 0x188(%rdx),%ymm1                  #! EA = L0x5555555612a8; Value = 0x2d238371d04a667e; PC = 0x55555555cfcb *)
mov ymm1_0 L0x5555555612a8;
mov ymm1_1 L0x5555555612aa;
mov ymm1_2 L0x5555555612ac;
mov ymm1_3 L0x5555555612ae;
mov ymm1_4 L0x5555555612a8;
mov ymm1_5 L0x5555555612aa;
mov ymm1_6 L0x5555555612ac;
mov ymm1_7 L0x5555555612ae;
mov ymm1_8 L0x5555555612a8;
mov ymm1_9 L0x5555555612aa;
mov ymm1_a L0x5555555612ac;
mov ymm1_b L0x5555555612ae;
mov ymm1_c L0x5555555612a8;
mov ymm1_d L0x5555555612aa;
mov ymm1_e L0x5555555612ac;
mov ymm1_f L0x5555555612ae;
(* vpbroadcastq 0x388(%rdx),%ymm2                  #! EA = L0x5555555614a8; Value = 0xeb230d71f44a127e; PC = 0x55555555cfd4 *)
mov ymm2_0 L0x5555555614a8;
mov ymm2_1 L0x5555555614aa;
mov ymm2_2 L0x5555555614ac;
mov ymm2_3 L0x5555555614ae;
mov ymm2_4 L0x5555555614a8;
mov ymm2_5 L0x5555555614aa;
mov ymm2_6 L0x5555555614ac;
mov ymm2_7 L0x5555555614ae;
mov ymm2_8 L0x5555555614a8;
mov ymm2_9 L0x5555555614aa;
mov ymm2_a L0x5555555614ac;
mov ymm2_b L0x5555555614ae;
mov ymm2_c L0x5555555614a8;
mov ymm2_d L0x5555555614aa;
mov ymm2_e L0x5555555614ac;
mov ymm2_f L0x5555555614ae;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555cfdd *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555cfe2 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm6                       #! PC = 0x55555555cfe7 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555cfeb *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555cfef *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555cff3 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpbroadcastq 0x180(%rdx),%ymm1                  #! EA = L0x5555555612a0; Value = 0x9f8203c9bf1afd9f; PC = 0x55555555cff8 *)
mov ymm1_0 L0x5555555612a0;
mov ymm1_1 L0x5555555612a2;
mov ymm1_2 L0x5555555612a4;
mov ymm1_3 L0x5555555612a6;
mov ymm1_4 L0x5555555612a0;
mov ymm1_5 L0x5555555612a2;
mov ymm1_6 L0x5555555612a4;
mov ymm1_7 L0x5555555612a6;
mov ymm1_8 L0x5555555612a0;
mov ymm1_9 L0x5555555612a2;
mov ymm1_a L0x5555555612a4;
mov ymm1_b L0x5555555612a6;
mov ymm1_c L0x5555555612a0;
mov ymm1_d L0x5555555612a2;
mov ymm1_e L0x5555555612a4;
mov ymm1_f L0x5555555612a6;
(* vpbroadcastq 0x380(%rdx),%ymm2                  #! EA = L0x5555555614a0; Value = 0xf382fdc9031a139f; PC = 0x55555555d001 *)
mov ymm2_0 L0x5555555614a0;
mov ymm2_1 L0x5555555614a2;
mov ymm2_2 L0x5555555614a4;
mov ymm2_3 L0x5555555614a6;
mov ymm2_4 L0x5555555614a0;
mov ymm2_5 L0x5555555614a2;
mov ymm2_6 L0x5555555614a4;
mov ymm2_7 L0x5555555614a6;
mov ymm2_8 L0x5555555614a0;
mov ymm2_9 L0x5555555614a2;
mov ymm2_a L0x5555555614a4;
mov ymm2_b L0x5555555614a6;
mov ymm2_c L0x5555555614a0;
mov ymm2_d L0x5555555614a2;
mov ymm2_e L0x5555555614a4;
mov ymm2_f L0x5555555614a6;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555d00a *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555d00f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm6                      #! PC = 0x55555555d014 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d018 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555d01c *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm11,%ymm6,%ymm11                      #! PC = 0x55555555d020 *)
sub ymm11_0 ymm6_0 ymm11_0;
sub ymm11_1 ymm6_1 ymm11_1;
sub ymm11_2 ymm6_2 ymm11_2;
sub ymm11_3 ymm6_3 ymm11_3;
sub ymm11_4 ymm6_4 ymm11_4;
sub ymm11_5 ymm6_5 ymm11_5;
sub ymm11_6 ymm6_6 ymm11_6;
sub ymm11_7 ymm6_7 ymm11_7;
sub ymm11_8 ymm6_8 ymm11_8;
sub ymm11_9 ymm6_9 ymm11_9;
sub ymm11_a ymm6_a ymm11_a;
sub ymm11_b ymm6_b ymm11_b;
sub ymm11_c ymm6_c ymm11_c;
sub ymm11_d ymm6_d ymm11_d;
sub ymm11_e ymm6_e ymm11_e;
sub ymm11_f ymm6_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm1                        #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555d025 *)
mov ymm1_0 L0x5555555611a0;
mov ymm1_1 L0x5555555611a2;
mov ymm1_2 L0x5555555611a4;
mov ymm1_3 L0x5555555611a6;
mov ymm1_4 L0x5555555611a8;
mov ymm1_5 L0x5555555611aa;
mov ymm1_6 L0x5555555611ac;
mov ymm1_7 L0x5555555611ae;
mov ymm1_8 L0x5555555611b0;
mov ymm1_9 L0x5555555611b2;
mov ymm1_a L0x5555555611b4;
mov ymm1_b L0x5555555611b6;
mov ymm1_c L0x5555555611b8;
mov ymm1_d L0x5555555611ba;
mov ymm1_e L0x5555555611bc;
mov ymm1_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm2                        #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555d02d *)
mov ymm2_0 L0x5555555611c0;
mov ymm2_1 L0x5555555611c2;
mov ymm2_2 L0x5555555611c4;
mov ymm2_3 L0x5555555611c6;
mov ymm2_4 L0x5555555611c8;
mov ymm2_5 L0x5555555611ca;
mov ymm2_6 L0x5555555611cc;
mov ymm2_7 L0x5555555611ce;
mov ymm2_8 L0x5555555611d0;
mov ymm2_9 L0x5555555611d2;
mov ymm2_a L0x5555555611d4;
mov ymm2_b L0x5555555611d6;
mov ymm2_c L0x5555555611d8;
mov ymm2_d L0x5555555611da;
mov ymm2_e L0x5555555611dc;
mov ymm2_f L0x5555555611de;
(* vpmullw %ymm1,%ymm8,%ymm6                       #! PC = 0x55555555d035 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555d039 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555d03d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm8,%ymm8                        #! PC = 0x55555555d041 *)
sub ymm8_0 ymm8_0 ymm6_0;
sub ymm8_1 ymm8_1 ymm6_1;
sub ymm8_2 ymm8_2 ymm6_2;
sub ymm8_3 ymm8_3 ymm6_3;
sub ymm8_4 ymm8_4 ymm6_4;
sub ymm8_5 ymm8_5 ymm6_5;
sub ymm8_6 ymm8_6 ymm6_6;
sub ymm8_7 ymm8_7 ymm6_7;
sub ymm8_8 ymm8_8 ymm6_8;
sub ymm8_9 ymm8_9 ymm6_9;
sub ymm8_a ymm8_a ymm6_a;
sub ymm8_b ymm8_b ymm6_b;
sub ymm8_c ymm8_c ymm6_c;
sub ymm8_d ymm8_d ymm6_d;
sub ymm8_e ymm8_e ymm6_e;
sub ymm8_f ymm8_f ymm6_f;
(* vpmullw %ymm1,%ymm10,%ymm6                      #! PC = 0x55555555d045 *)
smull mulHymm10_0 mulL_0 ymm1_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm1_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm1_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm1_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm1_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm1_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm1_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm1_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm1_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm1_9 ymm10_9;
smull mulHymm10_a mulL_a ymm1_a ymm10_a;
smull mulHymm10_b mulL_b ymm1_b ymm10_b;
smull mulHymm10_c mulL_c ymm1_c ymm10_c;
smull mulHymm10_d mulL_d ymm1_d ymm10_d;
smull mulHymm10_e mulL_e ymm1_e ymm10_e;
smull mulHymm10_f mulL_f ymm1_f ymm10_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm10,%ymm10                     #! PC = 0x55555555d049 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm2_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm2_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm2_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm2_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm2_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm2_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm2_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm2_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm2_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm2_9;
smull mulH_a mulLymm10_a ymm10_a ymm2_a;
smull mulH_b mulLymm10_b ymm10_b ymm2_b;
smull mulH_c mulLymm10_c ymm10_c ymm2_c;
smull mulH_d mulLymm10_d ymm10_d ymm2_d;
smull mulH_e mulLymm10_e ymm10_e ymm2_e;
smull mulH_f mulLymm10_f ymm10_f ymm2_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555d04d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm10,%ymm10                      #! PC = 0x55555555d051 *)
sub ymm10_0 ymm10_0 ymm6_0;
sub ymm10_1 ymm10_1 ymm6_1;
sub ymm10_2 ymm10_2 ymm6_2;
sub ymm10_3 ymm10_3 ymm6_3;
sub ymm10_4 ymm10_4 ymm6_4;
sub ymm10_5 ymm10_5 ymm6_5;
sub ymm10_6 ymm10_6 ymm6_6;
sub ymm10_7 ymm10_7 ymm6_7;
sub ymm10_8 ymm10_8 ymm6_8;
sub ymm10_9 ymm10_9 ymm6_9;
sub ymm10_a ymm10_a ymm6_a;
sub ymm10_b ymm10_b ymm6_b;
sub ymm10_c ymm10_c ymm6_c;
sub ymm10_d ymm10_d ymm6_d;
sub ymm10_e ymm10_e ymm6_e;
sub ymm10_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm3,%ymm6                       #! PC = 0x55555555d055 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555d059 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555d05d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm3,%ymm3                        #! PC = 0x55555555d061 *)
sub ymm3_0 ymm3_0 ymm6_0;
sub ymm3_1 ymm3_1 ymm6_1;
sub ymm3_2 ymm3_2 ymm6_2;
sub ymm3_3 ymm3_3 ymm6_3;
sub ymm3_4 ymm3_4 ymm6_4;
sub ymm3_5 ymm3_5 ymm6_5;
sub ymm3_6 ymm3_6 ymm6_6;
sub ymm3_7 ymm3_7 ymm6_7;
sub ymm3_8 ymm3_8 ymm6_8;
sub ymm3_9 ymm3_9 ymm6_9;
sub ymm3_a ymm3_a ymm6_a;
sub ymm3_b ymm3_b ymm6_b;
sub ymm3_c ymm3_c ymm6_c;
sub ymm3_d ymm3_d ymm6_d;
sub ymm3_e ymm3_e ymm6_e;
sub ymm3_f ymm3_f ymm6_f;
(* vpmullw %ymm1,%ymm4,%ymm6                       #! PC = 0x55555555d065 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555d069 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555d06d *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpsubw %ymm6,%ymm4,%ymm4                        #! PC = 0x55555555d071 *)
sub ymm4_0 ymm4_0 ymm6_0;
sub ymm4_1 ymm4_1 ymm6_1;
sub ymm4_2 ymm4_2 ymm6_2;
sub ymm4_3 ymm4_3 ymm6_3;
sub ymm4_4 ymm4_4 ymm6_4;
sub ymm4_5 ymm4_5 ymm6_5;
sub ymm4_6 ymm4_6 ymm6_6;
sub ymm4_7 ymm4_7 ymm6_7;
sub ymm4_8 ymm4_8 ymm6_8;
sub ymm4_9 ymm4_9 ymm6_9;
sub ymm4_a ymm4_a ymm6_a;
sub ymm4_b ymm4_b ymm6_b;
sub ymm4_c ymm4_c ymm6_c;
sub ymm4_d ymm4_d ymm6_d;
sub ymm4_e ymm4_e ymm6_e;
sub ymm4_f ymm4_f ymm6_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555d075 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555d07a *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm8,%ymm6                   #! PC = 0x55555555d07f *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm8,%ymm5                   #! PC = 0x55555555d083 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555d087 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555d08c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm10,%ymm8                  #! PC = 0x55555555d091 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm10,%ymm7                  #! PC = 0x55555555d095 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm3,%ymm3                      #! PC = 0x55555555d099 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm3_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm3_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm3_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm3_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm3_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm3_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm3_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm3_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm3_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm3_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm3_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm3_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555d09e *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm3,%ymm10                  #! PC = 0x55555555d0a3 *)
mov lqdq_0 ymm3_0;
mov lqdq_1 ymm3_1;
mov lqdq_2 ymm3_2;
mov lqdq_3 ymm3_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm3_8;
mov lqdq_9 ymm3_9;
mov lqdq_a ymm3_a;
mov lqdq_b ymm3_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm10_0 lqdq_0;
mov ymm10_1 lqdq_1;
mov ymm10_2 lqdq_2;
mov ymm10_3 lqdq_3;
mov ymm10_4 lqdq_4;
mov ymm10_5 lqdq_5;
mov ymm10_6 lqdq_6;
mov ymm10_7 lqdq_7;
mov ymm10_8 lqdq_8;
mov ymm10_9 lqdq_9;
mov ymm10_a lqdq_a;
mov ymm10_b lqdq_b;
mov ymm10_c lqdq_c;
mov ymm10_d lqdq_d;
mov ymm10_e lqdq_e;
mov ymm10_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm3,%ymm9                   #! PC = 0x55555555d0a8 *)
mov hqdq_0 ymm3_4;
mov hqdq_1 ymm3_5;
mov hqdq_2 ymm3_6;
mov hqdq_3 ymm3_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm3_c;
mov hqdq_9 ymm3_d;
mov hqdq_a ymm3_e;
mov hqdq_b ymm3_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555d0ad *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555d0b2 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm4,%ymm3                  #! PC = 0x55555555d0b7 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm4,%ymm11                 #! PC = 0x55555555d0bc *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vpaddw %ymm5,%ymm6,%ymm4                        #! PC = 0x55555555d0c1 *)
add ymm4_0 ymm6_0 ymm5_0;
add ymm4_1 ymm6_1 ymm5_1;
add ymm4_2 ymm6_2 ymm5_2;
add ymm4_3 ymm6_3 ymm5_3;
add ymm4_4 ymm6_4 ymm5_4;
add ymm4_5 ymm6_5 ymm5_5;
add ymm4_6 ymm6_6 ymm5_6;
add ymm4_7 ymm6_7 ymm5_7;
add ymm4_8 ymm6_8 ymm5_8;
add ymm4_9 ymm6_9 ymm5_9;
add ymm4_a ymm6_a ymm5_a;
add ymm4_b ymm6_b ymm5_b;
add ymm4_c ymm6_c ymm5_c;
add ymm4_d ymm6_d ymm5_d;
add ymm4_e ymm6_e ymm5_e;
add ymm4_f ymm6_f ymm5_f;
(* vpsubw %ymm5,%ymm6,%ymm5                        #! PC = 0x55555555d0c5 *)
sub ymm5_0 ymm6_0 ymm5_0;
sub ymm5_1 ymm6_1 ymm5_1;
sub ymm5_2 ymm6_2 ymm5_2;
sub ymm5_3 ymm6_3 ymm5_3;
sub ymm5_4 ymm6_4 ymm5_4;
sub ymm5_5 ymm6_5 ymm5_5;
sub ymm5_6 ymm6_6 ymm5_6;
sub ymm5_7 ymm6_7 ymm5_7;
sub ymm5_8 ymm6_8 ymm5_8;
sub ymm5_9 ymm6_9 ymm5_9;
sub ymm5_a ymm6_a ymm5_a;
sub ymm5_b ymm6_b ymm5_b;
sub ymm5_c ymm6_c ymm5_c;
sub ymm5_d ymm6_d ymm5_d;
sub ymm5_e ymm6_e ymm5_e;
sub ymm5_f ymm6_f ymm5_f;
(* vpaddw %ymm7,%ymm8,%ymm6                        #! PC = 0x55555555d0c9 *)
add ymm6_0 ymm8_0 ymm7_0;
add ymm6_1 ymm8_1 ymm7_1;
add ymm6_2 ymm8_2 ymm7_2;
add ymm6_3 ymm8_3 ymm7_3;
add ymm6_4 ymm8_4 ymm7_4;
add ymm6_5 ymm8_5 ymm7_5;
add ymm6_6 ymm8_6 ymm7_6;
add ymm6_7 ymm8_7 ymm7_7;
add ymm6_8 ymm8_8 ymm7_8;
add ymm6_9 ymm8_9 ymm7_9;
add ymm6_a ymm8_a ymm7_a;
add ymm6_b ymm8_b ymm7_b;
add ymm6_c ymm8_c ymm7_c;
add ymm6_d ymm8_d ymm7_d;
add ymm6_e ymm8_e ymm7_e;
add ymm6_f ymm8_f ymm7_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555d0cd *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpaddw %ymm9,%ymm10,%ymm8                       #! PC = 0x55555555d0d1 *)
add ymm8_0 ymm10_0 ymm9_0;
add ymm8_1 ymm10_1 ymm9_1;
add ymm8_2 ymm10_2 ymm9_2;
add ymm8_3 ymm10_3 ymm9_3;
add ymm8_4 ymm10_4 ymm9_4;
add ymm8_5 ymm10_5 ymm9_5;
add ymm8_6 ymm10_6 ymm9_6;
add ymm8_7 ymm10_7 ymm9_7;
add ymm8_8 ymm10_8 ymm9_8;
add ymm8_9 ymm10_9 ymm9_9;
add ymm8_a ymm10_a ymm9_a;
add ymm8_b ymm10_b ymm9_b;
add ymm8_c ymm10_c ymm9_c;
add ymm8_d ymm10_d ymm9_d;
add ymm8_e ymm10_e ymm9_e;
add ymm8_f ymm10_f ymm9_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555d0d6 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpaddw %ymm11,%ymm3,%ymm10                      #! PC = 0x55555555d0db *)
add ymm10_0 ymm3_0 ymm11_0;
add ymm10_1 ymm3_1 ymm11_1;
add ymm10_2 ymm3_2 ymm11_2;
add ymm10_3 ymm3_3 ymm11_3;
add ymm10_4 ymm3_4 ymm11_4;
add ymm10_5 ymm3_5 ymm11_5;
add ymm10_6 ymm3_6 ymm11_6;
add ymm10_7 ymm3_7 ymm11_7;
add ymm10_8 ymm3_8 ymm11_8;
add ymm10_9 ymm3_9 ymm11_9;
add ymm10_a ymm3_a ymm11_a;
add ymm10_b ymm3_b ymm11_b;
add ymm10_c ymm3_c ymm11_c;
add ymm10_d ymm3_d ymm11_d;
add ymm10_e ymm3_e ymm11_e;
add ymm10_f ymm3_f ymm11_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555d0e0 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpbroadcastd 0x14c(%rdx),%ymm1                  #! EA = L0x55555556126c; Value = 0xdf07cfa6a1de5804; PC = 0x55555555d0e5 *)
mov ymm1_0 L0x55555556126c;
mov ymm1_1 L0x55555556126e;
mov ymm1_2 L0x55555556126c;
mov ymm1_3 L0x55555556126e;
mov ymm1_4 L0x55555556126c;
mov ymm1_5 L0x55555556126e;
mov ymm1_6 L0x55555556126c;
mov ymm1_7 L0x55555556126e;
mov ymm1_8 L0x55555556126c;
mov ymm1_9 L0x55555556126e;
mov ymm1_a L0x55555556126c;
mov ymm1_b L0x55555556126e;
mov ymm1_c L0x55555556126c;
mov ymm1_d L0x55555556126e;
mov ymm1_e L0x55555556126c;
mov ymm1_f L0x55555556126e;
(* vpbroadcastd 0x34c(%rdx),%ymm2                  #! EA = L0x55555556146c; Value = 0x05070ba60dde0004; PC = 0x55555555d0ee *)
mov ymm2_0 L0x55555556146c;
mov ymm2_1 L0x55555556146e;
mov ymm2_2 L0x55555556146c;
mov ymm2_3 L0x55555556146e;
mov ymm2_4 L0x55555556146c;
mov ymm2_5 L0x55555556146e;
mov ymm2_6 L0x55555556146c;
mov ymm2_7 L0x55555556146e;
mov ymm2_8 L0x55555556146c;
mov ymm2_9 L0x55555556146e;
mov ymm2_a L0x55555556146c;
mov ymm2_b L0x55555556146e;
mov ymm2_c L0x55555556146c;
mov ymm2_d L0x55555556146e;
mov ymm2_e L0x55555556146c;
mov ymm2_f L0x55555556146e;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555d0f7 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555d0fc *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm5,%ymm3                       #! PC = 0x55555555d101 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555d105 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555d109 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555d10d *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpbroadcastd 0x148(%rdx),%ymm1                  #! EA = L0x555555561268; Value = 0xa1de58045d04090c; PC = 0x55555555d111 *)
mov ymm1_0 L0x555555561268;
mov ymm1_1 L0x55555556126a;
mov ymm1_2 L0x555555561268;
mov ymm1_3 L0x55555556126a;
mov ymm1_4 L0x555555561268;
mov ymm1_5 L0x55555556126a;
mov ymm1_6 L0x555555561268;
mov ymm1_7 L0x55555556126a;
mov ymm1_8 L0x555555561268;
mov ymm1_9 L0x55555556126a;
mov ymm1_a L0x555555561268;
mov ymm1_b L0x55555556126a;
mov ymm1_c L0x555555561268;
mov ymm1_d L0x55555556126a;
mov ymm1_e L0x555555561268;
mov ymm1_f L0x55555556126a;
(* vpbroadcastd 0x348(%rdx),%ymm2                  #! EA = L0x555555561468; Value = 0x0dde00040504010c; PC = 0x55555555d11a *)
mov ymm2_0 L0x555555561468;
mov ymm2_1 L0x55555556146a;
mov ymm2_2 L0x555555561468;
mov ymm2_3 L0x55555556146a;
mov ymm2_4 L0x555555561468;
mov ymm2_5 L0x55555556146a;
mov ymm2_6 L0x555555561468;
mov ymm2_7 L0x55555556146a;
mov ymm2_8 L0x555555561468;
mov ymm2_9 L0x55555556146a;
mov ymm2_a L0x555555561468;
mov ymm2_b L0x55555556146a;
mov ymm2_c L0x555555561468;
mov ymm2_d L0x55555556146a;
mov ymm2_e L0x555555561468;
mov ymm2_f L0x55555556146a;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555d123 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555d128 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm7,%ymm3                       #! PC = 0x55555555d12d *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d131 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555d135 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm7,%ymm3,%ymm7                        #! PC = 0x55555555d139 *)
sub ymm7_0 ymm3_0 ymm7_0;
sub ymm7_1 ymm3_1 ymm7_1;
sub ymm7_2 ymm3_2 ymm7_2;
sub ymm7_3 ymm3_3 ymm7_3;
sub ymm7_4 ymm3_4 ymm7_4;
sub ymm7_5 ymm3_5 ymm7_5;
sub ymm7_6 ymm3_6 ymm7_6;
sub ymm7_7 ymm3_7 ymm7_7;
sub ymm7_8 ymm3_8 ymm7_8;
sub ymm7_9 ymm3_9 ymm7_9;
sub ymm7_a ymm3_a ymm7_a;
sub ymm7_b ymm3_b ymm7_b;
sub ymm7_c ymm3_c ymm7_c;
sub ymm7_d ymm3_d ymm7_d;
sub ymm7_e ymm3_e ymm7_e;
sub ymm7_f ymm3_f ymm7_f;
(* vpbroadcastd 0x144(%rdx),%ymm1                  #! EA = L0x555555561264; Value = 0x5d04090c4ee67a89; PC = 0x55555555d13d *)
mov ymm1_0 L0x555555561264;
mov ymm1_1 L0x555555561266;
mov ymm1_2 L0x555555561264;
mov ymm1_3 L0x555555561266;
mov ymm1_4 L0x555555561264;
mov ymm1_5 L0x555555561266;
mov ymm1_6 L0x555555561264;
mov ymm1_7 L0x555555561266;
mov ymm1_8 L0x555555561264;
mov ymm1_9 L0x555555561266;
mov ymm1_a L0x555555561264;
mov ymm1_b L0x555555561266;
mov ymm1_c L0x555555561264;
mov ymm1_d L0x555555561266;
mov ymm1_e L0x555555561264;
mov ymm1_f L0x555555561266;
(* vpbroadcastd 0x344(%rdx),%ymm2                  #! EA = L0x555555561464; Value = 0x0504010c0ae6f489; PC = 0x55555555d146 *)
mov ymm2_0 L0x555555561464;
mov ymm2_1 L0x555555561466;
mov ymm2_2 L0x555555561464;
mov ymm2_3 L0x555555561466;
mov ymm2_4 L0x555555561464;
mov ymm2_5 L0x555555561466;
mov ymm2_6 L0x555555561464;
mov ymm2_7 L0x555555561466;
mov ymm2_8 L0x555555561464;
mov ymm2_9 L0x555555561466;
mov ymm2_a L0x555555561464;
mov ymm2_b L0x555555561466;
mov ymm2_c L0x555555561464;
mov ymm2_d L0x555555561466;
mov ymm2_e L0x555555561464;
mov ymm2_f L0x555555561466;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555d14f *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555d154 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm9,%ymm3                       #! PC = 0x55555555d159 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555d15d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555d161 *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm9                        #! PC = 0x55555555d165 *)
sub ymm9_0 ymm3_0 ymm9_0;
sub ymm9_1 ymm3_1 ymm9_1;
sub ymm9_2 ymm3_2 ymm9_2;
sub ymm9_3 ymm3_3 ymm9_3;
sub ymm9_4 ymm3_4 ymm9_4;
sub ymm9_5 ymm3_5 ymm9_5;
sub ymm9_6 ymm3_6 ymm9_6;
sub ymm9_7 ymm3_7 ymm9_7;
sub ymm9_8 ymm3_8 ymm9_8;
sub ymm9_9 ymm3_9 ymm9_9;
sub ymm9_a ymm3_a ymm9_a;
sub ymm9_b ymm3_b ymm9_b;
sub ymm9_c ymm3_c ymm9_c;
sub ymm9_d ymm3_d ymm9_d;
sub ymm9_e ymm3_e ymm9_e;
sub ymm9_f ymm3_f ymm9_f;
(* vpbroadcastd 0x140(%rdx),%ymm1                  #! EA = L0x555555561260; Value = 0x4ee67a89a62111ed; PC = 0x55555555d16a *)
mov ymm1_0 L0x555555561260;
mov ymm1_1 L0x555555561262;
mov ymm1_2 L0x555555561260;
mov ymm1_3 L0x555555561262;
mov ymm1_4 L0x555555561260;
mov ymm1_5 L0x555555561262;
mov ymm1_6 L0x555555561260;
mov ymm1_7 L0x555555561262;
mov ymm1_8 L0x555555561260;
mov ymm1_9 L0x555555561262;
mov ymm1_a L0x555555561260;
mov ymm1_b L0x555555561262;
mov ymm1_c L0x555555561260;
mov ymm1_d L0x555555561262;
mov ymm1_e L0x555555561260;
mov ymm1_f L0x555555561262;
(* vpbroadcastd 0x340(%rdx),%ymm2                  #! EA = L0x555555561460; Value = 0x0ae6f4891021f3ed; PC = 0x55555555d173 *)
mov ymm2_0 L0x555555561460;
mov ymm2_1 L0x555555561462;
mov ymm2_2 L0x555555561460;
mov ymm2_3 L0x555555561462;
mov ymm2_4 L0x555555561460;
mov ymm2_5 L0x555555561462;
mov ymm2_6 L0x555555561460;
mov ymm2_7 L0x555555561462;
mov ymm2_8 L0x555555561460;
mov ymm2_9 L0x555555561462;
mov ymm2_a L0x555555561460;
mov ymm2_b L0x555555561462;
mov ymm2_c L0x555555561460;
mov ymm2_d L0x555555561462;
mov ymm2_e L0x555555561460;
mov ymm2_f L0x555555561462;
(* vpshufb %ymm15,%ymm1,%ymm1                      #! PC = 0x55555555d17c *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm1_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm1_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm1_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm1_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm1_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm1_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm1_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm1_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm1_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm1_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm1_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm1_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm1_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm1_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm1_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm1_8;
mov ymm1_0 shuf_0;
mov ymm1_1 shuf_1;
mov ymm1_2 shuf_2;
mov ymm1_3 shuf_3;
mov ymm1_4 shuf_4;
mov ymm1_5 shuf_5;
mov ymm1_6 shuf_6;
mov ymm1_7 shuf_7;
mov ymm1_8 shuf_8;
mov ymm1_9 shuf_9;
mov ymm1_a shuf_a;
mov ymm1_b shuf_b;
mov ymm1_c shuf_c;
mov ymm1_d shuf_d;
mov ymm1_e shuf_e;
mov ymm1_f shuf_f;
(* vpshufb %ymm15,%ymm2,%ymm2                      #! PC = 0x55555555d181 *)
assert true && ymm15_0 = 0x0f0e@16;
mov shuf_0 ymm2_7;
assert true && ymm15_1 = 0x0d0c@16;
mov shuf_1 ymm2_6;
assert true && ymm15_2 = 0x0b0a@16;
mov shuf_2 ymm2_5;
assert true && ymm15_3 = 0x0908@16;
mov shuf_3 ymm2_4;
assert true && ymm15_4 = 0x0706@16;
mov shuf_4 ymm2_3;
assert true && ymm15_5 = 0x0504@16;
mov shuf_5 ymm2_2;
assert true && ymm15_6 = 0x0302@16;
mov shuf_6 ymm2_1;
assert true && ymm15_7 = 0x0100@16;
mov shuf_7 ymm2_0;
assert true && ymm15_8 = 0x0f0e@16;
mov shuf_8 ymm2_f;
assert true && ymm15_9 = 0x0d0c@16;
mov shuf_9 ymm2_e;
assert true && ymm15_a = 0x0b0a@16;
mov shuf_a ymm2_d;
assert true && ymm15_b = 0x0908@16;
mov shuf_b ymm2_c;
assert true && ymm15_c = 0x0706@16;
mov shuf_c ymm2_b;
assert true && ymm15_d = 0x0504@16;
mov shuf_d ymm2_a;
assert true && ymm15_e = 0x0302@16;
mov shuf_e ymm2_9;
assert true && ymm15_f = 0x0100@16;
mov shuf_f ymm2_8;
mov ymm2_0 shuf_0;
mov ymm2_1 shuf_1;
mov ymm2_2 shuf_2;
mov ymm2_3 shuf_3;
mov ymm2_4 shuf_4;
mov ymm2_5 shuf_5;
mov ymm2_6 shuf_6;
mov ymm2_7 shuf_7;
mov ymm2_8 shuf_8;
mov ymm2_9 shuf_9;
mov ymm2_a shuf_a;
mov ymm2_b shuf_b;
mov ymm2_c shuf_c;
mov ymm2_d shuf_d;
mov ymm2_e shuf_e;
mov ymm2_f shuf_f;
(* vpmullw %ymm1,%ymm11,%ymm3                      #! PC = 0x55555555d186 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm3_0@sint16 mulL_0;
cast ymm3_1@sint16 mulL_1;
cast ymm3_2@sint16 mulL_2;
cast ymm3_3@sint16 mulL_3;
cast ymm3_4@sint16 mulL_4;
cast ymm3_5@sint16 mulL_5;
cast ymm3_6@sint16 mulL_6;
cast ymm3_7@sint16 mulL_7;
cast ymm3_8@sint16 mulL_8;
cast ymm3_9@sint16 mulL_9;
cast ymm3_a@sint16 mulL_a;
cast ymm3_b@sint16 mulL_b;
cast ymm3_c@sint16 mulL_c;
cast ymm3_d@sint16 mulL_d;
cast ymm3_e@sint16 mulL_e;
cast ymm3_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d18a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm3,%ymm3                       #! PC = 0x55555555d18e *)
smull mulH_0 red_0 ymm3_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm3_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm3_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm3_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm3_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm3_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm3_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm3_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm3_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm3_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm3_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm3_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm3_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm3_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm3_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm3_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpsubw %ymm11,%ymm3,%ymm11                      #! PC = 0x55555555d192 *)
sub ymm11_0 ymm3_0 ymm11_0;
sub ymm11_1 ymm3_1 ymm11_1;
sub ymm11_2 ymm3_2 ymm11_2;
sub ymm11_3 ymm3_3 ymm11_3;
sub ymm11_4 ymm3_4 ymm11_4;
sub ymm11_5 ymm3_5 ymm11_5;
sub ymm11_6 ymm3_6 ymm11_6;
sub ymm11_7 ymm3_7 ymm11_7;
sub ymm11_8 ymm3_8 ymm11_8;
sub ymm11_9 ymm3_9 ymm11_9;
sub ymm11_a ymm3_a ymm11_a;
sub ymm11_b ymm3_b ymm11_b;
sub ymm11_c ymm3_c ymm11_c;
sub ymm11_d ymm3_d ymm11_d;
sub ymm11_e ymm3_e ymm11_e;
sub ymm11_f ymm3_f ymm11_f;
(* vpshufb %ymm14,%ymm4,%ymm4                      #! PC = 0x55555555d197 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm4_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm4_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm4_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm4_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm4_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm4_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm4_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm4_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm4_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm4_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm4_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm4_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpshufb %ymm14,%ymm5,%ymm5                      #! PC = 0x55555555d19c *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm5_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm5_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm5_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm5_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm5_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm5_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm5_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm5_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm5_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm5_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm5_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm5_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpunpcklqdq %ymm5,%ymm4,%ymm3                   #! PC = 0x55555555d1a1 *)
mov lqdq_0 ymm4_0;
mov lqdq_1 ymm4_1;
mov lqdq_2 ymm4_2;
mov lqdq_3 ymm4_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm4_8;
mov lqdq_9 ymm4_9;
mov lqdq_a ymm4_a;
mov lqdq_b ymm4_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm4,%ymm5                   #! PC = 0x55555555d1a5 *)
mov hqdq_0 ymm4_4;
mov hqdq_1 ymm4_5;
mov hqdq_2 ymm4_6;
mov hqdq_3 ymm4_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm4_c;
mov hqdq_9 ymm4_d;
mov hqdq_a ymm4_e;
mov hqdq_b ymm4_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm5_0 hqdq_0;
mov ymm5_1 hqdq_1;
mov ymm5_2 hqdq_2;
mov ymm5_3 hqdq_3;
mov ymm5_4 hqdq_4;
mov ymm5_5 hqdq_5;
mov ymm5_6 hqdq_6;
mov ymm5_7 hqdq_7;
mov ymm5_8 hqdq_8;
mov ymm5_9 hqdq_9;
mov ymm5_a hqdq_a;
mov ymm5_b hqdq_b;
mov ymm5_c hqdq_c;
mov ymm5_d hqdq_d;
mov ymm5_e hqdq_e;
mov ymm5_f hqdq_f;
(* vpshufb %ymm14,%ymm6,%ymm6                      #! PC = 0x55555555d1a9 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm6_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm6_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm6_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm6_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm6_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm6_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm6_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm6_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm6_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm6_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm6_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm6_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpshufb %ymm14,%ymm7,%ymm7                      #! PC = 0x55555555d1ae *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm7_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm7_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm7_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm7_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm7_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm7_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm7_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm7_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm7_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm7_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm7_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm7_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpunpcklqdq %ymm7,%ymm6,%ymm4                   #! PC = 0x55555555d1b3 *)
mov lqdq_0 ymm6_0;
mov lqdq_1 ymm6_1;
mov lqdq_2 ymm6_2;
mov lqdq_3 ymm6_3;
mov lqdq_4 ymm7_0;
mov lqdq_5 ymm7_1;
mov lqdq_6 ymm7_2;
mov lqdq_7 ymm7_3;
mov lqdq_8 ymm6_8;
mov lqdq_9 ymm6_9;
mov lqdq_a ymm6_a;
mov lqdq_b ymm6_b;
mov lqdq_c ymm7_8;
mov lqdq_d ymm7_9;
mov lqdq_e ymm7_a;
mov lqdq_f ymm7_b;
mov ymm4_0 lqdq_0;
mov ymm4_1 lqdq_1;
mov ymm4_2 lqdq_2;
mov ymm4_3 lqdq_3;
mov ymm4_4 lqdq_4;
mov ymm4_5 lqdq_5;
mov ymm4_6 lqdq_6;
mov ymm4_7 lqdq_7;
mov ymm4_8 lqdq_8;
mov ymm4_9 lqdq_9;
mov ymm4_a lqdq_a;
mov ymm4_b lqdq_b;
mov ymm4_c lqdq_c;
mov ymm4_d lqdq_d;
mov ymm4_e lqdq_e;
mov ymm4_f lqdq_f;
(* vpunpckhqdq %ymm7,%ymm6,%ymm7                   #! PC = 0x55555555d1b7 *)
mov hqdq_0 ymm6_4;
mov hqdq_1 ymm6_5;
mov hqdq_2 ymm6_6;
mov hqdq_3 ymm6_7;
mov hqdq_4 ymm7_4;
mov hqdq_5 ymm7_5;
mov hqdq_6 ymm7_6;
mov hqdq_7 ymm7_7;
mov hqdq_8 ymm6_c;
mov hqdq_9 ymm6_d;
mov hqdq_a ymm6_e;
mov hqdq_b ymm6_f;
mov hqdq_c ymm7_c;
mov hqdq_d ymm7_d;
mov hqdq_e ymm7_e;
mov hqdq_f ymm7_f;
mov ymm7_0 hqdq_0;
mov ymm7_1 hqdq_1;
mov ymm7_2 hqdq_2;
mov ymm7_3 hqdq_3;
mov ymm7_4 hqdq_4;
mov ymm7_5 hqdq_5;
mov ymm7_6 hqdq_6;
mov ymm7_7 hqdq_7;
mov ymm7_8 hqdq_8;
mov ymm7_9 hqdq_9;
mov ymm7_a hqdq_a;
mov ymm7_b hqdq_b;
mov ymm7_c hqdq_c;
mov ymm7_d hqdq_d;
mov ymm7_e hqdq_e;
mov ymm7_f hqdq_f;
(* vpshufb %ymm14,%ymm8,%ymm8                      #! PC = 0x55555555d1bb *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm8_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm8_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm8_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm8_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm8_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm8_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm8_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm8_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm8_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm8_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm8_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm8_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpshufb %ymm14,%ymm9,%ymm9                      #! PC = 0x55555555d1c0 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm9_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm9_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm9_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm9_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm9_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm9_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm9_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm9_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm9_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm9_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm9_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm9_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm6                   #! PC = 0x55555555d1c5 *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm6_0 lqdq_0;
mov ymm6_1 lqdq_1;
mov ymm6_2 lqdq_2;
mov ymm6_3 lqdq_3;
mov ymm6_4 lqdq_4;
mov ymm6_5 lqdq_5;
mov ymm6_6 lqdq_6;
mov ymm6_7 lqdq_7;
mov ymm6_8 lqdq_8;
mov ymm6_9 lqdq_9;
mov ymm6_a lqdq_a;
mov ymm6_b lqdq_b;
mov ymm6_c lqdq_c;
mov ymm6_d lqdq_d;
mov ymm6_e lqdq_e;
mov ymm6_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm9                   #! PC = 0x55555555d1ca *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm9_0 hqdq_0;
mov ymm9_1 hqdq_1;
mov ymm9_2 hqdq_2;
mov ymm9_3 hqdq_3;
mov ymm9_4 hqdq_4;
mov ymm9_5 hqdq_5;
mov ymm9_6 hqdq_6;
mov ymm9_7 hqdq_7;
mov ymm9_8 hqdq_8;
mov ymm9_9 hqdq_9;
mov ymm9_a hqdq_a;
mov ymm9_b hqdq_b;
mov ymm9_c hqdq_c;
mov ymm9_d hqdq_d;
mov ymm9_e hqdq_e;
mov ymm9_f hqdq_f;
(* vpshufb %ymm14,%ymm10,%ymm10                    #! PC = 0x55555555d1cf *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm10_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm10_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm10_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm10_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm10_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm10_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm10_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm10_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm10_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm10_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm10_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm10_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm10_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm10_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm10_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm10_f;
mov ymm10_0 shuf_0;
mov ymm10_1 shuf_1;
mov ymm10_2 shuf_2;
mov ymm10_3 shuf_3;
mov ymm10_4 shuf_4;
mov ymm10_5 shuf_5;
mov ymm10_6 shuf_6;
mov ymm10_7 shuf_7;
mov ymm10_8 shuf_8;
mov ymm10_9 shuf_9;
mov ymm10_a shuf_a;
mov ymm10_b shuf_b;
mov ymm10_c shuf_c;
mov ymm10_d shuf_d;
mov ymm10_e shuf_e;
mov ymm10_f shuf_f;
(* vpshufb %ymm14,%ymm11,%ymm11                    #! PC = 0x55555555d1d4 *)
assert true && ymm14_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm14_1 = 0x0504@16;
mov shuf_1 ymm11_2;
assert true && ymm14_2 = 0x0908@16;
mov shuf_2 ymm11_4;
assert true && ymm14_3 = 0x0d0c@16;
mov shuf_3 ymm11_6;
assert true && ymm14_4 = 0x0302@16;
mov shuf_4 ymm11_1;
assert true && ymm14_5 = 0x0706@16;
mov shuf_5 ymm11_3;
assert true && ymm14_6 = 0x0b0a@16;
mov shuf_6 ymm11_5;
assert true && ymm14_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm14_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm14_9 = 0x0504@16;
mov shuf_9 ymm11_a;
assert true && ymm14_a = 0x0908@16;
mov shuf_a ymm11_c;
assert true && ymm14_b = 0x0d0c@16;
mov shuf_b ymm11_e;
assert true && ymm14_c = 0x0302@16;
mov shuf_c ymm11_9;
assert true && ymm14_d = 0x0706@16;
mov shuf_d ymm11_b;
assert true && ymm14_e = 0x0b0a@16;
mov shuf_e ymm11_d;
assert true && ymm14_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm8                 #! PC = 0x55555555d1d9 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm8_0 lqdq_0;
mov ymm8_1 lqdq_1;
mov ymm8_2 lqdq_2;
mov ymm8_3 lqdq_3;
mov ymm8_4 lqdq_4;
mov ymm8_5 lqdq_5;
mov ymm8_6 lqdq_6;
mov ymm8_7 lqdq_7;
mov ymm8_8 lqdq_8;
mov ymm8_9 lqdq_9;
mov ymm8_a lqdq_a;
mov ymm8_b lqdq_b;
mov ymm8_c lqdq_c;
mov ymm8_d lqdq_d;
mov ymm8_e lqdq_e;
mov ymm8_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm11                #! PC = 0x55555555d1de *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm11_0 hqdq_0;
mov ymm11_1 hqdq_1;
mov ymm11_2 hqdq_2;
mov ymm11_3 hqdq_3;
mov ymm11_4 hqdq_4;
mov ymm11_5 hqdq_5;
mov ymm11_6 hqdq_6;
mov ymm11_7 hqdq_7;
mov ymm11_8 hqdq_8;
mov ymm11_9 hqdq_9;
mov ymm11_a hqdq_a;
mov ymm11_b hqdq_b;
mov ymm11_c hqdq_c;
mov ymm11_d hqdq_d;
mov ymm11_e hqdq_e;
mov ymm11_f hqdq_f;
(* vmovdqa 0x3f15(%rip),%ymm1        # 0x555555561100 <nttmul_idxdata+96>#! EA = L0x555555561100; Value = 0x0b0a030209080100; PC = 0x55555555d1e3 *)
mov ymm1_0 L0x555555561100;
mov ymm1_1 L0x555555561102;
mov ymm1_2 L0x555555561104;
mov ymm1_3 L0x555555561106;
mov ymm1_4 L0x555555561108;
mov ymm1_5 L0x55555556110a;
mov ymm1_6 L0x55555556110c;
mov ymm1_7 L0x55555556110e;
mov ymm1_8 L0x555555561110;
mov ymm1_9 L0x555555561112;
mov ymm1_a L0x555555561114;
mov ymm1_b L0x555555561116;
mov ymm1_c L0x555555561118;
mov ymm1_d L0x55555556111a;
mov ymm1_e L0x55555556111c;
mov ymm1_f L0x55555556111e;
(* vpermq $0xd8,%ymm3,%ymm3                        #! PC = 0x55555555d1eb *)
mov permq_0 ymm3_0;
mov permq_1 ymm3_1;
mov permq_2 ymm3_2;
mov permq_3 ymm3_3;
mov permq_4 ymm3_8;
mov permq_5 ymm3_9;
mov permq_6 ymm3_a;
mov permq_7 ymm3_b;
mov permq_8 ymm3_4;
mov permq_9 ymm3_5;
mov permq_a ymm3_6;
mov permq_b ymm3_7;
mov permq_c ymm3_c;
mov permq_d ymm3_d;
mov permq_e ymm3_e;
mov permq_f ymm3_f;
mov ymm3_0 permq_0;
mov ymm3_1 permq_1;
mov ymm3_2 permq_2;
mov ymm3_3 permq_3;
mov ymm3_4 permq_4;
mov ymm3_5 permq_5;
mov ymm3_6 permq_6;
mov ymm3_7 permq_7;
mov ymm3_8 permq_8;
mov ymm3_9 permq_9;
mov ymm3_a permq_a;
mov ymm3_b permq_b;
mov ymm3_c permq_c;
mov ymm3_d permq_d;
mov ymm3_e permq_e;
mov ymm3_f permq_f;
(* vpshufb %ymm1,%ymm3,%ymm3                       #! PC = 0x55555555d1f1 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm3_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm3_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm3_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm3_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm3_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm3_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm3_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm3_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm3_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm3_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm3_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm3_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm3_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm3_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm3_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm3_f;
mov ymm3_0 shuf_0;
mov ymm3_1 shuf_1;
mov ymm3_2 shuf_2;
mov ymm3_3 shuf_3;
mov ymm3_4 shuf_4;
mov ymm3_5 shuf_5;
mov ymm3_6 shuf_6;
mov ymm3_7 shuf_7;
mov ymm3_8 shuf_8;
mov ymm3_9 shuf_9;
mov ymm3_a shuf_a;
mov ymm3_b shuf_b;
mov ymm3_c shuf_c;
mov ymm3_d shuf_d;
mov ymm3_e shuf_e;
mov ymm3_f shuf_f;
(* vpermq $0xd8,%ymm5,%ymm5                        #! PC = 0x55555555d1f6 *)
mov permq_0 ymm5_0;
mov permq_1 ymm5_1;
mov permq_2 ymm5_2;
mov permq_3 ymm5_3;
mov permq_4 ymm5_8;
mov permq_5 ymm5_9;
mov permq_6 ymm5_a;
mov permq_7 ymm5_b;
mov permq_8 ymm5_4;
mov permq_9 ymm5_5;
mov permq_a ymm5_6;
mov permq_b ymm5_7;
mov permq_c ymm5_c;
mov permq_d ymm5_d;
mov permq_e ymm5_e;
mov permq_f ymm5_f;
mov ymm5_0 permq_0;
mov ymm5_1 permq_1;
mov ymm5_2 permq_2;
mov ymm5_3 permq_3;
mov ymm5_4 permq_4;
mov ymm5_5 permq_5;
mov ymm5_6 permq_6;
mov ymm5_7 permq_7;
mov ymm5_8 permq_8;
mov ymm5_9 permq_9;
mov ymm5_a permq_a;
mov ymm5_b permq_b;
mov ymm5_c permq_c;
mov ymm5_d permq_d;
mov ymm5_e permq_e;
mov ymm5_f permq_f;
(* vpshufb %ymm1,%ymm5,%ymm5                       #! PC = 0x55555555d1fc *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm5_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm5_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm5_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm5_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm5_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm5_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm5_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm5_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm5_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm5_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm5_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm5_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm5_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm5_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm5_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm5_f;
mov ymm5_0 shuf_0;
mov ymm5_1 shuf_1;
mov ymm5_2 shuf_2;
mov ymm5_3 shuf_3;
mov ymm5_4 shuf_4;
mov ymm5_5 shuf_5;
mov ymm5_6 shuf_6;
mov ymm5_7 shuf_7;
mov ymm5_8 shuf_8;
mov ymm5_9 shuf_9;
mov ymm5_a shuf_a;
mov ymm5_b shuf_b;
mov ymm5_c shuf_c;
mov ymm5_d shuf_d;
mov ymm5_e shuf_e;
mov ymm5_f shuf_f;
(* vpermq $0xd8,%ymm4,%ymm4                        #! PC = 0x55555555d201 *)
mov permq_0 ymm4_0;
mov permq_1 ymm4_1;
mov permq_2 ymm4_2;
mov permq_3 ymm4_3;
mov permq_4 ymm4_8;
mov permq_5 ymm4_9;
mov permq_6 ymm4_a;
mov permq_7 ymm4_b;
mov permq_8 ymm4_4;
mov permq_9 ymm4_5;
mov permq_a ymm4_6;
mov permq_b ymm4_7;
mov permq_c ymm4_c;
mov permq_d ymm4_d;
mov permq_e ymm4_e;
mov permq_f ymm4_f;
mov ymm4_0 permq_0;
mov ymm4_1 permq_1;
mov ymm4_2 permq_2;
mov ymm4_3 permq_3;
mov ymm4_4 permq_4;
mov ymm4_5 permq_5;
mov ymm4_6 permq_6;
mov ymm4_7 permq_7;
mov ymm4_8 permq_8;
mov ymm4_9 permq_9;
mov ymm4_a permq_a;
mov ymm4_b permq_b;
mov ymm4_c permq_c;
mov ymm4_d permq_d;
mov ymm4_e permq_e;
mov ymm4_f permq_f;
(* vpshufb %ymm1,%ymm4,%ymm4                       #! PC = 0x55555555d207 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm4_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm4_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm4_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm4_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm4_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm4_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm4_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm4_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm4_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm4_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm4_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm4_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm4_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm4_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm4_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm4_f;
mov ymm4_0 shuf_0;
mov ymm4_1 shuf_1;
mov ymm4_2 shuf_2;
mov ymm4_3 shuf_3;
mov ymm4_4 shuf_4;
mov ymm4_5 shuf_5;
mov ymm4_6 shuf_6;
mov ymm4_7 shuf_7;
mov ymm4_8 shuf_8;
mov ymm4_9 shuf_9;
mov ymm4_a shuf_a;
mov ymm4_b shuf_b;
mov ymm4_c shuf_c;
mov ymm4_d shuf_d;
mov ymm4_e shuf_e;
mov ymm4_f shuf_f;
(* vpermq $0xd8,%ymm7,%ymm7                        #! PC = 0x55555555d20c *)
mov permq_0 ymm7_0;
mov permq_1 ymm7_1;
mov permq_2 ymm7_2;
mov permq_3 ymm7_3;
mov permq_4 ymm7_8;
mov permq_5 ymm7_9;
mov permq_6 ymm7_a;
mov permq_7 ymm7_b;
mov permq_8 ymm7_4;
mov permq_9 ymm7_5;
mov permq_a ymm7_6;
mov permq_b ymm7_7;
mov permq_c ymm7_c;
mov permq_d ymm7_d;
mov permq_e ymm7_e;
mov permq_f ymm7_f;
mov ymm7_0 permq_0;
mov ymm7_1 permq_1;
mov ymm7_2 permq_2;
mov ymm7_3 permq_3;
mov ymm7_4 permq_4;
mov ymm7_5 permq_5;
mov ymm7_6 permq_6;
mov ymm7_7 permq_7;
mov ymm7_8 permq_8;
mov ymm7_9 permq_9;
mov ymm7_a permq_a;
mov ymm7_b permq_b;
mov ymm7_c permq_c;
mov ymm7_d permq_d;
mov ymm7_e permq_e;
mov ymm7_f permq_f;
(* vpshufb %ymm1,%ymm7,%ymm7                       #! PC = 0x55555555d212 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm7_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm7_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm7_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm7_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm7_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm7_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm7_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm7_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm7_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm7_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm7_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm7_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm7_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm7_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm7_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm7_f;
mov ymm7_0 shuf_0;
mov ymm7_1 shuf_1;
mov ymm7_2 shuf_2;
mov ymm7_3 shuf_3;
mov ymm7_4 shuf_4;
mov ymm7_5 shuf_5;
mov ymm7_6 shuf_6;
mov ymm7_7 shuf_7;
mov ymm7_8 shuf_8;
mov ymm7_9 shuf_9;
mov ymm7_a shuf_a;
mov ymm7_b shuf_b;
mov ymm7_c shuf_c;
mov ymm7_d shuf_d;
mov ymm7_e shuf_e;
mov ymm7_f shuf_f;
(* vpermq $0xd8,%ymm6,%ymm6                        #! PC = 0x55555555d217 *)
mov permq_0 ymm6_0;
mov permq_1 ymm6_1;
mov permq_2 ymm6_2;
mov permq_3 ymm6_3;
mov permq_4 ymm6_8;
mov permq_5 ymm6_9;
mov permq_6 ymm6_a;
mov permq_7 ymm6_b;
mov permq_8 ymm6_4;
mov permq_9 ymm6_5;
mov permq_a ymm6_6;
mov permq_b ymm6_7;
mov permq_c ymm6_c;
mov permq_d ymm6_d;
mov permq_e ymm6_e;
mov permq_f ymm6_f;
mov ymm6_0 permq_0;
mov ymm6_1 permq_1;
mov ymm6_2 permq_2;
mov ymm6_3 permq_3;
mov ymm6_4 permq_4;
mov ymm6_5 permq_5;
mov ymm6_6 permq_6;
mov ymm6_7 permq_7;
mov ymm6_8 permq_8;
mov ymm6_9 permq_9;
mov ymm6_a permq_a;
mov ymm6_b permq_b;
mov ymm6_c permq_c;
mov ymm6_d permq_d;
mov ymm6_e permq_e;
mov ymm6_f permq_f;
(* vpshufb %ymm1,%ymm6,%ymm6                       #! PC = 0x55555555d21d *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm6_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm6_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm6_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm6_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm6_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm6_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm6_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm6_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm6_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm6_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm6_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm6_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm6_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm6_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm6_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm6_f;
mov ymm6_0 shuf_0;
mov ymm6_1 shuf_1;
mov ymm6_2 shuf_2;
mov ymm6_3 shuf_3;
mov ymm6_4 shuf_4;
mov ymm6_5 shuf_5;
mov ymm6_6 shuf_6;
mov ymm6_7 shuf_7;
mov ymm6_8 shuf_8;
mov ymm6_9 shuf_9;
mov ymm6_a shuf_a;
mov ymm6_b shuf_b;
mov ymm6_c shuf_c;
mov ymm6_d shuf_d;
mov ymm6_e shuf_e;
mov ymm6_f shuf_f;
(* vpermq $0xd8,%ymm9,%ymm9                        #! PC = 0x55555555d222 *)
mov permq_0 ymm9_0;
mov permq_1 ymm9_1;
mov permq_2 ymm9_2;
mov permq_3 ymm9_3;
mov permq_4 ymm9_8;
mov permq_5 ymm9_9;
mov permq_6 ymm9_a;
mov permq_7 ymm9_b;
mov permq_8 ymm9_4;
mov permq_9 ymm9_5;
mov permq_a ymm9_6;
mov permq_b ymm9_7;
mov permq_c ymm9_c;
mov permq_d ymm9_d;
mov permq_e ymm9_e;
mov permq_f ymm9_f;
mov ymm9_0 permq_0;
mov ymm9_1 permq_1;
mov ymm9_2 permq_2;
mov ymm9_3 permq_3;
mov ymm9_4 permq_4;
mov ymm9_5 permq_5;
mov ymm9_6 permq_6;
mov ymm9_7 permq_7;
mov ymm9_8 permq_8;
mov ymm9_9 permq_9;
mov ymm9_a permq_a;
mov ymm9_b permq_b;
mov ymm9_c permq_c;
mov ymm9_d permq_d;
mov ymm9_e permq_e;
mov ymm9_f permq_f;
(* vpshufb %ymm1,%ymm9,%ymm9                       #! PC = 0x55555555d228 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm9_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm9_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm9_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm9_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm9_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm9_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm9_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm9_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm9_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm9_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm9_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm9_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm9_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm9_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm9_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm9_f;
mov ymm9_0 shuf_0;
mov ymm9_1 shuf_1;
mov ymm9_2 shuf_2;
mov ymm9_3 shuf_3;
mov ymm9_4 shuf_4;
mov ymm9_5 shuf_5;
mov ymm9_6 shuf_6;
mov ymm9_7 shuf_7;
mov ymm9_8 shuf_8;
mov ymm9_9 shuf_9;
mov ymm9_a shuf_a;
mov ymm9_b shuf_b;
mov ymm9_c shuf_c;
mov ymm9_d shuf_d;
mov ymm9_e shuf_e;
mov ymm9_f shuf_f;
(* vpermq $0xd8,%ymm8,%ymm8                        #! PC = 0x55555555d22d *)
mov permq_0 ymm8_0;
mov permq_1 ymm8_1;
mov permq_2 ymm8_2;
mov permq_3 ymm8_3;
mov permq_4 ymm8_8;
mov permq_5 ymm8_9;
mov permq_6 ymm8_a;
mov permq_7 ymm8_b;
mov permq_8 ymm8_4;
mov permq_9 ymm8_5;
mov permq_a ymm8_6;
mov permq_b ymm8_7;
mov permq_c ymm8_c;
mov permq_d ymm8_d;
mov permq_e ymm8_e;
mov permq_f ymm8_f;
mov ymm8_0 permq_0;
mov ymm8_1 permq_1;
mov ymm8_2 permq_2;
mov ymm8_3 permq_3;
mov ymm8_4 permq_4;
mov ymm8_5 permq_5;
mov ymm8_6 permq_6;
mov ymm8_7 permq_7;
mov ymm8_8 permq_8;
mov ymm8_9 permq_9;
mov ymm8_a permq_a;
mov ymm8_b permq_b;
mov ymm8_c permq_c;
mov ymm8_d permq_d;
mov ymm8_e permq_e;
mov ymm8_f permq_f;
(* vpshufb %ymm1,%ymm8,%ymm8                       #! PC = 0x55555555d233 *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm8_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm8_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm8_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm8_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm8_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm8_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm8_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm8_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm8_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm8_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm8_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm8_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm8_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm8_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm8_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm8_f;
mov ymm8_0 shuf_0;
mov ymm8_1 shuf_1;
mov ymm8_2 shuf_2;
mov ymm8_3 shuf_3;
mov ymm8_4 shuf_4;
mov ymm8_5 shuf_5;
mov ymm8_6 shuf_6;
mov ymm8_7 shuf_7;
mov ymm8_8 shuf_8;
mov ymm8_9 shuf_9;
mov ymm8_a shuf_a;
mov ymm8_b shuf_b;
mov ymm8_c shuf_c;
mov ymm8_d shuf_d;
mov ymm8_e shuf_e;
mov ymm8_f shuf_f;
(* vpermq $0xd8,%ymm11,%ymm11                      #! PC = 0x55555555d238 *)
mov permq_0 ymm11_0;
mov permq_1 ymm11_1;
mov permq_2 ymm11_2;
mov permq_3 ymm11_3;
mov permq_4 ymm11_8;
mov permq_5 ymm11_9;
mov permq_6 ymm11_a;
mov permq_7 ymm11_b;
mov permq_8 ymm11_4;
mov permq_9 ymm11_5;
mov permq_a ymm11_6;
mov permq_b ymm11_7;
mov permq_c ymm11_c;
mov permq_d ymm11_d;
mov permq_e ymm11_e;
mov permq_f ymm11_f;
mov ymm11_0 permq_0;
mov ymm11_1 permq_1;
mov ymm11_2 permq_2;
mov ymm11_3 permq_3;
mov ymm11_4 permq_4;
mov ymm11_5 permq_5;
mov ymm11_6 permq_6;
mov ymm11_7 permq_7;
mov ymm11_8 permq_8;
mov ymm11_9 permq_9;
mov ymm11_a permq_a;
mov ymm11_b permq_b;
mov ymm11_c permq_c;
mov ymm11_d permq_d;
mov ymm11_e permq_e;
mov ymm11_f permq_f;
(* vpshufb %ymm1,%ymm11,%ymm11                     #! PC = 0x55555555d23e *)
assert true && ymm1_0 = 0x0100@16;
mov shuf_0 ymm11_0;
assert true && ymm1_1 = 0x0908@16;
mov shuf_1 ymm11_4;
assert true && ymm1_2 = 0x0302@16;
mov shuf_2 ymm11_1;
assert true && ymm1_3 = 0x0b0a@16;
mov shuf_3 ymm11_5;
assert true && ymm1_4 = 0x0504@16;
mov shuf_4 ymm11_2;
assert true && ymm1_5 = 0x0d0c@16;
mov shuf_5 ymm11_6;
assert true && ymm1_6 = 0x0706@16;
mov shuf_6 ymm11_3;
assert true && ymm1_7 = 0x0f0e@16;
mov shuf_7 ymm11_7;
assert true && ymm1_8 = 0x0100@16;
mov shuf_8 ymm11_8;
assert true && ymm1_9 = 0x0908@16;
mov shuf_9 ymm11_c;
assert true && ymm1_a = 0x0302@16;
mov shuf_a ymm11_9;
assert true && ymm1_b = 0x0b0a@16;
mov shuf_b ymm11_d;
assert true && ymm1_c = 0x0504@16;
mov shuf_c ymm11_a;
assert true && ymm1_d = 0x0d0c@16;
mov shuf_d ymm11_e;
assert true && ymm1_e = 0x0706@16;
mov shuf_e ymm11_b;
assert true && ymm1_f = 0x0f0e@16;
mov shuf_f ymm11_f;
mov ymm11_0 shuf_0;
mov ymm11_1 shuf_1;
mov ymm11_2 shuf_2;
mov ymm11_3 shuf_3;
mov ymm11_4 shuf_4;
mov ymm11_5 shuf_5;
mov ymm11_6 shuf_6;
mov ymm11_7 shuf_7;
mov ymm11_8 shuf_8;
mov ymm11_9 shuf_9;
mov ymm11_a shuf_a;
mov ymm11_b shuf_b;
mov ymm11_c shuf_c;
mov ymm11_d shuf_d;
mov ymm11_e shuf_e;
mov ymm11_f shuf_f;



(**************** LEVELS 0-2, 7 *****************)




(**************** CUT  58 *****************)

cut and [
eqmod (8*inp_poly1c0**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10463],
eqmod (8*inp_poly1c1**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 290],
eqmod (8*inp_poly1c2**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 697],
eqmod (8*inp_poly1c3**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10056],
eqmod (8*inp_poly1c4**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3687],
eqmod (8*inp_poly1c5**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7066],
eqmod (8*inp_poly1c6**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8677],
eqmod (8*inp_poly1c7**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2076]
,
eqmod (8*inp_poly1c8**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7108],
eqmod (8*inp_poly1c9**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3645],
eqmod (8*inp_poly1ca**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7092],
eqmod (8*inp_poly1cb**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3661],
eqmod (8*inp_poly1cc**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2032],
eqmod (8*inp_poly1cd**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8721],
eqmod (8*inp_poly1ce**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7649],
eqmod (8*inp_poly1cf**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3104]
,
eqmod (8*inp_poly1d0**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9436],
eqmod (8*inp_poly1d1**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1317],
eqmod (8*inp_poly1d2**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8616],
eqmod (8*inp_poly1d3**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2137],
eqmod (8*inp_poly1d4**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7363],
eqmod (8*inp_poly1d5**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3390],
eqmod (8*inp_poly1d6**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2215],
eqmod (8*inp_poly1d7**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8538]
,
eqmod (8*inp_poly1d8**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8846],
eqmod (8*inp_poly1d9**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1907],
eqmod (8*inp_poly1da**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1135],
eqmod (8*inp_poly1db**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9618],
eqmod (8*inp_poly1dc**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 774],
eqmod (8*inp_poly1dd**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9979],
eqmod (8*inp_poly1de**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9486],
eqmod (8*inp_poly1df**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1267]
,
eqmod (8*inp_poly1e0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2266],
eqmod (8*inp_poly1e1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8487],
eqmod (8*inp_poly1e2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 264],
eqmod (8*inp_poly1e3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10489],
eqmod (8*inp_poly1e4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6935],
eqmod (8*inp_poly1e5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3818],
eqmod (8*inp_poly1e6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9473],
eqmod (8*inp_poly1e7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1280]
,
eqmod (8*inp_poly1e8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 301],
eqmod (8*inp_poly1e9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10452],
eqmod (8*inp_poly1ea**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3689],
eqmod (8*inp_poly1eb**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7064],
eqmod (8*inp_poly1ec**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10597],
eqmod (8*inp_poly1ed**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 156],
eqmod (8*inp_poly1ee**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1339],
eqmod (8*inp_poly1ef**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9414]
,
eqmod (8*inp_poly1f0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1985],
eqmod (8*inp_poly1f1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8768],
eqmod (8*inp_poly1f2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3572],
eqmod (8*inp_poly1f3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7181],
eqmod (8*inp_poly1f4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2758],
eqmod (8*inp_poly1f5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7995],
eqmod (8*inp_poly1f6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6794],
eqmod (8*inp_poly1f7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3959]
,
eqmod (8*inp_poly1f8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3258],
eqmod (8*inp_poly1f9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7495],
eqmod (8*inp_poly1fa**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9671],
eqmod (8*inp_poly1fb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1082],
eqmod (8*inp_poly1fc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2777],
eqmod (8*inp_poly1fd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7976],
eqmod (8*inp_poly1fe**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7527],
eqmod (8*inp_poly1ff**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3226]
] prove with [ cuts [ 7 ] ] && and [
(-11262)@16<=s ymm3_0,ymm3_0<s11262@16,(-11262)@16<=s ymm3_1,ymm3_1<s11262@16,
(-10922)@16<=s ymm3_2,ymm3_2<s10922@16,(-10922)@16<=s ymm3_3,ymm3_3<s10922@16,
(-12464)@16<=s ymm3_4,ymm3_4<s12464@16,(-12464)@16<=s ymm3_5,ymm3_5<s12464@16,
(-11585)@16<=s ymm3_6,ymm3_6<s11585@16,(-11585)@16<=s ymm3_7,ymm3_7<s11585@16,
( -5972)@16<=s ymm3_8,ymm3_8<s 5972@16,( -5972)@16<=s ymm3_9,ymm3_9<s 5972@16,
( -5937)@16<=s ymm3_a,ymm3_a<s 5937@16,( -5937)@16<=s ymm3_b,ymm3_b<s 5937@16,
( -6046)@16<=s ymm3_c,ymm3_c<s 6046@16,( -6046)@16<=s ymm3_d,ymm3_d<s 6046@16,
( -5972)@16<=s ymm3_e,ymm3_e<s 5972@16,( -5972)@16<=s ymm3_f,ymm3_f<s 5972@16,
(-11262)@16<=s ymm5_0,ymm5_0<s11262@16,(-11262)@16<=s ymm5_1,ymm5_1<s11262@16,
(-10922)@16<=s ymm5_2,ymm5_2<s10922@16,(-10922)@16<=s ymm5_3,ymm5_3<s10922@16,
(-11845)@16<=s ymm5_4,ymm5_4<s11845@16,(-11845)@16<=s ymm5_5,ymm5_5<s11845@16,
(-11333)@16<=s ymm5_6,ymm5_6<s11333@16,(-11333)@16<=s ymm5_7,ymm5_7<s11333@16,
( -5377)@16<=s ymm5_8,ymm5_8<s 5377@16,( -5377)@16<=s ymm5_9,ymm5_9<s 5377@16,
( -5377)@16<=s ymm5_a,ymm5_a<s 5377@16,( -5377)@16<=s ymm5_b,ymm5_b<s 5377@16,
( -5377)@16<=s ymm5_c,ymm5_c<s 5377@16,( -5377)@16<=s ymm5_d,ymm5_d<s 5377@16,
( -5377)@16<=s ymm5_e,ymm5_e<s 5377@16,( -5377)@16<=s ymm5_f,ymm5_f<s 5377@16,
(-11262)@16<=s ymm4_0,ymm4_0<s11262@16,(-11262)@16<=s ymm4_1,ymm4_1<s11262@16,
(-10922)@16<=s ymm4_2,ymm4_2<s10922@16,(-10922)@16<=s ymm4_3,ymm4_3<s10922@16,
(-12013)@16<=s ymm4_4,ymm4_4<s12013@16,(-12013)@16<=s ymm4_5,ymm4_5<s12013@16,
(-11362)@16<=s ymm4_6,ymm4_6<s11362@16,(-11362)@16<=s ymm4_7,ymm4_7<s11362@16,
( -5575)@16<=s ymm4_8,ymm4_8<s 5575@16,( -5575)@16<=s ymm4_9,ymm4_9<s 5575@16,
( -5563)@16<=s ymm4_a,ymm4_a<s 5563@16,( -5563)@16<=s ymm4_b,ymm4_b<s 5563@16,
( -5599)@16<=s ymm4_c,ymm4_c<s 5599@16,( -5599)@16<=s ymm4_d,ymm4_d<s 5599@16,
( -5587)@16<=s ymm4_e,ymm4_e<s 5587@16,( -5587)@16<=s ymm4_f,ymm4_f<s 5587@16,
(-11262)@16<=s ymm7_0,ymm7_0<s11262@16,(-11262)@16<=s ymm7_1,ymm7_1<s11262@16,
(-10922)@16<=s ymm7_2,ymm7_2<s10922@16,(-10922)@16<=s ymm7_3,ymm7_3<s10922@16,
(-11716)@16<=s ymm7_4,ymm7_4<s11716@16,(-11716)@16<=s ymm7_5,ymm7_5<s11716@16,
(-11206)@16<=s ymm7_6,ymm7_6<s11206@16,(-11206)@16<=s ymm7_7,ymm7_7<s11206@16,
( -5412)@16<=s ymm7_8,ymm7_8<s 5412@16,( -5412)@16<=s ymm7_9,ymm7_9<s 5412@16,
( -5412)@16<=s ymm7_a,ymm7_a<s 5412@16,( -5412)@16<=s ymm7_b,ymm7_b<s 5412@16,
( -5413)@16<=s ymm7_c,ymm7_c<s 5413@16,( -5413)@16<=s ymm7_d,ymm7_d<s 5413@16,
( -5412)@16<=s ymm7_e,ymm7_e<s 5412@16,( -5412)@16<=s ymm7_f,ymm7_f<s 5412@16,
(-11262)@16<=s ymm6_0,ymm6_0<s11262@16,(-11262)@16<=s ymm6_1,ymm6_1<s11262@16,
(-10922)@16<=s ymm6_2,ymm6_2<s10922@16,(-10922)@16<=s ymm6_3,ymm6_3<s10922@16,
(-13711)@16<=s ymm6_4,ymm6_4<s13711@16,(-13711)@16<=s ymm6_5,ymm6_5<s13711@16,
(-12297)@16<=s ymm6_6,ymm6_6<s12297@16,(-12297)@16<=s ymm6_7,ymm6_7<s12297@16,
( -5829)@16<=s ymm6_8,ymm6_8<s 5829@16,( -5829)@16<=s ymm6_9,ymm6_9<s 5829@16,
( -5817)@16<=s ymm6_a,ymm6_a<s 5817@16,( -5817)@16<=s ymm6_b,ymm6_b<s 5817@16,
( -5925)@16<=s ymm6_c,ymm6_c<s 5925@16,( -5925)@16<=s ymm6_d,ymm6_d<s 5925@16,
( -5877)@16<=s ymm6_e,ymm6_e<s 5877@16,( -5877)@16<=s ymm6_f,ymm6_f<s 5877@16,
(-11262)@16<=s ymm9_0,ymm9_0<s11262@16,(-11262)@16<=s ymm9_1,ymm9_1<s11262@16,
(-10922)@16<=s ymm9_2,ymm9_2<s10922@16,(-10922)@16<=s ymm9_3,ymm9_3<s10922@16,
(-13338)@16<=s ymm9_4,ymm9_4<s13338@16,(-13338)@16<=s ymm9_5,ymm9_5<s13338@16,
(-12121)@16<=s ymm9_6,ymm9_6<s12121@16,(-12121)@16<=s ymm9_7,ymm9_7<s12121@16,
( -5864)@16<=s ymm9_8,ymm9_8<s 5864@16,( -5864)@16<=s ymm9_9,ymm9_9<s 5864@16,
( -5838)@16<=s ymm9_a,ymm9_a<s 5838@16,( -5838)@16<=s ymm9_b,ymm9_b<s 5838@16,
( -5963)@16<=s ymm9_c,ymm9_c<s 5963@16,( -5963)@16<=s ymm9_d,ymm9_d<s 5963@16,
( -5890)@16<=s ymm9_e,ymm9_e<s 5890@16,( -5890)@16<=s ymm9_f,ymm9_f<s 5890@16,
(-11262)@16<=s ymm8_0,ymm8_0<s11262@16,(-11262)@16<=s ymm8_1,ymm8_1<s11262@16,
(-10922)@16<=s ymm8_2,ymm8_2<s10922@16,(-10922)@16<=s ymm8_3,ymm8_3<s10922@16,
(-11979)@16<=s ymm8_4,ymm8_4<s11979@16,(-11979)@16<=s ymm8_5,ymm8_5<s11979@16,
(-11396)@16<=s ymm8_6,ymm8_6<s11396@16,(-11396)@16<=s ymm8_7,ymm8_7<s11396@16,
( -6068)@16<=s ymm8_8,ymm8_8<s 6068@16,( -6068)@16<=s ymm8_9,ymm8_9<s 6068@16,
( -5950)@16<=s ymm8_a,ymm8_a<s 5950@16,( -5950)@16<=s ymm8_b,ymm8_b<s 5950@16,
( -6075)@16<=s ymm8_c,ymm8_c<s 6075@16,( -6075)@16<=s ymm8_d,ymm8_d<s 6075@16,
( -6069)@16<=s ymm8_e,ymm8_e<s 6069@16,( -6069)@16<=s ymm8_f,ymm8_f<s 6069@16,
(-11262)@16<=s ymm11_0,ymm11_0<s11262@16,(-11262)@16<=s ymm11_1,ymm11_1<s11262@16,
(-10922)@16<=s ymm11_2,ymm11_2<s10922@16,(-10922)@16<=s ymm11_3,ymm11_3<s10922@16,
(-12703)@16<=s ymm11_4,ymm11_4<s12703@16,(-12703)@16<=s ymm11_5,ymm11_5<s12703@16,
(-11715)@16<=s ymm11_6,ymm11_6<s11715@16,(-11715)@16<=s ymm11_7,ymm11_7<s11715@16,
( -5875)@16<=s ymm11_8,ymm11_8<s 5875@16,( -5875)@16<=s ymm11_9,ymm11_9<s 5875@16,
( -5875)@16<=s ymm11_a,ymm11_a<s 5875@16,( -5875)@16<=s ymm11_b,ymm11_b<s 5875@16,
( -5946)@16<=s ymm11_c,ymm11_c<s 5946@16,( -5946)@16<=s ymm11_d,ymm11_d<s 5946@16,
( -5896)@16<=s ymm11_e,ymm11_e<s 5896@16,( -5896)@16<=s ymm11_f,ymm11_f<s 5896@16
] prove with [ precondition ];



(**************** CUT  59 *****************)

ecut and [
eqmod (8*inp_poly1c0**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10463],
eqmod (8*inp_poly1c1**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 290],
eqmod (8*inp_poly1c2**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 697],
eqmod (8*inp_poly1c3**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 10056],
eqmod (8*inp_poly1c4**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 3687],
eqmod (8*inp_poly1c5**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 7066],
eqmod (8*inp_poly1c6**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 8677],
eqmod (8*inp_poly1c7**2)
      (ymm3_0*x** 0+ymm3_1*x** 1+ymm3_2*x** 2+ymm3_3*x** 3+
       ymm3_4*x** 4+ymm3_5*x** 5+ymm3_6*x** 6+ymm3_7*x** 7+
       ymm3_8*x** 8+ymm3_9*x** 9+ymm3_a*x**10+ymm3_b*x**11+
       ymm3_c*x**12+ymm3_d*x**13+ymm3_e*x**14+ymm3_f*x**15)
      [10753, x**2 - 2076]
,
eqmod (8*inp_poly1c8**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7108],
eqmod (8*inp_poly1c9**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3645],
eqmod (8*inp_poly1ca**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7092],
eqmod (8*inp_poly1cb**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3661],
eqmod (8*inp_poly1cc**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 2032],
eqmod (8*inp_poly1cd**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 8721],
eqmod (8*inp_poly1ce**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 7649],
eqmod (8*inp_poly1cf**2)
      (ymm5_0*x** 0+ymm5_1*x** 1+ymm5_2*x** 2+ymm5_3*x** 3+
       ymm5_4*x** 4+ymm5_5*x** 5+ymm5_6*x** 6+ymm5_7*x** 7+
       ymm5_8*x** 8+ymm5_9*x** 9+ymm5_a*x**10+ymm5_b*x**11+
       ymm5_c*x**12+ymm5_d*x**13+ymm5_e*x**14+ymm5_f*x**15)
      [10753, x**2 - 3104]
] prove with [ cuts [ 58 ] ];



(**************** CUT  60 *****************)

ecut and [
eqmod (8*inp_poly1d0**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 9436],
eqmod (8*inp_poly1d1**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 1317],
eqmod (8*inp_poly1d2**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8616],
eqmod (8*inp_poly1d3**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2137],
eqmod (8*inp_poly1d4**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 7363],
eqmod (8*inp_poly1d5**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 3390],
eqmod (8*inp_poly1d6**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 2215],
eqmod (8*inp_poly1d7**2)
      (ymm4_0*x** 0+ymm4_1*x** 1+ymm4_2*x** 2+ymm4_3*x** 3+
       ymm4_4*x** 4+ymm4_5*x** 5+ymm4_6*x** 6+ymm4_7*x** 7+
       ymm4_8*x** 8+ymm4_9*x** 9+ymm4_a*x**10+ymm4_b*x**11+
       ymm4_c*x**12+ymm4_d*x**13+ymm4_e*x**14+ymm4_f*x**15)
      [10753, x**2 - 8538]
,
eqmod (8*inp_poly1d8**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 8846],
eqmod (8*inp_poly1d9**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1907],
eqmod (8*inp_poly1da**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1135],
eqmod (8*inp_poly1db**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9618],
eqmod (8*inp_poly1dc**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 774],
eqmod (8*inp_poly1dd**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9979],
eqmod (8*inp_poly1de**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 9486],
eqmod (8*inp_poly1df**2)
      (ymm7_0*x** 0+ymm7_1*x** 1+ymm7_2*x** 2+ymm7_3*x** 3+
       ymm7_4*x** 4+ymm7_5*x** 5+ymm7_6*x** 6+ymm7_7*x** 7+
       ymm7_8*x** 8+ymm7_9*x** 9+ymm7_a*x**10+ymm7_b*x**11+
       ymm7_c*x**12+ymm7_d*x**13+ymm7_e*x**14+ymm7_f*x**15)
      [10753, x**2 - 1267]
] prove with [ cuts [ 58 ] ];



(**************** CUT  61 *****************)

ecut and [
eqmod (8*inp_poly1e0**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 2266],
eqmod (8*inp_poly1e1**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 8487],
eqmod (8*inp_poly1e2**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 264],
eqmod (8*inp_poly1e3**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 10489],
eqmod (8*inp_poly1e4**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 6935],
eqmod (8*inp_poly1e5**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 3818],
eqmod (8*inp_poly1e6**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 9473],
eqmod (8*inp_poly1e7**2)
      (ymm6_0*x** 0+ymm6_1*x** 1+ymm6_2*x** 2+ymm6_3*x** 3+
       ymm6_4*x** 4+ymm6_5*x** 5+ymm6_6*x** 6+ymm6_7*x** 7+
       ymm6_8*x** 8+ymm6_9*x** 9+ymm6_a*x**10+ymm6_b*x**11+
       ymm6_c*x**12+ymm6_d*x**13+ymm6_e*x**14+ymm6_f*x**15)
      [10753, x**2 - 1280]
,
eqmod (8*inp_poly1e8**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 301],
eqmod (8*inp_poly1e9**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10452],
eqmod (8*inp_poly1ea**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 3689],
eqmod (8*inp_poly1eb**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 7064],
eqmod (8*inp_poly1ec**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 10597],
eqmod (8*inp_poly1ed**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 156],
eqmod (8*inp_poly1ee**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 1339],
eqmod (8*inp_poly1ef**2)
      (ymm9_0*x** 0+ymm9_1*x** 1+ymm9_2*x** 2+ymm9_3*x** 3+
       ymm9_4*x** 4+ymm9_5*x** 5+ymm9_6*x** 6+ymm9_7*x** 7+
       ymm9_8*x** 8+ymm9_9*x** 9+ymm9_a*x**10+ymm9_b*x**11+
       ymm9_c*x**12+ymm9_d*x**13+ymm9_e*x**14+ymm9_f*x**15)
      [10753, x**2 - 9414]
] prove with [ cuts [ 58 ] ];



(**************** CUT  62 *****************)

ecut and [
eqmod (8*inp_poly1f0**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 1985],
eqmod (8*inp_poly1f1**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 8768],
eqmod (8*inp_poly1f2**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3572],
eqmod (8*inp_poly1f3**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7181],
eqmod (8*inp_poly1f4**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 2758],
eqmod (8*inp_poly1f5**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 7995],
eqmod (8*inp_poly1f6**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 6794],
eqmod (8*inp_poly1f7**2)
      (ymm8_0*x** 0+ymm8_1*x** 1+ymm8_2*x** 2+ymm8_3*x** 3+
       ymm8_4*x** 4+ymm8_5*x** 5+ymm8_6*x** 6+ymm8_7*x** 7+
       ymm8_8*x** 8+ymm8_9*x** 9+ymm8_a*x**10+ymm8_b*x**11+
       ymm8_c*x**12+ymm8_d*x**13+ymm8_e*x**14+ymm8_f*x**15)
      [10753, x**2 - 3959]
,
eqmod (8*inp_poly1f8**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3258],
eqmod (8*inp_poly1f9**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7495],
eqmod (8*inp_poly1fa**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 9671],
eqmod (8*inp_poly1fb**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 1082],
eqmod (8*inp_poly1fc**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 2777],
eqmod (8*inp_poly1fd**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7976],
eqmod (8*inp_poly1fe**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 7527],
eqmod (8*inp_poly1ff**2)
      (ymm11_0*x** 0+ymm11_1*x** 1+ymm11_2*x** 2+ymm11_3*x** 3+
       ymm11_4*x** 4+ymm11_5*x** 5+ymm11_6*x** 6+ymm11_7*x** 7+
       ymm11_8*x** 8+ymm11_9*x** 9+ymm11_a*x**10+ymm11_b*x**11+
       ymm11_c*x**12+ymm11_d*x**13+ymm11_e*x**14+ymm11_f*x**15)
      [10753, x**2 - 3226]
] prove with [ cuts [ 58 ] ];



(* vpaddw %ymm5,%ymm3,%ymm10                       #! PC = 0x55555555d243 *)
add ymm10_0 ymm3_0 ymm5_0;
add ymm10_1 ymm3_1 ymm5_1;
add ymm10_2 ymm3_2 ymm5_2;
add ymm10_3 ymm3_3 ymm5_3;
add ymm10_4 ymm3_4 ymm5_4;
add ymm10_5 ymm3_5 ymm5_5;
add ymm10_6 ymm3_6 ymm5_6;
add ymm10_7 ymm3_7 ymm5_7;
add ymm10_8 ymm3_8 ymm5_8;
add ymm10_9 ymm3_9 ymm5_9;
add ymm10_a ymm3_a ymm5_a;
add ymm10_b ymm3_b ymm5_b;
add ymm10_c ymm3_c ymm5_c;
add ymm10_d ymm3_d ymm5_d;
add ymm10_e ymm3_e ymm5_e;
add ymm10_f ymm3_f ymm5_f;
(* vpsubw %ymm5,%ymm3,%ymm5                        #! PC = 0x55555555d247 *)
sub ymm5_0 ymm3_0 ymm5_0;
sub ymm5_1 ymm3_1 ymm5_1;
sub ymm5_2 ymm3_2 ymm5_2;
sub ymm5_3 ymm3_3 ymm5_3;
sub ymm5_4 ymm3_4 ymm5_4;
sub ymm5_5 ymm3_5 ymm5_5;
sub ymm5_6 ymm3_6 ymm5_6;
sub ymm5_7 ymm3_7 ymm5_7;
sub ymm5_8 ymm3_8 ymm5_8;
sub ymm5_9 ymm3_9 ymm5_9;
sub ymm5_a ymm3_a ymm5_a;
sub ymm5_b ymm3_b ymm5_b;
sub ymm5_c ymm3_c ymm5_c;
sub ymm5_d ymm3_d ymm5_d;
sub ymm5_e ymm3_e ymm5_e;
sub ymm5_f ymm3_f ymm5_f;
(* vpaddw %ymm7,%ymm4,%ymm3                        #! PC = 0x55555555d24b *)
add ymm3_0 ymm4_0 ymm7_0;
add ymm3_1 ymm4_1 ymm7_1;
add ymm3_2 ymm4_2 ymm7_2;
add ymm3_3 ymm4_3 ymm7_3;
add ymm3_4 ymm4_4 ymm7_4;
add ymm3_5 ymm4_5 ymm7_5;
add ymm3_6 ymm4_6 ymm7_6;
add ymm3_7 ymm4_7 ymm7_7;
add ymm3_8 ymm4_8 ymm7_8;
add ymm3_9 ymm4_9 ymm7_9;
add ymm3_a ymm4_a ymm7_a;
add ymm3_b ymm4_b ymm7_b;
add ymm3_c ymm4_c ymm7_c;
add ymm3_d ymm4_d ymm7_d;
add ymm3_e ymm4_e ymm7_e;
add ymm3_f ymm4_f ymm7_f;
(* vpsubw %ymm7,%ymm4,%ymm7                        #! PC = 0x55555555d24f *)
sub ymm7_0 ymm4_0 ymm7_0;
sub ymm7_1 ymm4_1 ymm7_1;
sub ymm7_2 ymm4_2 ymm7_2;
sub ymm7_3 ymm4_3 ymm7_3;
sub ymm7_4 ymm4_4 ymm7_4;
sub ymm7_5 ymm4_5 ymm7_5;
sub ymm7_6 ymm4_6 ymm7_6;
sub ymm7_7 ymm4_7 ymm7_7;
sub ymm7_8 ymm4_8 ymm7_8;
sub ymm7_9 ymm4_9 ymm7_9;
sub ymm7_a ymm4_a ymm7_a;
sub ymm7_b ymm4_b ymm7_b;
sub ymm7_c ymm4_c ymm7_c;
sub ymm7_d ymm4_d ymm7_d;
sub ymm7_e ymm4_e ymm7_e;
sub ymm7_f ymm4_f ymm7_f;
(* vpaddw %ymm9,%ymm6,%ymm4                        #! PC = 0x55555555d253 *)
add ymm4_0 ymm6_0 ymm9_0;
add ymm4_1 ymm6_1 ymm9_1;
add ymm4_2 ymm6_2 ymm9_2;
add ymm4_3 ymm6_3 ymm9_3;
add ymm4_4 ymm6_4 ymm9_4;
add ymm4_5 ymm6_5 ymm9_5;
add ymm4_6 ymm6_6 ymm9_6;
add ymm4_7 ymm6_7 ymm9_7;
add ymm4_8 ymm6_8 ymm9_8;
add ymm4_9 ymm6_9 ymm9_9;
add ymm4_a ymm6_a ymm9_a;
add ymm4_b ymm6_b ymm9_b;
add ymm4_c ymm6_c ymm9_c;
add ymm4_d ymm6_d ymm9_d;
add ymm4_e ymm6_e ymm9_e;
add ymm4_f ymm6_f ymm9_f;
(* vpsubw %ymm9,%ymm6,%ymm9                        #! PC = 0x55555555d258 *)
sub ymm9_0 ymm6_0 ymm9_0;
sub ymm9_1 ymm6_1 ymm9_1;
sub ymm9_2 ymm6_2 ymm9_2;
sub ymm9_3 ymm6_3 ymm9_3;
sub ymm9_4 ymm6_4 ymm9_4;
sub ymm9_5 ymm6_5 ymm9_5;
sub ymm9_6 ymm6_6 ymm9_6;
sub ymm9_7 ymm6_7 ymm9_7;
sub ymm9_8 ymm6_8 ymm9_8;
sub ymm9_9 ymm6_9 ymm9_9;
sub ymm9_a ymm6_a ymm9_a;
sub ymm9_b ymm6_b ymm9_b;
sub ymm9_c ymm6_c ymm9_c;
sub ymm9_d ymm6_d ymm9_d;
sub ymm9_e ymm6_e ymm9_e;
sub ymm9_f ymm6_f ymm9_f;
(* vpaddw %ymm11,%ymm8,%ymm6                       #! PC = 0x55555555d25d *)
add ymm6_0 ymm8_0 ymm11_0;
add ymm6_1 ymm8_1 ymm11_1;
add ymm6_2 ymm8_2 ymm11_2;
add ymm6_3 ymm8_3 ymm11_3;
add ymm6_4 ymm8_4 ymm11_4;
add ymm6_5 ymm8_5 ymm11_5;
add ymm6_6 ymm8_6 ymm11_6;
add ymm6_7 ymm8_7 ymm11_7;
add ymm6_8 ymm8_8 ymm11_8;
add ymm6_9 ymm8_9 ymm11_9;
add ymm6_a ymm8_a ymm11_a;
add ymm6_b ymm8_b ymm11_b;
add ymm6_c ymm8_c ymm11_c;
add ymm6_d ymm8_d ymm11_d;
add ymm6_e ymm8_e ymm11_e;
add ymm6_f ymm8_f ymm11_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555d262 *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm12                       #! EA = L0x5555555611a0; Value = 0xfffafffafffafffa; PC = 0x55555555d267 *)
mov ymm12_0 L0x5555555611a0;
mov ymm12_1 L0x5555555611a2;
mov ymm12_2 L0x5555555611a4;
mov ymm12_3 L0x5555555611a6;
mov ymm12_4 L0x5555555611a8;
mov ymm12_5 L0x5555555611aa;
mov ymm12_6 L0x5555555611ac;
mov ymm12_7 L0x5555555611ae;
mov ymm12_8 L0x5555555611b0;
mov ymm12_9 L0x5555555611b2;
mov ymm12_a L0x5555555611b4;
mov ymm12_b L0x5555555611b6;
mov ymm12_c L0x5555555611b8;
mov ymm12_d L0x5555555611ba;
mov ymm12_e L0x5555555611bc;
mov ymm12_f L0x5555555611be;
(* vmovdqa 0xa0(%rdx),%ymm13                       #! EA = L0x5555555611c0; Value = 0x03fa03fa03fa03fa; PC = 0x55555555d26f *)
mov ymm13_0 L0x5555555611c0;
mov ymm13_1 L0x5555555611c2;
mov ymm13_2 L0x5555555611c4;
mov ymm13_3 L0x5555555611c6;
mov ymm13_4 L0x5555555611c8;
mov ymm13_5 L0x5555555611ca;
mov ymm13_6 L0x5555555611cc;
mov ymm13_7 L0x5555555611ce;
mov ymm13_8 L0x5555555611d0;
mov ymm13_9 L0x5555555611d2;
mov ymm13_a L0x5555555611d4;
mov ymm13_b L0x5555555611d6;
mov ymm13_c L0x5555555611d8;
mov ymm13_d L0x5555555611da;
mov ymm13_e L0x5555555611dc;
mov ymm13_f L0x5555555611de;
(* vpbroadcastw 0x126(%rdx),%ymm1                  #! EA = L0x555555561246; Value = 0x1c3c679663c7ee3d; PC = 0x55555555d277 *)
mov ymm1_0 L0x555555561246;
mov ymm1_1 L0x555555561246;
mov ymm1_2 L0x555555561246;
mov ymm1_3 L0x555555561246;
mov ymm1_4 L0x555555561246;
mov ymm1_5 L0x555555561246;
mov ymm1_6 L0x555555561246;
mov ymm1_7 L0x555555561246;
mov ymm1_8 L0x555555561246;
mov ymm1_9 L0x555555561246;
mov ymm1_a L0x555555561246;
mov ymm1_b L0x555555561246;
mov ymm1_c L0x555555561246;
mov ymm1_d L0x555555561246;
mov ymm1_e L0x555555561246;
mov ymm1_f L0x555555561246;
(* vpbroadcastw 0x326(%rdx),%ymm2                  #! EA = L0x555555561446; Value = 0xf43c039609c7f03d; PC = 0x55555555d280 *)
mov ymm2_0 L0x555555561446;
mov ymm2_1 L0x555555561446;
mov ymm2_2 L0x555555561446;
mov ymm2_3 L0x555555561446;
mov ymm2_4 L0x555555561446;
mov ymm2_5 L0x555555561446;
mov ymm2_6 L0x555555561446;
mov ymm2_7 L0x555555561446;
mov ymm2_8 L0x555555561446;
mov ymm2_9 L0x555555561446;
mov ymm2_a L0x555555561446;
mov ymm2_b L0x555555561446;
mov ymm2_c L0x555555561446;
mov ymm2_d L0x555555561446;
mov ymm2_e L0x555555561446;
mov ymm2_f L0x555555561446;
(* vpmullw %ymm1,%ymm5,%ymm8                       #! PC = 0x55555555d289 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555d28d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d291 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555d295 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpbroadcastw 0x124(%rdx),%ymm1                  #! EA = L0x555555561244; Value = 0x679663c7ee3d9239; PC = 0x55555555d299 *)
mov ymm1_0 L0x555555561244;
mov ymm1_1 L0x555555561244;
mov ymm1_2 L0x555555561244;
mov ymm1_3 L0x555555561244;
mov ymm1_4 L0x555555561244;
mov ymm1_5 L0x555555561244;
mov ymm1_6 L0x555555561244;
mov ymm1_7 L0x555555561244;
mov ymm1_8 L0x555555561244;
mov ymm1_9 L0x555555561244;
mov ymm1_a L0x555555561244;
mov ymm1_b L0x555555561244;
mov ymm1_c L0x555555561244;
mov ymm1_d L0x555555561244;
mov ymm1_e L0x555555561244;
mov ymm1_f L0x555555561244;
(* vpbroadcastw 0x324(%rdx),%ymm2                  #! EA = L0x555555561444; Value = 0x039609c7f03dec39; PC = 0x55555555d2a2 *)
mov ymm2_0 L0x555555561444;
mov ymm2_1 L0x555555561444;
mov ymm2_2 L0x555555561444;
mov ymm2_3 L0x555555561444;
mov ymm2_4 L0x555555561444;
mov ymm2_5 L0x555555561444;
mov ymm2_6 L0x555555561444;
mov ymm2_7 L0x555555561444;
mov ymm2_8 L0x555555561444;
mov ymm2_9 L0x555555561444;
mov ymm2_a L0x555555561444;
mov ymm2_b L0x555555561444;
mov ymm2_c L0x555555561444;
mov ymm2_d L0x555555561444;
mov ymm2_e L0x555555561444;
mov ymm2_f L0x555555561444;
(* vpmullw %ymm1,%ymm7,%ymm8                       #! PC = 0x55555555d2ab *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d2af *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d2b3 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm7                        #! PC = 0x55555555d2b7 *)
sub ymm7_0 ymm8_0 ymm7_0;
sub ymm7_1 ymm8_1 ymm7_1;
sub ymm7_2 ymm8_2 ymm7_2;
sub ymm7_3 ymm8_3 ymm7_3;
sub ymm7_4 ymm8_4 ymm7_4;
sub ymm7_5 ymm8_5 ymm7_5;
sub ymm7_6 ymm8_6 ymm7_6;
sub ymm7_7 ymm8_7 ymm7_7;
sub ymm7_8 ymm8_8 ymm7_8;
sub ymm7_9 ymm8_9 ymm7_9;
sub ymm7_a ymm8_a ymm7_a;
sub ymm7_b ymm8_b ymm7_b;
sub ymm7_c ymm8_c ymm7_c;
sub ymm7_d ymm8_d ymm7_d;
sub ymm7_e ymm8_e ymm7_e;
sub ymm7_f ymm8_f ymm7_f;
(* vpbroadcastw 0x122(%rdx),%ymm1                  #! EA = L0x555555561242; Value = 0x63c7ee3d92395a10; PC = 0x55555555d2bb *)
mov ymm1_0 L0x555555561242;
mov ymm1_1 L0x555555561242;
mov ymm1_2 L0x555555561242;
mov ymm1_3 L0x555555561242;
mov ymm1_4 L0x555555561242;
mov ymm1_5 L0x555555561242;
mov ymm1_6 L0x555555561242;
mov ymm1_7 L0x555555561242;
mov ymm1_8 L0x555555561242;
mov ymm1_9 L0x555555561242;
mov ymm1_a L0x555555561242;
mov ymm1_b L0x555555561242;
mov ymm1_c L0x555555561242;
mov ymm1_d L0x555555561242;
mov ymm1_e L0x555555561242;
mov ymm1_f L0x555555561242;
(* vpbroadcastw 0x322(%rdx),%ymm2                  #! EA = L0x555555561442; Value = 0x09c7f03dec39fa10; PC = 0x55555555d2c4 *)
mov ymm2_0 L0x555555561442;
mov ymm2_1 L0x555555561442;
mov ymm2_2 L0x555555561442;
mov ymm2_3 L0x555555561442;
mov ymm2_4 L0x555555561442;
mov ymm2_5 L0x555555561442;
mov ymm2_6 L0x555555561442;
mov ymm2_7 L0x555555561442;
mov ymm2_8 L0x555555561442;
mov ymm2_9 L0x555555561442;
mov ymm2_a L0x555555561442;
mov ymm2_b L0x555555561442;
mov ymm2_c L0x555555561442;
mov ymm2_d L0x555555561442;
mov ymm2_e L0x555555561442;
mov ymm2_f L0x555555561442;
(* vpmullw %ymm1,%ymm9,%ymm8                       #! PC = 0x55555555d2cd *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555d2d1 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d2d5 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555d2d9 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpbroadcastw 0x120(%rdx),%ymm1                  #! EA = L0x555555561240; Value = 0xee3d92395a10450b; PC = 0x55555555d2de *)
mov ymm1_0 L0x555555561240;
mov ymm1_1 L0x555555561240;
mov ymm1_2 L0x555555561240;
mov ymm1_3 L0x555555561240;
mov ymm1_4 L0x555555561240;
mov ymm1_5 L0x555555561240;
mov ymm1_6 L0x555555561240;
mov ymm1_7 L0x555555561240;
mov ymm1_8 L0x555555561240;
mov ymm1_9 L0x555555561240;
mov ymm1_a L0x555555561240;
mov ymm1_b L0x555555561240;
mov ymm1_c L0x555555561240;
mov ymm1_d L0x555555561240;
mov ymm1_e L0x555555561240;
mov ymm1_f L0x555555561240;
(* vpbroadcastw 0x320(%rdx),%ymm2                  #! EA = L0x555555561440; Value = 0xf03dec39fa10130b; PC = 0x55555555d2e7 *)
mov ymm2_0 L0x555555561440;
mov ymm2_1 L0x555555561440;
mov ymm2_2 L0x555555561440;
mov ymm2_3 L0x555555561440;
mov ymm2_4 L0x555555561440;
mov ymm2_5 L0x555555561440;
mov ymm2_6 L0x555555561440;
mov ymm2_7 L0x555555561440;
mov ymm2_8 L0x555555561440;
mov ymm2_9 L0x555555561440;
mov ymm2_a L0x555555561440;
mov ymm2_b L0x555555561440;
mov ymm2_c L0x555555561440;
mov ymm2_d L0x555555561440;
mov ymm2_e L0x555555561440;
mov ymm2_f L0x555555561440;
(* vpmullw %ymm1,%ymm11,%ymm8                      #! PC = 0x55555555d2f0 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d2f4 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d2f8 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm11,%ymm8,%ymm11                      #! PC = 0x55555555d2fc *)
sub ymm11_0 ymm8_0 ymm11_0;
sub ymm11_1 ymm8_1 ymm11_1;
sub ymm11_2 ymm8_2 ymm11_2;
sub ymm11_3 ymm8_3 ymm11_3;
sub ymm11_4 ymm8_4 ymm11_4;
sub ymm11_5 ymm8_5 ymm11_5;
sub ymm11_6 ymm8_6 ymm11_6;
sub ymm11_7 ymm8_7 ymm11_7;
sub ymm11_8 ymm8_8 ymm11_8;
sub ymm11_9 ymm8_9 ymm11_9;
sub ymm11_a ymm8_a ymm11_a;
sub ymm11_b ymm8_b ymm11_b;
sub ymm11_c ymm8_c ymm11_c;
sub ymm11_d ymm8_d ymm11_d;
sub ymm11_e ymm8_e ymm11_e;
sub ymm11_f ymm8_f ymm11_f;
(* vpmullw %ymm12,%ymm10,%ymm8                     #! PC = 0x55555555d301 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555d306 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d30b *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm10,%ymm10                      #! PC = 0x55555555d30f *)
sub ymm10_0 ymm10_0 ymm8_0;
sub ymm10_1 ymm10_1 ymm8_1;
sub ymm10_2 ymm10_2 ymm8_2;
sub ymm10_3 ymm10_3 ymm8_3;
sub ymm10_4 ymm10_4 ymm8_4;
sub ymm10_5 ymm10_5 ymm8_5;
sub ymm10_6 ymm10_6 ymm8_6;
sub ymm10_7 ymm10_7 ymm8_7;
sub ymm10_8 ymm10_8 ymm8_8;
sub ymm10_9 ymm10_9 ymm8_9;
sub ymm10_a ymm10_a ymm8_a;
sub ymm10_b ymm10_b ymm8_b;
sub ymm10_c ymm10_c ymm8_c;
sub ymm10_d ymm10_d ymm8_d;
sub ymm10_e ymm10_e ymm8_e;
sub ymm10_f ymm10_f ymm8_f;
(* vpmullw %ymm12,%ymm3,%ymm8                      #! PC = 0x55555555d314 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555d319 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d31e *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm3,%ymm3                        #! PC = 0x55555555d322 *)
sub ymm3_0 ymm3_0 ymm8_0;
sub ymm3_1 ymm3_1 ymm8_1;
sub ymm3_2 ymm3_2 ymm8_2;
sub ymm3_3 ymm3_3 ymm8_3;
sub ymm3_4 ymm3_4 ymm8_4;
sub ymm3_5 ymm3_5 ymm8_5;
sub ymm3_6 ymm3_6 ymm8_6;
sub ymm3_7 ymm3_7 ymm8_7;
sub ymm3_8 ymm3_8 ymm8_8;
sub ymm3_9 ymm3_9 ymm8_9;
sub ymm3_a ymm3_a ymm8_a;
sub ymm3_b ymm3_b ymm8_b;
sub ymm3_c ymm3_c ymm8_c;
sub ymm3_d ymm3_d ymm8_d;
sub ymm3_e ymm3_e ymm8_e;
sub ymm3_f ymm3_f ymm8_f;
(* vpmullw %ymm12,%ymm4,%ymm8                      #! PC = 0x55555555d327 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555d32c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d331 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555d335 *)
sub ymm4_0 ymm4_0 ymm8_0;
sub ymm4_1 ymm4_1 ymm8_1;
sub ymm4_2 ymm4_2 ymm8_2;
sub ymm4_3 ymm4_3 ymm8_3;
sub ymm4_4 ymm4_4 ymm8_4;
sub ymm4_5 ymm4_5 ymm8_5;
sub ymm4_6 ymm4_6 ymm8_6;
sub ymm4_7 ymm4_7 ymm8_7;
sub ymm4_8 ymm4_8 ymm8_8;
sub ymm4_9 ymm4_9 ymm8_9;
sub ymm4_a ymm4_a ymm8_a;
sub ymm4_b ymm4_b ymm8_b;
sub ymm4_c ymm4_c ymm8_c;
sub ymm4_d ymm4_d ymm8_d;
sub ymm4_e ymm4_e ymm8_e;
sub ymm4_f ymm4_f ymm8_f;
(* vpmullw %ymm12,%ymm6,%ymm8                      #! PC = 0x55555555d33a *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555d33f *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555d344 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpsubw %ymm8,%ymm6,%ymm6                        #! PC = 0x55555555d348 *)
sub ymm6_0 ymm6_0 ymm8_0;
sub ymm6_1 ymm6_1 ymm8_1;
sub ymm6_2 ymm6_2 ymm8_2;
sub ymm6_3 ymm6_3 ymm8_3;
sub ymm6_4 ymm6_4 ymm8_4;
sub ymm6_5 ymm6_5 ymm8_5;
sub ymm6_6 ymm6_6 ymm8_6;
sub ymm6_7 ymm6_7 ymm8_7;
sub ymm6_8 ymm6_8 ymm8_8;
sub ymm6_9 ymm6_9 ymm8_9;
sub ymm6_a ymm6_a ymm8_a;
sub ymm6_b ymm6_b ymm8_b;
sub ymm6_c ymm6_c ymm8_c;
sub ymm6_d ymm6_d ymm8_d;
sub ymm6_e ymm6_e ymm8_e;
sub ymm6_f ymm6_f ymm8_f;
(* vpaddw %ymm3,%ymm10,%ymm8                       #! PC = 0x55555555d34d *)
add ymm8_0 ymm10_0 ymm3_0;
add ymm8_1 ymm10_1 ymm3_1;
add ymm8_2 ymm10_2 ymm3_2;
add ymm8_3 ymm10_3 ymm3_3;
add ymm8_4 ymm10_4 ymm3_4;
add ymm8_5 ymm10_5 ymm3_5;
add ymm8_6 ymm10_6 ymm3_6;
add ymm8_7 ymm10_7 ymm3_7;
add ymm8_8 ymm10_8 ymm3_8;
add ymm8_9 ymm10_9 ymm3_9;
add ymm8_a ymm10_a ymm3_a;
add ymm8_b ymm10_b ymm3_b;
add ymm8_c ymm10_c ymm3_c;
add ymm8_d ymm10_d ymm3_d;
add ymm8_e ymm10_e ymm3_e;
add ymm8_f ymm10_f ymm3_f;
(* vpsubw %ymm3,%ymm10,%ymm3                       #! PC = 0x55555555d351 *)
sub ymm3_0 ymm10_0 ymm3_0;
sub ymm3_1 ymm10_1 ymm3_1;
sub ymm3_2 ymm10_2 ymm3_2;
sub ymm3_3 ymm10_3 ymm3_3;
sub ymm3_4 ymm10_4 ymm3_4;
sub ymm3_5 ymm10_5 ymm3_5;
sub ymm3_6 ymm10_6 ymm3_6;
sub ymm3_7 ymm10_7 ymm3_7;
sub ymm3_8 ymm10_8 ymm3_8;
sub ymm3_9 ymm10_9 ymm3_9;
sub ymm3_a ymm10_a ymm3_a;
sub ymm3_b ymm10_b ymm3_b;
sub ymm3_c ymm10_c ymm3_c;
sub ymm3_d ymm10_d ymm3_d;
sub ymm3_e ymm10_e ymm3_e;
sub ymm3_f ymm10_f ymm3_f;
(* vpaddw %ymm7,%ymm5,%ymm10                       #! PC = 0x55555555d355 *)
add ymm10_0 ymm5_0 ymm7_0;
add ymm10_1 ymm5_1 ymm7_1;
add ymm10_2 ymm5_2 ymm7_2;
add ymm10_3 ymm5_3 ymm7_3;
add ymm10_4 ymm5_4 ymm7_4;
add ymm10_5 ymm5_5 ymm7_5;
add ymm10_6 ymm5_6 ymm7_6;
add ymm10_7 ymm5_7 ymm7_7;
add ymm10_8 ymm5_8 ymm7_8;
add ymm10_9 ymm5_9 ymm7_9;
add ymm10_a ymm5_a ymm7_a;
add ymm10_b ymm5_b ymm7_b;
add ymm10_c ymm5_c ymm7_c;
add ymm10_d ymm5_d ymm7_d;
add ymm10_e ymm5_e ymm7_e;
add ymm10_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555d359 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm6,%ymm4,%ymm5                        #! PC = 0x55555555d35d *)
add ymm5_0 ymm4_0 ymm6_0;
add ymm5_1 ymm4_1 ymm6_1;
add ymm5_2 ymm4_2 ymm6_2;
add ymm5_3 ymm4_3 ymm6_3;
add ymm5_4 ymm4_4 ymm6_4;
add ymm5_5 ymm4_5 ymm6_5;
add ymm5_6 ymm4_6 ymm6_6;
add ymm5_7 ymm4_7 ymm6_7;
add ymm5_8 ymm4_8 ymm6_8;
add ymm5_9 ymm4_9 ymm6_9;
add ymm5_a ymm4_a ymm6_a;
add ymm5_b ymm4_b ymm6_b;
add ymm5_c ymm4_c ymm6_c;
add ymm5_d ymm4_d ymm6_d;
add ymm5_e ymm4_e ymm6_e;
add ymm5_f ymm4_f ymm6_f;
(* vpsubw %ymm6,%ymm4,%ymm6                        #! PC = 0x55555555d361 *)
sub ymm6_0 ymm4_0 ymm6_0;
sub ymm6_1 ymm4_1 ymm6_1;
sub ymm6_2 ymm4_2 ymm6_2;
sub ymm6_3 ymm4_3 ymm6_3;
sub ymm6_4 ymm4_4 ymm6_4;
sub ymm6_5 ymm4_5 ymm6_5;
sub ymm6_6 ymm4_6 ymm6_6;
sub ymm6_7 ymm4_7 ymm6_7;
sub ymm6_8 ymm4_8 ymm6_8;
sub ymm6_9 ymm4_9 ymm6_9;
sub ymm6_a ymm4_a ymm6_a;
sub ymm6_b ymm4_b ymm6_b;
sub ymm6_c ymm4_c ymm6_c;
sub ymm6_d ymm4_d ymm6_d;
sub ymm6_e ymm4_e ymm6_e;
sub ymm6_f ymm4_f ymm6_f;
(* vpaddw %ymm11,%ymm9,%ymm4                       #! PC = 0x55555555d365 *)
add ymm4_0 ymm9_0 ymm11_0;
add ymm4_1 ymm9_1 ymm11_1;
add ymm4_2 ymm9_2 ymm11_2;
add ymm4_3 ymm9_3 ymm11_3;
add ymm4_4 ymm9_4 ymm11_4;
add ymm4_5 ymm9_5 ymm11_5;
add ymm4_6 ymm9_6 ymm11_6;
add ymm4_7 ymm9_7 ymm11_7;
add ymm4_8 ymm9_8 ymm11_8;
add ymm4_9 ymm9_9 ymm11_9;
add ymm4_a ymm9_a ymm11_a;
add ymm4_b ymm9_b ymm11_b;
add ymm4_c ymm9_c ymm11_c;
add ymm4_d ymm9_d ymm11_d;
add ymm4_e ymm9_e ymm11_e;
add ymm4_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d36a *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x112(%rdx),%ymm1                  #! EA = L0x555555561232; Value = 0xb85730bc8cf7c126; PC = 0x55555555d36f *)
mov ymm1_0 L0x555555561232;
mov ymm1_1 L0x555555561232;
mov ymm1_2 L0x555555561232;
mov ymm1_3 L0x555555561232;
mov ymm1_4 L0x555555561232;
mov ymm1_5 L0x555555561232;
mov ymm1_6 L0x555555561232;
mov ymm1_7 L0x555555561232;
mov ymm1_8 L0x555555561232;
mov ymm1_9 L0x555555561232;
mov ymm1_a L0x555555561232;
mov ymm1_b L0x555555561232;
mov ymm1_c L0x555555561232;
mov ymm1_d L0x555555561232;
mov ymm1_e L0x555555561232;
mov ymm1_f L0x555555561232;
(* vpbroadcastw 0x312(%rdx),%ymm2                  #! EA = L0x555555561432; Value = 0xfe5708bc12f7fd26; PC = 0x55555555d378 *)
mov ymm2_0 L0x555555561432;
mov ymm2_1 L0x555555561432;
mov ymm2_2 L0x555555561432;
mov ymm2_3 L0x555555561432;
mov ymm2_4 L0x555555561432;
mov ymm2_5 L0x555555561432;
mov ymm2_6 L0x555555561432;
mov ymm2_7 L0x555555561432;
mov ymm2_8 L0x555555561432;
mov ymm2_9 L0x555555561432;
mov ymm2_a L0x555555561432;
mov ymm2_b L0x555555561432;
mov ymm2_c L0x555555561432;
mov ymm2_d L0x555555561432;
mov ymm2_e L0x555555561432;
mov ymm2_f L0x555555561432;
(* vpmullw %ymm1,%ymm3,%ymm9                       #! PC = 0x55555555d381 *)
smull mulHymm3_0 mulL_0 ymm1_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm1_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm1_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm1_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm1_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm1_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm1_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm1_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm1_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm1_9 ymm3_9;
smull mulHymm3_a mulL_a ymm1_a ymm3_a;
smull mulHymm3_b mulL_b ymm1_b ymm3_b;
smull mulHymm3_c mulL_c ymm1_c ymm3_c;
smull mulHymm3_d mulL_d ymm1_d ymm3_d;
smull mulHymm3_e mulL_e ymm1_e ymm3_e;
smull mulHymm3_f mulL_f ymm1_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm3,%ymm3                       #! PC = 0x55555555d385 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm2_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm2_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm2_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm2_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm2_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm2_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm2_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm2_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm2_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm2_9;
smull mulH_a mulLymm3_a ymm3_a ymm2_a;
smull mulH_b mulLymm3_b ymm3_b ymm2_b;
smull mulH_c mulLymm3_c ymm3_c ymm2_c;
smull mulH_d mulLymm3_d ymm3_d ymm2_d;
smull mulH_e mulLymm3_e ymm3_e ymm2_e;
smull mulH_f mulLymm3_f ymm3_f ymm2_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d389 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm3,%ymm9,%ymm3                        #! PC = 0x55555555d38d *)
sub ymm3_0 ymm9_0 ymm3_0;
sub ymm3_1 ymm9_1 ymm3_1;
sub ymm3_2 ymm9_2 ymm3_2;
sub ymm3_3 ymm9_3 ymm3_3;
sub ymm3_4 ymm9_4 ymm3_4;
sub ymm3_5 ymm9_5 ymm3_5;
sub ymm3_6 ymm9_6 ymm3_6;
sub ymm3_7 ymm9_7 ymm3_7;
sub ymm3_8 ymm9_8 ymm3_8;
sub ymm3_9 ymm9_9 ymm3_9;
sub ymm3_a ymm9_a ymm3_a;
sub ymm3_b ymm9_b ymm3_b;
sub ymm3_c ymm9_c ymm3_c;
sub ymm3_d ymm9_d ymm3_d;
sub ymm3_e ymm9_e ymm3_e;
sub ymm3_f ymm9_f ymm3_f;
(* vpmullw %ymm1,%ymm7,%ymm9                       #! PC = 0x55555555d391 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d395 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d399 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm7                        #! PC = 0x55555555d39d *)
sub ymm7_0 ymm9_0 ymm7_0;
sub ymm7_1 ymm9_1 ymm7_1;
sub ymm7_2 ymm9_2 ymm7_2;
sub ymm7_3 ymm9_3 ymm7_3;
sub ymm7_4 ymm9_4 ymm7_4;
sub ymm7_5 ymm9_5 ymm7_5;
sub ymm7_6 ymm9_6 ymm7_6;
sub ymm7_7 ymm9_7 ymm7_7;
sub ymm7_8 ymm9_8 ymm7_8;
sub ymm7_9 ymm9_9 ymm7_9;
sub ymm7_a ymm9_a ymm7_a;
sub ymm7_b ymm9_b ymm7_b;
sub ymm7_c ymm9_c ymm7_c;
sub ymm7_d ymm9_d ymm7_d;
sub ymm7_e ymm9_e ymm7_e;
sub ymm7_f ymm9_f ymm7_f;
(* vpbroadcastw 0x110(%rdx),%ymm1                  #! EA = L0x555555561230; Value = 0x30bc8cf7c126e487; PC = 0x55555555d3a1 *)
mov ymm1_0 L0x555555561230;
mov ymm1_1 L0x555555561230;
mov ymm1_2 L0x555555561230;
mov ymm1_3 L0x555555561230;
mov ymm1_4 L0x555555561230;
mov ymm1_5 L0x555555561230;
mov ymm1_6 L0x555555561230;
mov ymm1_7 L0x555555561230;
mov ymm1_8 L0x555555561230;
mov ymm1_9 L0x555555561230;
mov ymm1_a L0x555555561230;
mov ymm1_b L0x555555561230;
mov ymm1_c L0x555555561230;
mov ymm1_d L0x555555561230;
mov ymm1_e L0x555555561230;
mov ymm1_f L0x555555561230;
(* vpbroadcastw 0x310(%rdx),%ymm2                  #! EA = L0x555555561430; Value = 0x08bc12f7fd260a87; PC = 0x55555555d3aa *)
mov ymm2_0 L0x555555561430;
mov ymm2_1 L0x555555561430;
mov ymm2_2 L0x555555561430;
mov ymm2_3 L0x555555561430;
mov ymm2_4 L0x555555561430;
mov ymm2_5 L0x555555561430;
mov ymm2_6 L0x555555561430;
mov ymm2_7 L0x555555561430;
mov ymm2_8 L0x555555561430;
mov ymm2_9 L0x555555561430;
mov ymm2_a L0x555555561430;
mov ymm2_b L0x555555561430;
mov ymm2_c L0x555555561430;
mov ymm2_d L0x555555561430;
mov ymm2_e L0x555555561430;
mov ymm2_f L0x555555561430;
(* vpmullw %ymm1,%ymm6,%ymm9                       #! PC = 0x55555555d3b3 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555d3b7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d3bb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm6,%ymm9,%ymm6                        #! PC = 0x55555555d3bf *)
sub ymm6_0 ymm9_0 ymm6_0;
sub ymm6_1 ymm9_1 ymm6_1;
sub ymm6_2 ymm9_2 ymm6_2;
sub ymm6_3 ymm9_3 ymm6_3;
sub ymm6_4 ymm9_4 ymm6_4;
sub ymm6_5 ymm9_5 ymm6_5;
sub ymm6_6 ymm9_6 ymm6_6;
sub ymm6_7 ymm9_7 ymm6_7;
sub ymm6_8 ymm9_8 ymm6_8;
sub ymm6_9 ymm9_9 ymm6_9;
sub ymm6_a ymm9_a ymm6_a;
sub ymm6_b ymm9_b ymm6_b;
sub ymm6_c ymm9_c ymm6_c;
sub ymm6_d ymm9_d ymm6_d;
sub ymm6_e ymm9_e ymm6_e;
sub ymm6_f ymm9_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555d3c3 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d3c7 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d3cb *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d3cf *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpaddw %ymm5,%ymm8,%ymm9                        #! PC = 0x55555555d3d4 *)
add ymm9_0 ymm8_0 ymm5_0;
add ymm9_1 ymm8_1 ymm5_1;
add ymm9_2 ymm8_2 ymm5_2;
add ymm9_3 ymm8_3 ymm5_3;
add ymm9_4 ymm8_4 ymm5_4;
add ymm9_5 ymm8_5 ymm5_5;
add ymm9_6 ymm8_6 ymm5_6;
add ymm9_7 ymm8_7 ymm5_7;
add ymm9_8 ymm8_8 ymm5_8;
add ymm9_9 ymm8_9 ymm5_9;
add ymm9_a ymm8_a ymm5_a;
add ymm9_b ymm8_b ymm5_b;
add ymm9_c ymm8_c ymm5_c;
add ymm9_d ymm8_d ymm5_d;
add ymm9_e ymm8_e ymm5_e;
add ymm9_f ymm8_f ymm5_f;
(* vpsubw %ymm5,%ymm8,%ymm5                        #! PC = 0x55555555d3d8 *)
sub ymm5_0 ymm8_0 ymm5_0;
sub ymm5_1 ymm8_1 ymm5_1;
sub ymm5_2 ymm8_2 ymm5_2;
sub ymm5_3 ymm8_3 ymm5_3;
sub ymm5_4 ymm8_4 ymm5_4;
sub ymm5_5 ymm8_5 ymm5_5;
sub ymm5_6 ymm8_6 ymm5_6;
sub ymm5_7 ymm8_7 ymm5_7;
sub ymm5_8 ymm8_8 ymm5_8;
sub ymm5_9 ymm8_9 ymm5_9;
sub ymm5_a ymm8_a ymm5_a;
sub ymm5_b ymm8_b ymm5_b;
sub ymm5_c ymm8_c ymm5_c;
sub ymm5_d ymm8_d ymm5_d;
sub ymm5_e ymm8_e ymm5_e;
sub ymm5_f ymm8_f ymm5_f;
(* vpaddw %ymm4,%ymm10,%ymm8                       #! PC = 0x55555555d3dc *)
add ymm8_0 ymm10_0 ymm4_0;
add ymm8_1 ymm10_1 ymm4_1;
add ymm8_2 ymm10_2 ymm4_2;
add ymm8_3 ymm10_3 ymm4_3;
add ymm8_4 ymm10_4 ymm4_4;
add ymm8_5 ymm10_5 ymm4_5;
add ymm8_6 ymm10_6 ymm4_6;
add ymm8_7 ymm10_7 ymm4_7;
add ymm8_8 ymm10_8 ymm4_8;
add ymm8_9 ymm10_9 ymm4_9;
add ymm8_a ymm10_a ymm4_a;
add ymm8_b ymm10_b ymm4_b;
add ymm8_c ymm10_c ymm4_c;
add ymm8_d ymm10_d ymm4_d;
add ymm8_e ymm10_e ymm4_e;
add ymm8_f ymm10_f ymm4_f;
(* vpsubw %ymm4,%ymm10,%ymm4                       #! PC = 0x55555555d3e0 *)
sub ymm4_0 ymm10_0 ymm4_0;
sub ymm4_1 ymm10_1 ymm4_1;
sub ymm4_2 ymm10_2 ymm4_2;
sub ymm4_3 ymm10_3 ymm4_3;
sub ymm4_4 ymm10_4 ymm4_4;
sub ymm4_5 ymm10_5 ymm4_5;
sub ymm4_6 ymm10_6 ymm4_6;
sub ymm4_7 ymm10_7 ymm4_7;
sub ymm4_8 ymm10_8 ymm4_8;
sub ymm4_9 ymm10_9 ymm4_9;
sub ymm4_a ymm10_a ymm4_a;
sub ymm4_b ymm10_b ymm4_b;
sub ymm4_c ymm10_c ymm4_c;
sub ymm4_d ymm10_d ymm4_d;
sub ymm4_e ymm10_e ymm4_e;
sub ymm4_f ymm10_f ymm4_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555d3e4 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555d3e8 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm11,%ymm7,%ymm3                       #! PC = 0x55555555d3ec *)
add ymm3_0 ymm7_0 ymm11_0;
add ymm3_1 ymm7_1 ymm11_1;
add ymm3_2 ymm7_2 ymm11_2;
add ymm3_3 ymm7_3 ymm11_3;
add ymm3_4 ymm7_4 ymm11_4;
add ymm3_5 ymm7_5 ymm11_5;
add ymm3_6 ymm7_6 ymm11_6;
add ymm3_7 ymm7_7 ymm11_7;
add ymm3_8 ymm7_8 ymm11_8;
add ymm3_9 ymm7_9 ymm11_9;
add ymm3_a ymm7_a ymm11_a;
add ymm3_b ymm7_b ymm11_b;
add ymm3_c ymm7_c ymm11_c;
add ymm3_d ymm7_d ymm11_d;
add ymm3_e ymm7_e ymm11_e;
add ymm3_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555d3f1 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpbroadcastw 0x108(%rdx),%ymm1                  #! EA = L0x555555561228; Value = 0xae886f65ad9a276d; PC = 0x55555555d3f6 *)
mov ymm1_0 L0x555555561228;
mov ymm1_1 L0x555555561228;
mov ymm1_2 L0x555555561228;
mov ymm1_3 L0x555555561228;
mov ymm1_4 L0x555555561228;
mov ymm1_5 L0x555555561228;
mov ymm1_6 L0x555555561228;
mov ymm1_7 L0x555555561228;
mov ymm1_8 L0x555555561228;
mov ymm1_9 L0x555555561228;
mov ymm1_a L0x555555561228;
mov ymm1_b L0x555555561228;
mov ymm1_c L0x555555561228;
mov ymm1_d L0x555555561228;
mov ymm1_e L0x555555561228;
mov ymm1_f L0x555555561228;
(* vpbroadcastw 0x308(%rdx),%ymm2                  #! EA = L0x555555561428; Value = 0xfe880165f19a096d; PC = 0x55555555d3ff *)
mov ymm2_0 L0x555555561428;
mov ymm2_1 L0x555555561428;
mov ymm2_2 L0x555555561428;
mov ymm2_3 L0x555555561428;
mov ymm2_4 L0x555555561428;
mov ymm2_5 L0x555555561428;
mov ymm2_6 L0x555555561428;
mov ymm2_7 L0x555555561428;
mov ymm2_8 L0x555555561428;
mov ymm2_9 L0x555555561428;
mov ymm2_a L0x555555561428;
mov ymm2_b L0x555555561428;
mov ymm2_c L0x555555561428;
mov ymm2_d L0x555555561428;
mov ymm2_e L0x555555561428;
mov ymm2_f L0x555555561428;
(* vpmullw %ymm1,%ymm5,%ymm7                       #! PC = 0x55555555d408 *)
smull mulHymm5_0 mulL_0 ymm1_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm1_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm1_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm1_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm1_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm1_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm1_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm1_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm1_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm1_9 ymm5_9;
smull mulHymm5_a mulL_a ymm1_a ymm5_a;
smull mulHymm5_b mulL_b ymm1_b ymm5_b;
smull mulHymm5_c mulL_c ymm1_c ymm5_c;
smull mulHymm5_d mulL_d ymm1_d ymm5_d;
smull mulHymm5_e mulL_e ymm1_e ymm5_e;
smull mulHymm5_f mulL_f ymm1_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm5,%ymm5                       #! PC = 0x55555555d40c *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm2_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm2_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm2_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm2_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm2_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm2_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm2_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm2_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm2_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm2_9;
smull mulH_a mulLymm5_a ymm5_a ymm2_a;
smull mulH_b mulLymm5_b ymm5_b ymm2_b;
smull mulH_c mulLymm5_c ymm5_c ymm2_c;
smull mulH_d mulLymm5_d ymm5_d ymm2_d;
smull mulH_e mulLymm5_e ymm5_e ymm2_e;
smull mulH_f mulLymm5_f ymm5_f ymm2_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d410 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm5,%ymm7,%ymm5                        #! PC = 0x55555555d414 *)
sub ymm5_0 ymm7_0 ymm5_0;
sub ymm5_1 ymm7_1 ymm5_1;
sub ymm5_2 ymm7_2 ymm5_2;
sub ymm5_3 ymm7_3 ymm5_3;
sub ymm5_4 ymm7_4 ymm5_4;
sub ymm5_5 ymm7_5 ymm5_5;
sub ymm5_6 ymm7_6 ymm5_6;
sub ymm5_7 ymm7_7 ymm5_7;
sub ymm5_8 ymm7_8 ymm5_8;
sub ymm5_9 ymm7_9 ymm5_9;
sub ymm5_a ymm7_a ymm5_a;
sub ymm5_b ymm7_b ymm5_b;
sub ymm5_c ymm7_c ymm5_c;
sub ymm5_d ymm7_d ymm5_d;
sub ymm5_e ymm7_e ymm5_e;
sub ymm5_f ymm7_f ymm5_f;
(* vpmullw %ymm1,%ymm4,%ymm7                       #! PC = 0x55555555d418 *)
smull mulHymm4_0 mulL_0 ymm1_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm1_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm1_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm1_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm1_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm1_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm1_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm1_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm1_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm1_9 ymm4_9;
smull mulHymm4_a mulL_a ymm1_a ymm4_a;
smull mulHymm4_b mulL_b ymm1_b ymm4_b;
smull mulHymm4_c mulL_c ymm1_c ymm4_c;
smull mulHymm4_d mulL_d ymm1_d ymm4_d;
smull mulHymm4_e mulL_e ymm1_e ymm4_e;
smull mulHymm4_f mulL_f ymm1_f ymm4_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm4,%ymm4                       #! PC = 0x55555555d41c *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm2_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm2_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm2_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm2_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm2_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm2_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm2_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm2_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm2_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm2_9;
smull mulH_a mulLymm4_a ymm4_a ymm2_a;
smull mulH_b mulLymm4_b ymm4_b ymm2_b;
smull mulH_c mulLymm4_c ymm4_c ymm2_c;
smull mulH_d mulLymm4_d ymm4_d ymm2_d;
smull mulH_e mulLymm4_e ymm4_e ymm2_e;
smull mulH_f mulLymm4_f ymm4_f ymm2_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d420 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm4,%ymm7,%ymm4                        #! PC = 0x55555555d424 *)
sub ymm4_0 ymm7_0 ymm4_0;
sub ymm4_1 ymm7_1 ymm4_1;
sub ymm4_2 ymm7_2 ymm4_2;
sub ymm4_3 ymm7_3 ymm4_3;
sub ymm4_4 ymm7_4 ymm4_4;
sub ymm4_5 ymm7_5 ymm4_5;
sub ymm4_6 ymm7_6 ymm4_6;
sub ymm4_7 ymm7_7 ymm4_7;
sub ymm4_8 ymm7_8 ymm4_8;
sub ymm4_9 ymm7_9 ymm4_9;
sub ymm4_a ymm7_a ymm4_a;
sub ymm4_b ymm7_b ymm4_b;
sub ymm4_c ymm7_c ymm4_c;
sub ymm4_d ymm7_d ymm4_d;
sub ymm4_e ymm7_e ymm4_e;
sub ymm4_f ymm7_f ymm4_f;
(* vpmullw %ymm1,%ymm6,%ymm7                       #! PC = 0x55555555d428 *)
smull mulHymm6_0 mulL_0 ymm1_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm1_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm1_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm1_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm1_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm1_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm1_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm1_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm1_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm1_9 ymm6_9;
smull mulHymm6_a mulL_a ymm1_a ymm6_a;
smull mulHymm6_b mulL_b ymm1_b ymm6_b;
smull mulHymm6_c mulL_c ymm1_c ymm6_c;
smull mulHymm6_d mulL_d ymm1_d ymm6_d;
smull mulHymm6_e mulL_e ymm1_e ymm6_e;
smull mulHymm6_f mulL_f ymm1_f ymm6_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm6,%ymm6                       #! PC = 0x55555555d42c *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm2_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm2_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm2_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm2_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm2_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm2_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm2_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm2_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm2_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm2_9;
smull mulH_a mulLymm6_a ymm6_a ymm2_a;
smull mulH_b mulLymm6_b ymm6_b ymm2_b;
smull mulH_c mulLymm6_c ymm6_c ymm2_c;
smull mulH_d mulLymm6_d ymm6_d ymm2_d;
smull mulH_e mulLymm6_e ymm6_e ymm2_e;
smull mulH_f mulLymm6_f ymm6_f ymm2_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d430 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm6,%ymm7,%ymm6                        #! PC = 0x55555555d434 *)
sub ymm6_0 ymm7_0 ymm6_0;
sub ymm6_1 ymm7_1 ymm6_1;
sub ymm6_2 ymm7_2 ymm6_2;
sub ymm6_3 ymm7_3 ymm6_3;
sub ymm6_4 ymm7_4 ymm6_4;
sub ymm6_5 ymm7_5 ymm6_5;
sub ymm6_6 ymm7_6 ymm6_6;
sub ymm6_7 ymm7_7 ymm6_7;
sub ymm6_8 ymm7_8 ymm6_8;
sub ymm6_9 ymm7_9 ymm6_9;
sub ymm6_a ymm7_a ymm6_a;
sub ymm6_b ymm7_b ymm6_b;
sub ymm6_c ymm7_c ymm6_c;
sub ymm6_d ymm7_d ymm6_d;
sub ymm6_e ymm7_e ymm6_e;
sub ymm6_f ymm7_f ymm6_f;
(* vpmullw %ymm1,%ymm11,%ymm7                      #! PC = 0x55555555d438 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d43c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d440 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555d444 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpmullw %ymm12,%ymm9,%ymm7                      #! PC = 0x55555555d449 *)
smull mulHymm9_0 mulL_0 ymm12_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm12_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm12_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm12_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm12_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm12_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm12_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm12_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm12_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm12_9 ymm9_9;
smull mulHymm9_a mulL_a ymm12_a ymm9_a;
smull mulHymm9_b mulL_b ymm12_b ymm9_b;
smull mulHymm9_c mulL_c ymm12_c ymm9_c;
smull mulHymm9_d mulL_d ymm12_d ymm9_d;
smull mulHymm9_e mulL_e ymm12_e ymm9_e;
smull mulHymm9_f mulL_f ymm12_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm9,%ymm9                      #! PC = 0x55555555d44e *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm13_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm13_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm13_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm13_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm13_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm13_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm13_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm13_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm13_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm13_9;
smull mulH_a mulLymm9_a ymm9_a ymm13_a;
smull mulH_b mulLymm9_b ymm9_b ymm13_b;
smull mulH_c mulLymm9_c ymm9_c ymm13_c;
smull mulH_d mulLymm9_d ymm9_d ymm13_d;
smull mulH_e mulLymm9_e ymm9_e ymm13_e;
smull mulH_f mulLymm9_f ymm9_f ymm13_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d453 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x55555555d457 *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpmullw %ymm12,%ymm8,%ymm7                      #! PC = 0x55555555d45b *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555d460 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555d465 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x55555555d469 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vmovdqa %ymm9,0x700(%rdi)                       #! EA = L0x7fffffffd9e0; PC = 0x55555555d46d *)
mov L0x7fffffffd9e0 ymm9_0;
mov L0x7fffffffd9e2 ymm9_1;
mov L0x7fffffffd9e4 ymm9_2;
mov L0x7fffffffd9e6 ymm9_3;
mov L0x7fffffffd9e8 ymm9_4;
mov L0x7fffffffd9ea ymm9_5;
mov L0x7fffffffd9ec ymm9_6;
mov L0x7fffffffd9ee ymm9_7;
mov L0x7fffffffd9f0 ymm9_8;
mov L0x7fffffffd9f2 ymm9_9;
mov L0x7fffffffd9f4 ymm9_a;
mov L0x7fffffffd9f6 ymm9_b;
mov L0x7fffffffd9f8 ymm9_c;
mov L0x7fffffffd9fa ymm9_d;
mov L0x7fffffffd9fc ymm9_e;
mov L0x7fffffffd9fe ymm9_f;
(* vmovdqa %ymm8,0x720(%rdi)                       #! EA = L0x7fffffffda00; PC = 0x55555555d475 *)
mov L0x7fffffffda00 ymm8_0;
mov L0x7fffffffda02 ymm8_1;
mov L0x7fffffffda04 ymm8_2;
mov L0x7fffffffda06 ymm8_3;
mov L0x7fffffffda08 ymm8_4;
mov L0x7fffffffda0a ymm8_5;
mov L0x7fffffffda0c ymm8_6;
mov L0x7fffffffda0e ymm8_7;
mov L0x7fffffffda10 ymm8_8;
mov L0x7fffffffda12 ymm8_9;
mov L0x7fffffffda14 ymm8_a;
mov L0x7fffffffda16 ymm8_b;
mov L0x7fffffffda18 ymm8_c;
mov L0x7fffffffda1a ymm8_d;
mov L0x7fffffffda1c ymm8_e;
mov L0x7fffffffda1e ymm8_f;
(* vmovdqa %ymm10,0x740(%rdi)                      #! EA = L0x7fffffffda20; PC = 0x55555555d47d *)
mov L0x7fffffffda20 ymm10_0;
mov L0x7fffffffda22 ymm10_1;
mov L0x7fffffffda24 ymm10_2;
mov L0x7fffffffda26 ymm10_3;
mov L0x7fffffffda28 ymm10_4;
mov L0x7fffffffda2a ymm10_5;
mov L0x7fffffffda2c ymm10_6;
mov L0x7fffffffda2e ymm10_7;
mov L0x7fffffffda30 ymm10_8;
mov L0x7fffffffda32 ymm10_9;
mov L0x7fffffffda34 ymm10_a;
mov L0x7fffffffda36 ymm10_b;
mov L0x7fffffffda38 ymm10_c;
mov L0x7fffffffda3a ymm10_d;
mov L0x7fffffffda3c ymm10_e;
mov L0x7fffffffda3e ymm10_f;
(* vmovdqa %ymm3,0x760(%rdi)                       #! EA = L0x7fffffffda40; PC = 0x55555555d485 *)
mov L0x7fffffffda40 ymm3_0;
mov L0x7fffffffda42 ymm3_1;
mov L0x7fffffffda44 ymm3_2;
mov L0x7fffffffda46 ymm3_3;
mov L0x7fffffffda48 ymm3_4;
mov L0x7fffffffda4a ymm3_5;
mov L0x7fffffffda4c ymm3_6;
mov L0x7fffffffda4e ymm3_7;
mov L0x7fffffffda50 ymm3_8;
mov L0x7fffffffda52 ymm3_9;
mov L0x7fffffffda54 ymm3_a;
mov L0x7fffffffda56 ymm3_b;
mov L0x7fffffffda58 ymm3_c;
mov L0x7fffffffda5a ymm3_d;
mov L0x7fffffffda5c ymm3_e;
mov L0x7fffffffda5e ymm3_f;
(* vmovdqa %ymm5,0x780(%rdi)                       #! EA = L0x7fffffffda60; PC = 0x55555555d48d *)
mov L0x7fffffffda60 ymm5_0;
mov L0x7fffffffda62 ymm5_1;
mov L0x7fffffffda64 ymm5_2;
mov L0x7fffffffda66 ymm5_3;
mov L0x7fffffffda68 ymm5_4;
mov L0x7fffffffda6a ymm5_5;
mov L0x7fffffffda6c ymm5_6;
mov L0x7fffffffda6e ymm5_7;
mov L0x7fffffffda70 ymm5_8;
mov L0x7fffffffda72 ymm5_9;
mov L0x7fffffffda74 ymm5_a;
mov L0x7fffffffda76 ymm5_b;
mov L0x7fffffffda78 ymm5_c;
mov L0x7fffffffda7a ymm5_d;
mov L0x7fffffffda7c ymm5_e;
mov L0x7fffffffda7e ymm5_f;
(* vmovdqa %ymm4,0x7a0(%rdi)                       #! EA = L0x7fffffffda80; PC = 0x55555555d495 *)
mov L0x7fffffffda80 ymm4_0;
mov L0x7fffffffda82 ymm4_1;
mov L0x7fffffffda84 ymm4_2;
mov L0x7fffffffda86 ymm4_3;
mov L0x7fffffffda88 ymm4_4;
mov L0x7fffffffda8a ymm4_5;
mov L0x7fffffffda8c ymm4_6;
mov L0x7fffffffda8e ymm4_7;
mov L0x7fffffffda90 ymm4_8;
mov L0x7fffffffda92 ymm4_9;
mov L0x7fffffffda94 ymm4_a;
mov L0x7fffffffda96 ymm4_b;
mov L0x7fffffffda98 ymm4_c;
mov L0x7fffffffda9a ymm4_d;
mov L0x7fffffffda9c ymm4_e;
mov L0x7fffffffda9e ymm4_f;
(* vmovdqa %ymm6,0x7c0(%rdi)                       #! EA = L0x7fffffffdaa0; PC = 0x55555555d49d *)
mov L0x7fffffffdaa0 ymm6_0;
mov L0x7fffffffdaa2 ymm6_1;
mov L0x7fffffffdaa4 ymm6_2;
mov L0x7fffffffdaa6 ymm6_3;
mov L0x7fffffffdaa8 ymm6_4;
mov L0x7fffffffdaaa ymm6_5;
mov L0x7fffffffdaac ymm6_6;
mov L0x7fffffffdaae ymm6_7;
mov L0x7fffffffdab0 ymm6_8;
mov L0x7fffffffdab2 ymm6_9;
mov L0x7fffffffdab4 ymm6_a;
mov L0x7fffffffdab6 ymm6_b;
mov L0x7fffffffdab8 ymm6_c;
mov L0x7fffffffdaba ymm6_d;
mov L0x7fffffffdabc ymm6_e;
mov L0x7fffffffdabe ymm6_f;
(* vmovdqa %ymm11,0x7e0(%rdi)                      #! EA = L0x7fffffffdac0; PC = 0x55555555d4a5 *)
mov L0x7fffffffdac0 ymm11_0;
mov L0x7fffffffdac2 ymm11_1;
mov L0x7fffffffdac4 ymm11_2;
mov L0x7fffffffdac6 ymm11_3;
mov L0x7fffffffdac8 ymm11_4;
mov L0x7fffffffdaca ymm11_5;
mov L0x7fffffffdacc ymm11_6;
mov L0x7fffffffdace ymm11_7;
mov L0x7fffffffdad0 ymm11_8;
mov L0x7fffffffdad2 ymm11_9;
mov L0x7fffffffdad4 ymm11_a;
mov L0x7fffffffdad6 ymm11_b;
mov L0x7fffffffdad8 ymm11_c;
mov L0x7fffffffdada ymm11_d;
mov L0x7fffffffdadc ymm11_e;
mov L0x7fffffffdade ymm11_f;



(**************** LEVELS 3-5, 7 *****************)

ghost segment7@bit :
segment7 = 
x**  0*(
L0x7fffffffd9e0*x** 0+L0x7fffffffd9e2*x** 1+L0x7fffffffd9e4*x** 2+
L0x7fffffffd9e6*x** 3+L0x7fffffffd9e8*x** 4+L0x7fffffffd9ea*x** 5+
L0x7fffffffd9ec*x** 6+L0x7fffffffd9ee*x** 7+L0x7fffffffd9f0*x** 8+
L0x7fffffffd9f2*x** 9+L0x7fffffffd9f4*x**10+L0x7fffffffd9f6*x**11+
L0x7fffffffd9f8*x**12+L0x7fffffffd9fa*x**13+L0x7fffffffd9fc*x**14+
L0x7fffffffd9fe*x**15)+
x** 16*(
L0x7fffffffda00*x** 0+L0x7fffffffda02*x** 1+L0x7fffffffda04*x** 2+
L0x7fffffffda06*x** 3+L0x7fffffffda08*x** 4+L0x7fffffffda0a*x** 5+
L0x7fffffffda0c*x** 6+L0x7fffffffda0e*x** 7+L0x7fffffffda10*x** 8+
L0x7fffffffda12*x** 9+L0x7fffffffda14*x**10+L0x7fffffffda16*x**11+
L0x7fffffffda18*x**12+L0x7fffffffda1a*x**13+L0x7fffffffda1c*x**14+
L0x7fffffffda1e*x**15)+
x** 32*(
L0x7fffffffda20*x** 0+L0x7fffffffda22*x** 1+L0x7fffffffda24*x** 2+
L0x7fffffffda26*x** 3+L0x7fffffffda28*x** 4+L0x7fffffffda2a*x** 5+
L0x7fffffffda2c*x** 6+L0x7fffffffda2e*x** 7+L0x7fffffffda30*x** 8+
L0x7fffffffda32*x** 9+L0x7fffffffda34*x**10+L0x7fffffffda36*x**11+
L0x7fffffffda38*x**12+L0x7fffffffda3a*x**13+L0x7fffffffda3c*x**14+
L0x7fffffffda3e*x**15)+
x** 48*(
L0x7fffffffda40*x** 0+L0x7fffffffda42*x** 1+L0x7fffffffda44*x** 2+
L0x7fffffffda46*x** 3+L0x7fffffffda48*x** 4+L0x7fffffffda4a*x** 5+
L0x7fffffffda4c*x** 6+L0x7fffffffda4e*x** 7+L0x7fffffffda50*x** 8+
L0x7fffffffda52*x** 9+L0x7fffffffda54*x**10+L0x7fffffffda56*x**11+
L0x7fffffffda58*x**12+L0x7fffffffda5a*x**13+L0x7fffffffda5c*x**14+
L0x7fffffffda5e*x**15)+
x** 64*(
L0x7fffffffda60*x** 0+L0x7fffffffda62*x** 1+L0x7fffffffda64*x** 2+
L0x7fffffffda66*x** 3+L0x7fffffffda68*x** 4+L0x7fffffffda6a*x** 5+
L0x7fffffffda6c*x** 6+L0x7fffffffda6e*x** 7+L0x7fffffffda70*x** 8+
L0x7fffffffda72*x** 9+L0x7fffffffda74*x**10+L0x7fffffffda76*x**11+
L0x7fffffffda78*x**12+L0x7fffffffda7a*x**13+L0x7fffffffda7c*x**14+
L0x7fffffffda7e*x**15)+
x** 80*(
L0x7fffffffda80*x** 0+L0x7fffffffda82*x** 1+L0x7fffffffda84*x** 2+
L0x7fffffffda86*x** 3+L0x7fffffffda88*x** 4+L0x7fffffffda8a*x** 5+
L0x7fffffffda8c*x** 6+L0x7fffffffda8e*x** 7+L0x7fffffffda90*x** 8+
L0x7fffffffda92*x** 9+L0x7fffffffda94*x**10+L0x7fffffffda96*x**11+
L0x7fffffffda98*x**12+L0x7fffffffda9a*x**13+L0x7fffffffda9c*x**14+
L0x7fffffffda9e*x**15)+
x** 96*(
L0x7fffffffdaa0*x** 0+L0x7fffffffdaa2*x** 1+L0x7fffffffdaa4*x** 2+
L0x7fffffffdaa6*x** 3+L0x7fffffffdaa8*x** 4+L0x7fffffffdaaa*x** 5+
L0x7fffffffdaac*x** 6+L0x7fffffffdaae*x** 7+L0x7fffffffdab0*x** 8+
L0x7fffffffdab2*x** 9+L0x7fffffffdab4*x**10+L0x7fffffffdab6*x**11+
L0x7fffffffdab8*x**12+L0x7fffffffdaba*x**13+L0x7fffffffdabc*x**14+
L0x7fffffffdabe*x**15)+
x**112*(
L0x7fffffffdac0*x** 0+L0x7fffffffdac2*x** 1+L0x7fffffffdac4*x** 2+
L0x7fffffffdac6*x** 3+L0x7fffffffdac8*x** 4+L0x7fffffffdaca*x** 5+
L0x7fffffffdacc*x** 6+L0x7fffffffdace*x** 7+L0x7fffffffdad0*x** 8+
L0x7fffffffdad2*x** 9+L0x7fffffffdad4*x**10+L0x7fffffffdad6*x**11+
L0x7fffffffdad8*x**12+L0x7fffffffdada*x**13+L0x7fffffffdadc*x**14+
L0x7fffffffdade*x**15)
&& true;


(**************** CUT  63 *****************)

cut
and [
eqmod (64*inp_poly1c0**2) (segment7) [10753, x**2 - 10463],
eqmod (64*inp_poly1c1**2) (segment7) [10753, x**2 - 290],
eqmod (64*inp_poly1c2**2) (segment7) [10753, x**2 - 697],
eqmod (64*inp_poly1c3**2) (segment7) [10753, x**2 - 10056],
eqmod (64*inp_poly1c4**2) (segment7) [10753, x**2 - 3687],
eqmod (64*inp_poly1c5**2) (segment7) [10753, x**2 - 7066],
eqmod (64*inp_poly1c6**2) (segment7) [10753, x**2 - 8677],
eqmod (64*inp_poly1c7**2) (segment7) [10753, x**2 - 2076]
,
eqmod (64*inp_poly1c8**2) (segment7) [10753, x**2 - 7108],
eqmod (64*inp_poly1c9**2) (segment7) [10753, x**2 - 3645],
eqmod (64*inp_poly1ca**2) (segment7) [10753, x**2 - 7092],
eqmod (64*inp_poly1cb**2) (segment7) [10753, x**2 - 3661],
eqmod (64*inp_poly1cc**2) (segment7) [10753, x**2 - 2032],
eqmod (64*inp_poly1cd**2) (segment7) [10753, x**2 - 8721],
eqmod (64*inp_poly1ce**2) (segment7) [10753, x**2 - 7649],
eqmod (64*inp_poly1cf**2) (segment7) [10753, x**2 - 3104]
] prove with [ cuts [ 59 ] ],
and [
eqmod (64*inp_poly1d0**2) (segment7) [10753, x**2 - 9436],
eqmod (64*inp_poly1d1**2) (segment7) [10753, x**2 - 1317],
eqmod (64*inp_poly1d2**2) (segment7) [10753, x**2 - 8616],
eqmod (64*inp_poly1d3**2) (segment7) [10753, x**2 - 2137],
eqmod (64*inp_poly1d4**2) (segment7) [10753, x**2 - 7363],
eqmod (64*inp_poly1d5**2) (segment7) [10753, x**2 - 3390],
eqmod (64*inp_poly1d6**2) (segment7) [10753, x**2 - 2215],
eqmod (64*inp_poly1d7**2) (segment7) [10753, x**2 - 8538]
,
eqmod (64*inp_poly1d8**2) (segment7) [10753, x**2 - 8846],
eqmod (64*inp_poly1d9**2) (segment7) [10753, x**2 - 1907],
eqmod (64*inp_poly1da**2) (segment7) [10753, x**2 - 1135],
eqmod (64*inp_poly1db**2) (segment7) [10753, x**2 - 9618],
eqmod (64*inp_poly1dc**2) (segment7) [10753, x**2 - 774],
eqmod (64*inp_poly1dd**2) (segment7) [10753, x**2 - 9979],
eqmod (64*inp_poly1de**2) (segment7) [10753, x**2 - 9486],
eqmod (64*inp_poly1df**2) (segment7) [10753, x**2 - 1267]
] prove with [ cuts [ 60 ] ],
and [
eqmod (64*inp_poly1e0**2) (segment7) [10753, x**2 - 2266],
eqmod (64*inp_poly1e1**2) (segment7) [10753, x**2 - 8487],
eqmod (64*inp_poly1e2**2) (segment7) [10753, x**2 - 264],
eqmod (64*inp_poly1e3**2) (segment7) [10753, x**2 - 10489],
eqmod (64*inp_poly1e4**2) (segment7) [10753, x**2 - 6935],
eqmod (64*inp_poly1e5**2) (segment7) [10753, x**2 - 3818],
eqmod (64*inp_poly1e6**2) (segment7) [10753, x**2 - 9473],
eqmod (64*inp_poly1e7**2) (segment7) [10753, x**2 - 1280]
,
eqmod (64*inp_poly1e8**2) (segment7) [10753, x**2 - 301],
eqmod (64*inp_poly1e9**2) (segment7) [10753, x**2 - 10452],
eqmod (64*inp_poly1ea**2) (segment7) [10753, x**2 - 3689],
eqmod (64*inp_poly1eb**2) (segment7) [10753, x**2 - 7064],
eqmod (64*inp_poly1ec**2) (segment7) [10753, x**2 - 10597],
eqmod (64*inp_poly1ed**2) (segment7) [10753, x**2 - 156],
eqmod (64*inp_poly1ee**2) (segment7) [10753, x**2 - 1339],
eqmod (64*inp_poly1ef**2) (segment7) [10753, x**2 - 9414]
] prove with [ cuts [ 61 ] ],
and [
eqmod (64*inp_poly1f0**2) (segment7) [10753, x**2 - 1985],
eqmod (64*inp_poly1f1**2) (segment7) [10753, x**2 - 8768],
eqmod (64*inp_poly1f2**2) (segment7) [10753, x**2 - 3572],
eqmod (64*inp_poly1f3**2) (segment7) [10753, x**2 - 7181],
eqmod (64*inp_poly1f4**2) (segment7) [10753, x**2 - 2758],
eqmod (64*inp_poly1f5**2) (segment7) [10753, x**2 - 7995],
eqmod (64*inp_poly1f6**2) (segment7) [10753, x**2 - 6794],
eqmod (64*inp_poly1f7**2) (segment7) [10753, x**2 - 3959]
,
eqmod (64*inp_poly1f8**2) (segment7) [10753, x**2 - 3258],
eqmod (64*inp_poly1f9**2) (segment7) [10753, x**2 - 7495],
eqmod (64*inp_poly1fa**2) (segment7) [10753, x**2 - 9671],
eqmod (64*inp_poly1fb**2) (segment7) [10753, x**2 - 1082],
eqmod (64*inp_poly1fc**2) (segment7) [10753, x**2 - 2777],
eqmod (64*inp_poly1fd**2) (segment7) [10753, x**2 - 7976],
eqmod (64*inp_poly1fe**2) (segment7) [10753, x**2 - 7527],
eqmod (64*inp_poly1ff**2) (segment7) [10753, x**2 - 3226]
] prove with [ cuts [ 62 ] ] && and [
( -5631)@16<=s L0x7fffffffd9e0,L0x7fffffffd9e0<s 5631@16,
( -5631)@16<=s L0x7fffffffd9e2,L0x7fffffffd9e2<s 5631@16,
( -5631)@16<=s L0x7fffffffd9e4,L0x7fffffffd9e4<s 5631@16,
( -5631)@16<=s L0x7fffffffd9e6,L0x7fffffffd9e6<s 5631@16,
( -5631)@16<=s L0x7fffffffd9e8,L0x7fffffffd9e8<s 5631@16,
( -5631)@16<=s L0x7fffffffd9ea,L0x7fffffffd9ea<s 5631@16,
( -5631)@16<=s L0x7fffffffd9ec,L0x7fffffffd9ec<s 5631@16,
( -5631)@16<=s L0x7fffffffd9ee,L0x7fffffffd9ee<s 5631@16,
( -5631)@16<=s L0x7fffffffd9f0,L0x7fffffffd9f0<s 5631@16,
( -5631)@16<=s L0x7fffffffd9f2,L0x7fffffffd9f2<s 5631@16,
( -5631)@16<=s L0x7fffffffd9f4,L0x7fffffffd9f4<s 5631@16,
( -5631)@16<=s L0x7fffffffd9f6,L0x7fffffffd9f6<s 5631@16,
( -5631)@16<=s L0x7fffffffd9f8,L0x7fffffffd9f8<s 5631@16,
( -5631)@16<=s L0x7fffffffd9fa,L0x7fffffffd9fa<s 5631@16,
( -5631)@16<=s L0x7fffffffd9fc,L0x7fffffffd9fc<s 5631@16,
( -5631)@16<=s L0x7fffffffd9fe,L0x7fffffffd9fe<s 5631@16,
( -5631)@16<=s L0x7fffffffda00,L0x7fffffffda00<s 5631@16,
( -5631)@16<=s L0x7fffffffda02,L0x7fffffffda02<s 5631@16,
( -5631)@16<=s L0x7fffffffda04,L0x7fffffffda04<s 5631@16,
( -5631)@16<=s L0x7fffffffda06,L0x7fffffffda06<s 5631@16,
( -5715)@16<=s L0x7fffffffda08,L0x7fffffffda08<s 5715@16,
( -5715)@16<=s L0x7fffffffda0a,L0x7fffffffda0a<s 5715@16,
( -5631)@16<=s L0x7fffffffda0c,L0x7fffffffda0c<s 5631@16,
( -5631)@16<=s L0x7fffffffda0e,L0x7fffffffda0e<s 5631@16,
( -5631)@16<=s L0x7fffffffda10,L0x7fffffffda10<s 5631@16,
( -5631)@16<=s L0x7fffffffda12,L0x7fffffffda12<s 5631@16,
( -5631)@16<=s L0x7fffffffda14,L0x7fffffffda14<s 5631@16,
( -5631)@16<=s L0x7fffffffda16,L0x7fffffffda16<s 5631@16,
( -5631)@16<=s L0x7fffffffda18,L0x7fffffffda18<s 5631@16,
( -5631)@16<=s L0x7fffffffda1a,L0x7fffffffda1a<s 5631@16,
( -5631)@16<=s L0x7fffffffda1c,L0x7fffffffda1c<s 5631@16,
( -5631)@16<=s L0x7fffffffda1e,L0x7fffffffda1e<s 5631@16,
(-11318)@16<=s L0x7fffffffda20,L0x7fffffffda20<s11318@16,
(-11318)@16<=s L0x7fffffffda22,L0x7fffffffda22<s11318@16,
(-11318)@16<=s L0x7fffffffda24,L0x7fffffffda24<s11318@16,
(-11318)@16<=s L0x7fffffffda26,L0x7fffffffda26<s11318@16,
(-11318)@16<=s L0x7fffffffda28,L0x7fffffffda28<s11318@16,
(-11318)@16<=s L0x7fffffffda2a,L0x7fffffffda2a<s11318@16,
(-11318)@16<=s L0x7fffffffda2c,L0x7fffffffda2c<s11318@16,
(-11318)@16<=s L0x7fffffffda2e,L0x7fffffffda2e<s11318@16,
(-11257)@16<=s L0x7fffffffda30,L0x7fffffffda30<s11257@16,
(-11257)@16<=s L0x7fffffffda32,L0x7fffffffda32<s11257@16,
(-11257)@16<=s L0x7fffffffda34,L0x7fffffffda34<s11257@16,
(-11257)@16<=s L0x7fffffffda36,L0x7fffffffda36<s11257@16,
(-11257)@16<=s L0x7fffffffda38,L0x7fffffffda38<s11257@16,
(-11257)@16<=s L0x7fffffffda3a,L0x7fffffffda3a<s11257@16,
(-11257)@16<=s L0x7fffffffda3c,L0x7fffffffda3c<s11257@16,
(-11257)@16<=s L0x7fffffffda3e,L0x7fffffffda3e<s11257@16,
(-11376)@16<=s L0x7fffffffda40,L0x7fffffffda40<s11376@16,
(-11376)@16<=s L0x7fffffffda42,L0x7fffffffda42<s11376@16,
(-11376)@16<=s L0x7fffffffda44,L0x7fffffffda44<s11376@16,
(-11376)@16<=s L0x7fffffffda46,L0x7fffffffda46<s11376@16,
(-11380)@16<=s L0x7fffffffda48,L0x7fffffffda48<s11380@16,
(-11380)@16<=s L0x7fffffffda4a,L0x7fffffffda4a<s11380@16,
(-11376)@16<=s L0x7fffffffda4c,L0x7fffffffda4c<s11376@16,
(-11376)@16<=s L0x7fffffffda4e,L0x7fffffffda4e<s11376@16,
(-11343)@16<=s L0x7fffffffda50,L0x7fffffffda50<s11343@16,
(-11343)@16<=s L0x7fffffffda52,L0x7fffffffda52<s11343@16,
(-11343)@16<=s L0x7fffffffda54,L0x7fffffffda54<s11343@16,
(-11343)@16<=s L0x7fffffffda56,L0x7fffffffda56<s11343@16,
(-11343)@16<=s L0x7fffffffda58,L0x7fffffffda58<s11343@16,
(-11343)@16<=s L0x7fffffffda5a,L0x7fffffffda5a<s11343@16,
(-11343)@16<=s L0x7fffffffda5c,L0x7fffffffda5c<s11343@16,
(-11343)@16<=s L0x7fffffffda5e,L0x7fffffffda5e<s11343@16
] prove with [ cuts [ 58 ] ];


(**************** CUT  64 *****************)

cut true && true;



(**************** shuffle poly 0 *****************)

ghost shuf_poly00@bit, shuf_poly01@bit, shuf_poly02@bit, shuf_poly03@bit,
      shuf_poly04@bit, shuf_poly05@bit, shuf_poly06@bit, shuf_poly07@bit : and [
shuf_poly00 =
L0x7fffffffd2e0*x** 0+L0x7fffffffd2e2*x** 1+L0x7fffffffd2e4*x** 2+
L0x7fffffffd2e6*x** 3+L0x7fffffffd2e8*x** 4+L0x7fffffffd2ea*x** 5+
L0x7fffffffd2ec*x** 6+L0x7fffffffd2ee*x** 7+L0x7fffffffd2f0*x** 8+
L0x7fffffffd2f2*x** 9+L0x7fffffffd2f4*x**10+L0x7fffffffd2f6*x**11+
L0x7fffffffd2f8*x**12+L0x7fffffffd2fa*x**13+L0x7fffffffd2fc*x**14+
L0x7fffffffd2fe*x**15,
shuf_poly01 =
L0x7fffffffd3e0*x** 0+L0x7fffffffd3e2*x** 1+L0x7fffffffd3e4*x** 2+
L0x7fffffffd3e6*x** 3+L0x7fffffffd3e8*x** 4+L0x7fffffffd3ea*x** 5+
L0x7fffffffd3ec*x** 6+L0x7fffffffd3ee*x** 7+L0x7fffffffd3f0*x** 8+
L0x7fffffffd3f2*x** 9+L0x7fffffffd3f4*x**10+L0x7fffffffd3f6*x**11+
L0x7fffffffd3f8*x**12+L0x7fffffffd3fa*x**13+L0x7fffffffd3fc*x**14+
L0x7fffffffd3fe*x**15,
shuf_poly02 =
L0x7fffffffd4e0*x** 0+L0x7fffffffd4e2*x** 1+L0x7fffffffd4e4*x** 2+
L0x7fffffffd4e6*x** 3+L0x7fffffffd4e8*x** 4+L0x7fffffffd4ea*x** 5+
L0x7fffffffd4ec*x** 6+L0x7fffffffd4ee*x** 7+L0x7fffffffd4f0*x** 8+
L0x7fffffffd4f2*x** 9+L0x7fffffffd4f4*x**10+L0x7fffffffd4f6*x**11+
L0x7fffffffd4f8*x**12+L0x7fffffffd4fa*x**13+L0x7fffffffd4fc*x**14+
L0x7fffffffd4fe*x**15,
shuf_poly03 =
L0x7fffffffd5e0*x** 0+L0x7fffffffd5e2*x** 1+L0x7fffffffd5e4*x** 2+
L0x7fffffffd5e6*x** 3+L0x7fffffffd5e8*x** 4+L0x7fffffffd5ea*x** 5+
L0x7fffffffd5ec*x** 6+L0x7fffffffd5ee*x** 7+L0x7fffffffd5f0*x** 8+
L0x7fffffffd5f2*x** 9+L0x7fffffffd5f4*x**10+L0x7fffffffd5f6*x**11+
L0x7fffffffd5f8*x**12+L0x7fffffffd5fa*x**13+L0x7fffffffd5fc*x**14+
L0x7fffffffd5fe*x**15,
shuf_poly04 =
L0x7fffffffd6e0*x** 0+L0x7fffffffd6e2*x** 1+L0x7fffffffd6e4*x** 2+
L0x7fffffffd6e6*x** 3+L0x7fffffffd6e8*x** 4+L0x7fffffffd6ea*x** 5+
L0x7fffffffd6ec*x** 6+L0x7fffffffd6ee*x** 7+L0x7fffffffd6f0*x** 8+
L0x7fffffffd6f2*x** 9+L0x7fffffffd6f4*x**10+L0x7fffffffd6f6*x**11+
L0x7fffffffd6f8*x**12+L0x7fffffffd6fa*x**13+L0x7fffffffd6fc*x**14+
L0x7fffffffd6fe*x**15,
shuf_poly05 =
L0x7fffffffd7e0*x** 0+L0x7fffffffd7e2*x** 1+L0x7fffffffd7e4*x** 2+
L0x7fffffffd7e6*x** 3+L0x7fffffffd7e8*x** 4+L0x7fffffffd7ea*x** 5+
L0x7fffffffd7ec*x** 6+L0x7fffffffd7ee*x** 7+L0x7fffffffd7f0*x** 8+
L0x7fffffffd7f2*x** 9+L0x7fffffffd7f4*x**10+L0x7fffffffd7f6*x**11+
L0x7fffffffd7f8*x**12+L0x7fffffffd7fa*x**13+L0x7fffffffd7fc*x**14+
L0x7fffffffd7fe*x**15,
shuf_poly06 =
L0x7fffffffd8e0*x** 0+L0x7fffffffd8e2*x** 1+L0x7fffffffd8e4*x** 2+
L0x7fffffffd8e6*x** 3+L0x7fffffffd8e8*x** 4+L0x7fffffffd8ea*x** 5+
L0x7fffffffd8ec*x** 6+L0x7fffffffd8ee*x** 7+L0x7fffffffd8f0*x** 8+
L0x7fffffffd8f2*x** 9+L0x7fffffffd8f4*x**10+L0x7fffffffd8f6*x**11+
L0x7fffffffd8f8*x**12+L0x7fffffffd8fa*x**13+L0x7fffffffd8fc*x**14+
L0x7fffffffd8fe*x**15,
shuf_poly07 =
L0x7fffffffd9e0*x** 0+L0x7fffffffd9e2*x** 1+L0x7fffffffd9e4*x** 2+
L0x7fffffffd9e6*x** 3+L0x7fffffffd9e8*x** 4+L0x7fffffffd9ea*x** 5+
L0x7fffffffd9ec*x** 6+L0x7fffffffd9ee*x** 7+L0x7fffffffd9f0*x** 8+
L0x7fffffffd9f2*x** 9+L0x7fffffffd9f4*x**10+L0x7fffffffd9f6*x**11+
L0x7fffffffd9f8*x**12+L0x7fffffffd9fa*x**13+L0x7fffffffd9fc*x**14+
L0x7fffffffd9fe*x**15
] && true;



(* vmovdqa (%rdi),%ymm4                            #! EA = L0x7fffffffd2e0; Value = 0xfadafab010950068; PC = 0x55555555d4ad *)
mov ymm4_0 L0x7fffffffd2e0;
mov ymm4_1 L0x7fffffffd2e2;
mov ymm4_2 L0x7fffffffd2e4;
mov ymm4_3 L0x7fffffffd2e6;
mov ymm4_4 L0x7fffffffd2e8;
mov ymm4_5 L0x7fffffffd2ea;
mov ymm4_6 L0x7fffffffd2ec;
mov ymm4_7 L0x7fffffffd2ee;
mov ymm4_8 L0x7fffffffd2f0;
mov ymm4_9 L0x7fffffffd2f2;
mov ymm4_a L0x7fffffffd2f4;
mov ymm4_b L0x7fffffffd2f6;
mov ymm4_c L0x7fffffffd2f8;
mov ymm4_d L0x7fffffffd2fa;
mov ymm4_e L0x7fffffffd2fc;
mov ymm4_f L0x7fffffffd2fe;
(* vmovdqa 0x100(%rdi),%ymm5                       #! EA = L0x7fffffffd3e0; Value = 0xf0820fe5fa810a68; PC = 0x55555555d4b1 *)
mov ymm5_0 L0x7fffffffd3e0;
mov ymm5_1 L0x7fffffffd3e2;
mov ymm5_2 L0x7fffffffd3e4;
mov ymm5_3 L0x7fffffffd3e6;
mov ymm5_4 L0x7fffffffd3e8;
mov ymm5_5 L0x7fffffffd3ea;
mov ymm5_6 L0x7fffffffd3ec;
mov ymm5_7 L0x7fffffffd3ee;
mov ymm5_8 L0x7fffffffd3f0;
mov ymm5_9 L0x7fffffffd3f2;
mov ymm5_a L0x7fffffffd3f4;
mov ymm5_b L0x7fffffffd3f6;
mov ymm5_c L0x7fffffffd3f8;
mov ymm5_d L0x7fffffffd3fa;
mov ymm5_e L0x7fffffffd3fc;
mov ymm5_f L0x7fffffffd3fe;
(* vmovdqa 0x200(%rdi),%ymm6                       #! EA = L0x7fffffffd4e0; Value = 0x0135ee6f0986fbbf; PC = 0x55555555d4b9 *)
mov ymm6_0 L0x7fffffffd4e0;
mov ymm6_1 L0x7fffffffd4e2;
mov ymm6_2 L0x7fffffffd4e4;
mov ymm6_3 L0x7fffffffd4e6;
mov ymm6_4 L0x7fffffffd4e8;
mov ymm6_5 L0x7fffffffd4ea;
mov ymm6_6 L0x7fffffffd4ec;
mov ymm6_7 L0x7fffffffd4ee;
mov ymm6_8 L0x7fffffffd4f0;
mov ymm6_9 L0x7fffffffd4f2;
mov ymm6_a L0x7fffffffd4f4;
mov ymm6_b L0x7fffffffd4f6;
mov ymm6_c L0x7fffffffd4f8;
mov ymm6_d L0x7fffffffd4fa;
mov ymm6_e L0x7fffffffd4fc;
mov ymm6_f L0x7fffffffd4fe;
(* vmovdqa 0x300(%rdi),%ymm7                       #! EA = L0x7fffffffd5e0; Value = 0xfed4071e01cf0ff8; PC = 0x55555555d4c1 *)
mov ymm7_0 L0x7fffffffd5e0;
mov ymm7_1 L0x7fffffffd5e2;
mov ymm7_2 L0x7fffffffd5e4;
mov ymm7_3 L0x7fffffffd5e6;
mov ymm7_4 L0x7fffffffd5e8;
mov ymm7_5 L0x7fffffffd5ea;
mov ymm7_6 L0x7fffffffd5ec;
mov ymm7_7 L0x7fffffffd5ee;
mov ymm7_8 L0x7fffffffd5f0;
mov ymm7_9 L0x7fffffffd5f2;
mov ymm7_a L0x7fffffffd5f4;
mov ymm7_b L0x7fffffffd5f6;
mov ymm7_c L0x7fffffffd5f8;
mov ymm7_d L0x7fffffffd5fa;
mov ymm7_e L0x7fffffffd5fc;
mov ymm7_f L0x7fffffffd5fe;
(* vmovdqa 0x400(%rdi),%ymm8                       #! EA = L0x7fffffffd6e0; Value = 0x0dcff9a611bef345; PC = 0x55555555d4c9 *)
mov ymm8_0 L0x7fffffffd6e0;
mov ymm8_1 L0x7fffffffd6e2;
mov ymm8_2 L0x7fffffffd6e4;
mov ymm8_3 L0x7fffffffd6e6;
mov ymm8_4 L0x7fffffffd6e8;
mov ymm8_5 L0x7fffffffd6ea;
mov ymm8_6 L0x7fffffffd6ec;
mov ymm8_7 L0x7fffffffd6ee;
mov ymm8_8 L0x7fffffffd6f0;
mov ymm8_9 L0x7fffffffd6f2;
mov ymm8_a L0x7fffffffd6f4;
mov ymm8_b L0x7fffffffd6f6;
mov ymm8_c L0x7fffffffd6f8;
mov ymm8_d L0x7fffffffd6fa;
mov ymm8_e L0x7fffffffd6fc;
mov ymm8_f L0x7fffffffd6fe;
(* vmovdqa 0x500(%rdi),%ymm9                       #! EA = L0x7fffffffd7e0; Value = 0x0a5e0e2bffc6f71d; PC = 0x55555555d4d1 *)
mov ymm9_0 L0x7fffffffd7e0;
mov ymm9_1 L0x7fffffffd7e2;
mov ymm9_2 L0x7fffffffd7e4;
mov ymm9_3 L0x7fffffffd7e6;
mov ymm9_4 L0x7fffffffd7e8;
mov ymm9_5 L0x7fffffffd7ea;
mov ymm9_6 L0x7fffffffd7ec;
mov ymm9_7 L0x7fffffffd7ee;
mov ymm9_8 L0x7fffffffd7f0;
mov ymm9_9 L0x7fffffffd7f2;
mov ymm9_a L0x7fffffffd7f4;
mov ymm9_b L0x7fffffffd7f6;
mov ymm9_c L0x7fffffffd7f8;
mov ymm9_d L0x7fffffffd7fa;
mov ymm9_e L0x7fffffffd7fc;
mov ymm9_f L0x7fffffffd7fe;
(* vmovdqa 0x600(%rdi),%ymm10                      #! EA = L0x7fffffffd8e0; Value = 0x086d01600421f91c; PC = 0x55555555d4d9 *)
mov ymm10_0 L0x7fffffffd8e0;
mov ymm10_1 L0x7fffffffd8e2;
mov ymm10_2 L0x7fffffffd8e4;
mov ymm10_3 L0x7fffffffd8e6;
mov ymm10_4 L0x7fffffffd8e8;
mov ymm10_5 L0x7fffffffd8ea;
mov ymm10_6 L0x7fffffffd8ec;
mov ymm10_7 L0x7fffffffd8ee;
mov ymm10_8 L0x7fffffffd8f0;
mov ymm10_9 L0x7fffffffd8f2;
mov ymm10_a L0x7fffffffd8f4;
mov ymm10_b L0x7fffffffd8f6;
mov ymm10_c L0x7fffffffd8f8;
mov ymm10_d L0x7fffffffd8fa;
mov ymm10_e L0x7fffffffd8fc;
mov ymm10_f L0x7fffffffd8fe;
(* vmovdqa 0x700(%rdi),%ymm11                      #! EA = L0x7fffffffd9e0; Value = 0xf4ccf6f100c60908; PC = 0x55555555d4e1 *)
mov ymm11_0 L0x7fffffffd9e0;
mov ymm11_1 L0x7fffffffd9e2;
mov ymm11_2 L0x7fffffffd9e4;
mov ymm11_3 L0x7fffffffd9e6;
mov ymm11_4 L0x7fffffffd9e8;
mov ymm11_5 L0x7fffffffd9ea;
mov ymm11_6 L0x7fffffffd9ec;
mov ymm11_7 L0x7fffffffd9ee;
mov ymm11_8 L0x7fffffffd9f0;
mov ymm11_9 L0x7fffffffd9f2;
mov ymm11_a L0x7fffffffd9f4;
mov ymm11_b L0x7fffffffd9f6;
mov ymm11_c L0x7fffffffd9f8;
mov ymm11_d L0x7fffffffd9fa;
mov ymm11_e L0x7fffffffd9fc;
mov ymm11_f L0x7fffffffd9fe;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555d4e9 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555d4ed *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555d4f1 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555d4f5 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555d4f9 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555d4fe *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555d503 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d508 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d50d *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d516 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555d51f *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d523 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d527 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555d52b *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555d52f *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555d538 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555d541 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555d545 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d549 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555d54d *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555d552 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555d55b *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555d564 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d568 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d56c *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d570 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555d575 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555d579 *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555d57d *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555d581 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555d585 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555d58a *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555d58f *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d594 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d599 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d5a2 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555d5ab *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555d5af *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d5b3 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555d5b7 *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555d5bc *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d5c0 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d5c4 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d5c8 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555d5cd *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555d5d2 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d5d7 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555d5db *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555d5e0 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555d5e5 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d5ea *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555d5ee *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555d5f3 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555d5f8 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d5fd *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555d601 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm5,%ymm9                      #! PC = 0x55555555d606 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555d60b *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d610 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555d614 *)
sub ymm5_0 ymm5_0 ymm9_0;
sub ymm5_1 ymm5_1 ymm9_1;
sub ymm5_2 ymm5_2 ymm9_2;
sub ymm5_3 ymm5_3 ymm9_3;
sub ymm5_4 ymm5_4 ymm9_4;
sub ymm5_5 ymm5_5 ymm9_5;
sub ymm5_6 ymm5_6 ymm9_6;
sub ymm5_7 ymm5_7 ymm9_7;
sub ymm5_8 ymm5_8 ymm9_8;
sub ymm5_9 ymm5_9 ymm9_9;
sub ymm5_a ymm5_a ymm9_a;
sub ymm5_b ymm5_b ymm9_b;
sub ymm5_c ymm5_c ymm9_c;
sub ymm5_d ymm5_d ymm9_d;
sub ymm5_e ymm5_e ymm9_e;
sub ymm5_f ymm5_f ymm9_f;
(* vpmullw %ymm12,%ymm6,%ymm9                      #! PC = 0x55555555d619 *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555d61e *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d623 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm6                        #! PC = 0x55555555d627 *)
sub ymm6_0 ymm6_0 ymm9_0;
sub ymm6_1 ymm6_1 ymm9_1;
sub ymm6_2 ymm6_2 ymm9_2;
sub ymm6_3 ymm6_3 ymm9_3;
sub ymm6_4 ymm6_4 ymm9_4;
sub ymm6_5 ymm6_5 ymm9_5;
sub ymm6_6 ymm6_6 ymm9_6;
sub ymm6_7 ymm6_7 ymm9_7;
sub ymm6_8 ymm6_8 ymm9_8;
sub ymm6_9 ymm6_9 ymm9_9;
sub ymm6_a ymm6_a ymm9_a;
sub ymm6_b ymm6_b ymm9_b;
sub ymm6_c ymm6_c ymm9_c;
sub ymm6_d ymm6_d ymm9_d;
sub ymm6_e ymm6_e ymm9_e;
sub ymm6_f ymm6_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555d62c *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555d630 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555d634 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555d638 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555d63c *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555d641 *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555d646 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555d64b *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,(%rdi)                            #! EA = L0x7fffffffd2e0; PC = 0x55555555d650 *)
mov L0x7fffffffd2e0 ymm9_0;
mov L0x7fffffffd2e2 ymm9_1;
mov L0x7fffffffd2e4 ymm9_2;
mov L0x7fffffffd2e6 ymm9_3;
mov L0x7fffffffd2e8 ymm9_4;
mov L0x7fffffffd2ea ymm9_5;
mov L0x7fffffffd2ec ymm9_6;
mov L0x7fffffffd2ee ymm9_7;
mov L0x7fffffffd2f0 ymm9_8;
mov L0x7fffffffd2f2 ymm9_9;
mov L0x7fffffffd2f4 ymm9_a;
mov L0x7fffffffd2f6 ymm9_b;
mov L0x7fffffffd2f8 ymm9_c;
mov L0x7fffffffd2fa ymm9_d;
mov L0x7fffffffd2fc ymm9_e;
mov L0x7fffffffd2fe ymm9_f;
(* vmovdqa %ymm10,0x100(%rdi)                      #! EA = L0x7fffffffd3e0; PC = 0x55555555d654 *)
mov L0x7fffffffd3e0 ymm10_0;
mov L0x7fffffffd3e2 ymm10_1;
mov L0x7fffffffd3e4 ymm10_2;
mov L0x7fffffffd3e6 ymm10_3;
mov L0x7fffffffd3e8 ymm10_4;
mov L0x7fffffffd3ea ymm10_5;
mov L0x7fffffffd3ec ymm10_6;
mov L0x7fffffffd3ee ymm10_7;
mov L0x7fffffffd3f0 ymm10_8;
mov L0x7fffffffd3f2 ymm10_9;
mov L0x7fffffffd3f4 ymm10_a;
mov L0x7fffffffd3f6 ymm10_b;
mov L0x7fffffffd3f8 ymm10_c;
mov L0x7fffffffd3fa ymm10_d;
mov L0x7fffffffd3fc ymm10_e;
mov L0x7fffffffd3fe ymm10_f;
(* vmovdqa %ymm3,0x200(%rdi)                       #! EA = L0x7fffffffd4e0; PC = 0x55555555d65c *)
mov L0x7fffffffd4e0 ymm3_0;
mov L0x7fffffffd4e2 ymm3_1;
mov L0x7fffffffd4e4 ymm3_2;
mov L0x7fffffffd4e6 ymm3_3;
mov L0x7fffffffd4e8 ymm3_4;
mov L0x7fffffffd4ea ymm3_5;
mov L0x7fffffffd4ec ymm3_6;
mov L0x7fffffffd4ee ymm3_7;
mov L0x7fffffffd4f0 ymm3_8;
mov L0x7fffffffd4f2 ymm3_9;
mov L0x7fffffffd4f4 ymm3_a;
mov L0x7fffffffd4f6 ymm3_b;
mov L0x7fffffffd4f8 ymm3_c;
mov L0x7fffffffd4fa ymm3_d;
mov L0x7fffffffd4fc ymm3_e;
mov L0x7fffffffd4fe ymm3_f;
(* vmovdqa %ymm4,0x300(%rdi)                       #! EA = L0x7fffffffd5e0; PC = 0x55555555d664 *)
mov L0x7fffffffd5e0 ymm4_0;
mov L0x7fffffffd5e2 ymm4_1;
mov L0x7fffffffd5e4 ymm4_2;
mov L0x7fffffffd5e6 ymm4_3;
mov L0x7fffffffd5e8 ymm4_4;
mov L0x7fffffffd5ea ymm4_5;
mov L0x7fffffffd5ec ymm4_6;
mov L0x7fffffffd5ee ymm4_7;
mov L0x7fffffffd5f0 ymm4_8;
mov L0x7fffffffd5f2 ymm4_9;
mov L0x7fffffffd5f4 ymm4_a;
mov L0x7fffffffd5f6 ymm4_b;
mov L0x7fffffffd5f8 ymm4_c;
mov L0x7fffffffd5fa ymm4_d;
mov L0x7fffffffd5fc ymm4_e;
mov L0x7fffffffd5fe ymm4_f;
(* vmovdqa %ymm5,0x400(%rdi)                       #! EA = L0x7fffffffd6e0; PC = 0x55555555d66c *)
mov L0x7fffffffd6e0 ymm5_0;
mov L0x7fffffffd6e2 ymm5_1;
mov L0x7fffffffd6e4 ymm5_2;
mov L0x7fffffffd6e6 ymm5_3;
mov L0x7fffffffd6e8 ymm5_4;
mov L0x7fffffffd6ea ymm5_5;
mov L0x7fffffffd6ec ymm5_6;
mov L0x7fffffffd6ee ymm5_7;
mov L0x7fffffffd6f0 ymm5_8;
mov L0x7fffffffd6f2 ymm5_9;
mov L0x7fffffffd6f4 ymm5_a;
mov L0x7fffffffd6f6 ymm5_b;
mov L0x7fffffffd6f8 ymm5_c;
mov L0x7fffffffd6fa ymm5_d;
mov L0x7fffffffd6fc ymm5_e;
mov L0x7fffffffd6fe ymm5_f;
(* vmovdqa %ymm6,0x500(%rdi)                       #! EA = L0x7fffffffd7e0; PC = 0x55555555d674 *)
mov L0x7fffffffd7e0 ymm6_0;
mov L0x7fffffffd7e2 ymm6_1;
mov L0x7fffffffd7e4 ymm6_2;
mov L0x7fffffffd7e6 ymm6_3;
mov L0x7fffffffd7e8 ymm6_4;
mov L0x7fffffffd7ea ymm6_5;
mov L0x7fffffffd7ec ymm6_6;
mov L0x7fffffffd7ee ymm6_7;
mov L0x7fffffffd7f0 ymm6_8;
mov L0x7fffffffd7f2 ymm6_9;
mov L0x7fffffffd7f4 ymm6_a;
mov L0x7fffffffd7f6 ymm6_b;
mov L0x7fffffffd7f8 ymm6_c;
mov L0x7fffffffd7fa ymm6_d;
mov L0x7fffffffd7fc ymm6_e;
mov L0x7fffffffd7fe ymm6_f;
(* vmovdqa %ymm8,0x600(%rdi)                       #! EA = L0x7fffffffd8e0; PC = 0x55555555d67c *)
mov L0x7fffffffd8e0 ymm8_0;
mov L0x7fffffffd8e2 ymm8_1;
mov L0x7fffffffd8e4 ymm8_2;
mov L0x7fffffffd8e6 ymm8_3;
mov L0x7fffffffd8e8 ymm8_4;
mov L0x7fffffffd8ea ymm8_5;
mov L0x7fffffffd8ec ymm8_6;
mov L0x7fffffffd8ee ymm8_7;
mov L0x7fffffffd8f0 ymm8_8;
mov L0x7fffffffd8f2 ymm8_9;
mov L0x7fffffffd8f4 ymm8_a;
mov L0x7fffffffd8f6 ymm8_b;
mov L0x7fffffffd8f8 ymm8_c;
mov L0x7fffffffd8fa ymm8_d;
mov L0x7fffffffd8fc ymm8_e;
mov L0x7fffffffd8fe ymm8_f;
(* vmovdqa %ymm11,0x700(%rdi)                      #! EA = L0x7fffffffd9e0; PC = 0x55555555d684 *)
mov L0x7fffffffd9e0 ymm11_0;
mov L0x7fffffffd9e2 ymm11_1;
mov L0x7fffffffd9e4 ymm11_2;
mov L0x7fffffffd9e6 ymm11_3;
mov L0x7fffffffd9e8 ymm11_4;
mov L0x7fffffffd9ea ymm11_5;
mov L0x7fffffffd9ec ymm11_6;
mov L0x7fffffffd9ee ymm11_7;
mov L0x7fffffffd9f0 ymm11_8;
mov L0x7fffffffd9f2 ymm11_9;
mov L0x7fffffffd9f4 ymm11_a;
mov L0x7fffffffd9f6 ymm11_b;
mov L0x7fffffffd9f8 ymm11_c;
mov L0x7fffffffd9fa ymm11_d;
mov L0x7fffffffd9fc ymm11_e;
mov L0x7fffffffd9fe ymm11_f;



(**************** LEVELS 6-8, 0 *****************)

ghost out_poly0@bit,
out_poly00@bit, out_poly01@bit, out_poly02@bit, out_poly03@bit,
out_poly04@bit, out_poly05@bit, out_poly06@bit, out_poly07@bit : and [
out_poly00 =
L0x7fffffffd2e0*x** 0+L0x7fffffffd2e2*x** 1+L0x7fffffffd2e4*x** 2+
L0x7fffffffd2e6*x** 3+L0x7fffffffd2e8*x** 4+L0x7fffffffd2ea*x** 5+
L0x7fffffffd2ec*x** 6+L0x7fffffffd2ee*x** 7+L0x7fffffffd2f0*x** 8+
L0x7fffffffd2f2*x** 9+L0x7fffffffd2f4*x**10+L0x7fffffffd2f6*x**11+
L0x7fffffffd2f8*x**12+L0x7fffffffd2fa*x**13+L0x7fffffffd2fc*x**14+
L0x7fffffffd2fe*x**15,
out_poly01 =
L0x7fffffffd3e0*x** 0+L0x7fffffffd3e2*x** 1+L0x7fffffffd3e4*x** 2+
L0x7fffffffd3e6*x** 3+L0x7fffffffd3e8*x** 4+L0x7fffffffd3ea*x** 5+
L0x7fffffffd3ec*x** 6+L0x7fffffffd3ee*x** 7+L0x7fffffffd3f0*x** 8+
L0x7fffffffd3f2*x** 9+L0x7fffffffd3f4*x**10+L0x7fffffffd3f6*x**11+
L0x7fffffffd3f8*x**12+L0x7fffffffd3fa*x**13+L0x7fffffffd3fc*x**14+
L0x7fffffffd3fe*x**15,
out_poly02 =
L0x7fffffffd4e0*x** 0+L0x7fffffffd4e2*x** 1+L0x7fffffffd4e4*x** 2+
L0x7fffffffd4e6*x** 3+L0x7fffffffd4e8*x** 4+L0x7fffffffd4ea*x** 5+
L0x7fffffffd4ec*x** 6+L0x7fffffffd4ee*x** 7+L0x7fffffffd4f0*x** 8+
L0x7fffffffd4f2*x** 9+L0x7fffffffd4f4*x**10+L0x7fffffffd4f6*x**11+
L0x7fffffffd4f8*x**12+L0x7fffffffd4fa*x**13+L0x7fffffffd4fc*x**14+
L0x7fffffffd4fe*x**15,
out_poly03 =
L0x7fffffffd5e0*x** 0+L0x7fffffffd5e2*x** 1+L0x7fffffffd5e4*x** 2+
L0x7fffffffd5e6*x** 3+L0x7fffffffd5e8*x** 4+L0x7fffffffd5ea*x** 5+
L0x7fffffffd5ec*x** 6+L0x7fffffffd5ee*x** 7+L0x7fffffffd5f0*x** 8+
L0x7fffffffd5f2*x** 9+L0x7fffffffd5f4*x**10+L0x7fffffffd5f6*x**11+
L0x7fffffffd5f8*x**12+L0x7fffffffd5fa*x**13+L0x7fffffffd5fc*x**14+
L0x7fffffffd5fe*x**15,
out_poly04 =
L0x7fffffffd6e0*x** 0+L0x7fffffffd6e2*x** 1+L0x7fffffffd6e4*x** 2+
L0x7fffffffd6e6*x** 3+L0x7fffffffd6e8*x** 4+L0x7fffffffd6ea*x** 5+
L0x7fffffffd6ec*x** 6+L0x7fffffffd6ee*x** 7+L0x7fffffffd6f0*x** 8+
L0x7fffffffd6f2*x** 9+L0x7fffffffd6f4*x**10+L0x7fffffffd6f6*x**11+
L0x7fffffffd6f8*x**12+L0x7fffffffd6fa*x**13+L0x7fffffffd6fc*x**14+
L0x7fffffffd6fe*x**15,
out_poly05 =
L0x7fffffffd7e0*x** 0+L0x7fffffffd7e2*x** 1+L0x7fffffffd7e4*x** 2+
L0x7fffffffd7e6*x** 3+L0x7fffffffd7e8*x** 4+L0x7fffffffd7ea*x** 5+
L0x7fffffffd7ec*x** 6+L0x7fffffffd7ee*x** 7+L0x7fffffffd7f0*x** 8+
L0x7fffffffd7f2*x** 9+L0x7fffffffd7f4*x**10+L0x7fffffffd7f6*x**11+
L0x7fffffffd7f8*x**12+L0x7fffffffd7fa*x**13+L0x7fffffffd7fc*x**14+
L0x7fffffffd7fe*x**15,
out_poly06 =
L0x7fffffffd8e0*x** 0+L0x7fffffffd8e2*x** 1+L0x7fffffffd8e4*x** 2+
L0x7fffffffd8e6*x** 3+L0x7fffffffd8e8*x** 4+L0x7fffffffd8ea*x** 5+
L0x7fffffffd8ec*x** 6+L0x7fffffffd8ee*x** 7+L0x7fffffffd8f0*x** 8+
L0x7fffffffd8f2*x** 9+L0x7fffffffd8f4*x**10+L0x7fffffffd8f6*x**11+
L0x7fffffffd8f8*x**12+L0x7fffffffd8fa*x**13+L0x7fffffffd8fc*x**14+
L0x7fffffffd8fe*x**15,
out_poly07 =
L0x7fffffffd9e0*x** 0+L0x7fffffffd9e2*x** 1+L0x7fffffffd9e4*x** 2+
L0x7fffffffd9e6*x** 3+L0x7fffffffd9e8*x** 4+L0x7fffffffd9ea*x** 5+
L0x7fffffffd9ec*x** 6+L0x7fffffffd9ee*x** 7+L0x7fffffffd9f0*x** 8+
L0x7fffffffd9f2*x** 9+L0x7fffffffd9f4*x**10+L0x7fffffffd9f6*x**11+
L0x7fffffffd9f8*x**12+L0x7fffffffd9fa*x**13+L0x7fffffffd9fc*x**14+
L0x7fffffffd9fe*x**15
,
out_poly0 =
out_poly00*x**  0+out_poly01*x**128+out_poly02*x**256+out_poly03*x**384+
out_poly04*x**512+out_poly05*x**640+out_poly06*x**768+out_poly07*x**896]
&& true;


(**************** CUT  65 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly00) [10753, x**128 - 1],
eqmod (out_poly0) (8*shuf_poly01) [10753, x**128 - 10752],
eqmod (out_poly0) (8*shuf_poly02) [10753, x**128 - 6264],
eqmod (out_poly0) (8*shuf_poly03) [10753, x**128 - 4489],
eqmod (out_poly0) (8*shuf_poly04) [10753, x**128 - 321],
eqmod (out_poly0) (8*shuf_poly05) [10753, x**128 - 10432],
eqmod (out_poly0) (8*shuf_poly06) [10753, x**128 - 10686],
eqmod (out_poly0) (8*shuf_poly07) [10753, x**128 - 67]
];


(**************** CUT  66 *****************)

ecut true;



(**************** shuffle poly 1 *****************)

ghost shuf_poly10@bit, shuf_poly11@bit, shuf_poly12@bit, shuf_poly13@bit,
      shuf_poly14@bit, shuf_poly15@bit, shuf_poly16@bit, shuf_poly17@bit : and [
shuf_poly10 =
L0x7fffffffd300*x** 0+L0x7fffffffd302*x** 1+L0x7fffffffd304*x** 2+
L0x7fffffffd306*x** 3+L0x7fffffffd308*x** 4+L0x7fffffffd30a*x** 5+
L0x7fffffffd30c*x** 6+L0x7fffffffd30e*x** 7+L0x7fffffffd310*x** 8+
L0x7fffffffd312*x** 9+L0x7fffffffd314*x**10+L0x7fffffffd316*x**11+
L0x7fffffffd318*x**12+L0x7fffffffd31a*x**13+L0x7fffffffd31c*x**14+
L0x7fffffffd31e*x**15,
shuf_poly11 =
L0x7fffffffd400*x** 0+L0x7fffffffd402*x** 1+L0x7fffffffd404*x** 2+
L0x7fffffffd406*x** 3+L0x7fffffffd408*x** 4+L0x7fffffffd40a*x** 5+
L0x7fffffffd40c*x** 6+L0x7fffffffd40e*x** 7+L0x7fffffffd410*x** 8+
L0x7fffffffd412*x** 9+L0x7fffffffd414*x**10+L0x7fffffffd416*x**11+
L0x7fffffffd418*x**12+L0x7fffffffd41a*x**13+L0x7fffffffd41c*x**14+
L0x7fffffffd41e*x**15,
shuf_poly12 =
L0x7fffffffd500*x** 0+L0x7fffffffd502*x** 1+L0x7fffffffd504*x** 2+
L0x7fffffffd506*x** 3+L0x7fffffffd508*x** 4+L0x7fffffffd50a*x** 5+
L0x7fffffffd50c*x** 6+L0x7fffffffd50e*x** 7+L0x7fffffffd510*x** 8+
L0x7fffffffd512*x** 9+L0x7fffffffd514*x**10+L0x7fffffffd516*x**11+
L0x7fffffffd518*x**12+L0x7fffffffd51a*x**13+L0x7fffffffd51c*x**14+
L0x7fffffffd51e*x**15,
shuf_poly13 =
L0x7fffffffd600*x** 0+L0x7fffffffd602*x** 1+L0x7fffffffd604*x** 2+
L0x7fffffffd606*x** 3+L0x7fffffffd608*x** 4+L0x7fffffffd60a*x** 5+
L0x7fffffffd60c*x** 6+L0x7fffffffd60e*x** 7+L0x7fffffffd610*x** 8+
L0x7fffffffd612*x** 9+L0x7fffffffd614*x**10+L0x7fffffffd616*x**11+
L0x7fffffffd618*x**12+L0x7fffffffd61a*x**13+L0x7fffffffd61c*x**14+
L0x7fffffffd61e*x**15,
shuf_poly14 =
L0x7fffffffd700*x** 0+L0x7fffffffd702*x** 1+L0x7fffffffd704*x** 2+
L0x7fffffffd706*x** 3+L0x7fffffffd708*x** 4+L0x7fffffffd70a*x** 5+
L0x7fffffffd70c*x** 6+L0x7fffffffd70e*x** 7+L0x7fffffffd710*x** 8+
L0x7fffffffd712*x** 9+L0x7fffffffd714*x**10+L0x7fffffffd716*x**11+
L0x7fffffffd718*x**12+L0x7fffffffd71a*x**13+L0x7fffffffd71c*x**14+
L0x7fffffffd71e*x**15,
shuf_poly15 =
L0x7fffffffd800*x** 0+L0x7fffffffd802*x** 1+L0x7fffffffd804*x** 2+
L0x7fffffffd806*x** 3+L0x7fffffffd808*x** 4+L0x7fffffffd80a*x** 5+
L0x7fffffffd80c*x** 6+L0x7fffffffd80e*x** 7+L0x7fffffffd810*x** 8+
L0x7fffffffd812*x** 9+L0x7fffffffd814*x**10+L0x7fffffffd816*x**11+
L0x7fffffffd818*x**12+L0x7fffffffd81a*x**13+L0x7fffffffd81c*x**14+
L0x7fffffffd81e*x**15,
shuf_poly16 =
L0x7fffffffd900*x** 0+L0x7fffffffd902*x** 1+L0x7fffffffd904*x** 2+
L0x7fffffffd906*x** 3+L0x7fffffffd908*x** 4+L0x7fffffffd90a*x** 5+
L0x7fffffffd90c*x** 6+L0x7fffffffd90e*x** 7+L0x7fffffffd910*x** 8+
L0x7fffffffd912*x** 9+L0x7fffffffd914*x**10+L0x7fffffffd916*x**11+
L0x7fffffffd918*x**12+L0x7fffffffd91a*x**13+L0x7fffffffd91c*x**14+
L0x7fffffffd91e*x**15,
shuf_poly17 =
L0x7fffffffda00*x** 0+L0x7fffffffda02*x** 1+L0x7fffffffda04*x** 2+
L0x7fffffffda06*x** 3+L0x7fffffffda08*x** 4+L0x7fffffffda0a*x** 5+
L0x7fffffffda0c*x** 6+L0x7fffffffda0e*x** 7+L0x7fffffffda10*x** 8+
L0x7fffffffda12*x** 9+L0x7fffffffda14*x**10+L0x7fffffffda16*x**11+
L0x7fffffffda18*x**12+L0x7fffffffda1a*x**13+L0x7fffffffda1c*x**14+
L0x7fffffffda1e*x**15
] && true;



(* vmovdqa 0x20(%rdi),%ymm4                        #! EA = L0x7fffffffd300; Value = 0xf9d600a1f561f50b; PC = 0x55555555d68c *)
mov ymm4_0 L0x7fffffffd300;
mov ymm4_1 L0x7fffffffd302;
mov ymm4_2 L0x7fffffffd304;
mov ymm4_3 L0x7fffffffd306;
mov ymm4_4 L0x7fffffffd308;
mov ymm4_5 L0x7fffffffd30a;
mov ymm4_6 L0x7fffffffd30c;
mov ymm4_7 L0x7fffffffd30e;
mov ymm4_8 L0x7fffffffd310;
mov ymm4_9 L0x7fffffffd312;
mov ymm4_a L0x7fffffffd314;
mov ymm4_b L0x7fffffffd316;
mov ymm4_c L0x7fffffffd318;
mov ymm4_d L0x7fffffffd31a;
mov ymm4_e L0x7fffffffd31c;
mov ymm4_f L0x7fffffffd31e;
(* vmovdqa 0x120(%rdi),%ymm5                       #! EA = L0x7fffffffd400; Value = 0x0fd70b250a2f00ad; PC = 0x55555555d691 *)
mov ymm5_0 L0x7fffffffd400;
mov ymm5_1 L0x7fffffffd402;
mov ymm5_2 L0x7fffffffd404;
mov ymm5_3 L0x7fffffffd406;
mov ymm5_4 L0x7fffffffd408;
mov ymm5_5 L0x7fffffffd40a;
mov ymm5_6 L0x7fffffffd40c;
mov ymm5_7 L0x7fffffffd40e;
mov ymm5_8 L0x7fffffffd410;
mov ymm5_9 L0x7fffffffd412;
mov ymm5_a L0x7fffffffd414;
mov ymm5_b L0x7fffffffd416;
mov ymm5_c L0x7fffffffd418;
mov ymm5_d L0x7fffffffd41a;
mov ymm5_e L0x7fffffffd41c;
mov ymm5_f L0x7fffffffd41e;
(* vmovdqa 0x220(%rdi),%ymm6                       #! EA = L0x7fffffffd500; Value = 0xf6a910c60d101095; PC = 0x55555555d699 *)
mov ymm6_0 L0x7fffffffd500;
mov ymm6_1 L0x7fffffffd502;
mov ymm6_2 L0x7fffffffd504;
mov ymm6_3 L0x7fffffffd506;
mov ymm6_4 L0x7fffffffd508;
mov ymm6_5 L0x7fffffffd50a;
mov ymm6_6 L0x7fffffffd50c;
mov ymm6_7 L0x7fffffffd50e;
mov ymm6_8 L0x7fffffffd510;
mov ymm6_9 L0x7fffffffd512;
mov ymm6_a L0x7fffffffd514;
mov ymm6_b L0x7fffffffd516;
mov ymm6_c L0x7fffffffd518;
mov ymm6_d L0x7fffffffd51a;
mov ymm6_e L0x7fffffffd51c;
mov ymm6_f L0x7fffffffd51e;
(* vmovdqa 0x320(%rdi),%ymm7                       #! EA = L0x7fffffffd600; Value = 0x12c00e1d0713fa2f; PC = 0x55555555d6a1 *)
mov ymm7_0 L0x7fffffffd600;
mov ymm7_1 L0x7fffffffd602;
mov ymm7_2 L0x7fffffffd604;
mov ymm7_3 L0x7fffffffd606;
mov ymm7_4 L0x7fffffffd608;
mov ymm7_5 L0x7fffffffd60a;
mov ymm7_6 L0x7fffffffd60c;
mov ymm7_7 L0x7fffffffd60e;
mov ymm7_8 L0x7fffffffd610;
mov ymm7_9 L0x7fffffffd612;
mov ymm7_a L0x7fffffffd614;
mov ymm7_b L0x7fffffffd616;
mov ymm7_c L0x7fffffffd618;
mov ymm7_d L0x7fffffffd61a;
mov ymm7_e L0x7fffffffd61c;
mov ymm7_f L0x7fffffffd61e;
(* vmovdqa 0x420(%rdi),%ymm8                       #! EA = L0x7fffffffd700; Value = 0xf41ffff70d00faff; PC = 0x55555555d6a9 *)
mov ymm8_0 L0x7fffffffd700;
mov ymm8_1 L0x7fffffffd702;
mov ymm8_2 L0x7fffffffd704;
mov ymm8_3 L0x7fffffffd706;
mov ymm8_4 L0x7fffffffd708;
mov ymm8_5 L0x7fffffffd70a;
mov ymm8_6 L0x7fffffffd70c;
mov ymm8_7 L0x7fffffffd70e;
mov ymm8_8 L0x7fffffffd710;
mov ymm8_9 L0x7fffffffd712;
mov ymm8_a L0x7fffffffd714;
mov ymm8_b L0x7fffffffd716;
mov ymm8_c L0x7fffffffd718;
mov ymm8_d L0x7fffffffd71a;
mov ymm8_e L0x7fffffffd71c;
mov ymm8_f L0x7fffffffd71e;
(* vmovdqa 0x520(%rdi),%ymm9                       #! EA = L0x7fffffffd800; Value = 0x0d48f9220d64f690; PC = 0x55555555d6b1 *)
mov ymm9_0 L0x7fffffffd800;
mov ymm9_1 L0x7fffffffd802;
mov ymm9_2 L0x7fffffffd804;
mov ymm9_3 L0x7fffffffd806;
mov ymm9_4 L0x7fffffffd808;
mov ymm9_5 L0x7fffffffd80a;
mov ymm9_6 L0x7fffffffd80c;
mov ymm9_7 L0x7fffffffd80e;
mov ymm9_8 L0x7fffffffd810;
mov ymm9_9 L0x7fffffffd812;
mov ymm9_a L0x7fffffffd814;
mov ymm9_b L0x7fffffffd816;
mov ymm9_c L0x7fffffffd818;
mov ymm9_d L0x7fffffffd81a;
mov ymm9_e L0x7fffffffd81c;
mov ymm9_f L0x7fffffffd81e;
(* vmovdqa 0x620(%rdi),%ymm10                      #! EA = L0x7fffffffd900; Value = 0xff2f0901ebe6fe04; PC = 0x55555555d6b9 *)
mov ymm10_0 L0x7fffffffd900;
mov ymm10_1 L0x7fffffffd902;
mov ymm10_2 L0x7fffffffd904;
mov ymm10_3 L0x7fffffffd906;
mov ymm10_4 L0x7fffffffd908;
mov ymm10_5 L0x7fffffffd90a;
mov ymm10_6 L0x7fffffffd90c;
mov ymm10_7 L0x7fffffffd90e;
mov ymm10_8 L0x7fffffffd910;
mov ymm10_9 L0x7fffffffd912;
mov ymm10_a L0x7fffffffd914;
mov ymm10_b L0x7fffffffd916;
mov ymm10_c L0x7fffffffd918;
mov ymm10_d L0x7fffffffd91a;
mov ymm10_e L0x7fffffffd91c;
mov ymm10_f L0x7fffffffd91e;
(* vmovdqa 0x720(%rdi),%ymm11                      #! EA = L0x7fffffffda00; Value = 0x1280fe8e0d6910e9; PC = 0x55555555d6c1 *)
mov ymm11_0 L0x7fffffffda00;
mov ymm11_1 L0x7fffffffda02;
mov ymm11_2 L0x7fffffffda04;
mov ymm11_3 L0x7fffffffda06;
mov ymm11_4 L0x7fffffffda08;
mov ymm11_5 L0x7fffffffda0a;
mov ymm11_6 L0x7fffffffda0c;
mov ymm11_7 L0x7fffffffda0e;
mov ymm11_8 L0x7fffffffda10;
mov ymm11_9 L0x7fffffffda12;
mov ymm11_a L0x7fffffffda14;
mov ymm11_b L0x7fffffffda16;
mov ymm11_c L0x7fffffffda18;
mov ymm11_d L0x7fffffffda1a;
mov ymm11_e L0x7fffffffda1c;
mov ymm11_f L0x7fffffffda1e;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555d6c9 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555d6cd *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555d6d1 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555d6d5 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555d6d9 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555d6de *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555d6e3 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d6e8 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d6ed *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d6f6 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555d6ff *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d703 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d707 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555d70b *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555d70f *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555d718 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555d721 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555d725 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d729 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555d72d *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555d732 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555d73b *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555d744 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d748 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d74c *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d750 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555d755 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555d759 *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555d75d *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555d761 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555d765 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555d76a *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555d76f *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d774 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d779 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d782 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555d78b *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555d78f *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d793 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555d797 *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555d79c *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d7a0 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d7a4 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d7a8 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555d7ad *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555d7b2 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d7b7 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555d7bb *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555d7c0 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555d7c5 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d7ca *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555d7ce *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555d7d3 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555d7d8 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d7dd *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555d7e1 *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555d7e6 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555d7eb *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d7f0 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555d7f4 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555d7f9 *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555d7fd *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555d801 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555d805 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555d809 *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555d80e *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555d813 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555d818 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0x20(%rdi)                        #! EA = L0x7fffffffd300; PC = 0x55555555d81d *)
mov L0x7fffffffd300 ymm9_0;
mov L0x7fffffffd302 ymm9_1;
mov L0x7fffffffd304 ymm9_2;
mov L0x7fffffffd306 ymm9_3;
mov L0x7fffffffd308 ymm9_4;
mov L0x7fffffffd30a ymm9_5;
mov L0x7fffffffd30c ymm9_6;
mov L0x7fffffffd30e ymm9_7;
mov L0x7fffffffd310 ymm9_8;
mov L0x7fffffffd312 ymm9_9;
mov L0x7fffffffd314 ymm9_a;
mov L0x7fffffffd316 ymm9_b;
mov L0x7fffffffd318 ymm9_c;
mov L0x7fffffffd31a ymm9_d;
mov L0x7fffffffd31c ymm9_e;
mov L0x7fffffffd31e ymm9_f;
(* vmovdqa %ymm10,0x120(%rdi)                      #! EA = L0x7fffffffd400; PC = 0x55555555d822 *)
mov L0x7fffffffd400 ymm10_0;
mov L0x7fffffffd402 ymm10_1;
mov L0x7fffffffd404 ymm10_2;
mov L0x7fffffffd406 ymm10_3;
mov L0x7fffffffd408 ymm10_4;
mov L0x7fffffffd40a ymm10_5;
mov L0x7fffffffd40c ymm10_6;
mov L0x7fffffffd40e ymm10_7;
mov L0x7fffffffd410 ymm10_8;
mov L0x7fffffffd412 ymm10_9;
mov L0x7fffffffd414 ymm10_a;
mov L0x7fffffffd416 ymm10_b;
mov L0x7fffffffd418 ymm10_c;
mov L0x7fffffffd41a ymm10_d;
mov L0x7fffffffd41c ymm10_e;
mov L0x7fffffffd41e ymm10_f;
(* vmovdqa %ymm3,0x220(%rdi)                       #! EA = L0x7fffffffd500; PC = 0x55555555d82a *)
mov L0x7fffffffd500 ymm3_0;
mov L0x7fffffffd502 ymm3_1;
mov L0x7fffffffd504 ymm3_2;
mov L0x7fffffffd506 ymm3_3;
mov L0x7fffffffd508 ymm3_4;
mov L0x7fffffffd50a ymm3_5;
mov L0x7fffffffd50c ymm3_6;
mov L0x7fffffffd50e ymm3_7;
mov L0x7fffffffd510 ymm3_8;
mov L0x7fffffffd512 ymm3_9;
mov L0x7fffffffd514 ymm3_a;
mov L0x7fffffffd516 ymm3_b;
mov L0x7fffffffd518 ymm3_c;
mov L0x7fffffffd51a ymm3_d;
mov L0x7fffffffd51c ymm3_e;
mov L0x7fffffffd51e ymm3_f;
(* vmovdqa %ymm4,0x320(%rdi)                       #! EA = L0x7fffffffd600; PC = 0x55555555d832 *)
mov L0x7fffffffd600 ymm4_0;
mov L0x7fffffffd602 ymm4_1;
mov L0x7fffffffd604 ymm4_2;
mov L0x7fffffffd606 ymm4_3;
mov L0x7fffffffd608 ymm4_4;
mov L0x7fffffffd60a ymm4_5;
mov L0x7fffffffd60c ymm4_6;
mov L0x7fffffffd60e ymm4_7;
mov L0x7fffffffd610 ymm4_8;
mov L0x7fffffffd612 ymm4_9;
mov L0x7fffffffd614 ymm4_a;
mov L0x7fffffffd616 ymm4_b;
mov L0x7fffffffd618 ymm4_c;
mov L0x7fffffffd61a ymm4_d;
mov L0x7fffffffd61c ymm4_e;
mov L0x7fffffffd61e ymm4_f;
(* vmovdqa %ymm5,0x420(%rdi)                       #! EA = L0x7fffffffd700; PC = 0x55555555d83a *)
mov L0x7fffffffd700 ymm5_0;
mov L0x7fffffffd702 ymm5_1;
mov L0x7fffffffd704 ymm5_2;
mov L0x7fffffffd706 ymm5_3;
mov L0x7fffffffd708 ymm5_4;
mov L0x7fffffffd70a ymm5_5;
mov L0x7fffffffd70c ymm5_6;
mov L0x7fffffffd70e ymm5_7;
mov L0x7fffffffd710 ymm5_8;
mov L0x7fffffffd712 ymm5_9;
mov L0x7fffffffd714 ymm5_a;
mov L0x7fffffffd716 ymm5_b;
mov L0x7fffffffd718 ymm5_c;
mov L0x7fffffffd71a ymm5_d;
mov L0x7fffffffd71c ymm5_e;
mov L0x7fffffffd71e ymm5_f;
(* vmovdqa %ymm6,0x520(%rdi)                       #! EA = L0x7fffffffd800; PC = 0x55555555d842 *)
mov L0x7fffffffd800 ymm6_0;
mov L0x7fffffffd802 ymm6_1;
mov L0x7fffffffd804 ymm6_2;
mov L0x7fffffffd806 ymm6_3;
mov L0x7fffffffd808 ymm6_4;
mov L0x7fffffffd80a ymm6_5;
mov L0x7fffffffd80c ymm6_6;
mov L0x7fffffffd80e ymm6_7;
mov L0x7fffffffd810 ymm6_8;
mov L0x7fffffffd812 ymm6_9;
mov L0x7fffffffd814 ymm6_a;
mov L0x7fffffffd816 ymm6_b;
mov L0x7fffffffd818 ymm6_c;
mov L0x7fffffffd81a ymm6_d;
mov L0x7fffffffd81c ymm6_e;
mov L0x7fffffffd81e ymm6_f;
(* vmovdqa %ymm8,0x620(%rdi)                       #! EA = L0x7fffffffd900; PC = 0x55555555d84a *)
mov L0x7fffffffd900 ymm8_0;
mov L0x7fffffffd902 ymm8_1;
mov L0x7fffffffd904 ymm8_2;
mov L0x7fffffffd906 ymm8_3;
mov L0x7fffffffd908 ymm8_4;
mov L0x7fffffffd90a ymm8_5;
mov L0x7fffffffd90c ymm8_6;
mov L0x7fffffffd90e ymm8_7;
mov L0x7fffffffd910 ymm8_8;
mov L0x7fffffffd912 ymm8_9;
mov L0x7fffffffd914 ymm8_a;
mov L0x7fffffffd916 ymm8_b;
mov L0x7fffffffd918 ymm8_c;
mov L0x7fffffffd91a ymm8_d;
mov L0x7fffffffd91c ymm8_e;
mov L0x7fffffffd91e ymm8_f;
(* vmovdqa %ymm11,0x720(%rdi)                      #! EA = L0x7fffffffda00; PC = 0x55555555d852 *)
mov L0x7fffffffda00 ymm11_0;
mov L0x7fffffffda02 ymm11_1;
mov L0x7fffffffda04 ymm11_2;
mov L0x7fffffffda06 ymm11_3;
mov L0x7fffffffda08 ymm11_4;
mov L0x7fffffffda0a ymm11_5;
mov L0x7fffffffda0c ymm11_6;
mov L0x7fffffffda0e ymm11_7;
mov L0x7fffffffda10 ymm11_8;
mov L0x7fffffffda12 ymm11_9;
mov L0x7fffffffda14 ymm11_a;
mov L0x7fffffffda16 ymm11_b;
mov L0x7fffffffda18 ymm11_c;
mov L0x7fffffffda1a ymm11_d;
mov L0x7fffffffda1c ymm11_e;
mov L0x7fffffffda1e ymm11_f;



(**************** LEVELS 6-8, 1 *****************)

ghost out_poly1@bit,
out_poly10@bit, out_poly11@bit, out_poly12@bit, out_poly13@bit,
out_poly14@bit, out_poly15@bit, out_poly16@bit, out_poly17@bit : and [
out_poly10 =
L0x7fffffffd300*x** 0+L0x7fffffffd302*x** 1+L0x7fffffffd304*x** 2+
L0x7fffffffd306*x** 3+L0x7fffffffd308*x** 4+L0x7fffffffd30a*x** 5+
L0x7fffffffd30c*x** 6+L0x7fffffffd30e*x** 7+L0x7fffffffd310*x** 8+
L0x7fffffffd312*x** 9+L0x7fffffffd314*x**10+L0x7fffffffd316*x**11+
L0x7fffffffd318*x**12+L0x7fffffffd31a*x**13+L0x7fffffffd31c*x**14+
L0x7fffffffd31e*x**15,
out_poly11 =
L0x7fffffffd400*x** 0+L0x7fffffffd402*x** 1+L0x7fffffffd404*x** 2+
L0x7fffffffd406*x** 3+L0x7fffffffd408*x** 4+L0x7fffffffd40a*x** 5+
L0x7fffffffd40c*x** 6+L0x7fffffffd40e*x** 7+L0x7fffffffd410*x** 8+
L0x7fffffffd412*x** 9+L0x7fffffffd414*x**10+L0x7fffffffd416*x**11+
L0x7fffffffd418*x**12+L0x7fffffffd41a*x**13+L0x7fffffffd41c*x**14+
L0x7fffffffd41e*x**15,
out_poly12 =
L0x7fffffffd500*x** 0+L0x7fffffffd502*x** 1+L0x7fffffffd504*x** 2+
L0x7fffffffd506*x** 3+L0x7fffffffd508*x** 4+L0x7fffffffd50a*x** 5+
L0x7fffffffd50c*x** 6+L0x7fffffffd50e*x** 7+L0x7fffffffd510*x** 8+
L0x7fffffffd512*x** 9+L0x7fffffffd514*x**10+L0x7fffffffd516*x**11+
L0x7fffffffd518*x**12+L0x7fffffffd51a*x**13+L0x7fffffffd51c*x**14+
L0x7fffffffd51e*x**15,
out_poly13 =
L0x7fffffffd600*x** 0+L0x7fffffffd602*x** 1+L0x7fffffffd604*x** 2+
L0x7fffffffd606*x** 3+L0x7fffffffd608*x** 4+L0x7fffffffd60a*x** 5+
L0x7fffffffd60c*x** 6+L0x7fffffffd60e*x** 7+L0x7fffffffd610*x** 8+
L0x7fffffffd612*x** 9+L0x7fffffffd614*x**10+L0x7fffffffd616*x**11+
L0x7fffffffd618*x**12+L0x7fffffffd61a*x**13+L0x7fffffffd61c*x**14+
L0x7fffffffd61e*x**15,
out_poly14 =
L0x7fffffffd700*x** 0+L0x7fffffffd702*x** 1+L0x7fffffffd704*x** 2+
L0x7fffffffd706*x** 3+L0x7fffffffd708*x** 4+L0x7fffffffd70a*x** 5+
L0x7fffffffd70c*x** 6+L0x7fffffffd70e*x** 7+L0x7fffffffd710*x** 8+
L0x7fffffffd712*x** 9+L0x7fffffffd714*x**10+L0x7fffffffd716*x**11+
L0x7fffffffd718*x**12+L0x7fffffffd71a*x**13+L0x7fffffffd71c*x**14+
L0x7fffffffd71e*x**15,
out_poly15 =
L0x7fffffffd800*x** 0+L0x7fffffffd802*x** 1+L0x7fffffffd804*x** 2+
L0x7fffffffd806*x** 3+L0x7fffffffd808*x** 4+L0x7fffffffd80a*x** 5+
L0x7fffffffd80c*x** 6+L0x7fffffffd80e*x** 7+L0x7fffffffd810*x** 8+
L0x7fffffffd812*x** 9+L0x7fffffffd814*x**10+L0x7fffffffd816*x**11+
L0x7fffffffd818*x**12+L0x7fffffffd81a*x**13+L0x7fffffffd81c*x**14+
L0x7fffffffd81e*x**15,
out_poly16 =
L0x7fffffffd900*x** 0+L0x7fffffffd902*x** 1+L0x7fffffffd904*x** 2+
L0x7fffffffd906*x** 3+L0x7fffffffd908*x** 4+L0x7fffffffd90a*x** 5+
L0x7fffffffd90c*x** 6+L0x7fffffffd90e*x** 7+L0x7fffffffd910*x** 8+
L0x7fffffffd912*x** 9+L0x7fffffffd914*x**10+L0x7fffffffd916*x**11+
L0x7fffffffd918*x**12+L0x7fffffffd91a*x**13+L0x7fffffffd91c*x**14+
L0x7fffffffd91e*x**15,
out_poly17 =
L0x7fffffffda00*x** 0+L0x7fffffffda02*x** 1+L0x7fffffffda04*x** 2+
L0x7fffffffda06*x** 3+L0x7fffffffda08*x** 4+L0x7fffffffda0a*x** 5+
L0x7fffffffda0c*x** 6+L0x7fffffffda0e*x** 7+L0x7fffffffda10*x** 8+
L0x7fffffffda12*x** 9+L0x7fffffffda14*x**10+L0x7fffffffda16*x**11+
L0x7fffffffda18*x**12+L0x7fffffffda1a*x**13+L0x7fffffffda1c*x**14+
L0x7fffffffda1e*x**15
,
out_poly1 =
out_poly10*x**  0+out_poly11*x**128+out_poly12*x**256+out_poly13*x**384+
out_poly14*x**512+out_poly15*x**640+out_poly16*x**768+out_poly17*x**896]
&& true;


(**************** CUT  67 *****************)

ecut and [
eqmod (out_poly1) (8*shuf_poly10) [10753, x**128 - 1],
eqmod (out_poly1) (8*shuf_poly11) [10753, x**128 - 10752],
eqmod (out_poly1) (8*shuf_poly12) [10753, x**128 - 6264],
eqmod (out_poly1) (8*shuf_poly13) [10753, x**128 - 4489],
eqmod (out_poly1) (8*shuf_poly14) [10753, x**128 - 321],
eqmod (out_poly1) (8*shuf_poly15) [10753, x**128 - 10432],
eqmod (out_poly1) (8*shuf_poly16) [10753, x**128 - 10686],
eqmod (out_poly1) (8*shuf_poly17) [10753, x**128 - 67]
];


(**************** CUT  68 *****************)

ecut true;



(**************** shuffle poly 2 *****************)

ghost shuf_poly20@bit, shuf_poly21@bit, shuf_poly22@bit, shuf_poly23@bit,
      shuf_poly24@bit, shuf_poly25@bit, shuf_poly26@bit, shuf_poly27@bit : and [
shuf_poly20 =
L0x7fffffffd320*x** 0+L0x7fffffffd322*x** 1+L0x7fffffffd324*x** 2+
L0x7fffffffd326*x** 3+L0x7fffffffd328*x** 4+L0x7fffffffd32a*x** 5+
L0x7fffffffd32c*x** 6+L0x7fffffffd32e*x** 7+L0x7fffffffd330*x** 8+
L0x7fffffffd332*x** 9+L0x7fffffffd334*x**10+L0x7fffffffd336*x**11+
L0x7fffffffd338*x**12+L0x7fffffffd33a*x**13+L0x7fffffffd33c*x**14+
L0x7fffffffd33e*x**15,
shuf_poly21 =
L0x7fffffffd420*x** 0+L0x7fffffffd422*x** 1+L0x7fffffffd424*x** 2+
L0x7fffffffd426*x** 3+L0x7fffffffd428*x** 4+L0x7fffffffd42a*x** 5+
L0x7fffffffd42c*x** 6+L0x7fffffffd42e*x** 7+L0x7fffffffd430*x** 8+
L0x7fffffffd432*x** 9+L0x7fffffffd434*x**10+L0x7fffffffd436*x**11+
L0x7fffffffd438*x**12+L0x7fffffffd43a*x**13+L0x7fffffffd43c*x**14+
L0x7fffffffd43e*x**15,
shuf_poly22 =
L0x7fffffffd520*x** 0+L0x7fffffffd522*x** 1+L0x7fffffffd524*x** 2+
L0x7fffffffd526*x** 3+L0x7fffffffd528*x** 4+L0x7fffffffd52a*x** 5+
L0x7fffffffd52c*x** 6+L0x7fffffffd52e*x** 7+L0x7fffffffd530*x** 8+
L0x7fffffffd532*x** 9+L0x7fffffffd534*x**10+L0x7fffffffd536*x**11+
L0x7fffffffd538*x**12+L0x7fffffffd53a*x**13+L0x7fffffffd53c*x**14+
L0x7fffffffd53e*x**15,
shuf_poly23 =
L0x7fffffffd620*x** 0+L0x7fffffffd622*x** 1+L0x7fffffffd624*x** 2+
L0x7fffffffd626*x** 3+L0x7fffffffd628*x** 4+L0x7fffffffd62a*x** 5+
L0x7fffffffd62c*x** 6+L0x7fffffffd62e*x** 7+L0x7fffffffd630*x** 8+
L0x7fffffffd632*x** 9+L0x7fffffffd634*x**10+L0x7fffffffd636*x**11+
L0x7fffffffd638*x**12+L0x7fffffffd63a*x**13+L0x7fffffffd63c*x**14+
L0x7fffffffd63e*x**15,
shuf_poly24 =
L0x7fffffffd720*x** 0+L0x7fffffffd722*x** 1+L0x7fffffffd724*x** 2+
L0x7fffffffd726*x** 3+L0x7fffffffd728*x** 4+L0x7fffffffd72a*x** 5+
L0x7fffffffd72c*x** 6+L0x7fffffffd72e*x** 7+L0x7fffffffd730*x** 8+
L0x7fffffffd732*x** 9+L0x7fffffffd734*x**10+L0x7fffffffd736*x**11+
L0x7fffffffd738*x**12+L0x7fffffffd73a*x**13+L0x7fffffffd73c*x**14+
L0x7fffffffd73e*x**15,
shuf_poly25 =
L0x7fffffffd820*x** 0+L0x7fffffffd822*x** 1+L0x7fffffffd824*x** 2+
L0x7fffffffd826*x** 3+L0x7fffffffd828*x** 4+L0x7fffffffd82a*x** 5+
L0x7fffffffd82c*x** 6+L0x7fffffffd82e*x** 7+L0x7fffffffd830*x** 8+
L0x7fffffffd832*x** 9+L0x7fffffffd834*x**10+L0x7fffffffd836*x**11+
L0x7fffffffd838*x**12+L0x7fffffffd83a*x**13+L0x7fffffffd83c*x**14+
L0x7fffffffd83e*x**15,
shuf_poly26 =
L0x7fffffffd920*x** 0+L0x7fffffffd922*x** 1+L0x7fffffffd924*x** 2+
L0x7fffffffd926*x** 3+L0x7fffffffd928*x** 4+L0x7fffffffd92a*x** 5+
L0x7fffffffd92c*x** 6+L0x7fffffffd92e*x** 7+L0x7fffffffd930*x** 8+
L0x7fffffffd932*x** 9+L0x7fffffffd934*x**10+L0x7fffffffd936*x**11+
L0x7fffffffd938*x**12+L0x7fffffffd93a*x**13+L0x7fffffffd93c*x**14+
L0x7fffffffd93e*x**15,
shuf_poly27 =
L0x7fffffffda20*x** 0+L0x7fffffffda22*x** 1+L0x7fffffffda24*x** 2+
L0x7fffffffda26*x** 3+L0x7fffffffda28*x** 4+L0x7fffffffda2a*x** 5+
L0x7fffffffda2c*x** 6+L0x7fffffffda2e*x** 7+L0x7fffffffda30*x** 8+
L0x7fffffffda32*x** 9+L0x7fffffffda34*x**10+L0x7fffffffda36*x**11+
L0x7fffffffda38*x**12+L0x7fffffffda3a*x**13+L0x7fffffffda3c*x**14+
L0x7fffffffda3e*x**15
] && true;



(* vmovdqa 0x40(%rdi),%ymm4                        #! EA = L0x7fffffffd320; Value = 0x29a51494efdb0a6e; PC = 0x55555555d85a *)
mov ymm4_0 L0x7fffffffd320;
mov ymm4_1 L0x7fffffffd322;
mov ymm4_2 L0x7fffffffd324;
mov ymm4_3 L0x7fffffffd326;
mov ymm4_4 L0x7fffffffd328;
mov ymm4_5 L0x7fffffffd32a;
mov ymm4_6 L0x7fffffffd32c;
mov ymm4_7 L0x7fffffffd32e;
mov ymm4_8 L0x7fffffffd330;
mov ymm4_9 L0x7fffffffd332;
mov ymm4_a L0x7fffffffd334;
mov ymm4_b L0x7fffffffd336;
mov ymm4_c L0x7fffffffd338;
mov ymm4_d L0x7fffffffd33a;
mov ymm4_e L0x7fffffffd33c;
mov ymm4_f L0x7fffffffd33e;
(* vmovdqa 0x140(%rdi),%ymm5                       #! EA = L0x7fffffffd420; Value = 0x1407003bf0410a25; PC = 0x55555555d85f *)
mov ymm5_0 L0x7fffffffd420;
mov ymm5_1 L0x7fffffffd422;
mov ymm5_2 L0x7fffffffd424;
mov ymm5_3 L0x7fffffffd426;
mov ymm5_4 L0x7fffffffd428;
mov ymm5_5 L0x7fffffffd42a;
mov ymm5_6 L0x7fffffffd42c;
mov ymm5_7 L0x7fffffffd42e;
mov ymm5_8 L0x7fffffffd430;
mov ymm5_9 L0x7fffffffd432;
mov ymm5_a L0x7fffffffd434;
mov ymm5_b L0x7fffffffd436;
mov ymm5_c L0x7fffffffd438;
mov ymm5_d L0x7fffffffd43a;
mov ymm5_e L0x7fffffffd43c;
mov ymm5_f L0x7fffffffd43e;
(* vmovdqa 0x240(%rdi),%ymm6                       #! EA = L0x7fffffffd520; Value = 0x1dc801e6fec5e696; PC = 0x55555555d867 *)
mov ymm6_0 L0x7fffffffd520;
mov ymm6_1 L0x7fffffffd522;
mov ymm6_2 L0x7fffffffd524;
mov ymm6_3 L0x7fffffffd526;
mov ymm6_4 L0x7fffffffd528;
mov ymm6_5 L0x7fffffffd52a;
mov ymm6_6 L0x7fffffffd52c;
mov ymm6_7 L0x7fffffffd52e;
mov ymm6_8 L0x7fffffffd530;
mov ymm6_9 L0x7fffffffd532;
mov ymm6_a L0x7fffffffd534;
mov ymm6_b L0x7fffffffd536;
mov ymm6_c L0x7fffffffd538;
mov ymm6_d L0x7fffffffd53a;
mov ymm6_e L0x7fffffffd53c;
mov ymm6_f L0x7fffffffd53e;
(* vmovdqa 0x340(%rdi),%ymm7                       #! EA = L0x7fffffffd620; Value = 0x20ee13b8f7020479; PC = 0x55555555d86f *)
mov ymm7_0 L0x7fffffffd620;
mov ymm7_1 L0x7fffffffd622;
mov ymm7_2 L0x7fffffffd624;
mov ymm7_3 L0x7fffffffd626;
mov ymm7_4 L0x7fffffffd628;
mov ymm7_5 L0x7fffffffd62a;
mov ymm7_6 L0x7fffffffd62c;
mov ymm7_7 L0x7fffffffd62e;
mov ymm7_8 L0x7fffffffd630;
mov ymm7_9 L0x7fffffffd632;
mov ymm7_a L0x7fffffffd634;
mov ymm7_b L0x7fffffffd636;
mov ymm7_c L0x7fffffffd638;
mov ymm7_d L0x7fffffffd63a;
mov ymm7_e L0x7fffffffd63c;
mov ymm7_f L0x7fffffffd63e;
(* vmovdqa 0x440(%rdi),%ymm8                       #! EA = L0x7fffffffd720; Value = 0xfd8b02680df8fc11; PC = 0x55555555d877 *)
mov ymm8_0 L0x7fffffffd720;
mov ymm8_1 L0x7fffffffd722;
mov ymm8_2 L0x7fffffffd724;
mov ymm8_3 L0x7fffffffd726;
mov ymm8_4 L0x7fffffffd728;
mov ymm8_5 L0x7fffffffd72a;
mov ymm8_6 L0x7fffffffd72c;
mov ymm8_7 L0x7fffffffd72e;
mov ymm8_8 L0x7fffffffd730;
mov ymm8_9 L0x7fffffffd732;
mov ymm8_a L0x7fffffffd734;
mov ymm8_b L0x7fffffffd736;
mov ymm8_c L0x7fffffffd738;
mov ymm8_d L0x7fffffffd73a;
mov ymm8_e L0x7fffffffd73c;
mov ymm8_f L0x7fffffffd73e;
(* vmovdqa 0x540(%rdi),%ymm9                       #! EA = L0x7fffffffd820; Value = 0x029a1b870036f298; PC = 0x55555555d87f *)
mov ymm9_0 L0x7fffffffd820;
mov ymm9_1 L0x7fffffffd822;
mov ymm9_2 L0x7fffffffd824;
mov ymm9_3 L0x7fffffffd826;
mov ymm9_4 L0x7fffffffd828;
mov ymm9_5 L0x7fffffffd82a;
mov ymm9_6 L0x7fffffffd82c;
mov ymm9_7 L0x7fffffffd82e;
mov ymm9_8 L0x7fffffffd830;
mov ymm9_9 L0x7fffffffd832;
mov ymm9_a L0x7fffffffd834;
mov ymm9_b L0x7fffffffd836;
mov ymm9_c L0x7fffffffd838;
mov ymm9_d L0x7fffffffd83a;
mov ymm9_e L0x7fffffffd83c;
mov ymm9_f L0x7fffffffd83e;
(* vmovdqa 0x640(%rdi),%ymm10                      #! EA = L0x7fffffffd920; Value = 0xfbc513b81362fdf6; PC = 0x55555555d887 *)
mov ymm10_0 L0x7fffffffd920;
mov ymm10_1 L0x7fffffffd922;
mov ymm10_2 L0x7fffffffd924;
mov ymm10_3 L0x7fffffffd926;
mov ymm10_4 L0x7fffffffd928;
mov ymm10_5 L0x7fffffffd92a;
mov ymm10_6 L0x7fffffffd92c;
mov ymm10_7 L0x7fffffffd92e;
mov ymm10_8 L0x7fffffffd930;
mov ymm10_9 L0x7fffffffd932;
mov ymm10_a L0x7fffffffd934;
mov ymm10_b L0x7fffffffd936;
mov ymm10_c L0x7fffffffd938;
mov ymm10_d L0x7fffffffd93a;
mov ymm10_e L0x7fffffffd93c;
mov ymm10_f L0x7fffffffd93e;
(* vmovdqa 0x740(%rdi),%ymm11                      #! EA = L0x7fffffffda20; Value = 0x0275f8c60855e902; PC = 0x55555555d88f *)
mov ymm11_0 L0x7fffffffda20;
mov ymm11_1 L0x7fffffffda22;
mov ymm11_2 L0x7fffffffda24;
mov ymm11_3 L0x7fffffffda26;
mov ymm11_4 L0x7fffffffda28;
mov ymm11_5 L0x7fffffffda2a;
mov ymm11_6 L0x7fffffffda2c;
mov ymm11_7 L0x7fffffffda2e;
mov ymm11_8 L0x7fffffffda30;
mov ymm11_9 L0x7fffffffda32;
mov ymm11_a L0x7fffffffda34;
mov ymm11_b L0x7fffffffda36;
mov ymm11_c L0x7fffffffda38;
mov ymm11_d L0x7fffffffda3a;
mov ymm11_e L0x7fffffffda3c;
mov ymm11_f L0x7fffffffda3e;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555d897 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555d89b *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555d89f *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555d8a3 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555d8a7 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555d8ac *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555d8b1 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d8b6 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d8bb *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d8c4 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555d8cd *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555d8d1 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d8d5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555d8d9 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555d8dd *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555d8e6 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555d8ef *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555d8f3 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d8f7 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555d8fb *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555d900 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555d909 *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555d912 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d916 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d91a *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555d91e *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm5,%ymm10                     #! PC = 0x55555555d923 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555d928 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d92d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555d931 *)
sub ymm5_0 ymm5_0 ymm10_0;
sub ymm5_1 ymm5_1 ymm10_1;
sub ymm5_2 ymm5_2 ymm10_2;
sub ymm5_3 ymm5_3 ymm10_3;
sub ymm5_4 ymm5_4 ymm10_4;
sub ymm5_5 ymm5_5 ymm10_5;
sub ymm5_6 ymm5_6 ymm10_6;
sub ymm5_7 ymm5_7 ymm10_7;
sub ymm5_8 ymm5_8 ymm10_8;
sub ymm5_9 ymm5_9 ymm10_9;
sub ymm5_a ymm5_a ymm10_a;
sub ymm5_b ymm5_b ymm10_b;
sub ymm5_c ymm5_c ymm10_c;
sub ymm5_d ymm5_d ymm10_d;
sub ymm5_e ymm5_e ymm10_e;
sub ymm5_f ymm5_f ymm10_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555d936 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555d93b *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d940 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555d944 *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpmullw %ymm12,%ymm4,%ymm10                     #! PC = 0x55555555d949 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555d94e *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d953 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm4,%ymm4                       #! PC = 0x55555555d957 *)
sub ymm4_0 ymm4_0 ymm10_0;
sub ymm4_1 ymm4_1 ymm10_1;
sub ymm4_2 ymm4_2 ymm10_2;
sub ymm4_3 ymm4_3 ymm10_3;
sub ymm4_4 ymm4_4 ymm10_4;
sub ymm4_5 ymm4_5 ymm10_5;
sub ymm4_6 ymm4_6 ymm10_6;
sub ymm4_7 ymm4_7 ymm10_7;
sub ymm4_8 ymm4_8 ymm10_8;
sub ymm4_9 ymm4_9 ymm10_9;
sub ymm4_a ymm4_a ymm10_a;
sub ymm4_b ymm4_b ymm10_b;
sub ymm4_c ymm4_c ymm10_c;
sub ymm4_d ymm4_d ymm10_d;
sub ymm4_e ymm4_e ymm10_e;
sub ymm4_f ymm4_f ymm10_f;
(* vpmullw %ymm12,%ymm6,%ymm10                     #! PC = 0x55555555d95c *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555d961 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d966 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555d96a *)
sub ymm6_0 ymm6_0 ymm10_0;
sub ymm6_1 ymm6_1 ymm10_1;
sub ymm6_2 ymm6_2 ymm10_2;
sub ymm6_3 ymm6_3 ymm10_3;
sub ymm6_4 ymm6_4 ymm10_4;
sub ymm6_5 ymm6_5 ymm10_5;
sub ymm6_6 ymm6_6 ymm10_6;
sub ymm6_7 ymm6_7 ymm10_7;
sub ymm6_8 ymm6_8 ymm10_8;
sub ymm6_9 ymm6_9 ymm10_9;
sub ymm6_a ymm6_a ymm10_a;
sub ymm6_b ymm6_b ymm10_b;
sub ymm6_c ymm6_c ymm10_c;
sub ymm6_d ymm6_d ymm10_d;
sub ymm6_e ymm6_e ymm10_e;
sub ymm6_f ymm6_f ymm10_f;
(* vpmullw %ymm12,%ymm8,%ymm10                     #! PC = 0x55555555d96f *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555d974 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555d979 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm8,%ymm8                       #! PC = 0x55555555d97d *)
sub ymm8_0 ymm8_0 ymm10_0;
sub ymm8_1 ymm8_1 ymm10_1;
sub ymm8_2 ymm8_2 ymm10_2;
sub ymm8_3 ymm8_3 ymm10_3;
sub ymm8_4 ymm8_4 ymm10_4;
sub ymm8_5 ymm8_5 ymm10_5;
sub ymm8_6 ymm8_6 ymm10_6;
sub ymm8_7 ymm8_7 ymm10_7;
sub ymm8_8 ymm8_8 ymm10_8;
sub ymm8_9 ymm8_9 ymm10_9;
sub ymm8_a ymm8_a ymm10_a;
sub ymm8_b ymm8_b ymm10_b;
sub ymm8_c ymm8_c ymm10_c;
sub ymm8_d ymm8_d ymm10_d;
sub ymm8_e ymm8_e ymm10_e;
sub ymm8_f ymm8_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555d982 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555d986 *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555d98a *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555d98e *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555d992 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555d997 *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555d99c *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d9a1 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555d9a6 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555d9af *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555d9b8 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555d9bc *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d9c0 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555d9c4 *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555d9c9 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555d9cd *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d9d1 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555d9d5 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555d9da *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555d9df *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d9e4 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555d9e8 *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555d9ed *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555d9f2 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555d9f7 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555d9fb *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555da00 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555da05 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555da0a *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555da0e *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555da13 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555da18 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555da1d *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555da21 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555da26 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555da2b *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555da30 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555da34 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm5,%ymm9                      #! PC = 0x55555555da39 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555da3e *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555da43 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555da47 *)
sub ymm5_0 ymm5_0 ymm9_0;
sub ymm5_1 ymm5_1 ymm9_1;
sub ymm5_2 ymm5_2 ymm9_2;
sub ymm5_3 ymm5_3 ymm9_3;
sub ymm5_4 ymm5_4 ymm9_4;
sub ymm5_5 ymm5_5 ymm9_5;
sub ymm5_6 ymm5_6 ymm9_6;
sub ymm5_7 ymm5_7 ymm9_7;
sub ymm5_8 ymm5_8 ymm9_8;
sub ymm5_9 ymm5_9 ymm9_9;
sub ymm5_a ymm5_a ymm9_a;
sub ymm5_b ymm5_b ymm9_b;
sub ymm5_c ymm5_c ymm9_c;
sub ymm5_d ymm5_d ymm9_d;
sub ymm5_e ymm5_e ymm9_e;
sub ymm5_f ymm5_f ymm9_f;
(* vpmullw %ymm12,%ymm6,%ymm9                      #! PC = 0x55555555da4c *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555da51 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555da56 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm6                        #! PC = 0x55555555da5a *)
sub ymm6_0 ymm6_0 ymm9_0;
sub ymm6_1 ymm6_1 ymm9_1;
sub ymm6_2 ymm6_2 ymm9_2;
sub ymm6_3 ymm6_3 ymm9_3;
sub ymm6_4 ymm6_4 ymm9_4;
sub ymm6_5 ymm6_5 ymm9_5;
sub ymm6_6 ymm6_6 ymm9_6;
sub ymm6_7 ymm6_7 ymm9_7;
sub ymm6_8 ymm6_8 ymm9_8;
sub ymm6_9 ymm6_9 ymm9_9;
sub ymm6_a ymm6_a ymm9_a;
sub ymm6_b ymm6_b ymm9_b;
sub ymm6_c ymm6_c ymm9_c;
sub ymm6_d ymm6_d ymm9_d;
sub ymm6_e ymm6_e ymm9_e;
sub ymm6_f ymm6_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555da5f *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555da63 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555da67 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555da6b *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555da6f *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555da74 *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555da79 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555da7e *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0x40(%rdi)                        #! EA = L0x7fffffffd320; PC = 0x55555555da83 *)
mov L0x7fffffffd320 ymm9_0;
mov L0x7fffffffd322 ymm9_1;
mov L0x7fffffffd324 ymm9_2;
mov L0x7fffffffd326 ymm9_3;
mov L0x7fffffffd328 ymm9_4;
mov L0x7fffffffd32a ymm9_5;
mov L0x7fffffffd32c ymm9_6;
mov L0x7fffffffd32e ymm9_7;
mov L0x7fffffffd330 ymm9_8;
mov L0x7fffffffd332 ymm9_9;
mov L0x7fffffffd334 ymm9_a;
mov L0x7fffffffd336 ymm9_b;
mov L0x7fffffffd338 ymm9_c;
mov L0x7fffffffd33a ymm9_d;
mov L0x7fffffffd33c ymm9_e;
mov L0x7fffffffd33e ymm9_f;
(* vmovdqa %ymm10,0x140(%rdi)                      #! EA = L0x7fffffffd420; PC = 0x55555555da88 *)
mov L0x7fffffffd420 ymm10_0;
mov L0x7fffffffd422 ymm10_1;
mov L0x7fffffffd424 ymm10_2;
mov L0x7fffffffd426 ymm10_3;
mov L0x7fffffffd428 ymm10_4;
mov L0x7fffffffd42a ymm10_5;
mov L0x7fffffffd42c ymm10_6;
mov L0x7fffffffd42e ymm10_7;
mov L0x7fffffffd430 ymm10_8;
mov L0x7fffffffd432 ymm10_9;
mov L0x7fffffffd434 ymm10_a;
mov L0x7fffffffd436 ymm10_b;
mov L0x7fffffffd438 ymm10_c;
mov L0x7fffffffd43a ymm10_d;
mov L0x7fffffffd43c ymm10_e;
mov L0x7fffffffd43e ymm10_f;
(* vmovdqa %ymm3,0x240(%rdi)                       #! EA = L0x7fffffffd520; PC = 0x55555555da90 *)
mov L0x7fffffffd520 ymm3_0;
mov L0x7fffffffd522 ymm3_1;
mov L0x7fffffffd524 ymm3_2;
mov L0x7fffffffd526 ymm3_3;
mov L0x7fffffffd528 ymm3_4;
mov L0x7fffffffd52a ymm3_5;
mov L0x7fffffffd52c ymm3_6;
mov L0x7fffffffd52e ymm3_7;
mov L0x7fffffffd530 ymm3_8;
mov L0x7fffffffd532 ymm3_9;
mov L0x7fffffffd534 ymm3_a;
mov L0x7fffffffd536 ymm3_b;
mov L0x7fffffffd538 ymm3_c;
mov L0x7fffffffd53a ymm3_d;
mov L0x7fffffffd53c ymm3_e;
mov L0x7fffffffd53e ymm3_f;
(* vmovdqa %ymm4,0x340(%rdi)                       #! EA = L0x7fffffffd620; PC = 0x55555555da98 *)
mov L0x7fffffffd620 ymm4_0;
mov L0x7fffffffd622 ymm4_1;
mov L0x7fffffffd624 ymm4_2;
mov L0x7fffffffd626 ymm4_3;
mov L0x7fffffffd628 ymm4_4;
mov L0x7fffffffd62a ymm4_5;
mov L0x7fffffffd62c ymm4_6;
mov L0x7fffffffd62e ymm4_7;
mov L0x7fffffffd630 ymm4_8;
mov L0x7fffffffd632 ymm4_9;
mov L0x7fffffffd634 ymm4_a;
mov L0x7fffffffd636 ymm4_b;
mov L0x7fffffffd638 ymm4_c;
mov L0x7fffffffd63a ymm4_d;
mov L0x7fffffffd63c ymm4_e;
mov L0x7fffffffd63e ymm4_f;
(* vmovdqa %ymm5,0x440(%rdi)                       #! EA = L0x7fffffffd720; PC = 0x55555555daa0 *)
mov L0x7fffffffd720 ymm5_0;
mov L0x7fffffffd722 ymm5_1;
mov L0x7fffffffd724 ymm5_2;
mov L0x7fffffffd726 ymm5_3;
mov L0x7fffffffd728 ymm5_4;
mov L0x7fffffffd72a ymm5_5;
mov L0x7fffffffd72c ymm5_6;
mov L0x7fffffffd72e ymm5_7;
mov L0x7fffffffd730 ymm5_8;
mov L0x7fffffffd732 ymm5_9;
mov L0x7fffffffd734 ymm5_a;
mov L0x7fffffffd736 ymm5_b;
mov L0x7fffffffd738 ymm5_c;
mov L0x7fffffffd73a ymm5_d;
mov L0x7fffffffd73c ymm5_e;
mov L0x7fffffffd73e ymm5_f;
(* vmovdqa %ymm6,0x540(%rdi)                       #! EA = L0x7fffffffd820; PC = 0x55555555daa8 *)
mov L0x7fffffffd820 ymm6_0;
mov L0x7fffffffd822 ymm6_1;
mov L0x7fffffffd824 ymm6_2;
mov L0x7fffffffd826 ymm6_3;
mov L0x7fffffffd828 ymm6_4;
mov L0x7fffffffd82a ymm6_5;
mov L0x7fffffffd82c ymm6_6;
mov L0x7fffffffd82e ymm6_7;
mov L0x7fffffffd830 ymm6_8;
mov L0x7fffffffd832 ymm6_9;
mov L0x7fffffffd834 ymm6_a;
mov L0x7fffffffd836 ymm6_b;
mov L0x7fffffffd838 ymm6_c;
mov L0x7fffffffd83a ymm6_d;
mov L0x7fffffffd83c ymm6_e;
mov L0x7fffffffd83e ymm6_f;
(* vmovdqa %ymm8,0x640(%rdi)                       #! EA = L0x7fffffffd920; PC = 0x55555555dab0 *)
mov L0x7fffffffd920 ymm8_0;
mov L0x7fffffffd922 ymm8_1;
mov L0x7fffffffd924 ymm8_2;
mov L0x7fffffffd926 ymm8_3;
mov L0x7fffffffd928 ymm8_4;
mov L0x7fffffffd92a ymm8_5;
mov L0x7fffffffd92c ymm8_6;
mov L0x7fffffffd92e ymm8_7;
mov L0x7fffffffd930 ymm8_8;
mov L0x7fffffffd932 ymm8_9;
mov L0x7fffffffd934 ymm8_a;
mov L0x7fffffffd936 ymm8_b;
mov L0x7fffffffd938 ymm8_c;
mov L0x7fffffffd93a ymm8_d;
mov L0x7fffffffd93c ymm8_e;
mov L0x7fffffffd93e ymm8_f;
(* vmovdqa %ymm11,0x740(%rdi)                      #! EA = L0x7fffffffda20; PC = 0x55555555dab8 *)
mov L0x7fffffffda20 ymm11_0;
mov L0x7fffffffda22 ymm11_1;
mov L0x7fffffffda24 ymm11_2;
mov L0x7fffffffda26 ymm11_3;
mov L0x7fffffffda28 ymm11_4;
mov L0x7fffffffda2a ymm11_5;
mov L0x7fffffffda2c ymm11_6;
mov L0x7fffffffda2e ymm11_7;
mov L0x7fffffffda30 ymm11_8;
mov L0x7fffffffda32 ymm11_9;
mov L0x7fffffffda34 ymm11_a;
mov L0x7fffffffda36 ymm11_b;
mov L0x7fffffffda38 ymm11_c;
mov L0x7fffffffda3a ymm11_d;
mov L0x7fffffffda3c ymm11_e;
mov L0x7fffffffda3e ymm11_f;



(**************** LEVELS 6-8, 2 *****************)

ghost out_poly2@bit,
out_poly20@bit, out_poly21@bit, out_poly22@bit, out_poly23@bit,
out_poly24@bit, out_poly25@bit, out_poly26@bit, out_poly27@bit : and [
out_poly20 =
L0x7fffffffd320*x** 0+L0x7fffffffd322*x** 1+L0x7fffffffd324*x** 2+
L0x7fffffffd326*x** 3+L0x7fffffffd328*x** 4+L0x7fffffffd32a*x** 5+
L0x7fffffffd32c*x** 6+L0x7fffffffd32e*x** 7+L0x7fffffffd330*x** 8+
L0x7fffffffd332*x** 9+L0x7fffffffd334*x**10+L0x7fffffffd336*x**11+
L0x7fffffffd338*x**12+L0x7fffffffd33a*x**13+L0x7fffffffd33c*x**14+
L0x7fffffffd33e*x**15,
out_poly21 =
L0x7fffffffd420*x** 0+L0x7fffffffd422*x** 1+L0x7fffffffd424*x** 2+
L0x7fffffffd426*x** 3+L0x7fffffffd428*x** 4+L0x7fffffffd42a*x** 5+
L0x7fffffffd42c*x** 6+L0x7fffffffd42e*x** 7+L0x7fffffffd430*x** 8+
L0x7fffffffd432*x** 9+L0x7fffffffd434*x**10+L0x7fffffffd436*x**11+
L0x7fffffffd438*x**12+L0x7fffffffd43a*x**13+L0x7fffffffd43c*x**14+
L0x7fffffffd43e*x**15,
out_poly22 =
L0x7fffffffd520*x** 0+L0x7fffffffd522*x** 1+L0x7fffffffd524*x** 2+
L0x7fffffffd526*x** 3+L0x7fffffffd528*x** 4+L0x7fffffffd52a*x** 5+
L0x7fffffffd52c*x** 6+L0x7fffffffd52e*x** 7+L0x7fffffffd530*x** 8+
L0x7fffffffd532*x** 9+L0x7fffffffd534*x**10+L0x7fffffffd536*x**11+
L0x7fffffffd538*x**12+L0x7fffffffd53a*x**13+L0x7fffffffd53c*x**14+
L0x7fffffffd53e*x**15,
out_poly23 =
L0x7fffffffd620*x** 0+L0x7fffffffd622*x** 1+L0x7fffffffd624*x** 2+
L0x7fffffffd626*x** 3+L0x7fffffffd628*x** 4+L0x7fffffffd62a*x** 5+
L0x7fffffffd62c*x** 6+L0x7fffffffd62e*x** 7+L0x7fffffffd630*x** 8+
L0x7fffffffd632*x** 9+L0x7fffffffd634*x**10+L0x7fffffffd636*x**11+
L0x7fffffffd638*x**12+L0x7fffffffd63a*x**13+L0x7fffffffd63c*x**14+
L0x7fffffffd63e*x**15,
out_poly24 =
L0x7fffffffd720*x** 0+L0x7fffffffd722*x** 1+L0x7fffffffd724*x** 2+
L0x7fffffffd726*x** 3+L0x7fffffffd728*x** 4+L0x7fffffffd72a*x** 5+
L0x7fffffffd72c*x** 6+L0x7fffffffd72e*x** 7+L0x7fffffffd730*x** 8+
L0x7fffffffd732*x** 9+L0x7fffffffd734*x**10+L0x7fffffffd736*x**11+
L0x7fffffffd738*x**12+L0x7fffffffd73a*x**13+L0x7fffffffd73c*x**14+
L0x7fffffffd73e*x**15,
out_poly25 =
L0x7fffffffd820*x** 0+L0x7fffffffd822*x** 1+L0x7fffffffd824*x** 2+
L0x7fffffffd826*x** 3+L0x7fffffffd828*x** 4+L0x7fffffffd82a*x** 5+
L0x7fffffffd82c*x** 6+L0x7fffffffd82e*x** 7+L0x7fffffffd830*x** 8+
L0x7fffffffd832*x** 9+L0x7fffffffd834*x**10+L0x7fffffffd836*x**11+
L0x7fffffffd838*x**12+L0x7fffffffd83a*x**13+L0x7fffffffd83c*x**14+
L0x7fffffffd83e*x**15,
out_poly26 =
L0x7fffffffd920*x** 0+L0x7fffffffd922*x** 1+L0x7fffffffd924*x** 2+
L0x7fffffffd926*x** 3+L0x7fffffffd928*x** 4+L0x7fffffffd92a*x** 5+
L0x7fffffffd92c*x** 6+L0x7fffffffd92e*x** 7+L0x7fffffffd930*x** 8+
L0x7fffffffd932*x** 9+L0x7fffffffd934*x**10+L0x7fffffffd936*x**11+
L0x7fffffffd938*x**12+L0x7fffffffd93a*x**13+L0x7fffffffd93c*x**14+
L0x7fffffffd93e*x**15,
out_poly27 =
L0x7fffffffda20*x** 0+L0x7fffffffda22*x** 1+L0x7fffffffda24*x** 2+
L0x7fffffffda26*x** 3+L0x7fffffffda28*x** 4+L0x7fffffffda2a*x** 5+
L0x7fffffffda2c*x** 6+L0x7fffffffda2e*x** 7+L0x7fffffffda30*x** 8+
L0x7fffffffda32*x** 9+L0x7fffffffda34*x**10+L0x7fffffffda36*x**11+
L0x7fffffffda38*x**12+L0x7fffffffda3a*x**13+L0x7fffffffda3c*x**14+
L0x7fffffffda3e*x**15
,
out_poly2 =
out_poly20*x**  0+out_poly21*x**128+out_poly22*x**256+out_poly23*x**384+
out_poly24*x**512+out_poly25*x**640+out_poly26*x**768+out_poly27*x**896]
&& true;


(**************** CUT  69 *****************)

ecut and [
eqmod (out_poly2) (8*shuf_poly20) [10753, x**128 - 1],
eqmod (out_poly2) (8*shuf_poly21) [10753, x**128 - 10752],
eqmod (out_poly2) (8*shuf_poly22) [10753, x**128 - 6264],
eqmod (out_poly2) (8*shuf_poly23) [10753, x**128 - 4489],
eqmod (out_poly2) (8*shuf_poly24) [10753, x**128 - 321],
eqmod (out_poly2) (8*shuf_poly25) [10753, x**128 - 10432],
eqmod (out_poly2) (8*shuf_poly26) [10753, x**128 - 10686],
eqmod (out_poly2) (8*shuf_poly27) [10753, x**128 - 67]
];


(**************** CUT  70 *****************)

ecut true;



(**************** shuffle poly 3 *****************)

ghost shuf_poly30@bit, shuf_poly31@bit, shuf_poly32@bit, shuf_poly33@bit,
      shuf_poly34@bit, shuf_poly35@bit, shuf_poly36@bit, shuf_poly37@bit : and [
shuf_poly30 =
L0x7fffffffd340*x** 0+L0x7fffffffd342*x** 1+L0x7fffffffd344*x** 2+
L0x7fffffffd346*x** 3+L0x7fffffffd348*x** 4+L0x7fffffffd34a*x** 5+
L0x7fffffffd34c*x** 6+L0x7fffffffd34e*x** 7+L0x7fffffffd350*x** 8+
L0x7fffffffd352*x** 9+L0x7fffffffd354*x**10+L0x7fffffffd356*x**11+
L0x7fffffffd358*x**12+L0x7fffffffd35a*x**13+L0x7fffffffd35c*x**14+
L0x7fffffffd35e*x**15,
shuf_poly31 =
L0x7fffffffd440*x** 0+L0x7fffffffd442*x** 1+L0x7fffffffd444*x** 2+
L0x7fffffffd446*x** 3+L0x7fffffffd448*x** 4+L0x7fffffffd44a*x** 5+
L0x7fffffffd44c*x** 6+L0x7fffffffd44e*x** 7+L0x7fffffffd450*x** 8+
L0x7fffffffd452*x** 9+L0x7fffffffd454*x**10+L0x7fffffffd456*x**11+
L0x7fffffffd458*x**12+L0x7fffffffd45a*x**13+L0x7fffffffd45c*x**14+
L0x7fffffffd45e*x**15,
shuf_poly32 =
L0x7fffffffd540*x** 0+L0x7fffffffd542*x** 1+L0x7fffffffd544*x** 2+
L0x7fffffffd546*x** 3+L0x7fffffffd548*x** 4+L0x7fffffffd54a*x** 5+
L0x7fffffffd54c*x** 6+L0x7fffffffd54e*x** 7+L0x7fffffffd550*x** 8+
L0x7fffffffd552*x** 9+L0x7fffffffd554*x**10+L0x7fffffffd556*x**11+
L0x7fffffffd558*x**12+L0x7fffffffd55a*x**13+L0x7fffffffd55c*x**14+
L0x7fffffffd55e*x**15,
shuf_poly33 =
L0x7fffffffd640*x** 0+L0x7fffffffd642*x** 1+L0x7fffffffd644*x** 2+
L0x7fffffffd646*x** 3+L0x7fffffffd648*x** 4+L0x7fffffffd64a*x** 5+
L0x7fffffffd64c*x** 6+L0x7fffffffd64e*x** 7+L0x7fffffffd650*x** 8+
L0x7fffffffd652*x** 9+L0x7fffffffd654*x**10+L0x7fffffffd656*x**11+
L0x7fffffffd658*x**12+L0x7fffffffd65a*x**13+L0x7fffffffd65c*x**14+
L0x7fffffffd65e*x**15,
shuf_poly34 =
L0x7fffffffd740*x** 0+L0x7fffffffd742*x** 1+L0x7fffffffd744*x** 2+
L0x7fffffffd746*x** 3+L0x7fffffffd748*x** 4+L0x7fffffffd74a*x** 5+
L0x7fffffffd74c*x** 6+L0x7fffffffd74e*x** 7+L0x7fffffffd750*x** 8+
L0x7fffffffd752*x** 9+L0x7fffffffd754*x**10+L0x7fffffffd756*x**11+
L0x7fffffffd758*x**12+L0x7fffffffd75a*x**13+L0x7fffffffd75c*x**14+
L0x7fffffffd75e*x**15,
shuf_poly35 =
L0x7fffffffd840*x** 0+L0x7fffffffd842*x** 1+L0x7fffffffd844*x** 2+
L0x7fffffffd846*x** 3+L0x7fffffffd848*x** 4+L0x7fffffffd84a*x** 5+
L0x7fffffffd84c*x** 6+L0x7fffffffd84e*x** 7+L0x7fffffffd850*x** 8+
L0x7fffffffd852*x** 9+L0x7fffffffd854*x**10+L0x7fffffffd856*x**11+
L0x7fffffffd858*x**12+L0x7fffffffd85a*x**13+L0x7fffffffd85c*x**14+
L0x7fffffffd85e*x**15,
shuf_poly36 =
L0x7fffffffd940*x** 0+L0x7fffffffd942*x** 1+L0x7fffffffd944*x** 2+
L0x7fffffffd946*x** 3+L0x7fffffffd948*x** 4+L0x7fffffffd94a*x** 5+
L0x7fffffffd94c*x** 6+L0x7fffffffd94e*x** 7+L0x7fffffffd950*x** 8+
L0x7fffffffd952*x** 9+L0x7fffffffd954*x**10+L0x7fffffffd956*x**11+
L0x7fffffffd958*x**12+L0x7fffffffd95a*x**13+L0x7fffffffd95c*x**14+
L0x7fffffffd95e*x**15,
shuf_poly37 =
L0x7fffffffda40*x** 0+L0x7fffffffda42*x** 1+L0x7fffffffda44*x** 2+
L0x7fffffffda46*x** 3+L0x7fffffffda48*x** 4+L0x7fffffffda4a*x** 5+
L0x7fffffffda4c*x** 6+L0x7fffffffda4e*x** 7+L0x7fffffffda50*x** 8+
L0x7fffffffda52*x** 9+L0x7fffffffda54*x**10+L0x7fffffffda56*x**11+
L0x7fffffffda58*x**12+L0x7fffffffda5a*x**13+L0x7fffffffda5c*x**14+
L0x7fffffffda5e*x**15
] && true;



(* vmovdqa 0x60(%rdi),%ymm4                        #! EA = L0x7fffffffd340; Value = 0xfb4ff097e51ff434; PC = 0x55555555dac0 *)
mov ymm4_0 L0x7fffffffd340;
mov ymm4_1 L0x7fffffffd342;
mov ymm4_2 L0x7fffffffd344;
mov ymm4_3 L0x7fffffffd346;
mov ymm4_4 L0x7fffffffd348;
mov ymm4_5 L0x7fffffffd34a;
mov ymm4_6 L0x7fffffffd34c;
mov ymm4_7 L0x7fffffffd34e;
mov ymm4_8 L0x7fffffffd350;
mov ymm4_9 L0x7fffffffd352;
mov ymm4_a L0x7fffffffd354;
mov ymm4_b L0x7fffffffd356;
mov ymm4_c L0x7fffffffd358;
mov ymm4_d L0x7fffffffd35a;
mov ymm4_e L0x7fffffffd35c;
mov ymm4_f L0x7fffffffd35e;
(* vmovdqa 0x160(%rdi),%ymm5                       #! EA = L0x7fffffffd440; Value = 0x051ffb33e5d50b10; PC = 0x55555555dac5 *)
mov ymm5_0 L0x7fffffffd440;
mov ymm5_1 L0x7fffffffd442;
mov ymm5_2 L0x7fffffffd444;
mov ymm5_3 L0x7fffffffd446;
mov ymm5_4 L0x7fffffffd448;
mov ymm5_5 L0x7fffffffd44a;
mov ymm5_6 L0x7fffffffd44c;
mov ymm5_7 L0x7fffffffd44e;
mov ymm5_8 L0x7fffffffd450;
mov ymm5_9 L0x7fffffffd452;
mov ymm5_a L0x7fffffffd454;
mov ymm5_b L0x7fffffffd456;
mov ymm5_c L0x7fffffffd458;
mov ymm5_d L0x7fffffffd45a;
mov ymm5_e L0x7fffffffd45c;
mov ymm5_f L0x7fffffffd45e;
(* vmovdqa 0x260(%rdi),%ymm6                       #! EA = L0x7fffffffd540; Value = 0x0c840789fca6035a; PC = 0x55555555dacd *)
mov ymm6_0 L0x7fffffffd540;
mov ymm6_1 L0x7fffffffd542;
mov ymm6_2 L0x7fffffffd544;
mov ymm6_3 L0x7fffffffd546;
mov ymm6_4 L0x7fffffffd548;
mov ymm6_5 L0x7fffffffd54a;
mov ymm6_6 L0x7fffffffd54c;
mov ymm6_7 L0x7fffffffd54e;
mov ymm6_8 L0x7fffffffd550;
mov ymm6_9 L0x7fffffffd552;
mov ymm6_a L0x7fffffffd554;
mov ymm6_b L0x7fffffffd556;
mov ymm6_c L0x7fffffffd558;
mov ymm6_d L0x7fffffffd55a;
mov ymm6_e L0x7fffffffd55c;
mov ymm6_f L0x7fffffffd55e;
(* vmovdqa 0x360(%rdi),%ymm7                       #! EA = L0x7fffffffd640; Value = 0xf3baf7c9e2a4fcd2; PC = 0x55555555dad5 *)
mov ymm7_0 L0x7fffffffd640;
mov ymm7_1 L0x7fffffffd642;
mov ymm7_2 L0x7fffffffd644;
mov ymm7_3 L0x7fffffffd646;
mov ymm7_4 L0x7fffffffd648;
mov ymm7_5 L0x7fffffffd64a;
mov ymm7_6 L0x7fffffffd64c;
mov ymm7_7 L0x7fffffffd64e;
mov ymm7_8 L0x7fffffffd650;
mov ymm7_9 L0x7fffffffd652;
mov ymm7_a L0x7fffffffd654;
mov ymm7_b L0x7fffffffd656;
mov ymm7_c L0x7fffffffd658;
mov ymm7_d L0x7fffffffd65a;
mov ymm7_e L0x7fffffffd65c;
mov ymm7_f L0x7fffffffd65e;
(* vmovdqa 0x460(%rdi),%ymm8                       #! EA = L0x7fffffffd740; Value = 0xf2c5fa0511f7f6ac; PC = 0x55555555dadd *)
mov ymm8_0 L0x7fffffffd740;
mov ymm8_1 L0x7fffffffd742;
mov ymm8_2 L0x7fffffffd744;
mov ymm8_3 L0x7fffffffd746;
mov ymm8_4 L0x7fffffffd748;
mov ymm8_5 L0x7fffffffd74a;
mov ymm8_6 L0x7fffffffd74c;
mov ymm8_7 L0x7fffffffd74e;
mov ymm8_8 L0x7fffffffd750;
mov ymm8_9 L0x7fffffffd752;
mov ymm8_a L0x7fffffffd754;
mov ymm8_b L0x7fffffffd756;
mov ymm8_c L0x7fffffffd758;
mov ymm8_d L0x7fffffffd75a;
mov ymm8_e L0x7fffffffd75c;
mov ymm8_f L0x7fffffffd75e;
(* vmovdqa 0x560(%rdi),%ymm9                       #! EA = L0x7fffffffd840; Value = 0xe2c2ed5908ee1af0; PC = 0x55555555dae5 *)
mov ymm9_0 L0x7fffffffd840;
mov ymm9_1 L0x7fffffffd842;
mov ymm9_2 L0x7fffffffd844;
mov ymm9_3 L0x7fffffffd846;
mov ymm9_4 L0x7fffffffd848;
mov ymm9_5 L0x7fffffffd84a;
mov ymm9_6 L0x7fffffffd84c;
mov ymm9_7 L0x7fffffffd84e;
mov ymm9_8 L0x7fffffffd850;
mov ymm9_9 L0x7fffffffd852;
mov ymm9_a L0x7fffffffd854;
mov ymm9_b L0x7fffffffd856;
mov ymm9_c L0x7fffffffd858;
mov ymm9_d L0x7fffffffd85a;
mov ymm9_e L0x7fffffffd85c;
mov ymm9_f L0x7fffffffd85e;
(* vmovdqa 0x660(%rdi),%ymm10                      #! EA = L0x7fffffffd940; Value = 0x1b7f224610e2042d; PC = 0x55555555daed *)
mov ymm10_0 L0x7fffffffd940;
mov ymm10_1 L0x7fffffffd942;
mov ymm10_2 L0x7fffffffd944;
mov ymm10_3 L0x7fffffffd946;
mov ymm10_4 L0x7fffffffd948;
mov ymm10_5 L0x7fffffffd94a;
mov ymm10_6 L0x7fffffffd94c;
mov ymm10_7 L0x7fffffffd94e;
mov ymm10_8 L0x7fffffffd950;
mov ymm10_9 L0x7fffffffd952;
mov ymm10_a L0x7fffffffd954;
mov ymm10_b L0x7fffffffd956;
mov ymm10_c L0x7fffffffd958;
mov ymm10_d L0x7fffffffd95a;
mov ymm10_e L0x7fffffffd95c;
mov ymm10_f L0x7fffffffd95e;
(* vmovdqa 0x760(%rdi),%ymm11                      #! EA = L0x7fffffffda40; Value = 0xe5a50b79fc7ae9a7; PC = 0x55555555daf5 *)
mov ymm11_0 L0x7fffffffda40;
mov ymm11_1 L0x7fffffffda42;
mov ymm11_2 L0x7fffffffda44;
mov ymm11_3 L0x7fffffffda46;
mov ymm11_4 L0x7fffffffda48;
mov ymm11_5 L0x7fffffffda4a;
mov ymm11_6 L0x7fffffffda4c;
mov ymm11_7 L0x7fffffffda4e;
mov ymm11_8 L0x7fffffffda50;
mov ymm11_9 L0x7fffffffda52;
mov ymm11_a L0x7fffffffda54;
mov ymm11_b L0x7fffffffda56;
mov ymm11_c L0x7fffffffda58;
mov ymm11_d L0x7fffffffda5a;
mov ymm11_e L0x7fffffffda5c;
mov ymm11_f L0x7fffffffda5e;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555dafd *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555db01 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555db05 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555db09 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555db0d *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555db12 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555db17 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555db1c *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555db21 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555db2a *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555db33 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555db37 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555db3b *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555db3f *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555db43 *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555db4c *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555db55 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555db59 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555db5d *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555db61 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555db66 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555db6f *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555db78 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555db7c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555db80 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555db84 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm5,%ymm10                     #! PC = 0x55555555db89 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555db8e *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555db93 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555db97 *)
sub ymm5_0 ymm5_0 ymm10_0;
sub ymm5_1 ymm5_1 ymm10_1;
sub ymm5_2 ymm5_2 ymm10_2;
sub ymm5_3 ymm5_3 ymm10_3;
sub ymm5_4 ymm5_4 ymm10_4;
sub ymm5_5 ymm5_5 ymm10_5;
sub ymm5_6 ymm5_6 ymm10_6;
sub ymm5_7 ymm5_7 ymm10_7;
sub ymm5_8 ymm5_8 ymm10_8;
sub ymm5_9 ymm5_9 ymm10_9;
sub ymm5_a ymm5_a ymm10_a;
sub ymm5_b ymm5_b ymm10_b;
sub ymm5_c ymm5_c ymm10_c;
sub ymm5_d ymm5_d ymm10_d;
sub ymm5_e ymm5_e ymm10_e;
sub ymm5_f ymm5_f ymm10_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555db9c *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555dba1 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dba6 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555dbaa *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpmullw %ymm12,%ymm4,%ymm10                     #! PC = 0x55555555dbaf *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555dbb4 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dbb9 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm4,%ymm4                       #! PC = 0x55555555dbbd *)
sub ymm4_0 ymm4_0 ymm10_0;
sub ymm4_1 ymm4_1 ymm10_1;
sub ymm4_2 ymm4_2 ymm10_2;
sub ymm4_3 ymm4_3 ymm10_3;
sub ymm4_4 ymm4_4 ymm10_4;
sub ymm4_5 ymm4_5 ymm10_5;
sub ymm4_6 ymm4_6 ymm10_6;
sub ymm4_7 ymm4_7 ymm10_7;
sub ymm4_8 ymm4_8 ymm10_8;
sub ymm4_9 ymm4_9 ymm10_9;
sub ymm4_a ymm4_a ymm10_a;
sub ymm4_b ymm4_b ymm10_b;
sub ymm4_c ymm4_c ymm10_c;
sub ymm4_d ymm4_d ymm10_d;
sub ymm4_e ymm4_e ymm10_e;
sub ymm4_f ymm4_f ymm10_f;
(* vpmullw %ymm12,%ymm6,%ymm10                     #! PC = 0x55555555dbc2 *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555dbc7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dbcc *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555dbd0 *)
sub ymm6_0 ymm6_0 ymm10_0;
sub ymm6_1 ymm6_1 ymm10_1;
sub ymm6_2 ymm6_2 ymm10_2;
sub ymm6_3 ymm6_3 ymm10_3;
sub ymm6_4 ymm6_4 ymm10_4;
sub ymm6_5 ymm6_5 ymm10_5;
sub ymm6_6 ymm6_6 ymm10_6;
sub ymm6_7 ymm6_7 ymm10_7;
sub ymm6_8 ymm6_8 ymm10_8;
sub ymm6_9 ymm6_9 ymm10_9;
sub ymm6_a ymm6_a ymm10_a;
sub ymm6_b ymm6_b ymm10_b;
sub ymm6_c ymm6_c ymm10_c;
sub ymm6_d ymm6_d ymm10_d;
sub ymm6_e ymm6_e ymm10_e;
sub ymm6_f ymm6_f ymm10_f;
(* vpmullw %ymm12,%ymm8,%ymm10                     #! PC = 0x55555555dbd5 *)
smull mulHymm8_0 mulL_0 ymm12_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm12_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm12_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm12_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm12_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm12_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm12_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm12_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm12_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm12_9 ymm8_9;
smull mulHymm8_a mulL_a ymm12_a ymm8_a;
smull mulHymm8_b mulL_b ymm12_b ymm8_b;
smull mulHymm8_c mulL_c ymm12_c ymm8_c;
smull mulHymm8_d mulL_d ymm12_d ymm8_d;
smull mulHymm8_e mulL_e ymm12_e ymm8_e;
smull mulHymm8_f mulL_f ymm12_f ymm8_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm8,%ymm8                      #! PC = 0x55555555dbda *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm13_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm13_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm13_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm13_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm13_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm13_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm13_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm13_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm13_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm13_9;
smull mulH_a mulLymm8_a ymm8_a ymm13_a;
smull mulH_b mulLymm8_b ymm8_b ymm13_b;
smull mulH_c mulLymm8_c ymm8_c ymm13_c;
smull mulH_d mulLymm8_d ymm8_d ymm13_d;
smull mulH_e mulLymm8_e ymm8_e ymm13_e;
smull mulH_f mulLymm8_f ymm8_f ymm13_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dbdf *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm8,%ymm8                       #! PC = 0x55555555dbe3 *)
sub ymm8_0 ymm8_0 ymm10_0;
sub ymm8_1 ymm8_1 ymm10_1;
sub ymm8_2 ymm8_2 ymm10_2;
sub ymm8_3 ymm8_3 ymm10_3;
sub ymm8_4 ymm8_4 ymm10_4;
sub ymm8_5 ymm8_5 ymm10_5;
sub ymm8_6 ymm8_6 ymm10_6;
sub ymm8_7 ymm8_7 ymm10_7;
sub ymm8_8 ymm8_8 ymm10_8;
sub ymm8_9 ymm8_9 ymm10_9;
sub ymm8_a ymm8_a ymm10_a;
sub ymm8_b ymm8_b ymm10_b;
sub ymm8_c ymm8_c ymm10_c;
sub ymm8_d ymm8_d ymm10_d;
sub ymm8_e ymm8_e ymm10_e;
sub ymm8_f ymm8_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555dbe8 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555dbec *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555dbf0 *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555dbf4 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555dbf8 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555dbfd *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555dc02 *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555dc07 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555dc0c *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555dc15 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555dc1e *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555dc22 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc26 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555dc2a *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555dc2f *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555dc33 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc37 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555dc3b *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555dc40 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555dc45 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc4a *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555dc4e *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555dc53 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555dc58 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc5d *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555dc61 *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555dc66 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555dc6b *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc70 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555dc74 *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555dc79 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555dc7e *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc83 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555dc87 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555dc8c *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555dc91 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dc96 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555dc9a *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpmullw %ymm12,%ymm5,%ymm9                      #! PC = 0x55555555dc9f *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555dca4 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dca9 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555dcad *)
sub ymm5_0 ymm5_0 ymm9_0;
sub ymm5_1 ymm5_1 ymm9_1;
sub ymm5_2 ymm5_2 ymm9_2;
sub ymm5_3 ymm5_3 ymm9_3;
sub ymm5_4 ymm5_4 ymm9_4;
sub ymm5_5 ymm5_5 ymm9_5;
sub ymm5_6 ymm5_6 ymm9_6;
sub ymm5_7 ymm5_7 ymm9_7;
sub ymm5_8 ymm5_8 ymm9_8;
sub ymm5_9 ymm5_9 ymm9_9;
sub ymm5_a ymm5_a ymm9_a;
sub ymm5_b ymm5_b ymm9_b;
sub ymm5_c ymm5_c ymm9_c;
sub ymm5_d ymm5_d ymm9_d;
sub ymm5_e ymm5_e ymm9_e;
sub ymm5_f ymm5_f ymm9_f;
(* vpmullw %ymm12,%ymm6,%ymm9                      #! PC = 0x55555555dcb2 *)
smull mulHymm6_0 mulL_0 ymm12_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm12_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm12_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm12_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm12_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm12_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm12_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm12_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm12_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm12_9 ymm6_9;
smull mulHymm6_a mulL_a ymm12_a ymm6_a;
smull mulHymm6_b mulL_b ymm12_b ymm6_b;
smull mulHymm6_c mulL_c ymm12_c ymm6_c;
smull mulHymm6_d mulL_d ymm12_d ymm6_d;
smull mulHymm6_e mulL_e ymm12_e ymm6_e;
smull mulHymm6_f mulL_f ymm12_f ymm6_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm6,%ymm6                      #! PC = 0x55555555dcb7 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm13_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm13_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm13_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm13_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm13_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm13_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm13_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm13_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm13_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm13_9;
smull mulH_a mulLymm6_a ymm6_a ymm13_a;
smull mulH_b mulLymm6_b ymm6_b ymm13_b;
smull mulH_c mulLymm6_c ymm6_c ymm13_c;
smull mulH_d mulLymm6_d ymm6_d ymm13_d;
smull mulH_e mulLymm6_e ymm6_e ymm13_e;
smull mulH_f mulLymm6_f ymm6_f ymm13_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dcbc *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm6_0 2**16 && true;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm6_1 2**16 && true;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm6_2 2**16 && true;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm6_3 2**16 && true;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm6_4 2**16 && true;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm6_5 2**16 && true;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm6_6 2**16 && true;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm6_7 2**16 && true;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm6_8 2**16 && true;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm6_9 2**16 && true;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm6_a 2**16 && true;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm6_b 2**16 && true;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm6_c 2**16 && true;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm6_d 2**16 && true;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm6_e 2**16 && true;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm6_f 2**16 && true;
assume red_f = mulLymm6_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm6,%ymm6                        #! PC = 0x55555555dcc0 *)
sub ymm6_0 ymm6_0 ymm9_0;
sub ymm6_1 ymm6_1 ymm9_1;
sub ymm6_2 ymm6_2 ymm9_2;
sub ymm6_3 ymm6_3 ymm9_3;
sub ymm6_4 ymm6_4 ymm9_4;
sub ymm6_5 ymm6_5 ymm9_5;
sub ymm6_6 ymm6_6 ymm9_6;
sub ymm6_7 ymm6_7 ymm9_7;
sub ymm6_8 ymm6_8 ymm9_8;
sub ymm6_9 ymm6_9 ymm9_9;
sub ymm6_a ymm6_a ymm9_a;
sub ymm6_b ymm6_b ymm9_b;
sub ymm6_c ymm6_c ymm9_c;
sub ymm6_d ymm6_d ymm9_d;
sub ymm6_e ymm6_e ymm9_e;
sub ymm6_f ymm6_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555dcc5 *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555dcc9 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555dccd *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555dcd1 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555dcd5 *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555dcda *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555dcdf *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555dce4 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0x60(%rdi)                        #! EA = L0x7fffffffd340; PC = 0x55555555dce9 *)
mov L0x7fffffffd340 ymm9_0;
mov L0x7fffffffd342 ymm9_1;
mov L0x7fffffffd344 ymm9_2;
mov L0x7fffffffd346 ymm9_3;
mov L0x7fffffffd348 ymm9_4;
mov L0x7fffffffd34a ymm9_5;
mov L0x7fffffffd34c ymm9_6;
mov L0x7fffffffd34e ymm9_7;
mov L0x7fffffffd350 ymm9_8;
mov L0x7fffffffd352 ymm9_9;
mov L0x7fffffffd354 ymm9_a;
mov L0x7fffffffd356 ymm9_b;
mov L0x7fffffffd358 ymm9_c;
mov L0x7fffffffd35a ymm9_d;
mov L0x7fffffffd35c ymm9_e;
mov L0x7fffffffd35e ymm9_f;
(* vmovdqa %ymm10,0x160(%rdi)                      #! EA = L0x7fffffffd440; PC = 0x55555555dcee *)
mov L0x7fffffffd440 ymm10_0;
mov L0x7fffffffd442 ymm10_1;
mov L0x7fffffffd444 ymm10_2;
mov L0x7fffffffd446 ymm10_3;
mov L0x7fffffffd448 ymm10_4;
mov L0x7fffffffd44a ymm10_5;
mov L0x7fffffffd44c ymm10_6;
mov L0x7fffffffd44e ymm10_7;
mov L0x7fffffffd450 ymm10_8;
mov L0x7fffffffd452 ymm10_9;
mov L0x7fffffffd454 ymm10_a;
mov L0x7fffffffd456 ymm10_b;
mov L0x7fffffffd458 ymm10_c;
mov L0x7fffffffd45a ymm10_d;
mov L0x7fffffffd45c ymm10_e;
mov L0x7fffffffd45e ymm10_f;
(* vmovdqa %ymm3,0x260(%rdi)                       #! EA = L0x7fffffffd540; PC = 0x55555555dcf6 *)
mov L0x7fffffffd540 ymm3_0;
mov L0x7fffffffd542 ymm3_1;
mov L0x7fffffffd544 ymm3_2;
mov L0x7fffffffd546 ymm3_3;
mov L0x7fffffffd548 ymm3_4;
mov L0x7fffffffd54a ymm3_5;
mov L0x7fffffffd54c ymm3_6;
mov L0x7fffffffd54e ymm3_7;
mov L0x7fffffffd550 ymm3_8;
mov L0x7fffffffd552 ymm3_9;
mov L0x7fffffffd554 ymm3_a;
mov L0x7fffffffd556 ymm3_b;
mov L0x7fffffffd558 ymm3_c;
mov L0x7fffffffd55a ymm3_d;
mov L0x7fffffffd55c ymm3_e;
mov L0x7fffffffd55e ymm3_f;
(* vmovdqa %ymm4,0x360(%rdi)                       #! EA = L0x7fffffffd640; PC = 0x55555555dcfe *)
mov L0x7fffffffd640 ymm4_0;
mov L0x7fffffffd642 ymm4_1;
mov L0x7fffffffd644 ymm4_2;
mov L0x7fffffffd646 ymm4_3;
mov L0x7fffffffd648 ymm4_4;
mov L0x7fffffffd64a ymm4_5;
mov L0x7fffffffd64c ymm4_6;
mov L0x7fffffffd64e ymm4_7;
mov L0x7fffffffd650 ymm4_8;
mov L0x7fffffffd652 ymm4_9;
mov L0x7fffffffd654 ymm4_a;
mov L0x7fffffffd656 ymm4_b;
mov L0x7fffffffd658 ymm4_c;
mov L0x7fffffffd65a ymm4_d;
mov L0x7fffffffd65c ymm4_e;
mov L0x7fffffffd65e ymm4_f;
(* vmovdqa %ymm5,0x460(%rdi)                       #! EA = L0x7fffffffd740; PC = 0x55555555dd06 *)
mov L0x7fffffffd740 ymm5_0;
mov L0x7fffffffd742 ymm5_1;
mov L0x7fffffffd744 ymm5_2;
mov L0x7fffffffd746 ymm5_3;
mov L0x7fffffffd748 ymm5_4;
mov L0x7fffffffd74a ymm5_5;
mov L0x7fffffffd74c ymm5_6;
mov L0x7fffffffd74e ymm5_7;
mov L0x7fffffffd750 ymm5_8;
mov L0x7fffffffd752 ymm5_9;
mov L0x7fffffffd754 ymm5_a;
mov L0x7fffffffd756 ymm5_b;
mov L0x7fffffffd758 ymm5_c;
mov L0x7fffffffd75a ymm5_d;
mov L0x7fffffffd75c ymm5_e;
mov L0x7fffffffd75e ymm5_f;
(* vmovdqa %ymm6,0x560(%rdi)                       #! EA = L0x7fffffffd840; PC = 0x55555555dd0e *)
mov L0x7fffffffd840 ymm6_0;
mov L0x7fffffffd842 ymm6_1;
mov L0x7fffffffd844 ymm6_2;
mov L0x7fffffffd846 ymm6_3;
mov L0x7fffffffd848 ymm6_4;
mov L0x7fffffffd84a ymm6_5;
mov L0x7fffffffd84c ymm6_6;
mov L0x7fffffffd84e ymm6_7;
mov L0x7fffffffd850 ymm6_8;
mov L0x7fffffffd852 ymm6_9;
mov L0x7fffffffd854 ymm6_a;
mov L0x7fffffffd856 ymm6_b;
mov L0x7fffffffd858 ymm6_c;
mov L0x7fffffffd85a ymm6_d;
mov L0x7fffffffd85c ymm6_e;
mov L0x7fffffffd85e ymm6_f;
(* vmovdqa %ymm8,0x660(%rdi)                       #! EA = L0x7fffffffd940; PC = 0x55555555dd16 *)
mov L0x7fffffffd940 ymm8_0;
mov L0x7fffffffd942 ymm8_1;
mov L0x7fffffffd944 ymm8_2;
mov L0x7fffffffd946 ymm8_3;
mov L0x7fffffffd948 ymm8_4;
mov L0x7fffffffd94a ymm8_5;
mov L0x7fffffffd94c ymm8_6;
mov L0x7fffffffd94e ymm8_7;
mov L0x7fffffffd950 ymm8_8;
mov L0x7fffffffd952 ymm8_9;
mov L0x7fffffffd954 ymm8_a;
mov L0x7fffffffd956 ymm8_b;
mov L0x7fffffffd958 ymm8_c;
mov L0x7fffffffd95a ymm8_d;
mov L0x7fffffffd95c ymm8_e;
mov L0x7fffffffd95e ymm8_f;
(* vmovdqa %ymm11,0x760(%rdi)                      #! EA = L0x7fffffffda40; PC = 0x55555555dd1e *)
mov L0x7fffffffda40 ymm11_0;
mov L0x7fffffffda42 ymm11_1;
mov L0x7fffffffda44 ymm11_2;
mov L0x7fffffffda46 ymm11_3;
mov L0x7fffffffda48 ymm11_4;
mov L0x7fffffffda4a ymm11_5;
mov L0x7fffffffda4c ymm11_6;
mov L0x7fffffffda4e ymm11_7;
mov L0x7fffffffda50 ymm11_8;
mov L0x7fffffffda52 ymm11_9;
mov L0x7fffffffda54 ymm11_a;
mov L0x7fffffffda56 ymm11_b;
mov L0x7fffffffda58 ymm11_c;
mov L0x7fffffffda5a ymm11_d;
mov L0x7fffffffda5c ymm11_e;
mov L0x7fffffffda5e ymm11_f;



(**************** LEVELS 6-8, 3 *****************)

ghost out_poly3@bit,
out_poly30@bit, out_poly31@bit, out_poly32@bit, out_poly33@bit,
out_poly34@bit, out_poly35@bit, out_poly36@bit, out_poly37@bit : and [
out_poly30 =
L0x7fffffffd340*x** 0+L0x7fffffffd342*x** 1+L0x7fffffffd344*x** 2+
L0x7fffffffd346*x** 3+L0x7fffffffd348*x** 4+L0x7fffffffd34a*x** 5+
L0x7fffffffd34c*x** 6+L0x7fffffffd34e*x** 7+L0x7fffffffd350*x** 8+
L0x7fffffffd352*x** 9+L0x7fffffffd354*x**10+L0x7fffffffd356*x**11+
L0x7fffffffd358*x**12+L0x7fffffffd35a*x**13+L0x7fffffffd35c*x**14+
L0x7fffffffd35e*x**15,
out_poly31 =
L0x7fffffffd440*x** 0+L0x7fffffffd442*x** 1+L0x7fffffffd444*x** 2+
L0x7fffffffd446*x** 3+L0x7fffffffd448*x** 4+L0x7fffffffd44a*x** 5+
L0x7fffffffd44c*x** 6+L0x7fffffffd44e*x** 7+L0x7fffffffd450*x** 8+
L0x7fffffffd452*x** 9+L0x7fffffffd454*x**10+L0x7fffffffd456*x**11+
L0x7fffffffd458*x**12+L0x7fffffffd45a*x**13+L0x7fffffffd45c*x**14+
L0x7fffffffd45e*x**15,
out_poly32 =
L0x7fffffffd540*x** 0+L0x7fffffffd542*x** 1+L0x7fffffffd544*x** 2+
L0x7fffffffd546*x** 3+L0x7fffffffd548*x** 4+L0x7fffffffd54a*x** 5+
L0x7fffffffd54c*x** 6+L0x7fffffffd54e*x** 7+L0x7fffffffd550*x** 8+
L0x7fffffffd552*x** 9+L0x7fffffffd554*x**10+L0x7fffffffd556*x**11+
L0x7fffffffd558*x**12+L0x7fffffffd55a*x**13+L0x7fffffffd55c*x**14+
L0x7fffffffd55e*x**15,
out_poly33 =
L0x7fffffffd640*x** 0+L0x7fffffffd642*x** 1+L0x7fffffffd644*x** 2+
L0x7fffffffd646*x** 3+L0x7fffffffd648*x** 4+L0x7fffffffd64a*x** 5+
L0x7fffffffd64c*x** 6+L0x7fffffffd64e*x** 7+L0x7fffffffd650*x** 8+
L0x7fffffffd652*x** 9+L0x7fffffffd654*x**10+L0x7fffffffd656*x**11+
L0x7fffffffd658*x**12+L0x7fffffffd65a*x**13+L0x7fffffffd65c*x**14+
L0x7fffffffd65e*x**15,
out_poly34 =
L0x7fffffffd740*x** 0+L0x7fffffffd742*x** 1+L0x7fffffffd744*x** 2+
L0x7fffffffd746*x** 3+L0x7fffffffd748*x** 4+L0x7fffffffd74a*x** 5+
L0x7fffffffd74c*x** 6+L0x7fffffffd74e*x** 7+L0x7fffffffd750*x** 8+
L0x7fffffffd752*x** 9+L0x7fffffffd754*x**10+L0x7fffffffd756*x**11+
L0x7fffffffd758*x**12+L0x7fffffffd75a*x**13+L0x7fffffffd75c*x**14+
L0x7fffffffd75e*x**15,
out_poly35 =
L0x7fffffffd840*x** 0+L0x7fffffffd842*x** 1+L0x7fffffffd844*x** 2+
L0x7fffffffd846*x** 3+L0x7fffffffd848*x** 4+L0x7fffffffd84a*x** 5+
L0x7fffffffd84c*x** 6+L0x7fffffffd84e*x** 7+L0x7fffffffd850*x** 8+
L0x7fffffffd852*x** 9+L0x7fffffffd854*x**10+L0x7fffffffd856*x**11+
L0x7fffffffd858*x**12+L0x7fffffffd85a*x**13+L0x7fffffffd85c*x**14+
L0x7fffffffd85e*x**15,
out_poly36 =
L0x7fffffffd940*x** 0+L0x7fffffffd942*x** 1+L0x7fffffffd944*x** 2+
L0x7fffffffd946*x** 3+L0x7fffffffd948*x** 4+L0x7fffffffd94a*x** 5+
L0x7fffffffd94c*x** 6+L0x7fffffffd94e*x** 7+L0x7fffffffd950*x** 8+
L0x7fffffffd952*x** 9+L0x7fffffffd954*x**10+L0x7fffffffd956*x**11+
L0x7fffffffd958*x**12+L0x7fffffffd95a*x**13+L0x7fffffffd95c*x**14+
L0x7fffffffd95e*x**15,
out_poly37 =
L0x7fffffffda40*x** 0+L0x7fffffffda42*x** 1+L0x7fffffffda44*x** 2+
L0x7fffffffda46*x** 3+L0x7fffffffda48*x** 4+L0x7fffffffda4a*x** 5+
L0x7fffffffda4c*x** 6+L0x7fffffffda4e*x** 7+L0x7fffffffda50*x** 8+
L0x7fffffffda52*x** 9+L0x7fffffffda54*x**10+L0x7fffffffda56*x**11+
L0x7fffffffda58*x**12+L0x7fffffffda5a*x**13+L0x7fffffffda5c*x**14+
L0x7fffffffda5e*x**15
,
out_poly3 =
out_poly30*x**  0+out_poly31*x**128+out_poly32*x**256+out_poly33*x**384+
out_poly34*x**512+out_poly35*x**640+out_poly36*x**768+out_poly37*x**896]
&& true;


(**************** CUT  71 *****************)

ecut and [
eqmod (out_poly3) (8*shuf_poly30) [10753, x**128 - 1],
eqmod (out_poly3) (8*shuf_poly31) [10753, x**128 - 10752],
eqmod (out_poly3) (8*shuf_poly32) [10753, x**128 - 6264],
eqmod (out_poly3) (8*shuf_poly33) [10753, x**128 - 4489],
eqmod (out_poly3) (8*shuf_poly34) [10753, x**128 - 321],
eqmod (out_poly3) (8*shuf_poly35) [10753, x**128 - 10432],
eqmod (out_poly3) (8*shuf_poly36) [10753, x**128 - 10686],
eqmod (out_poly3) (8*shuf_poly37) [10753, x**128 - 67]
];


(**************** CUT  72 *****************)

ecut true;



(**************** shuffle poly 4 *****************)

ghost shuf_poly40@bit, shuf_poly41@bit, shuf_poly42@bit, shuf_poly43@bit,
      shuf_poly44@bit, shuf_poly45@bit, shuf_poly46@bit, shuf_poly47@bit : and [
shuf_poly40 =
L0x7fffffffd360*x** 0+L0x7fffffffd362*x** 1+L0x7fffffffd364*x** 2+
L0x7fffffffd366*x** 3+L0x7fffffffd368*x** 4+L0x7fffffffd36a*x** 5+
L0x7fffffffd36c*x** 6+L0x7fffffffd36e*x** 7+L0x7fffffffd370*x** 8+
L0x7fffffffd372*x** 9+L0x7fffffffd374*x**10+L0x7fffffffd376*x**11+
L0x7fffffffd378*x**12+L0x7fffffffd37a*x**13+L0x7fffffffd37c*x**14+
L0x7fffffffd37e*x**15,
shuf_poly41 =
L0x7fffffffd460*x** 0+L0x7fffffffd462*x** 1+L0x7fffffffd464*x** 2+
L0x7fffffffd466*x** 3+L0x7fffffffd468*x** 4+L0x7fffffffd46a*x** 5+
L0x7fffffffd46c*x** 6+L0x7fffffffd46e*x** 7+L0x7fffffffd470*x** 8+
L0x7fffffffd472*x** 9+L0x7fffffffd474*x**10+L0x7fffffffd476*x**11+
L0x7fffffffd478*x**12+L0x7fffffffd47a*x**13+L0x7fffffffd47c*x**14+
L0x7fffffffd47e*x**15,
shuf_poly42 =
L0x7fffffffd560*x** 0+L0x7fffffffd562*x** 1+L0x7fffffffd564*x** 2+
L0x7fffffffd566*x** 3+L0x7fffffffd568*x** 4+L0x7fffffffd56a*x** 5+
L0x7fffffffd56c*x** 6+L0x7fffffffd56e*x** 7+L0x7fffffffd570*x** 8+
L0x7fffffffd572*x** 9+L0x7fffffffd574*x**10+L0x7fffffffd576*x**11+
L0x7fffffffd578*x**12+L0x7fffffffd57a*x**13+L0x7fffffffd57c*x**14+
L0x7fffffffd57e*x**15,
shuf_poly43 =
L0x7fffffffd660*x** 0+L0x7fffffffd662*x** 1+L0x7fffffffd664*x** 2+
L0x7fffffffd666*x** 3+L0x7fffffffd668*x** 4+L0x7fffffffd66a*x** 5+
L0x7fffffffd66c*x** 6+L0x7fffffffd66e*x** 7+L0x7fffffffd670*x** 8+
L0x7fffffffd672*x** 9+L0x7fffffffd674*x**10+L0x7fffffffd676*x**11+
L0x7fffffffd678*x**12+L0x7fffffffd67a*x**13+L0x7fffffffd67c*x**14+
L0x7fffffffd67e*x**15,
shuf_poly44 =
L0x7fffffffd760*x** 0+L0x7fffffffd762*x** 1+L0x7fffffffd764*x** 2+
L0x7fffffffd766*x** 3+L0x7fffffffd768*x** 4+L0x7fffffffd76a*x** 5+
L0x7fffffffd76c*x** 6+L0x7fffffffd76e*x** 7+L0x7fffffffd770*x** 8+
L0x7fffffffd772*x** 9+L0x7fffffffd774*x**10+L0x7fffffffd776*x**11+
L0x7fffffffd778*x**12+L0x7fffffffd77a*x**13+L0x7fffffffd77c*x**14+
L0x7fffffffd77e*x**15,
shuf_poly45 =
L0x7fffffffd860*x** 0+L0x7fffffffd862*x** 1+L0x7fffffffd864*x** 2+
L0x7fffffffd866*x** 3+L0x7fffffffd868*x** 4+L0x7fffffffd86a*x** 5+
L0x7fffffffd86c*x** 6+L0x7fffffffd86e*x** 7+L0x7fffffffd870*x** 8+
L0x7fffffffd872*x** 9+L0x7fffffffd874*x**10+L0x7fffffffd876*x**11+
L0x7fffffffd878*x**12+L0x7fffffffd87a*x**13+L0x7fffffffd87c*x**14+
L0x7fffffffd87e*x**15,
shuf_poly46 =
L0x7fffffffd960*x** 0+L0x7fffffffd962*x** 1+L0x7fffffffd964*x** 2+
L0x7fffffffd966*x** 3+L0x7fffffffd968*x** 4+L0x7fffffffd96a*x** 5+
L0x7fffffffd96c*x** 6+L0x7fffffffd96e*x** 7+L0x7fffffffd970*x** 8+
L0x7fffffffd972*x** 9+L0x7fffffffd974*x**10+L0x7fffffffd976*x**11+
L0x7fffffffd978*x**12+L0x7fffffffd97a*x**13+L0x7fffffffd97c*x**14+
L0x7fffffffd97e*x**15,
shuf_poly47 =
L0x7fffffffda60*x** 0+L0x7fffffffda62*x** 1+L0x7fffffffda64*x** 2+
L0x7fffffffda66*x** 3+L0x7fffffffda68*x** 4+L0x7fffffffda6a*x** 5+
L0x7fffffffda6c*x** 6+L0x7fffffffda6e*x** 7+L0x7fffffffda70*x** 8+
L0x7fffffffda72*x** 9+L0x7fffffffda74*x**10+L0x7fffffffda76*x**11+
L0x7fffffffda78*x**12+L0x7fffffffda7a*x**13+L0x7fffffffda7c*x**14+
L0x7fffffffda7e*x**15
] && true;



(* vmovdqa 0x80(%rdi),%ymm4                        #! EA = L0x7fffffffd360; Value = 0x0526e6c61564d044; PC = 0x55555555dd26 *)
mov ymm4_0 L0x7fffffffd360;
mov ymm4_1 L0x7fffffffd362;
mov ymm4_2 L0x7fffffffd364;
mov ymm4_3 L0x7fffffffd366;
mov ymm4_4 L0x7fffffffd368;
mov ymm4_5 L0x7fffffffd36a;
mov ymm4_6 L0x7fffffffd36c;
mov ymm4_7 L0x7fffffffd36e;
mov ymm4_8 L0x7fffffffd370;
mov ymm4_9 L0x7fffffffd372;
mov ymm4_a L0x7fffffffd374;
mov ymm4_b L0x7fffffffd376;
mov ymm4_c L0x7fffffffd378;
mov ymm4_d L0x7fffffffd37a;
mov ymm4_e L0x7fffffffd37c;
mov ymm4_f L0x7fffffffd37e;
(* vmovdqa 0x180(%rdi),%ymm5                       #! EA = L0x7fffffffd460; Value = 0xfafef018f5a305f6; PC = 0x55555555dd2e *)
mov ymm5_0 L0x7fffffffd460;
mov ymm5_1 L0x7fffffffd462;
mov ymm5_2 L0x7fffffffd464;
mov ymm5_3 L0x7fffffffd466;
mov ymm5_4 L0x7fffffffd468;
mov ymm5_5 L0x7fffffffd46a;
mov ymm5_6 L0x7fffffffd46c;
mov ymm5_7 L0x7fffffffd46e;
mov ymm5_8 L0x7fffffffd470;
mov ymm5_9 L0x7fffffffd472;
mov ymm5_a L0x7fffffffd474;
mov ymm5_b L0x7fffffffd476;
mov ymm5_c L0x7fffffffd478;
mov ymm5_d L0x7fffffffd47a;
mov ymm5_e L0x7fffffffd47c;
mov ymm5_f L0x7fffffffd47e;
(* vmovdqa 0x280(%rdi),%ymm6                       #! EA = L0x7fffffffd560; Value = 0x117d08a0f607fe74; PC = 0x55555555dd36 *)
mov ymm6_0 L0x7fffffffd560;
mov ymm6_1 L0x7fffffffd562;
mov ymm6_2 L0x7fffffffd564;
mov ymm6_3 L0x7fffffffd566;
mov ymm6_4 L0x7fffffffd568;
mov ymm6_5 L0x7fffffffd56a;
mov ymm6_6 L0x7fffffffd56c;
mov ymm6_7 L0x7fffffffd56e;
mov ymm6_8 L0x7fffffffd570;
mov ymm6_9 L0x7fffffffd572;
mov ymm6_a L0x7fffffffd574;
mov ymm6_b L0x7fffffffd576;
mov ymm6_c L0x7fffffffd578;
mov ymm6_d L0x7fffffffd57a;
mov ymm6_e L0x7fffffffd57c;
mov ymm6_f L0x7fffffffd57e;
(* vmovdqa 0x380(%rdi),%ymm7                       #! EA = L0x7fffffffd660; Value = 0xeec90be11424022e; PC = 0x55555555dd3e *)
mov ymm7_0 L0x7fffffffd660;
mov ymm7_1 L0x7fffffffd662;
mov ymm7_2 L0x7fffffffd664;
mov ymm7_3 L0x7fffffffd666;
mov ymm7_4 L0x7fffffffd668;
mov ymm7_5 L0x7fffffffd66a;
mov ymm7_6 L0x7fffffffd66c;
mov ymm7_7 L0x7fffffffd66e;
mov ymm7_8 L0x7fffffffd670;
mov ymm7_9 L0x7fffffffd672;
mov ymm7_a L0x7fffffffd674;
mov ymm7_b L0x7fffffffd676;
mov ymm7_c L0x7fffffffd678;
mov ymm7_d L0x7fffffffd67a;
mov ymm7_e L0x7fffffffd67c;
mov ymm7_f L0x7fffffffd67e;
(* vmovdqa 0x480(%rdi),%ymm8                       #! EA = L0x7fffffffd760; Value = 0x128f150a082808fc; PC = 0x55555555dd46 *)
mov ymm8_0 L0x7fffffffd760;
mov ymm8_1 L0x7fffffffd762;
mov ymm8_2 L0x7fffffffd764;
mov ymm8_3 L0x7fffffffd766;
mov ymm8_4 L0x7fffffffd768;
mov ymm8_5 L0x7fffffffd76a;
mov ymm8_6 L0x7fffffffd76c;
mov ymm8_7 L0x7fffffffd76e;
mov ymm8_8 L0x7fffffffd770;
mov ymm8_9 L0x7fffffffd772;
mov ymm8_a L0x7fffffffd774;
mov ymm8_b L0x7fffffffd776;
mov ymm8_c L0x7fffffffd778;
mov ymm8_d L0x7fffffffd77a;
mov ymm8_e L0x7fffffffd77c;
mov ymm8_f L0x7fffffffd77e;
(* vmovdqa 0x580(%rdi),%ymm9                       #! EA = L0x7fffffffd860; Value = 0xf1b8f96605c10c6d; PC = 0x55555555dd4e *)
mov ymm9_0 L0x7fffffffd860;
mov ymm9_1 L0x7fffffffd862;
mov ymm9_2 L0x7fffffffd864;
mov ymm9_3 L0x7fffffffd866;
mov ymm9_4 L0x7fffffffd868;
mov ymm9_5 L0x7fffffffd86a;
mov ymm9_6 L0x7fffffffd86c;
mov ymm9_7 L0x7fffffffd86e;
mov ymm9_8 L0x7fffffffd870;
mov ymm9_9 L0x7fffffffd872;
mov ymm9_a L0x7fffffffd874;
mov ymm9_b L0x7fffffffd876;
mov ymm9_c L0x7fffffffd878;
mov ymm9_d L0x7fffffffd87a;
mov ymm9_e L0x7fffffffd87c;
mov ymm9_f L0x7fffffffd87e;
(* vmovdqa 0x680(%rdi),%ymm10                      #! EA = L0x7fffffffd960; Value = 0x0b60ee1402d0fdc7; PC = 0x55555555dd56 *)
mov ymm10_0 L0x7fffffffd960;
mov ymm10_1 L0x7fffffffd962;
mov ymm10_2 L0x7fffffffd964;
mov ymm10_3 L0x7fffffffd966;
mov ymm10_4 L0x7fffffffd968;
mov ymm10_5 L0x7fffffffd96a;
mov ymm10_6 L0x7fffffffd96c;
mov ymm10_7 L0x7fffffffd96e;
mov ymm10_8 L0x7fffffffd970;
mov ymm10_9 L0x7fffffffd972;
mov ymm10_a L0x7fffffffd974;
mov ymm10_b L0x7fffffffd976;
mov ymm10_c L0x7fffffffd978;
mov ymm10_d L0x7fffffffd97a;
mov ymm10_e L0x7fffffffd97c;
mov ymm10_f L0x7fffffffd97e;
(* vmovdqa 0x780(%rdi),%ymm11                      #! EA = L0x7fffffffda60; Value = 0xf0c3eedb0479edad; PC = 0x55555555dd5e *)
mov ymm11_0 L0x7fffffffda60;
mov ymm11_1 L0x7fffffffda62;
mov ymm11_2 L0x7fffffffda64;
mov ymm11_3 L0x7fffffffda66;
mov ymm11_4 L0x7fffffffda68;
mov ymm11_5 L0x7fffffffda6a;
mov ymm11_6 L0x7fffffffda6c;
mov ymm11_7 L0x7fffffffda6e;
mov ymm11_8 L0x7fffffffda70;
mov ymm11_9 L0x7fffffffda72;
mov ymm11_a L0x7fffffffda74;
mov ymm11_b L0x7fffffffda76;
mov ymm11_c L0x7fffffffda78;
mov ymm11_d L0x7fffffffda7a;
mov ymm11_e L0x7fffffffda7c;
mov ymm11_f L0x7fffffffda7e;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555dd66 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555dd6a *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555dd6e *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555dd72 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555dd76 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555dd7b *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555dd80 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555dd85 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555dd8a *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555dd93 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555dd9c *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555dda0 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dda4 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555dda8 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555ddac *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555ddb5 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555ddbe *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555ddc2 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ddc6 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555ddca *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555ddcf *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555ddd8 *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555dde1 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555dde5 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dde9 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555dded *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm5,%ymm10                     #! PC = 0x55555555ddf2 *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555ddf7 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555ddfc *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555de00 *)
sub ymm5_0 ymm5_0 ymm10_0;
sub ymm5_1 ymm5_1 ymm10_1;
sub ymm5_2 ymm5_2 ymm10_2;
sub ymm5_3 ymm5_3 ymm10_3;
sub ymm5_4 ymm5_4 ymm10_4;
sub ymm5_5 ymm5_5 ymm10_5;
sub ymm5_6 ymm5_6 ymm10_6;
sub ymm5_7 ymm5_7 ymm10_7;
sub ymm5_8 ymm5_8 ymm10_8;
sub ymm5_9 ymm5_9 ymm10_9;
sub ymm5_a ymm5_a ymm10_a;
sub ymm5_b ymm5_b ymm10_b;
sub ymm5_c ymm5_c ymm10_c;
sub ymm5_d ymm5_d ymm10_d;
sub ymm5_e ymm5_e ymm10_e;
sub ymm5_f ymm5_f ymm10_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555de05 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555de0a *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555de0f *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555de13 *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555de18 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555de1c *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555de20 *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555de24 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555de28 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555de2d *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555de32 *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555de37 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555de3c *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555de45 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555de4e *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555de52 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555de56 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555de5a *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555de5f *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555de63 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555de67 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555de6b *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555de70 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555de75 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555de7a *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555de7e *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555de83 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555de88 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555de8d *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555de91 *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555de96 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555de9b *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555dea0 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555dea4 *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555dea9 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555deae *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555deb3 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555deb7 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555debc *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555dec0 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555dec4 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555dec8 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555decc *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555ded1 *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555ded6 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555dedb *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0x80(%rdi)                        #! EA = L0x7fffffffd360; PC = 0x55555555dee0 *)
mov L0x7fffffffd360 ymm9_0;
mov L0x7fffffffd362 ymm9_1;
mov L0x7fffffffd364 ymm9_2;
mov L0x7fffffffd366 ymm9_3;
mov L0x7fffffffd368 ymm9_4;
mov L0x7fffffffd36a ymm9_5;
mov L0x7fffffffd36c ymm9_6;
mov L0x7fffffffd36e ymm9_7;
mov L0x7fffffffd370 ymm9_8;
mov L0x7fffffffd372 ymm9_9;
mov L0x7fffffffd374 ymm9_a;
mov L0x7fffffffd376 ymm9_b;
mov L0x7fffffffd378 ymm9_c;
mov L0x7fffffffd37a ymm9_d;
mov L0x7fffffffd37c ymm9_e;
mov L0x7fffffffd37e ymm9_f;
(* vmovdqa %ymm10,0x180(%rdi)                      #! EA = L0x7fffffffd460; PC = 0x55555555dee8 *)
mov L0x7fffffffd460 ymm10_0;
mov L0x7fffffffd462 ymm10_1;
mov L0x7fffffffd464 ymm10_2;
mov L0x7fffffffd466 ymm10_3;
mov L0x7fffffffd468 ymm10_4;
mov L0x7fffffffd46a ymm10_5;
mov L0x7fffffffd46c ymm10_6;
mov L0x7fffffffd46e ymm10_7;
mov L0x7fffffffd470 ymm10_8;
mov L0x7fffffffd472 ymm10_9;
mov L0x7fffffffd474 ymm10_a;
mov L0x7fffffffd476 ymm10_b;
mov L0x7fffffffd478 ymm10_c;
mov L0x7fffffffd47a ymm10_d;
mov L0x7fffffffd47c ymm10_e;
mov L0x7fffffffd47e ymm10_f;
(* vmovdqa %ymm3,0x280(%rdi)                       #! EA = L0x7fffffffd560; PC = 0x55555555def0 *)
mov L0x7fffffffd560 ymm3_0;
mov L0x7fffffffd562 ymm3_1;
mov L0x7fffffffd564 ymm3_2;
mov L0x7fffffffd566 ymm3_3;
mov L0x7fffffffd568 ymm3_4;
mov L0x7fffffffd56a ymm3_5;
mov L0x7fffffffd56c ymm3_6;
mov L0x7fffffffd56e ymm3_7;
mov L0x7fffffffd570 ymm3_8;
mov L0x7fffffffd572 ymm3_9;
mov L0x7fffffffd574 ymm3_a;
mov L0x7fffffffd576 ymm3_b;
mov L0x7fffffffd578 ymm3_c;
mov L0x7fffffffd57a ymm3_d;
mov L0x7fffffffd57c ymm3_e;
mov L0x7fffffffd57e ymm3_f;
(* vmovdqa %ymm4,0x380(%rdi)                       #! EA = L0x7fffffffd660; PC = 0x55555555def8 *)
mov L0x7fffffffd660 ymm4_0;
mov L0x7fffffffd662 ymm4_1;
mov L0x7fffffffd664 ymm4_2;
mov L0x7fffffffd666 ymm4_3;
mov L0x7fffffffd668 ymm4_4;
mov L0x7fffffffd66a ymm4_5;
mov L0x7fffffffd66c ymm4_6;
mov L0x7fffffffd66e ymm4_7;
mov L0x7fffffffd670 ymm4_8;
mov L0x7fffffffd672 ymm4_9;
mov L0x7fffffffd674 ymm4_a;
mov L0x7fffffffd676 ymm4_b;
mov L0x7fffffffd678 ymm4_c;
mov L0x7fffffffd67a ymm4_d;
mov L0x7fffffffd67c ymm4_e;
mov L0x7fffffffd67e ymm4_f;
(* vmovdqa %ymm5,0x480(%rdi)                       #! EA = L0x7fffffffd760; PC = 0x55555555df00 *)
mov L0x7fffffffd760 ymm5_0;
mov L0x7fffffffd762 ymm5_1;
mov L0x7fffffffd764 ymm5_2;
mov L0x7fffffffd766 ymm5_3;
mov L0x7fffffffd768 ymm5_4;
mov L0x7fffffffd76a ymm5_5;
mov L0x7fffffffd76c ymm5_6;
mov L0x7fffffffd76e ymm5_7;
mov L0x7fffffffd770 ymm5_8;
mov L0x7fffffffd772 ymm5_9;
mov L0x7fffffffd774 ymm5_a;
mov L0x7fffffffd776 ymm5_b;
mov L0x7fffffffd778 ymm5_c;
mov L0x7fffffffd77a ymm5_d;
mov L0x7fffffffd77c ymm5_e;
mov L0x7fffffffd77e ymm5_f;
(* vmovdqa %ymm6,0x580(%rdi)                       #! EA = L0x7fffffffd860; PC = 0x55555555df08 *)
mov L0x7fffffffd860 ymm6_0;
mov L0x7fffffffd862 ymm6_1;
mov L0x7fffffffd864 ymm6_2;
mov L0x7fffffffd866 ymm6_3;
mov L0x7fffffffd868 ymm6_4;
mov L0x7fffffffd86a ymm6_5;
mov L0x7fffffffd86c ymm6_6;
mov L0x7fffffffd86e ymm6_7;
mov L0x7fffffffd870 ymm6_8;
mov L0x7fffffffd872 ymm6_9;
mov L0x7fffffffd874 ymm6_a;
mov L0x7fffffffd876 ymm6_b;
mov L0x7fffffffd878 ymm6_c;
mov L0x7fffffffd87a ymm6_d;
mov L0x7fffffffd87c ymm6_e;
mov L0x7fffffffd87e ymm6_f;
(* vmovdqa %ymm8,0x680(%rdi)                       #! EA = L0x7fffffffd960; PC = 0x55555555df10 *)
mov L0x7fffffffd960 ymm8_0;
mov L0x7fffffffd962 ymm8_1;
mov L0x7fffffffd964 ymm8_2;
mov L0x7fffffffd966 ymm8_3;
mov L0x7fffffffd968 ymm8_4;
mov L0x7fffffffd96a ymm8_5;
mov L0x7fffffffd96c ymm8_6;
mov L0x7fffffffd96e ymm8_7;
mov L0x7fffffffd970 ymm8_8;
mov L0x7fffffffd972 ymm8_9;
mov L0x7fffffffd974 ymm8_a;
mov L0x7fffffffd976 ymm8_b;
mov L0x7fffffffd978 ymm8_c;
mov L0x7fffffffd97a ymm8_d;
mov L0x7fffffffd97c ymm8_e;
mov L0x7fffffffd97e ymm8_f;
(* vmovdqa %ymm11,0x780(%rdi)                      #! EA = L0x7fffffffda60; PC = 0x55555555df18 *)
mov L0x7fffffffda60 ymm11_0;
mov L0x7fffffffda62 ymm11_1;
mov L0x7fffffffda64 ymm11_2;
mov L0x7fffffffda66 ymm11_3;
mov L0x7fffffffda68 ymm11_4;
mov L0x7fffffffda6a ymm11_5;
mov L0x7fffffffda6c ymm11_6;
mov L0x7fffffffda6e ymm11_7;
mov L0x7fffffffda70 ymm11_8;
mov L0x7fffffffda72 ymm11_9;
mov L0x7fffffffda74 ymm11_a;
mov L0x7fffffffda76 ymm11_b;
mov L0x7fffffffda78 ymm11_c;
mov L0x7fffffffda7a ymm11_d;
mov L0x7fffffffda7c ymm11_e;
mov L0x7fffffffda7e ymm11_f;



(**************** LEVELS 6-8, 4 *****************)

ghost out_poly4@bit,
out_poly40@bit, out_poly41@bit, out_poly42@bit, out_poly43@bit,
out_poly44@bit, out_poly45@bit, out_poly46@bit, out_poly47@bit : and [
out_poly40 =
L0x7fffffffd360*x** 0+L0x7fffffffd362*x** 1+L0x7fffffffd364*x** 2+
L0x7fffffffd366*x** 3+L0x7fffffffd368*x** 4+L0x7fffffffd36a*x** 5+
L0x7fffffffd36c*x** 6+L0x7fffffffd36e*x** 7+L0x7fffffffd370*x** 8+
L0x7fffffffd372*x** 9+L0x7fffffffd374*x**10+L0x7fffffffd376*x**11+
L0x7fffffffd378*x**12+L0x7fffffffd37a*x**13+L0x7fffffffd37c*x**14+
L0x7fffffffd37e*x**15,
out_poly41 =
L0x7fffffffd460*x** 0+L0x7fffffffd462*x** 1+L0x7fffffffd464*x** 2+
L0x7fffffffd466*x** 3+L0x7fffffffd468*x** 4+L0x7fffffffd46a*x** 5+
L0x7fffffffd46c*x** 6+L0x7fffffffd46e*x** 7+L0x7fffffffd470*x** 8+
L0x7fffffffd472*x** 9+L0x7fffffffd474*x**10+L0x7fffffffd476*x**11+
L0x7fffffffd478*x**12+L0x7fffffffd47a*x**13+L0x7fffffffd47c*x**14+
L0x7fffffffd47e*x**15,
out_poly42 =
L0x7fffffffd560*x** 0+L0x7fffffffd562*x** 1+L0x7fffffffd564*x** 2+
L0x7fffffffd566*x** 3+L0x7fffffffd568*x** 4+L0x7fffffffd56a*x** 5+
L0x7fffffffd56c*x** 6+L0x7fffffffd56e*x** 7+L0x7fffffffd570*x** 8+
L0x7fffffffd572*x** 9+L0x7fffffffd574*x**10+L0x7fffffffd576*x**11+
L0x7fffffffd578*x**12+L0x7fffffffd57a*x**13+L0x7fffffffd57c*x**14+
L0x7fffffffd57e*x**15,
out_poly43 =
L0x7fffffffd660*x** 0+L0x7fffffffd662*x** 1+L0x7fffffffd664*x** 2+
L0x7fffffffd666*x** 3+L0x7fffffffd668*x** 4+L0x7fffffffd66a*x** 5+
L0x7fffffffd66c*x** 6+L0x7fffffffd66e*x** 7+L0x7fffffffd670*x** 8+
L0x7fffffffd672*x** 9+L0x7fffffffd674*x**10+L0x7fffffffd676*x**11+
L0x7fffffffd678*x**12+L0x7fffffffd67a*x**13+L0x7fffffffd67c*x**14+
L0x7fffffffd67e*x**15,
out_poly44 =
L0x7fffffffd760*x** 0+L0x7fffffffd762*x** 1+L0x7fffffffd764*x** 2+
L0x7fffffffd766*x** 3+L0x7fffffffd768*x** 4+L0x7fffffffd76a*x** 5+
L0x7fffffffd76c*x** 6+L0x7fffffffd76e*x** 7+L0x7fffffffd770*x** 8+
L0x7fffffffd772*x** 9+L0x7fffffffd774*x**10+L0x7fffffffd776*x**11+
L0x7fffffffd778*x**12+L0x7fffffffd77a*x**13+L0x7fffffffd77c*x**14+
L0x7fffffffd77e*x**15,
out_poly45 =
L0x7fffffffd860*x** 0+L0x7fffffffd862*x** 1+L0x7fffffffd864*x** 2+
L0x7fffffffd866*x** 3+L0x7fffffffd868*x** 4+L0x7fffffffd86a*x** 5+
L0x7fffffffd86c*x** 6+L0x7fffffffd86e*x** 7+L0x7fffffffd870*x** 8+
L0x7fffffffd872*x** 9+L0x7fffffffd874*x**10+L0x7fffffffd876*x**11+
L0x7fffffffd878*x**12+L0x7fffffffd87a*x**13+L0x7fffffffd87c*x**14+
L0x7fffffffd87e*x**15,
out_poly46 =
L0x7fffffffd960*x** 0+L0x7fffffffd962*x** 1+L0x7fffffffd964*x** 2+
L0x7fffffffd966*x** 3+L0x7fffffffd968*x** 4+L0x7fffffffd96a*x** 5+
L0x7fffffffd96c*x** 6+L0x7fffffffd96e*x** 7+L0x7fffffffd970*x** 8+
L0x7fffffffd972*x** 9+L0x7fffffffd974*x**10+L0x7fffffffd976*x**11+
L0x7fffffffd978*x**12+L0x7fffffffd97a*x**13+L0x7fffffffd97c*x**14+
L0x7fffffffd97e*x**15,
out_poly47 =
L0x7fffffffda60*x** 0+L0x7fffffffda62*x** 1+L0x7fffffffda64*x** 2+
L0x7fffffffda66*x** 3+L0x7fffffffda68*x** 4+L0x7fffffffda6a*x** 5+
L0x7fffffffda6c*x** 6+L0x7fffffffda6e*x** 7+L0x7fffffffda70*x** 8+
L0x7fffffffda72*x** 9+L0x7fffffffda74*x**10+L0x7fffffffda76*x**11+
L0x7fffffffda78*x**12+L0x7fffffffda7a*x**13+L0x7fffffffda7c*x**14+
L0x7fffffffda7e*x**15
,
out_poly4 =
out_poly40*x**  0+out_poly41*x**128+out_poly42*x**256+out_poly43*x**384+
out_poly44*x**512+out_poly45*x**640+out_poly46*x**768+out_poly47*x**896]
&& true;


(**************** CUT  73 *****************)

ecut and [
eqmod (out_poly4) (8*shuf_poly40) [10753, x**128 - 1],
eqmod (out_poly4) (8*shuf_poly41) [10753, x**128 - 10752],
eqmod (out_poly4) (8*shuf_poly42) [10753, x**128 - 6264],
eqmod (out_poly4) (8*shuf_poly43) [10753, x**128 - 4489],
eqmod (out_poly4) (8*shuf_poly44) [10753, x**128 - 321],
eqmod (out_poly4) (8*shuf_poly45) [10753, x**128 - 10432],
eqmod (out_poly4) (8*shuf_poly46) [10753, x**128 - 10686],
eqmod (out_poly4) (8*shuf_poly47) [10753, x**128 - 67]
];


(**************** CUT  74 *****************)

ecut true;



(**************** shuffle poly 5 *****************)

ghost shuf_poly50@bit, shuf_poly51@bit, shuf_poly52@bit, shuf_poly53@bit,
      shuf_poly54@bit, shuf_poly55@bit, shuf_poly56@bit, shuf_poly57@bit : and [
shuf_poly50 =
L0x7fffffffd380*x** 0+L0x7fffffffd382*x** 1+L0x7fffffffd384*x** 2+
L0x7fffffffd386*x** 3+L0x7fffffffd388*x** 4+L0x7fffffffd38a*x** 5+
L0x7fffffffd38c*x** 6+L0x7fffffffd38e*x** 7+L0x7fffffffd390*x** 8+
L0x7fffffffd392*x** 9+L0x7fffffffd394*x**10+L0x7fffffffd396*x**11+
L0x7fffffffd398*x**12+L0x7fffffffd39a*x**13+L0x7fffffffd39c*x**14+
L0x7fffffffd39e*x**15,
shuf_poly51 =
L0x7fffffffd480*x** 0+L0x7fffffffd482*x** 1+L0x7fffffffd484*x** 2+
L0x7fffffffd486*x** 3+L0x7fffffffd488*x** 4+L0x7fffffffd48a*x** 5+
L0x7fffffffd48c*x** 6+L0x7fffffffd48e*x** 7+L0x7fffffffd490*x** 8+
L0x7fffffffd492*x** 9+L0x7fffffffd494*x**10+L0x7fffffffd496*x**11+
L0x7fffffffd498*x**12+L0x7fffffffd49a*x**13+L0x7fffffffd49c*x**14+
L0x7fffffffd49e*x**15,
shuf_poly52 =
L0x7fffffffd580*x** 0+L0x7fffffffd582*x** 1+L0x7fffffffd584*x** 2+
L0x7fffffffd586*x** 3+L0x7fffffffd588*x** 4+L0x7fffffffd58a*x** 5+
L0x7fffffffd58c*x** 6+L0x7fffffffd58e*x** 7+L0x7fffffffd590*x** 8+
L0x7fffffffd592*x** 9+L0x7fffffffd594*x**10+L0x7fffffffd596*x**11+
L0x7fffffffd598*x**12+L0x7fffffffd59a*x**13+L0x7fffffffd59c*x**14+
L0x7fffffffd59e*x**15,
shuf_poly53 =
L0x7fffffffd680*x** 0+L0x7fffffffd682*x** 1+L0x7fffffffd684*x** 2+
L0x7fffffffd686*x** 3+L0x7fffffffd688*x** 4+L0x7fffffffd68a*x** 5+
L0x7fffffffd68c*x** 6+L0x7fffffffd68e*x** 7+L0x7fffffffd690*x** 8+
L0x7fffffffd692*x** 9+L0x7fffffffd694*x**10+L0x7fffffffd696*x**11+
L0x7fffffffd698*x**12+L0x7fffffffd69a*x**13+L0x7fffffffd69c*x**14+
L0x7fffffffd69e*x**15,
shuf_poly54 =
L0x7fffffffd780*x** 0+L0x7fffffffd782*x** 1+L0x7fffffffd784*x** 2+
L0x7fffffffd786*x** 3+L0x7fffffffd788*x** 4+L0x7fffffffd78a*x** 5+
L0x7fffffffd78c*x** 6+L0x7fffffffd78e*x** 7+L0x7fffffffd790*x** 8+
L0x7fffffffd792*x** 9+L0x7fffffffd794*x**10+L0x7fffffffd796*x**11+
L0x7fffffffd798*x**12+L0x7fffffffd79a*x**13+L0x7fffffffd79c*x**14+
L0x7fffffffd79e*x**15,
shuf_poly55 =
L0x7fffffffd880*x** 0+L0x7fffffffd882*x** 1+L0x7fffffffd884*x** 2+
L0x7fffffffd886*x** 3+L0x7fffffffd888*x** 4+L0x7fffffffd88a*x** 5+
L0x7fffffffd88c*x** 6+L0x7fffffffd88e*x** 7+L0x7fffffffd890*x** 8+
L0x7fffffffd892*x** 9+L0x7fffffffd894*x**10+L0x7fffffffd896*x**11+
L0x7fffffffd898*x**12+L0x7fffffffd89a*x**13+L0x7fffffffd89c*x**14+
L0x7fffffffd89e*x**15,
shuf_poly56 =
L0x7fffffffd980*x** 0+L0x7fffffffd982*x** 1+L0x7fffffffd984*x** 2+
L0x7fffffffd986*x** 3+L0x7fffffffd988*x** 4+L0x7fffffffd98a*x** 5+
L0x7fffffffd98c*x** 6+L0x7fffffffd98e*x** 7+L0x7fffffffd990*x** 8+
L0x7fffffffd992*x** 9+L0x7fffffffd994*x**10+L0x7fffffffd996*x**11+
L0x7fffffffd998*x**12+L0x7fffffffd99a*x**13+L0x7fffffffd99c*x**14+
L0x7fffffffd99e*x**15,
shuf_poly57 =
L0x7fffffffda80*x** 0+L0x7fffffffda82*x** 1+L0x7fffffffda84*x** 2+
L0x7fffffffda86*x** 3+L0x7fffffffda88*x** 4+L0x7fffffffda8a*x** 5+
L0x7fffffffda8c*x** 6+L0x7fffffffda8e*x** 7+L0x7fffffffda90*x** 8+
L0x7fffffffda92*x** 9+L0x7fffffffda94*x**10+L0x7fffffffda96*x**11+
L0x7fffffffda98*x**12+L0x7fffffffda9a*x**13+L0x7fffffffda9c*x**14+
L0x7fffffffda9e*x**15
] && true;



(* vmovdqa 0xa0(%rdi),%ymm4                        #! EA = L0x7fffffffd380; Value = 0xefe8f5020a451a3c; PC = 0x55555555df20 *)
mov ymm4_0 L0x7fffffffd380;
mov ymm4_1 L0x7fffffffd382;
mov ymm4_2 L0x7fffffffd384;
mov ymm4_3 L0x7fffffffd386;
mov ymm4_4 L0x7fffffffd388;
mov ymm4_5 L0x7fffffffd38a;
mov ymm4_6 L0x7fffffffd38c;
mov ymm4_7 L0x7fffffffd38e;
mov ymm4_8 L0x7fffffffd390;
mov ymm4_9 L0x7fffffffd392;
mov ymm4_a L0x7fffffffd394;
mov ymm4_b L0x7fffffffd396;
mov ymm4_c L0x7fffffffd398;
mov ymm4_d L0x7fffffffd39a;
mov ymm4_e L0x7fffffffd39c;
mov ymm4_f L0x7fffffffd39e;
(* vmovdqa 0x1a0(%rdi),%ymm5                       #! EA = L0x7fffffffd480; Value = 0x0f330b750b06fb23; PC = 0x55555555df28 *)
mov ymm5_0 L0x7fffffffd480;
mov ymm5_1 L0x7fffffffd482;
mov ymm5_2 L0x7fffffffd484;
mov ymm5_3 L0x7fffffffd486;
mov ymm5_4 L0x7fffffffd488;
mov ymm5_5 L0x7fffffffd48a;
mov ymm5_6 L0x7fffffffd48c;
mov ymm5_7 L0x7fffffffd48e;
mov ymm5_8 L0x7fffffffd490;
mov ymm5_9 L0x7fffffffd492;
mov ymm5_a L0x7fffffffd494;
mov ymm5_b L0x7fffffffd496;
mov ymm5_c L0x7fffffffd498;
mov ymm5_d L0x7fffffffd49a;
mov ymm5_e L0x7fffffffd49c;
mov ymm5_f L0x7fffffffd49e;
(* vmovdqa 0x2a0(%rdi),%ymm6                       #! EA = L0x7fffffffd580; Value = 0xf9f9147010e2f810; PC = 0x55555555df30 *)
mov ymm6_0 L0x7fffffffd580;
mov ymm6_1 L0x7fffffffd582;
mov ymm6_2 L0x7fffffffd584;
mov ymm6_3 L0x7fffffffd586;
mov ymm6_4 L0x7fffffffd588;
mov ymm6_5 L0x7fffffffd58a;
mov ymm6_6 L0x7fffffffd58c;
mov ymm6_7 L0x7fffffffd58e;
mov ymm6_8 L0x7fffffffd590;
mov ymm6_9 L0x7fffffffd592;
mov ymm6_a L0x7fffffffd594;
mov ymm6_b L0x7fffffffd596;
mov ymm6_c L0x7fffffffd598;
mov ymm6_d L0x7fffffffd59a;
mov ymm6_e L0x7fffffffd59c;
mov ymm6_f L0x7fffffffd59e;
(* vmovdqa 0x3a0(%rdi),%ymm7                       #! EA = L0x7fffffffd680; Value = 0xf171eb9ef034f370; PC = 0x55555555df38 *)
mov ymm7_0 L0x7fffffffd680;
mov ymm7_1 L0x7fffffffd682;
mov ymm7_2 L0x7fffffffd684;
mov ymm7_3 L0x7fffffffd686;
mov ymm7_4 L0x7fffffffd688;
mov ymm7_5 L0x7fffffffd68a;
mov ymm7_6 L0x7fffffffd68c;
mov ymm7_7 L0x7fffffffd68e;
mov ymm7_8 L0x7fffffffd690;
mov ymm7_9 L0x7fffffffd692;
mov ymm7_a L0x7fffffffd694;
mov ymm7_b L0x7fffffffd696;
mov ymm7_c L0x7fffffffd698;
mov ymm7_d L0x7fffffffd69a;
mov ymm7_e L0x7fffffffd69c;
mov ymm7_f L0x7fffffffd69e;
(* vmovdqa 0x4a0(%rdi),%ymm8                       #! EA = L0x7fffffffd780; Value = 0x0267fba20887f89c; PC = 0x55555555df40 *)
mov ymm8_0 L0x7fffffffd780;
mov ymm8_1 L0x7fffffffd782;
mov ymm8_2 L0x7fffffffd784;
mov ymm8_3 L0x7fffffffd786;
mov ymm8_4 L0x7fffffffd788;
mov ymm8_5 L0x7fffffffd78a;
mov ymm8_6 L0x7fffffffd78c;
mov ymm8_7 L0x7fffffffd78e;
mov ymm8_8 L0x7fffffffd790;
mov ymm8_9 L0x7fffffffd792;
mov ymm8_a L0x7fffffffd794;
mov ymm8_b L0x7fffffffd796;
mov ymm8_c L0x7fffffffd798;
mov ymm8_d L0x7fffffffd79a;
mov ymm8_e L0x7fffffffd79c;
mov ymm8_f L0x7fffffffd79e;
(* vmovdqa 0x5a0(%rdi),%ymm9                       #! EA = L0x7fffffffd880; Value = 0x139c081e0c33f6e5; PC = 0x55555555df48 *)
mov ymm9_0 L0x7fffffffd880;
mov ymm9_1 L0x7fffffffd882;
mov ymm9_2 L0x7fffffffd884;
mov ymm9_3 L0x7fffffffd886;
mov ymm9_4 L0x7fffffffd888;
mov ymm9_5 L0x7fffffffd88a;
mov ymm9_6 L0x7fffffffd88c;
mov ymm9_7 L0x7fffffffd88e;
mov ymm9_8 L0x7fffffffd890;
mov ymm9_9 L0x7fffffffd892;
mov ymm9_a L0x7fffffffd894;
mov ymm9_b L0x7fffffffd896;
mov ymm9_c L0x7fffffffd898;
mov ymm9_d L0x7fffffffd89a;
mov ymm9_e L0x7fffffffd89c;
mov ymm9_f L0x7fffffffd89e;
(* vmovdqa 0x6a0(%rdi),%ymm10                      #! EA = L0x7fffffffd980; Value = 0xee05f4d70bedf3dc; PC = 0x55555555df50 *)
mov ymm10_0 L0x7fffffffd980;
mov ymm10_1 L0x7fffffffd982;
mov ymm10_2 L0x7fffffffd984;
mov ymm10_3 L0x7fffffffd986;
mov ymm10_4 L0x7fffffffd988;
mov ymm10_5 L0x7fffffffd98a;
mov ymm10_6 L0x7fffffffd98c;
mov ymm10_7 L0x7fffffffd98e;
mov ymm10_8 L0x7fffffffd990;
mov ymm10_9 L0x7fffffffd992;
mov ymm10_a L0x7fffffffd994;
mov ymm10_b L0x7fffffffd996;
mov ymm10_c L0x7fffffffd998;
mov ymm10_d L0x7fffffffd99a;
mov ymm10_e L0x7fffffffd99c;
mov ymm10_f L0x7fffffffd99e;
(* vmovdqa 0x7a0(%rdi),%ymm11                      #! EA = L0x7fffffffda80; Value = 0x107e07eef5baf381; PC = 0x55555555df58 *)
mov ymm11_0 L0x7fffffffda80;
mov ymm11_1 L0x7fffffffda82;
mov ymm11_2 L0x7fffffffda84;
mov ymm11_3 L0x7fffffffda86;
mov ymm11_4 L0x7fffffffda88;
mov ymm11_5 L0x7fffffffda8a;
mov ymm11_6 L0x7fffffffda8c;
mov ymm11_7 L0x7fffffffda8e;
mov ymm11_8 L0x7fffffffda90;
mov ymm11_9 L0x7fffffffda92;
mov ymm11_a L0x7fffffffda94;
mov ymm11_b L0x7fffffffda96;
mov ymm11_c L0x7fffffffda98;
mov ymm11_d L0x7fffffffda9a;
mov ymm11_e L0x7fffffffda9c;
mov ymm11_f L0x7fffffffda9e;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555df60 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555df64 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555df68 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555df6c *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555df70 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555df75 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555df7a *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555df7f *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555df84 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555df8d *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555df96 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555df9a *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555df9e *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555dfa2 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555dfa6 *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555dfaf *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555dfb8 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555dfbc *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dfc0 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555dfc4 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555dfc9 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555dfd2 *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555dfdb *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555dfdf *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dfe3 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555dfe7 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm5,%ymm10                     #! PC = 0x55555555dfec *)
smull mulHymm5_0 mulL_0 ymm12_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm12_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm12_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm12_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm12_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm12_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm12_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm12_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm12_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm12_9 ymm5_9;
smull mulHymm5_a mulL_a ymm12_a ymm5_a;
smull mulHymm5_b mulL_b ymm12_b ymm5_b;
smull mulHymm5_c mulL_c ymm12_c ymm5_c;
smull mulHymm5_d mulL_d ymm12_d ymm5_d;
smull mulHymm5_e mulL_e ymm12_e ymm5_e;
smull mulHymm5_f mulL_f ymm12_f ymm5_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm5,%ymm5                      #! PC = 0x55555555dff1 *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm13_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm13_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm13_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm13_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm13_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm13_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm13_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm13_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm13_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm13_9;
smull mulH_a mulLymm5_a ymm5_a ymm13_a;
smull mulH_b mulLymm5_b ymm5_b ymm13_b;
smull mulH_c mulLymm5_c ymm5_c ymm13_c;
smull mulH_d mulLymm5_d ymm5_d ymm13_d;
smull mulH_e mulLymm5_e ymm5_e ymm13_e;
smull mulH_f mulLymm5_f ymm5_f ymm13_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555dff6 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm5_0 2**16 && true;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm5_1 2**16 && true;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm5_2 2**16 && true;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm5_3 2**16 && true;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm5_4 2**16 && true;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm5_5 2**16 && true;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm5_6 2**16 && true;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm5_7 2**16 && true;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm5_8 2**16 && true;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm5_9 2**16 && true;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm5_a 2**16 && true;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm5_b 2**16 && true;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm5_c 2**16 && true;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm5_d 2**16 && true;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm5_e 2**16 && true;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm5_f 2**16 && true;
assume red_f = mulLymm5_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm5,%ymm5                       #! PC = 0x55555555dffa *)
sub ymm5_0 ymm5_0 ymm10_0;
sub ymm5_1 ymm5_1 ymm10_1;
sub ymm5_2 ymm5_2 ymm10_2;
sub ymm5_3 ymm5_3 ymm10_3;
sub ymm5_4 ymm5_4 ymm10_4;
sub ymm5_5 ymm5_5 ymm10_5;
sub ymm5_6 ymm5_6 ymm10_6;
sub ymm5_7 ymm5_7 ymm10_7;
sub ymm5_8 ymm5_8 ymm10_8;
sub ymm5_9 ymm5_9 ymm10_9;
sub ymm5_a ymm5_a ymm10_a;
sub ymm5_b ymm5_b ymm10_b;
sub ymm5_c ymm5_c ymm10_c;
sub ymm5_d ymm5_d ymm10_d;
sub ymm5_e ymm5_e ymm10_e;
sub ymm5_f ymm5_f ymm10_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555dfff *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e004 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e009 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555e00d *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555e012 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555e016 *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555e01a *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555e01e *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555e022 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555e027 *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555e02c *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e031 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555e036 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555e03f *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555e048 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555e04c *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e050 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555e054 *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555e059 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555e05d *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e061 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e065 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555e06a *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555e06f *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e074 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555e078 *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555e07d *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555e082 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e087 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555e08b *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555e090 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555e095 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e09a *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555e09e *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555e0a3 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e0a8 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e0ad *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555e0b1 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555e0b6 *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555e0ba *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555e0be *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555e0c2 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555e0c6 *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555e0cb *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555e0d0 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555e0d5 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0xa0(%rdi)                        #! EA = L0x7fffffffd380; PC = 0x55555555e0da *)
mov L0x7fffffffd380 ymm9_0;
mov L0x7fffffffd382 ymm9_1;
mov L0x7fffffffd384 ymm9_2;
mov L0x7fffffffd386 ymm9_3;
mov L0x7fffffffd388 ymm9_4;
mov L0x7fffffffd38a ymm9_5;
mov L0x7fffffffd38c ymm9_6;
mov L0x7fffffffd38e ymm9_7;
mov L0x7fffffffd390 ymm9_8;
mov L0x7fffffffd392 ymm9_9;
mov L0x7fffffffd394 ymm9_a;
mov L0x7fffffffd396 ymm9_b;
mov L0x7fffffffd398 ymm9_c;
mov L0x7fffffffd39a ymm9_d;
mov L0x7fffffffd39c ymm9_e;
mov L0x7fffffffd39e ymm9_f;
(* vmovdqa %ymm10,0x1a0(%rdi)                      #! EA = L0x7fffffffd480; PC = 0x55555555e0e2 *)
mov L0x7fffffffd480 ymm10_0;
mov L0x7fffffffd482 ymm10_1;
mov L0x7fffffffd484 ymm10_2;
mov L0x7fffffffd486 ymm10_3;
mov L0x7fffffffd488 ymm10_4;
mov L0x7fffffffd48a ymm10_5;
mov L0x7fffffffd48c ymm10_6;
mov L0x7fffffffd48e ymm10_7;
mov L0x7fffffffd490 ymm10_8;
mov L0x7fffffffd492 ymm10_9;
mov L0x7fffffffd494 ymm10_a;
mov L0x7fffffffd496 ymm10_b;
mov L0x7fffffffd498 ymm10_c;
mov L0x7fffffffd49a ymm10_d;
mov L0x7fffffffd49c ymm10_e;
mov L0x7fffffffd49e ymm10_f;
(* vmovdqa %ymm3,0x2a0(%rdi)                       #! EA = L0x7fffffffd580; PC = 0x55555555e0ea *)
mov L0x7fffffffd580 ymm3_0;
mov L0x7fffffffd582 ymm3_1;
mov L0x7fffffffd584 ymm3_2;
mov L0x7fffffffd586 ymm3_3;
mov L0x7fffffffd588 ymm3_4;
mov L0x7fffffffd58a ymm3_5;
mov L0x7fffffffd58c ymm3_6;
mov L0x7fffffffd58e ymm3_7;
mov L0x7fffffffd590 ymm3_8;
mov L0x7fffffffd592 ymm3_9;
mov L0x7fffffffd594 ymm3_a;
mov L0x7fffffffd596 ymm3_b;
mov L0x7fffffffd598 ymm3_c;
mov L0x7fffffffd59a ymm3_d;
mov L0x7fffffffd59c ymm3_e;
mov L0x7fffffffd59e ymm3_f;
(* vmovdqa %ymm4,0x3a0(%rdi)                       #! EA = L0x7fffffffd680; PC = 0x55555555e0f2 *)
mov L0x7fffffffd680 ymm4_0;
mov L0x7fffffffd682 ymm4_1;
mov L0x7fffffffd684 ymm4_2;
mov L0x7fffffffd686 ymm4_3;
mov L0x7fffffffd688 ymm4_4;
mov L0x7fffffffd68a ymm4_5;
mov L0x7fffffffd68c ymm4_6;
mov L0x7fffffffd68e ymm4_7;
mov L0x7fffffffd690 ymm4_8;
mov L0x7fffffffd692 ymm4_9;
mov L0x7fffffffd694 ymm4_a;
mov L0x7fffffffd696 ymm4_b;
mov L0x7fffffffd698 ymm4_c;
mov L0x7fffffffd69a ymm4_d;
mov L0x7fffffffd69c ymm4_e;
mov L0x7fffffffd69e ymm4_f;
(* vmovdqa %ymm5,0x4a0(%rdi)                       #! EA = L0x7fffffffd780; PC = 0x55555555e0fa *)
mov L0x7fffffffd780 ymm5_0;
mov L0x7fffffffd782 ymm5_1;
mov L0x7fffffffd784 ymm5_2;
mov L0x7fffffffd786 ymm5_3;
mov L0x7fffffffd788 ymm5_4;
mov L0x7fffffffd78a ymm5_5;
mov L0x7fffffffd78c ymm5_6;
mov L0x7fffffffd78e ymm5_7;
mov L0x7fffffffd790 ymm5_8;
mov L0x7fffffffd792 ymm5_9;
mov L0x7fffffffd794 ymm5_a;
mov L0x7fffffffd796 ymm5_b;
mov L0x7fffffffd798 ymm5_c;
mov L0x7fffffffd79a ymm5_d;
mov L0x7fffffffd79c ymm5_e;
mov L0x7fffffffd79e ymm5_f;
(* vmovdqa %ymm6,0x5a0(%rdi)                       #! EA = L0x7fffffffd880; PC = 0x55555555e102 *)
mov L0x7fffffffd880 ymm6_0;
mov L0x7fffffffd882 ymm6_1;
mov L0x7fffffffd884 ymm6_2;
mov L0x7fffffffd886 ymm6_3;
mov L0x7fffffffd888 ymm6_4;
mov L0x7fffffffd88a ymm6_5;
mov L0x7fffffffd88c ymm6_6;
mov L0x7fffffffd88e ymm6_7;
mov L0x7fffffffd890 ymm6_8;
mov L0x7fffffffd892 ymm6_9;
mov L0x7fffffffd894 ymm6_a;
mov L0x7fffffffd896 ymm6_b;
mov L0x7fffffffd898 ymm6_c;
mov L0x7fffffffd89a ymm6_d;
mov L0x7fffffffd89c ymm6_e;
mov L0x7fffffffd89e ymm6_f;
(* vmovdqa %ymm8,0x6a0(%rdi)                       #! EA = L0x7fffffffd980; PC = 0x55555555e10a *)
mov L0x7fffffffd980 ymm8_0;
mov L0x7fffffffd982 ymm8_1;
mov L0x7fffffffd984 ymm8_2;
mov L0x7fffffffd986 ymm8_3;
mov L0x7fffffffd988 ymm8_4;
mov L0x7fffffffd98a ymm8_5;
mov L0x7fffffffd98c ymm8_6;
mov L0x7fffffffd98e ymm8_7;
mov L0x7fffffffd990 ymm8_8;
mov L0x7fffffffd992 ymm8_9;
mov L0x7fffffffd994 ymm8_a;
mov L0x7fffffffd996 ymm8_b;
mov L0x7fffffffd998 ymm8_c;
mov L0x7fffffffd99a ymm8_d;
mov L0x7fffffffd99c ymm8_e;
mov L0x7fffffffd99e ymm8_f;
(* vmovdqa %ymm11,0x7a0(%rdi)                      #! EA = L0x7fffffffda80; PC = 0x55555555e112 *)
mov L0x7fffffffda80 ymm11_0;
mov L0x7fffffffda82 ymm11_1;
mov L0x7fffffffda84 ymm11_2;
mov L0x7fffffffda86 ymm11_3;
mov L0x7fffffffda88 ymm11_4;
mov L0x7fffffffda8a ymm11_5;
mov L0x7fffffffda8c ymm11_6;
mov L0x7fffffffda8e ymm11_7;
mov L0x7fffffffda90 ymm11_8;
mov L0x7fffffffda92 ymm11_9;
mov L0x7fffffffda94 ymm11_a;
mov L0x7fffffffda96 ymm11_b;
mov L0x7fffffffda98 ymm11_c;
mov L0x7fffffffda9a ymm11_d;
mov L0x7fffffffda9c ymm11_e;
mov L0x7fffffffda9e ymm11_f;



(**************** LEVELS 6-8, 5 *****************)

ghost out_poly5@bit,
out_poly50@bit, out_poly51@bit, out_poly52@bit, out_poly53@bit,
out_poly54@bit, out_poly55@bit, out_poly56@bit, out_poly57@bit : and [
out_poly50 =
L0x7fffffffd380*x** 0+L0x7fffffffd382*x** 1+L0x7fffffffd384*x** 2+
L0x7fffffffd386*x** 3+L0x7fffffffd388*x** 4+L0x7fffffffd38a*x** 5+
L0x7fffffffd38c*x** 6+L0x7fffffffd38e*x** 7+L0x7fffffffd390*x** 8+
L0x7fffffffd392*x** 9+L0x7fffffffd394*x**10+L0x7fffffffd396*x**11+
L0x7fffffffd398*x**12+L0x7fffffffd39a*x**13+L0x7fffffffd39c*x**14+
L0x7fffffffd39e*x**15,
out_poly51 =
L0x7fffffffd480*x** 0+L0x7fffffffd482*x** 1+L0x7fffffffd484*x** 2+
L0x7fffffffd486*x** 3+L0x7fffffffd488*x** 4+L0x7fffffffd48a*x** 5+
L0x7fffffffd48c*x** 6+L0x7fffffffd48e*x** 7+L0x7fffffffd490*x** 8+
L0x7fffffffd492*x** 9+L0x7fffffffd494*x**10+L0x7fffffffd496*x**11+
L0x7fffffffd498*x**12+L0x7fffffffd49a*x**13+L0x7fffffffd49c*x**14+
L0x7fffffffd49e*x**15,
out_poly52 =
L0x7fffffffd580*x** 0+L0x7fffffffd582*x** 1+L0x7fffffffd584*x** 2+
L0x7fffffffd586*x** 3+L0x7fffffffd588*x** 4+L0x7fffffffd58a*x** 5+
L0x7fffffffd58c*x** 6+L0x7fffffffd58e*x** 7+L0x7fffffffd590*x** 8+
L0x7fffffffd592*x** 9+L0x7fffffffd594*x**10+L0x7fffffffd596*x**11+
L0x7fffffffd598*x**12+L0x7fffffffd59a*x**13+L0x7fffffffd59c*x**14+
L0x7fffffffd59e*x**15,
out_poly53 =
L0x7fffffffd680*x** 0+L0x7fffffffd682*x** 1+L0x7fffffffd684*x** 2+
L0x7fffffffd686*x** 3+L0x7fffffffd688*x** 4+L0x7fffffffd68a*x** 5+
L0x7fffffffd68c*x** 6+L0x7fffffffd68e*x** 7+L0x7fffffffd690*x** 8+
L0x7fffffffd692*x** 9+L0x7fffffffd694*x**10+L0x7fffffffd696*x**11+
L0x7fffffffd698*x**12+L0x7fffffffd69a*x**13+L0x7fffffffd69c*x**14+
L0x7fffffffd69e*x**15,
out_poly54 =
L0x7fffffffd780*x** 0+L0x7fffffffd782*x** 1+L0x7fffffffd784*x** 2+
L0x7fffffffd786*x** 3+L0x7fffffffd788*x** 4+L0x7fffffffd78a*x** 5+
L0x7fffffffd78c*x** 6+L0x7fffffffd78e*x** 7+L0x7fffffffd790*x** 8+
L0x7fffffffd792*x** 9+L0x7fffffffd794*x**10+L0x7fffffffd796*x**11+
L0x7fffffffd798*x**12+L0x7fffffffd79a*x**13+L0x7fffffffd79c*x**14+
L0x7fffffffd79e*x**15,
out_poly55 =
L0x7fffffffd880*x** 0+L0x7fffffffd882*x** 1+L0x7fffffffd884*x** 2+
L0x7fffffffd886*x** 3+L0x7fffffffd888*x** 4+L0x7fffffffd88a*x** 5+
L0x7fffffffd88c*x** 6+L0x7fffffffd88e*x** 7+L0x7fffffffd890*x** 8+
L0x7fffffffd892*x** 9+L0x7fffffffd894*x**10+L0x7fffffffd896*x**11+
L0x7fffffffd898*x**12+L0x7fffffffd89a*x**13+L0x7fffffffd89c*x**14+
L0x7fffffffd89e*x**15,
out_poly56 =
L0x7fffffffd980*x** 0+L0x7fffffffd982*x** 1+L0x7fffffffd984*x** 2+
L0x7fffffffd986*x** 3+L0x7fffffffd988*x** 4+L0x7fffffffd98a*x** 5+
L0x7fffffffd98c*x** 6+L0x7fffffffd98e*x** 7+L0x7fffffffd990*x** 8+
L0x7fffffffd992*x** 9+L0x7fffffffd994*x**10+L0x7fffffffd996*x**11+
L0x7fffffffd998*x**12+L0x7fffffffd99a*x**13+L0x7fffffffd99c*x**14+
L0x7fffffffd99e*x**15,
out_poly57 =
L0x7fffffffda80*x** 0+L0x7fffffffda82*x** 1+L0x7fffffffda84*x** 2+
L0x7fffffffda86*x** 3+L0x7fffffffda88*x** 4+L0x7fffffffda8a*x** 5+
L0x7fffffffda8c*x** 6+L0x7fffffffda8e*x** 7+L0x7fffffffda90*x** 8+
L0x7fffffffda92*x** 9+L0x7fffffffda94*x**10+L0x7fffffffda96*x**11+
L0x7fffffffda98*x**12+L0x7fffffffda9a*x**13+L0x7fffffffda9c*x**14+
L0x7fffffffda9e*x**15
,
out_poly5 =
out_poly50*x**  0+out_poly51*x**128+out_poly52*x**256+out_poly53*x**384+
out_poly54*x**512+out_poly55*x**640+out_poly56*x**768+out_poly57*x**896]
&& true;


(**************** CUT  75 *****************)

ecut and [
eqmod (out_poly5) (8*shuf_poly50) [10753, x**128 - 1],
eqmod (out_poly5) (8*shuf_poly51) [10753, x**128 - 10752],
eqmod (out_poly5) (8*shuf_poly52) [10753, x**128 - 6264],
eqmod (out_poly5) (8*shuf_poly53) [10753, x**128 - 4489],
eqmod (out_poly5) (8*shuf_poly54) [10753, x**128 - 321],
eqmod (out_poly5) (8*shuf_poly55) [10753, x**128 - 10432],
eqmod (out_poly5) (8*shuf_poly56) [10753, x**128 - 10686],
eqmod (out_poly5) (8*shuf_poly57) [10753, x**128 - 67]
];


(**************** CUT  76 *****************)

ecut true;



(**************** shuffle poly 6 *****************)

ghost shuf_poly60@bit, shuf_poly61@bit, shuf_poly62@bit, shuf_poly63@bit,
      shuf_poly64@bit, shuf_poly65@bit, shuf_poly66@bit, shuf_poly67@bit : and [
shuf_poly60 =
L0x7fffffffd3a0*x** 0+L0x7fffffffd3a2*x** 1+L0x7fffffffd3a4*x** 2+
L0x7fffffffd3a6*x** 3+L0x7fffffffd3a8*x** 4+L0x7fffffffd3aa*x** 5+
L0x7fffffffd3ac*x** 6+L0x7fffffffd3ae*x** 7+L0x7fffffffd3b0*x** 8+
L0x7fffffffd3b2*x** 9+L0x7fffffffd3b4*x**10+L0x7fffffffd3b6*x**11+
L0x7fffffffd3b8*x**12+L0x7fffffffd3ba*x**13+L0x7fffffffd3bc*x**14+
L0x7fffffffd3be*x**15,
shuf_poly61 =
L0x7fffffffd4a0*x** 0+L0x7fffffffd4a2*x** 1+L0x7fffffffd4a4*x** 2+
L0x7fffffffd4a6*x** 3+L0x7fffffffd4a8*x** 4+L0x7fffffffd4aa*x** 5+
L0x7fffffffd4ac*x** 6+L0x7fffffffd4ae*x** 7+L0x7fffffffd4b0*x** 8+
L0x7fffffffd4b2*x** 9+L0x7fffffffd4b4*x**10+L0x7fffffffd4b6*x**11+
L0x7fffffffd4b8*x**12+L0x7fffffffd4ba*x**13+L0x7fffffffd4bc*x**14+
L0x7fffffffd4be*x**15,
shuf_poly62 =
L0x7fffffffd5a0*x** 0+L0x7fffffffd5a2*x** 1+L0x7fffffffd5a4*x** 2+
L0x7fffffffd5a6*x** 3+L0x7fffffffd5a8*x** 4+L0x7fffffffd5aa*x** 5+
L0x7fffffffd5ac*x** 6+L0x7fffffffd5ae*x** 7+L0x7fffffffd5b0*x** 8+
L0x7fffffffd5b2*x** 9+L0x7fffffffd5b4*x**10+L0x7fffffffd5b6*x**11+
L0x7fffffffd5b8*x**12+L0x7fffffffd5ba*x**13+L0x7fffffffd5bc*x**14+
L0x7fffffffd5be*x**15,
shuf_poly63 =
L0x7fffffffd6a0*x** 0+L0x7fffffffd6a2*x** 1+L0x7fffffffd6a4*x** 2+
L0x7fffffffd6a6*x** 3+L0x7fffffffd6a8*x** 4+L0x7fffffffd6aa*x** 5+
L0x7fffffffd6ac*x** 6+L0x7fffffffd6ae*x** 7+L0x7fffffffd6b0*x** 8+
L0x7fffffffd6b2*x** 9+L0x7fffffffd6b4*x**10+L0x7fffffffd6b6*x**11+
L0x7fffffffd6b8*x**12+L0x7fffffffd6ba*x**13+L0x7fffffffd6bc*x**14+
L0x7fffffffd6be*x**15,
shuf_poly64 =
L0x7fffffffd7a0*x** 0+L0x7fffffffd7a2*x** 1+L0x7fffffffd7a4*x** 2+
L0x7fffffffd7a6*x** 3+L0x7fffffffd7a8*x** 4+L0x7fffffffd7aa*x** 5+
L0x7fffffffd7ac*x** 6+L0x7fffffffd7ae*x** 7+L0x7fffffffd7b0*x** 8+
L0x7fffffffd7b2*x** 9+L0x7fffffffd7b4*x**10+L0x7fffffffd7b6*x**11+
L0x7fffffffd7b8*x**12+L0x7fffffffd7ba*x**13+L0x7fffffffd7bc*x**14+
L0x7fffffffd7be*x**15,
shuf_poly65 =
L0x7fffffffd8a0*x** 0+L0x7fffffffd8a2*x** 1+L0x7fffffffd8a4*x** 2+
L0x7fffffffd8a6*x** 3+L0x7fffffffd8a8*x** 4+L0x7fffffffd8aa*x** 5+
L0x7fffffffd8ac*x** 6+L0x7fffffffd8ae*x** 7+L0x7fffffffd8b0*x** 8+
L0x7fffffffd8b2*x** 9+L0x7fffffffd8b4*x**10+L0x7fffffffd8b6*x**11+
L0x7fffffffd8b8*x**12+L0x7fffffffd8ba*x**13+L0x7fffffffd8bc*x**14+
L0x7fffffffd8be*x**15,
shuf_poly66 =
L0x7fffffffd9a0*x** 0+L0x7fffffffd9a2*x** 1+L0x7fffffffd9a4*x** 2+
L0x7fffffffd9a6*x** 3+L0x7fffffffd9a8*x** 4+L0x7fffffffd9aa*x** 5+
L0x7fffffffd9ac*x** 6+L0x7fffffffd9ae*x** 7+L0x7fffffffd9b0*x** 8+
L0x7fffffffd9b2*x** 9+L0x7fffffffd9b4*x**10+L0x7fffffffd9b6*x**11+
L0x7fffffffd9b8*x**12+L0x7fffffffd9ba*x**13+L0x7fffffffd9bc*x**14+
L0x7fffffffd9be*x**15,
shuf_poly67 =
L0x7fffffffdaa0*x** 0+L0x7fffffffdaa2*x** 1+L0x7fffffffdaa4*x** 2+
L0x7fffffffdaa6*x** 3+L0x7fffffffdaa8*x** 4+L0x7fffffffdaaa*x** 5+
L0x7fffffffdaac*x** 6+L0x7fffffffdaae*x** 7+L0x7fffffffdab0*x** 8+
L0x7fffffffdab2*x** 9+L0x7fffffffdab4*x**10+L0x7fffffffdab6*x**11+
L0x7fffffffdab8*x**12+L0x7fffffffdaba*x**13+L0x7fffffffdabc*x**14+
L0x7fffffffdabe*x**15
] && true;



(* vmovdqa 0xc0(%rdi),%ymm4                        #! EA = L0x7fffffffd3a0; Value = 0x1a171eb2eb290592; PC = 0x55555555e11a *)
mov ymm4_0 L0x7fffffffd3a0;
mov ymm4_1 L0x7fffffffd3a2;
mov ymm4_2 L0x7fffffffd3a4;
mov ymm4_3 L0x7fffffffd3a6;
mov ymm4_4 L0x7fffffffd3a8;
mov ymm4_5 L0x7fffffffd3aa;
mov ymm4_6 L0x7fffffffd3ac;
mov ymm4_7 L0x7fffffffd3ae;
mov ymm4_8 L0x7fffffffd3b0;
mov ymm4_9 L0x7fffffffd3b2;
mov ymm4_a L0x7fffffffd3b4;
mov ymm4_b L0x7fffffffd3b6;
mov ymm4_c L0x7fffffffd3b8;
mov ymm4_d L0x7fffffffd3ba;
mov ymm4_e L0x7fffffffd3bc;
mov ymm4_f L0x7fffffffd3be;
(* vmovdqa 0x1c0(%rdi),%ymm5                       #! EA = L0x7fffffffd4a0; Value = 0x1043eba2147f0f85; PC = 0x55555555e122 *)
mov ymm5_0 L0x7fffffffd4a0;
mov ymm5_1 L0x7fffffffd4a2;
mov ymm5_2 L0x7fffffffd4a4;
mov ymm5_3 L0x7fffffffd4a6;
mov ymm5_4 L0x7fffffffd4a8;
mov ymm5_5 L0x7fffffffd4aa;
mov ymm5_6 L0x7fffffffd4ac;
mov ymm5_7 L0x7fffffffd4ae;
mov ymm5_8 L0x7fffffffd4b0;
mov ymm5_9 L0x7fffffffd4b2;
mov ymm5_a L0x7fffffffd4b4;
mov ymm5_b L0x7fffffffd4b6;
mov ymm5_c L0x7fffffffd4b8;
mov ymm5_d L0x7fffffffd4ba;
mov ymm5_e L0x7fffffffd4bc;
mov ymm5_f L0x7fffffffd4be;
(* vmovdqa 0x2c0(%rdi),%ymm6                       #! EA = L0x7fffffffd5a0; Value = 0xff1dee63fe811171; PC = 0x55555555e12a *)
mov ymm6_0 L0x7fffffffd5a0;
mov ymm6_1 L0x7fffffffd5a2;
mov ymm6_2 L0x7fffffffd5a4;
mov ymm6_3 L0x7fffffffd5a6;
mov ymm6_4 L0x7fffffffd5a8;
mov ymm6_5 L0x7fffffffd5aa;
mov ymm6_6 L0x7fffffffd5ac;
mov ymm6_7 L0x7fffffffd5ae;
mov ymm6_8 L0x7fffffffd5b0;
mov ymm6_9 L0x7fffffffd5b2;
mov ymm6_a L0x7fffffffd5b4;
mov ymm6_b L0x7fffffffd5b6;
mov ymm6_c L0x7fffffffd5b8;
mov ymm6_d L0x7fffffffd5ba;
mov ymm6_e L0x7fffffffd5bc;
mov ymm6_f L0x7fffffffd5be;
(* vmovdqa 0x3c0(%rdi),%ymm7                       #! EA = L0x7fffffffd6a0; Value = 0xeca5088ceb010415; PC = 0x55555555e132 *)
mov ymm7_0 L0x7fffffffd6a0;
mov ymm7_1 L0x7fffffffd6a2;
mov ymm7_2 L0x7fffffffd6a4;
mov ymm7_3 L0x7fffffffd6a6;
mov ymm7_4 L0x7fffffffd6a8;
mov ymm7_5 L0x7fffffffd6aa;
mov ymm7_6 L0x7fffffffd6ac;
mov ymm7_7 L0x7fffffffd6ae;
mov ymm7_8 L0x7fffffffd6b0;
mov ymm7_9 L0x7fffffffd6b2;
mov ymm7_a L0x7fffffffd6b4;
mov ymm7_b L0x7fffffffd6b6;
mov ymm7_c L0x7fffffffd6b8;
mov ymm7_d L0x7fffffffd6ba;
mov ymm7_e L0x7fffffffd6bc;
mov ymm7_f L0x7fffffffd6be;
(* vmovdqa 0x4c0(%rdi),%ymm8                       #! EA = L0x7fffffffd7a0; Value = 0xf398ee0205cc0440; PC = 0x55555555e13a *)
mov ymm8_0 L0x7fffffffd7a0;
mov ymm8_1 L0x7fffffffd7a2;
mov ymm8_2 L0x7fffffffd7a4;
mov ymm8_3 L0x7fffffffd7a6;
mov ymm8_4 L0x7fffffffd7a8;
mov ymm8_5 L0x7fffffffd7aa;
mov ymm8_6 L0x7fffffffd7ac;
mov ymm8_7 L0x7fffffffd7ae;
mov ymm8_8 L0x7fffffffd7b0;
mov ymm8_9 L0x7fffffffd7b2;
mov ymm8_a L0x7fffffffd7b4;
mov ymm8_b L0x7fffffffd7b6;
mov ymm8_c L0x7fffffffd7b8;
mov ymm8_d L0x7fffffffd7ba;
mov ymm8_e L0x7fffffffd7bc;
mov ymm8_f L0x7fffffffd7be;
(* vmovdqa 0x5c0(%rdi),%ymm9                       #! EA = L0x7fffffffd8a0; Value = 0xf8da03a5033eee2a; PC = 0x55555555e142 *)
mov ymm9_0 L0x7fffffffd8a0;
mov ymm9_1 L0x7fffffffd8a2;
mov ymm9_2 L0x7fffffffd8a4;
mov ymm9_3 L0x7fffffffd8a6;
mov ymm9_4 L0x7fffffffd8a8;
mov ymm9_5 L0x7fffffffd8aa;
mov ymm9_6 L0x7fffffffd8ac;
mov ymm9_7 L0x7fffffffd8ae;
mov ymm9_8 L0x7fffffffd8b0;
mov ymm9_9 L0x7fffffffd8b2;
mov ymm9_a L0x7fffffffd8b4;
mov ymm9_b L0x7fffffffd8b6;
mov ymm9_c L0x7fffffffd8b8;
mov ymm9_d L0x7fffffffd8ba;
mov ymm9_e L0x7fffffffd8bc;
mov ymm9_f L0x7fffffffd8be;
(* vmovdqa 0x6c0(%rdi),%ymm10                      #! EA = L0x7fffffffd9a0; Value = 0x0b840df5ef9cf89f; PC = 0x55555555e14a *)
mov ymm10_0 L0x7fffffffd9a0;
mov ymm10_1 L0x7fffffffd9a2;
mov ymm10_2 L0x7fffffffd9a4;
mov ymm10_3 L0x7fffffffd9a6;
mov ymm10_4 L0x7fffffffd9a8;
mov ymm10_5 L0x7fffffffd9aa;
mov ymm10_6 L0x7fffffffd9ac;
mov ymm10_7 L0x7fffffffd9ae;
mov ymm10_8 L0x7fffffffd9b0;
mov ymm10_9 L0x7fffffffd9b2;
mov ymm10_a L0x7fffffffd9b4;
mov ymm10_b L0x7fffffffd9b6;
mov ymm10_c L0x7fffffffd9b8;
mov ymm10_d L0x7fffffffd9ba;
mov ymm10_e L0x7fffffffd9bc;
mov ymm10_f L0x7fffffffd9be;
(* vmovdqa 0x7c0(%rdi),%ymm11                      #! EA = L0x7fffffffdaa0; Value = 0xf42501a7f0841593; PC = 0x55555555e152 *)
mov ymm11_0 L0x7fffffffdaa0;
mov ymm11_1 L0x7fffffffdaa2;
mov ymm11_2 L0x7fffffffdaa4;
mov ymm11_3 L0x7fffffffdaa6;
mov ymm11_4 L0x7fffffffdaa8;
mov ymm11_5 L0x7fffffffdaaa;
mov ymm11_6 L0x7fffffffdaac;
mov ymm11_7 L0x7fffffffdaae;
mov ymm11_8 L0x7fffffffdab0;
mov ymm11_9 L0x7fffffffdab2;
mov ymm11_a L0x7fffffffdab4;
mov ymm11_b L0x7fffffffdab6;
mov ymm11_c L0x7fffffffdab8;
mov ymm11_d L0x7fffffffdaba;
mov ymm11_e L0x7fffffffdabc;
mov ymm11_f L0x7fffffffdabe;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555e15a *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555e15e *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555e162 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555e166 *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555e16a *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555e16f *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555e174 *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555e179 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555e17e *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555e187 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555e190 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555e194 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e198 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555e19c *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555e1a0 *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555e1a9 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555e1b2 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555e1b6 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e1ba *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555e1be *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555e1c3 *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555e1cc *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555e1d5 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555e1d9 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e1dd *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555e1e1 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555e1e6 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e1eb *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e1f0 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555e1f4 *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555e1f9 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555e1fd *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555e201 *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555e205 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555e209 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555e20e *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555e213 *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e218 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555e21d *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555e226 *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555e22f *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555e233 *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e237 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555e23b *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555e240 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555e244 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e248 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e24c *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555e251 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555e256 *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e25b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555e25f *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555e264 *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555e269 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e26e *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555e272 *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555e277 *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555e27c *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e281 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555e285 *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555e28a *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e28f *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e294 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555e298 *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555e29d *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555e2a1 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555e2a5 *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555e2a9 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555e2ad *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555e2b2 *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555e2b7 *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555e2bc *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0xc0(%rdi)                        #! EA = L0x7fffffffd3a0; PC = 0x55555555e2c1 *)
mov L0x7fffffffd3a0 ymm9_0;
mov L0x7fffffffd3a2 ymm9_1;
mov L0x7fffffffd3a4 ymm9_2;
mov L0x7fffffffd3a6 ymm9_3;
mov L0x7fffffffd3a8 ymm9_4;
mov L0x7fffffffd3aa ymm9_5;
mov L0x7fffffffd3ac ymm9_6;
mov L0x7fffffffd3ae ymm9_7;
mov L0x7fffffffd3b0 ymm9_8;
mov L0x7fffffffd3b2 ymm9_9;
mov L0x7fffffffd3b4 ymm9_a;
mov L0x7fffffffd3b6 ymm9_b;
mov L0x7fffffffd3b8 ymm9_c;
mov L0x7fffffffd3ba ymm9_d;
mov L0x7fffffffd3bc ymm9_e;
mov L0x7fffffffd3be ymm9_f;
(* vmovdqa %ymm10,0x1c0(%rdi)                      #! EA = L0x7fffffffd4a0; PC = 0x55555555e2c9 *)
mov L0x7fffffffd4a0 ymm10_0;
mov L0x7fffffffd4a2 ymm10_1;
mov L0x7fffffffd4a4 ymm10_2;
mov L0x7fffffffd4a6 ymm10_3;
mov L0x7fffffffd4a8 ymm10_4;
mov L0x7fffffffd4aa ymm10_5;
mov L0x7fffffffd4ac ymm10_6;
mov L0x7fffffffd4ae ymm10_7;
mov L0x7fffffffd4b0 ymm10_8;
mov L0x7fffffffd4b2 ymm10_9;
mov L0x7fffffffd4b4 ymm10_a;
mov L0x7fffffffd4b6 ymm10_b;
mov L0x7fffffffd4b8 ymm10_c;
mov L0x7fffffffd4ba ymm10_d;
mov L0x7fffffffd4bc ymm10_e;
mov L0x7fffffffd4be ymm10_f;
(* vmovdqa %ymm3,0x2c0(%rdi)                       #! EA = L0x7fffffffd5a0; PC = 0x55555555e2d1 *)
mov L0x7fffffffd5a0 ymm3_0;
mov L0x7fffffffd5a2 ymm3_1;
mov L0x7fffffffd5a4 ymm3_2;
mov L0x7fffffffd5a6 ymm3_3;
mov L0x7fffffffd5a8 ymm3_4;
mov L0x7fffffffd5aa ymm3_5;
mov L0x7fffffffd5ac ymm3_6;
mov L0x7fffffffd5ae ymm3_7;
mov L0x7fffffffd5b0 ymm3_8;
mov L0x7fffffffd5b2 ymm3_9;
mov L0x7fffffffd5b4 ymm3_a;
mov L0x7fffffffd5b6 ymm3_b;
mov L0x7fffffffd5b8 ymm3_c;
mov L0x7fffffffd5ba ymm3_d;
mov L0x7fffffffd5bc ymm3_e;
mov L0x7fffffffd5be ymm3_f;
(* vmovdqa %ymm4,0x3c0(%rdi)                       #! EA = L0x7fffffffd6a0; PC = 0x55555555e2d9 *)
mov L0x7fffffffd6a0 ymm4_0;
mov L0x7fffffffd6a2 ymm4_1;
mov L0x7fffffffd6a4 ymm4_2;
mov L0x7fffffffd6a6 ymm4_3;
mov L0x7fffffffd6a8 ymm4_4;
mov L0x7fffffffd6aa ymm4_5;
mov L0x7fffffffd6ac ymm4_6;
mov L0x7fffffffd6ae ymm4_7;
mov L0x7fffffffd6b0 ymm4_8;
mov L0x7fffffffd6b2 ymm4_9;
mov L0x7fffffffd6b4 ymm4_a;
mov L0x7fffffffd6b6 ymm4_b;
mov L0x7fffffffd6b8 ymm4_c;
mov L0x7fffffffd6ba ymm4_d;
mov L0x7fffffffd6bc ymm4_e;
mov L0x7fffffffd6be ymm4_f;
(* vmovdqa %ymm5,0x4c0(%rdi)                       #! EA = L0x7fffffffd7a0; PC = 0x55555555e2e1 *)
mov L0x7fffffffd7a0 ymm5_0;
mov L0x7fffffffd7a2 ymm5_1;
mov L0x7fffffffd7a4 ymm5_2;
mov L0x7fffffffd7a6 ymm5_3;
mov L0x7fffffffd7a8 ymm5_4;
mov L0x7fffffffd7aa ymm5_5;
mov L0x7fffffffd7ac ymm5_6;
mov L0x7fffffffd7ae ymm5_7;
mov L0x7fffffffd7b0 ymm5_8;
mov L0x7fffffffd7b2 ymm5_9;
mov L0x7fffffffd7b4 ymm5_a;
mov L0x7fffffffd7b6 ymm5_b;
mov L0x7fffffffd7b8 ymm5_c;
mov L0x7fffffffd7ba ymm5_d;
mov L0x7fffffffd7bc ymm5_e;
mov L0x7fffffffd7be ymm5_f;
(* vmovdqa %ymm6,0x5c0(%rdi)                       #! EA = L0x7fffffffd8a0; PC = 0x55555555e2e9 *)
mov L0x7fffffffd8a0 ymm6_0;
mov L0x7fffffffd8a2 ymm6_1;
mov L0x7fffffffd8a4 ymm6_2;
mov L0x7fffffffd8a6 ymm6_3;
mov L0x7fffffffd8a8 ymm6_4;
mov L0x7fffffffd8aa ymm6_5;
mov L0x7fffffffd8ac ymm6_6;
mov L0x7fffffffd8ae ymm6_7;
mov L0x7fffffffd8b0 ymm6_8;
mov L0x7fffffffd8b2 ymm6_9;
mov L0x7fffffffd8b4 ymm6_a;
mov L0x7fffffffd8b6 ymm6_b;
mov L0x7fffffffd8b8 ymm6_c;
mov L0x7fffffffd8ba ymm6_d;
mov L0x7fffffffd8bc ymm6_e;
mov L0x7fffffffd8be ymm6_f;
(* vmovdqa %ymm8,0x6c0(%rdi)                       #! EA = L0x7fffffffd9a0; PC = 0x55555555e2f1 *)
mov L0x7fffffffd9a0 ymm8_0;
mov L0x7fffffffd9a2 ymm8_1;
mov L0x7fffffffd9a4 ymm8_2;
mov L0x7fffffffd9a6 ymm8_3;
mov L0x7fffffffd9a8 ymm8_4;
mov L0x7fffffffd9aa ymm8_5;
mov L0x7fffffffd9ac ymm8_6;
mov L0x7fffffffd9ae ymm8_7;
mov L0x7fffffffd9b0 ymm8_8;
mov L0x7fffffffd9b2 ymm8_9;
mov L0x7fffffffd9b4 ymm8_a;
mov L0x7fffffffd9b6 ymm8_b;
mov L0x7fffffffd9b8 ymm8_c;
mov L0x7fffffffd9ba ymm8_d;
mov L0x7fffffffd9bc ymm8_e;
mov L0x7fffffffd9be ymm8_f;
(* vmovdqa %ymm11,0x7c0(%rdi)                      #! EA = L0x7fffffffdaa0; PC = 0x55555555e2f9 *)
mov L0x7fffffffdaa0 ymm11_0;
mov L0x7fffffffdaa2 ymm11_1;
mov L0x7fffffffdaa4 ymm11_2;
mov L0x7fffffffdaa6 ymm11_3;
mov L0x7fffffffdaa8 ymm11_4;
mov L0x7fffffffdaaa ymm11_5;
mov L0x7fffffffdaac ymm11_6;
mov L0x7fffffffdaae ymm11_7;
mov L0x7fffffffdab0 ymm11_8;
mov L0x7fffffffdab2 ymm11_9;
mov L0x7fffffffdab4 ymm11_a;
mov L0x7fffffffdab6 ymm11_b;
mov L0x7fffffffdab8 ymm11_c;
mov L0x7fffffffdaba ymm11_d;
mov L0x7fffffffdabc ymm11_e;
mov L0x7fffffffdabe ymm11_f;



(**************** LEVELS 6-8, 6 *****************)

ghost out_poly6@bit,
out_poly60@bit, out_poly61@bit, out_poly62@bit, out_poly63@bit,
out_poly64@bit, out_poly65@bit, out_poly66@bit, out_poly67@bit : and [
out_poly60 =
L0x7fffffffd3a0*x** 0+L0x7fffffffd3a2*x** 1+L0x7fffffffd3a4*x** 2+
L0x7fffffffd3a6*x** 3+L0x7fffffffd3a8*x** 4+L0x7fffffffd3aa*x** 5+
L0x7fffffffd3ac*x** 6+L0x7fffffffd3ae*x** 7+L0x7fffffffd3b0*x** 8+
L0x7fffffffd3b2*x** 9+L0x7fffffffd3b4*x**10+L0x7fffffffd3b6*x**11+
L0x7fffffffd3b8*x**12+L0x7fffffffd3ba*x**13+L0x7fffffffd3bc*x**14+
L0x7fffffffd3be*x**15,
out_poly61 =
L0x7fffffffd4a0*x** 0+L0x7fffffffd4a2*x** 1+L0x7fffffffd4a4*x** 2+
L0x7fffffffd4a6*x** 3+L0x7fffffffd4a8*x** 4+L0x7fffffffd4aa*x** 5+
L0x7fffffffd4ac*x** 6+L0x7fffffffd4ae*x** 7+L0x7fffffffd4b0*x** 8+
L0x7fffffffd4b2*x** 9+L0x7fffffffd4b4*x**10+L0x7fffffffd4b6*x**11+
L0x7fffffffd4b8*x**12+L0x7fffffffd4ba*x**13+L0x7fffffffd4bc*x**14+
L0x7fffffffd4be*x**15,
out_poly62 =
L0x7fffffffd5a0*x** 0+L0x7fffffffd5a2*x** 1+L0x7fffffffd5a4*x** 2+
L0x7fffffffd5a6*x** 3+L0x7fffffffd5a8*x** 4+L0x7fffffffd5aa*x** 5+
L0x7fffffffd5ac*x** 6+L0x7fffffffd5ae*x** 7+L0x7fffffffd5b0*x** 8+
L0x7fffffffd5b2*x** 9+L0x7fffffffd5b4*x**10+L0x7fffffffd5b6*x**11+
L0x7fffffffd5b8*x**12+L0x7fffffffd5ba*x**13+L0x7fffffffd5bc*x**14+
L0x7fffffffd5be*x**15,
out_poly63 =
L0x7fffffffd6a0*x** 0+L0x7fffffffd6a2*x** 1+L0x7fffffffd6a4*x** 2+
L0x7fffffffd6a6*x** 3+L0x7fffffffd6a8*x** 4+L0x7fffffffd6aa*x** 5+
L0x7fffffffd6ac*x** 6+L0x7fffffffd6ae*x** 7+L0x7fffffffd6b0*x** 8+
L0x7fffffffd6b2*x** 9+L0x7fffffffd6b4*x**10+L0x7fffffffd6b6*x**11+
L0x7fffffffd6b8*x**12+L0x7fffffffd6ba*x**13+L0x7fffffffd6bc*x**14+
L0x7fffffffd6be*x**15,
out_poly64 =
L0x7fffffffd7a0*x** 0+L0x7fffffffd7a2*x** 1+L0x7fffffffd7a4*x** 2+
L0x7fffffffd7a6*x** 3+L0x7fffffffd7a8*x** 4+L0x7fffffffd7aa*x** 5+
L0x7fffffffd7ac*x** 6+L0x7fffffffd7ae*x** 7+L0x7fffffffd7b0*x** 8+
L0x7fffffffd7b2*x** 9+L0x7fffffffd7b4*x**10+L0x7fffffffd7b6*x**11+
L0x7fffffffd7b8*x**12+L0x7fffffffd7ba*x**13+L0x7fffffffd7bc*x**14+
L0x7fffffffd7be*x**15,
out_poly65 =
L0x7fffffffd8a0*x** 0+L0x7fffffffd8a2*x** 1+L0x7fffffffd8a4*x** 2+
L0x7fffffffd8a6*x** 3+L0x7fffffffd8a8*x** 4+L0x7fffffffd8aa*x** 5+
L0x7fffffffd8ac*x** 6+L0x7fffffffd8ae*x** 7+L0x7fffffffd8b0*x** 8+
L0x7fffffffd8b2*x** 9+L0x7fffffffd8b4*x**10+L0x7fffffffd8b6*x**11+
L0x7fffffffd8b8*x**12+L0x7fffffffd8ba*x**13+L0x7fffffffd8bc*x**14+
L0x7fffffffd8be*x**15,
out_poly66 =
L0x7fffffffd9a0*x** 0+L0x7fffffffd9a2*x** 1+L0x7fffffffd9a4*x** 2+
L0x7fffffffd9a6*x** 3+L0x7fffffffd9a8*x** 4+L0x7fffffffd9aa*x** 5+
L0x7fffffffd9ac*x** 6+L0x7fffffffd9ae*x** 7+L0x7fffffffd9b0*x** 8+
L0x7fffffffd9b2*x** 9+L0x7fffffffd9b4*x**10+L0x7fffffffd9b6*x**11+
L0x7fffffffd9b8*x**12+L0x7fffffffd9ba*x**13+L0x7fffffffd9bc*x**14+
L0x7fffffffd9be*x**15,
out_poly67 =
L0x7fffffffdaa0*x** 0+L0x7fffffffdaa2*x** 1+L0x7fffffffdaa4*x** 2+
L0x7fffffffdaa6*x** 3+L0x7fffffffdaa8*x** 4+L0x7fffffffdaaa*x** 5+
L0x7fffffffdaac*x** 6+L0x7fffffffdaae*x** 7+L0x7fffffffdab0*x** 8+
L0x7fffffffdab2*x** 9+L0x7fffffffdab4*x**10+L0x7fffffffdab6*x**11+
L0x7fffffffdab8*x**12+L0x7fffffffdaba*x**13+L0x7fffffffdabc*x**14+
L0x7fffffffdabe*x**15
,
out_poly6 =
out_poly60*x**  0+out_poly61*x**128+out_poly62*x**256+out_poly63*x**384+
out_poly64*x**512+out_poly65*x**640+out_poly66*x**768+out_poly67*x**896]
&& true;


(**************** CUT  77 *****************)

ecut and [
eqmod (out_poly6) (8*shuf_poly60) [10753, x**128 - 1],
eqmod (out_poly6) (8*shuf_poly61) [10753, x**128 - 10752],
eqmod (out_poly6) (8*shuf_poly62) [10753, x**128 - 6264],
eqmod (out_poly6) (8*shuf_poly63) [10753, x**128 - 4489],
eqmod (out_poly6) (8*shuf_poly64) [10753, x**128 - 321],
eqmod (out_poly6) (8*shuf_poly65) [10753, x**128 - 10432],
eqmod (out_poly6) (8*shuf_poly66) [10753, x**128 - 10686],
eqmod (out_poly6) (8*shuf_poly67) [10753, x**128 - 67]
];


(**************** CUT  78 *****************)

ecut true;



(**************** shuffle poly 7 *****************)

ghost shuf_poly70@bit, shuf_poly71@bit, shuf_poly72@bit, shuf_poly73@bit,
      shuf_poly74@bit, shuf_poly75@bit, shuf_poly76@bit, shuf_poly77@bit : and [
shuf_poly70 =
L0x7fffffffd3c0*x** 0+L0x7fffffffd3c2*x** 1+L0x7fffffffd3c4*x** 2+
L0x7fffffffd3c6*x** 3+L0x7fffffffd3c8*x** 4+L0x7fffffffd3ca*x** 5+
L0x7fffffffd3cc*x** 6+L0x7fffffffd3ce*x** 7+L0x7fffffffd3d0*x** 8+
L0x7fffffffd3d2*x** 9+L0x7fffffffd3d4*x**10+L0x7fffffffd3d6*x**11+
L0x7fffffffd3d8*x**12+L0x7fffffffd3da*x**13+L0x7fffffffd3dc*x**14+
L0x7fffffffd3de*x**15,
shuf_poly71 =
L0x7fffffffd4c0*x** 0+L0x7fffffffd4c2*x** 1+L0x7fffffffd4c4*x** 2+
L0x7fffffffd4c6*x** 3+L0x7fffffffd4c8*x** 4+L0x7fffffffd4ca*x** 5+
L0x7fffffffd4cc*x** 6+L0x7fffffffd4ce*x** 7+L0x7fffffffd4d0*x** 8+
L0x7fffffffd4d2*x** 9+L0x7fffffffd4d4*x**10+L0x7fffffffd4d6*x**11+
L0x7fffffffd4d8*x**12+L0x7fffffffd4da*x**13+L0x7fffffffd4dc*x**14+
L0x7fffffffd4de*x**15,
shuf_poly72 =
L0x7fffffffd5c0*x** 0+L0x7fffffffd5c2*x** 1+L0x7fffffffd5c4*x** 2+
L0x7fffffffd5c6*x** 3+L0x7fffffffd5c8*x** 4+L0x7fffffffd5ca*x** 5+
L0x7fffffffd5cc*x** 6+L0x7fffffffd5ce*x** 7+L0x7fffffffd5d0*x** 8+
L0x7fffffffd5d2*x** 9+L0x7fffffffd5d4*x**10+L0x7fffffffd5d6*x**11+
L0x7fffffffd5d8*x**12+L0x7fffffffd5da*x**13+L0x7fffffffd5dc*x**14+
L0x7fffffffd5de*x**15,
shuf_poly73 =
L0x7fffffffd6c0*x** 0+L0x7fffffffd6c2*x** 1+L0x7fffffffd6c4*x** 2+
L0x7fffffffd6c6*x** 3+L0x7fffffffd6c8*x** 4+L0x7fffffffd6ca*x** 5+
L0x7fffffffd6cc*x** 6+L0x7fffffffd6ce*x** 7+L0x7fffffffd6d0*x** 8+
L0x7fffffffd6d2*x** 9+L0x7fffffffd6d4*x**10+L0x7fffffffd6d6*x**11+
L0x7fffffffd6d8*x**12+L0x7fffffffd6da*x**13+L0x7fffffffd6dc*x**14+
L0x7fffffffd6de*x**15,
shuf_poly74 =
L0x7fffffffd7c0*x** 0+L0x7fffffffd7c2*x** 1+L0x7fffffffd7c4*x** 2+
L0x7fffffffd7c6*x** 3+L0x7fffffffd7c8*x** 4+L0x7fffffffd7ca*x** 5+
L0x7fffffffd7cc*x** 6+L0x7fffffffd7ce*x** 7+L0x7fffffffd7d0*x** 8+
L0x7fffffffd7d2*x** 9+L0x7fffffffd7d4*x**10+L0x7fffffffd7d6*x**11+
L0x7fffffffd7d8*x**12+L0x7fffffffd7da*x**13+L0x7fffffffd7dc*x**14+
L0x7fffffffd7de*x**15,
shuf_poly75 =
L0x7fffffffd8c0*x** 0+L0x7fffffffd8c2*x** 1+L0x7fffffffd8c4*x** 2+
L0x7fffffffd8c6*x** 3+L0x7fffffffd8c8*x** 4+L0x7fffffffd8ca*x** 5+
L0x7fffffffd8cc*x** 6+L0x7fffffffd8ce*x** 7+L0x7fffffffd8d0*x** 8+
L0x7fffffffd8d2*x** 9+L0x7fffffffd8d4*x**10+L0x7fffffffd8d6*x**11+
L0x7fffffffd8d8*x**12+L0x7fffffffd8da*x**13+L0x7fffffffd8dc*x**14+
L0x7fffffffd8de*x**15,
shuf_poly76 =
L0x7fffffffd9c0*x** 0+L0x7fffffffd9c2*x** 1+L0x7fffffffd9c4*x** 2+
L0x7fffffffd9c6*x** 3+L0x7fffffffd9c8*x** 4+L0x7fffffffd9ca*x** 5+
L0x7fffffffd9cc*x** 6+L0x7fffffffd9ce*x** 7+L0x7fffffffd9d0*x** 8+
L0x7fffffffd9d2*x** 9+L0x7fffffffd9d4*x**10+L0x7fffffffd9d6*x**11+
L0x7fffffffd9d8*x**12+L0x7fffffffd9da*x**13+L0x7fffffffd9dc*x**14+
L0x7fffffffd9de*x**15,
shuf_poly77 =
L0x7fffffffdac0*x** 0+L0x7fffffffdac2*x** 1+L0x7fffffffdac4*x** 2+
L0x7fffffffdac6*x** 3+L0x7fffffffdac8*x** 4+L0x7fffffffdaca*x** 5+
L0x7fffffffdacc*x** 6+L0x7fffffffdace*x** 7+L0x7fffffffdad0*x** 8+
L0x7fffffffdad2*x** 9+L0x7fffffffdad4*x**10+L0x7fffffffdad6*x**11+
L0x7fffffffdad8*x**12+L0x7fffffffdada*x**13+L0x7fffffffdadc*x**14+
L0x7fffffffdade*x**15
] && true;



(* vmovdqa 0xe0(%rdi),%ymm4                        #! EA = L0x7fffffffd3c0; Value = 0xf027f53ff0070fc4; PC = 0x55555555e301 *)
mov ymm4_0 L0x7fffffffd3c0;
mov ymm4_1 L0x7fffffffd3c2;
mov ymm4_2 L0x7fffffffd3c4;
mov ymm4_3 L0x7fffffffd3c6;
mov ymm4_4 L0x7fffffffd3c8;
mov ymm4_5 L0x7fffffffd3ca;
mov ymm4_6 L0x7fffffffd3cc;
mov ymm4_7 L0x7fffffffd3ce;
mov ymm4_8 L0x7fffffffd3d0;
mov ymm4_9 L0x7fffffffd3d2;
mov ymm4_a L0x7fffffffd3d4;
mov ymm4_b L0x7fffffffd3d6;
mov ymm4_c L0x7fffffffd3d8;
mov ymm4_d L0x7fffffffd3da;
mov ymm4_e L0x7fffffffd3dc;
mov ymm4_f L0x7fffffffd3de;
(* vmovdqa 0x1e0(%rdi),%ymm5                       #! EA = L0x7fffffffd4c0; Value = 0xfae2f5710555fb96; PC = 0x55555555e309 *)
mov ymm5_0 L0x7fffffffd4c0;
mov ymm5_1 L0x7fffffffd4c2;
mov ymm5_2 L0x7fffffffd4c4;
mov ymm5_3 L0x7fffffffd4c6;
mov ymm5_4 L0x7fffffffd4c8;
mov ymm5_5 L0x7fffffffd4ca;
mov ymm5_6 L0x7fffffffd4cc;
mov ymm5_7 L0x7fffffffd4ce;
mov ymm5_8 L0x7fffffffd4d0;
mov ymm5_9 L0x7fffffffd4d2;
mov ymm5_a L0x7fffffffd4d4;
mov ymm5_b L0x7fffffffd4d6;
mov ymm5_c L0x7fffffffd4d8;
mov ymm5_d L0x7fffffffd4da;
mov ymm5_e L0x7fffffffd4dc;
mov ymm5_f L0x7fffffffd4de;
(* vmovdqa 0x2e0(%rdi),%ymm6                       #! EA = L0x7fffffffd5c0; Value = 0xeff9eef7fa910ac6; PC = 0x55555555e311 *)
mov ymm6_0 L0x7fffffffd5c0;
mov ymm6_1 L0x7fffffffd5c2;
mov ymm6_2 L0x7fffffffd5c4;
mov ymm6_3 L0x7fffffffd5c6;
mov ymm6_4 L0x7fffffffd5c8;
mov ymm6_5 L0x7fffffffd5ca;
mov ymm6_6 L0x7fffffffd5cc;
mov ymm6_7 L0x7fffffffd5ce;
mov ymm6_8 L0x7fffffffd5d0;
mov ymm6_9 L0x7fffffffd5d2;
mov ymm6_a L0x7fffffffd5d4;
mov ymm6_b L0x7fffffffd5d6;
mov ymm6_c L0x7fffffffd5d8;
mov ymm6_d L0x7fffffffd5da;
mov ymm6_e L0x7fffffffd5dc;
mov ymm6_f L0x7fffffffd5de;
(* vmovdqa 0x3e0(%rdi),%ymm7                       #! EA = L0x7fffffffd6c0; Value = 0x0ebffc310e41ea2a; PC = 0x55555555e319 *)
mov ymm7_0 L0x7fffffffd6c0;
mov ymm7_1 L0x7fffffffd6c2;
mov ymm7_2 L0x7fffffffd6c4;
mov ymm7_3 L0x7fffffffd6c6;
mov ymm7_4 L0x7fffffffd6c8;
mov ymm7_5 L0x7fffffffd6ca;
mov ymm7_6 L0x7fffffffd6cc;
mov ymm7_7 L0x7fffffffd6ce;
mov ymm7_8 L0x7fffffffd6d0;
mov ymm7_9 L0x7fffffffd6d2;
mov ymm7_a L0x7fffffffd6d4;
mov ymm7_b L0x7fffffffd6d6;
mov ymm7_c L0x7fffffffd6d8;
mov ymm7_d L0x7fffffffd6da;
mov ymm7_e L0x7fffffffd6dc;
mov ymm7_f L0x7fffffffd6de;
(* vmovdqa 0x4e0(%rdi),%ymm8                       #! EA = L0x7fffffffd7c0; Value = 0xede8fee014df0f05; PC = 0x55555555e321 *)
mov ymm8_0 L0x7fffffffd7c0;
mov ymm8_1 L0x7fffffffd7c2;
mov ymm8_2 L0x7fffffffd7c4;
mov ymm8_3 L0x7fffffffd7c6;
mov ymm8_4 L0x7fffffffd7c8;
mov ymm8_5 L0x7fffffffd7ca;
mov ymm8_6 L0x7fffffffd7cc;
mov ymm8_7 L0x7fffffffd7ce;
mov ymm8_8 L0x7fffffffd7d0;
mov ymm8_9 L0x7fffffffd7d2;
mov ymm8_a L0x7fffffffd7d4;
mov ymm8_b L0x7fffffffd7d6;
mov ymm8_c L0x7fffffffd7d8;
mov ymm8_d L0x7fffffffd7da;
mov ymm8_e L0x7fffffffd7dc;
mov ymm8_f L0x7fffffffd7de;
(* vmovdqa 0x5e0(%rdi),%ymm9                       #! EA = L0x7fffffffd8c0; Value = 0xfeb0ee0f103cfd71; PC = 0x55555555e329 *)
mov ymm9_0 L0x7fffffffd8c0;
mov ymm9_1 L0x7fffffffd8c2;
mov ymm9_2 L0x7fffffffd8c4;
mov ymm9_3 L0x7fffffffd8c6;
mov ymm9_4 L0x7fffffffd8c8;
mov ymm9_5 L0x7fffffffd8ca;
mov ymm9_6 L0x7fffffffd8cc;
mov ymm9_7 L0x7fffffffd8ce;
mov ymm9_8 L0x7fffffffd8d0;
mov ymm9_9 L0x7fffffffd8d2;
mov ymm9_a L0x7fffffffd8d4;
mov ymm9_b L0x7fffffffd8d6;
mov ymm9_c L0x7fffffffd8d8;
mov ymm9_d L0x7fffffffd8da;
mov ymm9_e L0x7fffffffd8dc;
mov ymm9_f L0x7fffffffd8de;
(* vmovdqa 0x6e0(%rdi),%ymm10                      #! EA = L0x7fffffffd9c0; Value = 0x0954fd3f02c7f1b5; PC = 0x55555555e331 *)
mov ymm10_0 L0x7fffffffd9c0;
mov ymm10_1 L0x7fffffffd9c2;
mov ymm10_2 L0x7fffffffd9c4;
mov ymm10_3 L0x7fffffffd9c6;
mov ymm10_4 L0x7fffffffd9c8;
mov ymm10_5 L0x7fffffffd9ca;
mov ymm10_6 L0x7fffffffd9cc;
mov ymm10_7 L0x7fffffffd9ce;
mov ymm10_8 L0x7fffffffd9d0;
mov ymm10_9 L0x7fffffffd9d2;
mov ymm10_a L0x7fffffffd9d4;
mov ymm10_b L0x7fffffffd9d6;
mov ymm10_c L0x7fffffffd9d8;
mov ymm10_d L0x7fffffffd9da;
mov ymm10_e L0x7fffffffd9dc;
mov ymm10_f L0x7fffffffd9de;
(* vmovdqa 0x7e0(%rdi),%ymm11                      #! EA = L0x7fffffffdac0; Value = 0xf3d5ebaa004d021f; PC = 0x55555555e339 *)
mov ymm11_0 L0x7fffffffdac0;
mov ymm11_1 L0x7fffffffdac2;
mov ymm11_2 L0x7fffffffdac4;
mov ymm11_3 L0x7fffffffdac6;
mov ymm11_4 L0x7fffffffdac8;
mov ymm11_5 L0x7fffffffdaca;
mov ymm11_6 L0x7fffffffdacc;
mov ymm11_7 L0x7fffffffdace;
mov ymm11_8 L0x7fffffffdad0;
mov ymm11_9 L0x7fffffffdad2;
mov ymm11_a L0x7fffffffdad4;
mov ymm11_b L0x7fffffffdad6;
mov ymm11_c L0x7fffffffdad8;
mov ymm11_d L0x7fffffffdada;
mov ymm11_e L0x7fffffffdadc;
mov ymm11_f L0x7fffffffdade;
(* vpaddw %ymm5,%ymm4,%ymm3                        #! PC = 0x55555555e341 *)
add ymm3_0 ymm4_0 ymm5_0;
add ymm3_1 ymm4_1 ymm5_1;
add ymm3_2 ymm4_2 ymm5_2;
add ymm3_3 ymm4_3 ymm5_3;
add ymm3_4 ymm4_4 ymm5_4;
add ymm3_5 ymm4_5 ymm5_5;
add ymm3_6 ymm4_6 ymm5_6;
add ymm3_7 ymm4_7 ymm5_7;
add ymm3_8 ymm4_8 ymm5_8;
add ymm3_9 ymm4_9 ymm5_9;
add ymm3_a ymm4_a ymm5_a;
add ymm3_b ymm4_b ymm5_b;
add ymm3_c ymm4_c ymm5_c;
add ymm3_d ymm4_d ymm5_d;
add ymm3_e ymm4_e ymm5_e;
add ymm3_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555e345 *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm7,%ymm6,%ymm4                        #! PC = 0x55555555e349 *)
add ymm4_0 ymm6_0 ymm7_0;
add ymm4_1 ymm6_1 ymm7_1;
add ymm4_2 ymm6_2 ymm7_2;
add ymm4_3 ymm6_3 ymm7_3;
add ymm4_4 ymm6_4 ymm7_4;
add ymm4_5 ymm6_5 ymm7_5;
add ymm4_6 ymm6_6 ymm7_6;
add ymm4_7 ymm6_7 ymm7_7;
add ymm4_8 ymm6_8 ymm7_8;
add ymm4_9 ymm6_9 ymm7_9;
add ymm4_a ymm6_a ymm7_a;
add ymm4_b ymm6_b ymm7_b;
add ymm4_c ymm6_c ymm7_c;
add ymm4_d ymm6_d ymm7_d;
add ymm4_e ymm6_e ymm7_e;
add ymm4_f ymm6_f ymm7_f;
(* vpsubw %ymm7,%ymm6,%ymm7                        #! PC = 0x55555555e34d *)
sub ymm7_0 ymm6_0 ymm7_0;
sub ymm7_1 ymm6_1 ymm7_1;
sub ymm7_2 ymm6_2 ymm7_2;
sub ymm7_3 ymm6_3 ymm7_3;
sub ymm7_4 ymm6_4 ymm7_4;
sub ymm7_5 ymm6_5 ymm7_5;
sub ymm7_6 ymm6_6 ymm7_6;
sub ymm7_7 ymm6_7 ymm7_7;
sub ymm7_8 ymm6_8 ymm7_8;
sub ymm7_9 ymm6_9 ymm7_9;
sub ymm7_a ymm6_a ymm7_a;
sub ymm7_b ymm6_b ymm7_b;
sub ymm7_c ymm6_c ymm7_c;
sub ymm7_d ymm6_d ymm7_d;
sub ymm7_e ymm6_e ymm7_e;
sub ymm7_f ymm6_f ymm7_f;
(* vpaddw %ymm9,%ymm8,%ymm6                        #! PC = 0x55555555e351 *)
add ymm6_0 ymm8_0 ymm9_0;
add ymm6_1 ymm8_1 ymm9_1;
add ymm6_2 ymm8_2 ymm9_2;
add ymm6_3 ymm8_3 ymm9_3;
add ymm6_4 ymm8_4 ymm9_4;
add ymm6_5 ymm8_5 ymm9_5;
add ymm6_6 ymm8_6 ymm9_6;
add ymm6_7 ymm8_7 ymm9_7;
add ymm6_8 ymm8_8 ymm9_8;
add ymm6_9 ymm8_9 ymm9_9;
add ymm6_a ymm8_a ymm9_a;
add ymm6_b ymm8_b ymm9_b;
add ymm6_c ymm8_c ymm9_c;
add ymm6_d ymm8_d ymm9_d;
add ymm6_e ymm8_e ymm9_e;
add ymm6_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x55555555e356 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpaddw %ymm11,%ymm10,%ymm8                      #! PC = 0x55555555e35b *)
add ymm8_0 ymm10_0 ymm11_0;
add ymm8_1 ymm10_1 ymm11_1;
add ymm8_2 ymm10_2 ymm11_2;
add ymm8_3 ymm10_3 ymm11_3;
add ymm8_4 ymm10_4 ymm11_4;
add ymm8_5 ymm10_5 ymm11_5;
add ymm8_6 ymm10_6 ymm11_6;
add ymm8_7 ymm10_7 ymm11_7;
add ymm8_8 ymm10_8 ymm11_8;
add ymm8_9 ymm10_9 ymm11_9;
add ymm8_a ymm10_a ymm11_a;
add ymm8_b ymm10_b ymm11_b;
add ymm8_c ymm10_c ymm11_c;
add ymm8_d ymm10_d ymm11_d;
add ymm8_e ymm10_e ymm11_e;
add ymm8_f ymm10_f ymm11_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555e360 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555e365 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555e36e *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm7,%ymm10                      #! PC = 0x55555555e377 *)
smull mulHymm7_0 mulL_0 ymm1_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm1_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm1_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm1_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm1_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm1_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm1_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm1_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm1_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm1_9 ymm7_9;
smull mulHymm7_a mulL_a ymm1_a ymm7_a;
smull mulHymm7_b mulL_b ymm1_b ymm7_b;
smull mulHymm7_c mulL_c ymm1_c ymm7_c;
smull mulHymm7_d mulL_d ymm1_d ymm7_d;
smull mulHymm7_e mulL_e ymm1_e ymm7_e;
smull mulHymm7_f mulL_f ymm1_f ymm7_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm7,%ymm7                       #! PC = 0x55555555e37b *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm2_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm2_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm2_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm2_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm2_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm2_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm2_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm2_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm2_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm2_9;
smull mulH_a mulLymm7_a ymm7_a ymm2_a;
smull mulH_b mulLymm7_b ymm7_b ymm2_b;
smull mulH_c mulLymm7_c ymm7_c ymm2_c;
smull mulH_d mulLymm7_d ymm7_d ymm2_d;
smull mulH_e mulLymm7_e ymm7_e ymm2_e;
smull mulH_f mulLymm7_f ymm7_f ymm2_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e37f *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm7                       #! PC = 0x55555555e383 *)
sub ymm7_0 ymm10_0 ymm7_0;
sub ymm7_1 ymm10_1 ymm7_1;
sub ymm7_2 ymm10_2 ymm7_2;
sub ymm7_3 ymm10_3 ymm7_3;
sub ymm7_4 ymm10_4 ymm7_4;
sub ymm7_5 ymm10_5 ymm7_5;
sub ymm7_6 ymm10_6 ymm7_6;
sub ymm7_7 ymm10_7 ymm7_7;
sub ymm7_8 ymm10_8 ymm7_8;
sub ymm7_9 ymm10_9 ymm7_9;
sub ymm7_a ymm10_a ymm7_a;
sub ymm7_b ymm10_b ymm7_b;
sub ymm7_c ymm10_c ymm7_c;
sub ymm7_d ymm10_d ymm7_d;
sub ymm7_e ymm10_e ymm7_e;
sub ymm7_f ymm10_f ymm7_f;
(* vpbroadcastw 0x106(%rdx),%ymm1                  #! EA = L0x555555561226; Value = 0x6f65ad9a276d0198; PC = 0x55555555e387 *)
mov ymm1_0 L0x555555561226;
mov ymm1_1 L0x555555561226;
mov ymm1_2 L0x555555561226;
mov ymm1_3 L0x555555561226;
mov ymm1_4 L0x555555561226;
mov ymm1_5 L0x555555561226;
mov ymm1_6 L0x555555561226;
mov ymm1_7 L0x555555561226;
mov ymm1_8 L0x555555561226;
mov ymm1_9 L0x555555561226;
mov ymm1_a L0x555555561226;
mov ymm1_b L0x555555561226;
mov ymm1_c L0x555555561226;
mov ymm1_d L0x555555561226;
mov ymm1_e L0x555555561226;
mov ymm1_f L0x555555561226;
(* vpbroadcastw 0x306(%rdx),%ymm2                  #! EA = L0x555555561426; Value = 0x0165f19a096df198; PC = 0x55555555e390 *)
mov ymm2_0 L0x555555561426;
mov ymm2_1 L0x555555561426;
mov ymm2_2 L0x555555561426;
mov ymm2_3 L0x555555561426;
mov ymm2_4 L0x555555561426;
mov ymm2_5 L0x555555561426;
mov ymm2_6 L0x555555561426;
mov ymm2_7 L0x555555561426;
mov ymm2_8 L0x555555561426;
mov ymm2_9 L0x555555561426;
mov ymm2_a L0x555555561426;
mov ymm2_b L0x555555561426;
mov ymm2_c L0x555555561426;
mov ymm2_d L0x555555561426;
mov ymm2_e L0x555555561426;
mov ymm2_f L0x555555561426;
(* vpmullw %ymm1,%ymm9,%ymm10                      #! PC = 0x55555555e399 *)
smull mulHymm9_0 mulL_0 ymm1_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm1_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm1_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm1_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm1_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm1_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm1_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm1_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm1_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm1_9 ymm9_9;
smull mulHymm9_a mulL_a ymm1_a ymm9_a;
smull mulHymm9_b mulL_b ymm1_b ymm9_b;
smull mulHymm9_c mulL_c ymm1_c ymm9_c;
smull mulHymm9_d mulL_d ymm1_d ymm9_d;
smull mulHymm9_e mulL_e ymm1_e ymm9_e;
smull mulHymm9_f mulL_f ymm1_f ymm9_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm9,%ymm9                       #! PC = 0x55555555e39d *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm2_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm2_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm2_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm2_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm2_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm2_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm2_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm2_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm2_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm2_9;
smull mulH_a mulLymm9_a ymm9_a ymm2_a;
smull mulH_b mulLymm9_b ymm9_b ymm2_b;
smull mulH_c mulLymm9_c ymm9_c ymm2_c;
smull mulH_d mulLymm9_d ymm9_d ymm2_d;
smull mulH_e mulLymm9_e ymm9_e ymm2_e;
smull mulH_f mulLymm9_f ymm9_f ymm2_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e3a1 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm9_0 2**16 && true;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm9_1 2**16 && true;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm9_2 2**16 && true;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm9_3 2**16 && true;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm9_4 2**16 && true;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm9_5 2**16 && true;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm9_6 2**16 && true;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm9_7 2**16 && true;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm9_8 2**16 && true;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm9_9 2**16 && true;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm9_a 2**16 && true;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm9_b 2**16 && true;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm9_c 2**16 && true;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm9_d 2**16 && true;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm9_e 2**16 && true;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm9_f 2**16 && true;
assume red_f = mulLymm9_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm9                       #! PC = 0x55555555e3a5 *)
sub ymm9_0 ymm10_0 ymm9_0;
sub ymm9_1 ymm10_1 ymm9_1;
sub ymm9_2 ymm10_2 ymm9_2;
sub ymm9_3 ymm10_3 ymm9_3;
sub ymm9_4 ymm10_4 ymm9_4;
sub ymm9_5 ymm10_5 ymm9_5;
sub ymm9_6 ymm10_6 ymm9_6;
sub ymm9_7 ymm10_7 ymm9_7;
sub ymm9_8 ymm10_8 ymm9_8;
sub ymm9_9 ymm10_9 ymm9_9;
sub ymm9_a ymm10_a ymm9_a;
sub ymm9_b ymm10_b ymm9_b;
sub ymm9_c ymm10_c ymm9_c;
sub ymm9_d ymm10_d ymm9_d;
sub ymm9_e ymm10_e ymm9_e;
sub ymm9_f ymm10_f ymm9_f;
(* vpbroadcastw 0x104(%rdx),%ymm1                  #! EA = L0x555555561224; Value = 0xad9a276d0198f85c; PC = 0x55555555e3aa *)
mov ymm1_0 L0x555555561224;
mov ymm1_1 L0x555555561224;
mov ymm1_2 L0x555555561224;
mov ymm1_3 L0x555555561224;
mov ymm1_4 L0x555555561224;
mov ymm1_5 L0x555555561224;
mov ymm1_6 L0x555555561224;
mov ymm1_7 L0x555555561224;
mov ymm1_8 L0x555555561224;
mov ymm1_9 L0x555555561224;
mov ymm1_a L0x555555561224;
mov ymm1_b L0x555555561224;
mov ymm1_c L0x555555561224;
mov ymm1_d L0x555555561224;
mov ymm1_e L0x555555561224;
mov ymm1_f L0x555555561224;
(* vpbroadcastw 0x304(%rdx),%ymm2                  #! EA = L0x555555561424; Value = 0xf19a096df198105c; PC = 0x55555555e3b3 *)
mov ymm2_0 L0x555555561424;
mov ymm2_1 L0x555555561424;
mov ymm2_2 L0x555555561424;
mov ymm2_3 L0x555555561424;
mov ymm2_4 L0x555555561424;
mov ymm2_5 L0x555555561424;
mov ymm2_6 L0x555555561424;
mov ymm2_7 L0x555555561424;
mov ymm2_8 L0x555555561424;
mov ymm2_9 L0x555555561424;
mov ymm2_a L0x555555561424;
mov ymm2_b L0x555555561424;
mov ymm2_c L0x555555561424;
mov ymm2_d L0x555555561424;
mov ymm2_e L0x555555561424;
mov ymm2_f L0x555555561424;
(* vpmullw %ymm1,%ymm11,%ymm10                     #! PC = 0x55555555e3bc *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555e3c0 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e3c4 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm11,%ymm10,%ymm11                     #! PC = 0x55555555e3c8 *)
sub ymm11_0 ymm10_0 ymm11_0;
sub ymm11_1 ymm10_1 ymm11_1;
sub ymm11_2 ymm10_2 ymm11_2;
sub ymm11_3 ymm10_3 ymm11_3;
sub ymm11_4 ymm10_4 ymm11_4;
sub ymm11_5 ymm10_5 ymm11_5;
sub ymm11_6 ymm10_6 ymm11_6;
sub ymm11_7 ymm10_7 ymm11_7;
sub ymm11_8 ymm10_8 ymm11_8;
sub ymm11_9 ymm10_9 ymm11_9;
sub ymm11_a ymm10_a ymm11_a;
sub ymm11_b ymm10_b ymm11_b;
sub ymm11_c ymm10_c ymm11_c;
sub ymm11_d ymm10_d ymm11_d;
sub ymm11_e ymm10_e ymm11_e;
sub ymm11_f ymm10_f ymm11_f;
(* vpmullw %ymm12,%ymm3,%ymm10                     #! PC = 0x55555555e3cd *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e3d2 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555e3d7 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm10,%ymm3,%ymm3                       #! PC = 0x55555555e3db *)
sub ymm3_0 ymm3_0 ymm10_0;
sub ymm3_1 ymm3_1 ymm10_1;
sub ymm3_2 ymm3_2 ymm10_2;
sub ymm3_3 ymm3_3 ymm10_3;
sub ymm3_4 ymm3_4 ymm10_4;
sub ymm3_5 ymm3_5 ymm10_5;
sub ymm3_6 ymm3_6 ymm10_6;
sub ymm3_7 ymm3_7 ymm10_7;
sub ymm3_8 ymm3_8 ymm10_8;
sub ymm3_9 ymm3_9 ymm10_9;
sub ymm3_a ymm3_a ymm10_a;
sub ymm3_b ymm3_b ymm10_b;
sub ymm3_c ymm3_c ymm10_c;
sub ymm3_d ymm3_d ymm10_d;
sub ymm3_e ymm3_e ymm10_e;
sub ymm3_f ymm3_f ymm10_f;
(* vpaddw %ymm4,%ymm3,%ymm10                       #! PC = 0x55555555e3e0 *)
add ymm10_0 ymm3_0 ymm4_0;
add ymm10_1 ymm3_1 ymm4_1;
add ymm10_2 ymm3_2 ymm4_2;
add ymm10_3 ymm3_3 ymm4_3;
add ymm10_4 ymm3_4 ymm4_4;
add ymm10_5 ymm3_5 ymm4_5;
add ymm10_6 ymm3_6 ymm4_6;
add ymm10_7 ymm3_7 ymm4_7;
add ymm10_8 ymm3_8 ymm4_8;
add ymm10_9 ymm3_9 ymm4_9;
add ymm10_a ymm3_a ymm4_a;
add ymm10_b ymm3_b ymm4_b;
add ymm10_c ymm3_c ymm4_c;
add ymm10_d ymm3_d ymm4_d;
add ymm10_e ymm3_e ymm4_e;
add ymm10_f ymm3_f ymm4_f;
(* vpsubw %ymm4,%ymm3,%ymm4                        #! PC = 0x55555555e3e4 *)
sub ymm4_0 ymm3_0 ymm4_0;
sub ymm4_1 ymm3_1 ymm4_1;
sub ymm4_2 ymm3_2 ymm4_2;
sub ymm4_3 ymm3_3 ymm4_3;
sub ymm4_4 ymm3_4 ymm4_4;
sub ymm4_5 ymm3_5 ymm4_5;
sub ymm4_6 ymm3_6 ymm4_6;
sub ymm4_7 ymm3_7 ymm4_7;
sub ymm4_8 ymm3_8 ymm4_8;
sub ymm4_9 ymm3_9 ymm4_9;
sub ymm4_a ymm3_a ymm4_a;
sub ymm4_b ymm3_b ymm4_b;
sub ymm4_c ymm3_c ymm4_c;
sub ymm4_d ymm3_d ymm4_d;
sub ymm4_e ymm3_e ymm4_e;
sub ymm4_f ymm3_f ymm4_f;
(* vpaddw %ymm7,%ymm5,%ymm3                        #! PC = 0x55555555e3e8 *)
add ymm3_0 ymm5_0 ymm7_0;
add ymm3_1 ymm5_1 ymm7_1;
add ymm3_2 ymm5_2 ymm7_2;
add ymm3_3 ymm5_3 ymm7_3;
add ymm3_4 ymm5_4 ymm7_4;
add ymm3_5 ymm5_5 ymm7_5;
add ymm3_6 ymm5_6 ymm7_6;
add ymm3_7 ymm5_7 ymm7_7;
add ymm3_8 ymm5_8 ymm7_8;
add ymm3_9 ymm5_9 ymm7_9;
add ymm3_a ymm5_a ymm7_a;
add ymm3_b ymm5_b ymm7_b;
add ymm3_c ymm5_c ymm7_c;
add ymm3_d ymm5_d ymm7_d;
add ymm3_e ymm5_e ymm7_e;
add ymm3_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555e3ec *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm8,%ymm6,%ymm5                        #! PC = 0x55555555e3f0 *)
add ymm5_0 ymm6_0 ymm8_0;
add ymm5_1 ymm6_1 ymm8_1;
add ymm5_2 ymm6_2 ymm8_2;
add ymm5_3 ymm6_3 ymm8_3;
add ymm5_4 ymm6_4 ymm8_4;
add ymm5_5 ymm6_5 ymm8_5;
add ymm5_6 ymm6_6 ymm8_6;
add ymm5_7 ymm6_7 ymm8_7;
add ymm5_8 ymm6_8 ymm8_8;
add ymm5_9 ymm6_9 ymm8_9;
add ymm5_a ymm6_a ymm8_a;
add ymm5_b ymm6_b ymm8_b;
add ymm5_c ymm6_c ymm8_c;
add ymm5_d ymm6_d ymm8_d;
add ymm5_e ymm6_e ymm8_e;
add ymm5_f ymm6_f ymm8_f;
(* vpsubw %ymm8,%ymm6,%ymm8                        #! PC = 0x55555555e3f5 *)
sub ymm8_0 ymm6_0 ymm8_0;
sub ymm8_1 ymm6_1 ymm8_1;
sub ymm8_2 ymm6_2 ymm8_2;
sub ymm8_3 ymm6_3 ymm8_3;
sub ymm8_4 ymm6_4 ymm8_4;
sub ymm8_5 ymm6_5 ymm8_5;
sub ymm8_6 ymm6_6 ymm8_6;
sub ymm8_7 ymm6_7 ymm8_7;
sub ymm8_8 ymm6_8 ymm8_8;
sub ymm8_9 ymm6_9 ymm8_9;
sub ymm8_a ymm6_a ymm8_a;
sub ymm8_b ymm6_b ymm8_b;
sub ymm8_c ymm6_c ymm8_c;
sub ymm8_d ymm6_d ymm8_d;
sub ymm8_e ymm6_e ymm8_e;
sub ymm8_f ymm6_f ymm8_f;
(* vpaddw %ymm11,%ymm9,%ymm6                       #! PC = 0x55555555e3fa *)
add ymm6_0 ymm9_0 ymm11_0;
add ymm6_1 ymm9_1 ymm11_1;
add ymm6_2 ymm9_2 ymm11_2;
add ymm6_3 ymm9_3 ymm11_3;
add ymm6_4 ymm9_4 ymm11_4;
add ymm6_5 ymm9_5 ymm11_5;
add ymm6_6 ymm9_6 ymm11_6;
add ymm6_7 ymm9_7 ymm11_7;
add ymm6_8 ymm9_8 ymm11_8;
add ymm6_9 ymm9_9 ymm11_9;
add ymm6_a ymm9_a ymm11_a;
add ymm6_b ymm9_b ymm11_b;
add ymm6_c ymm9_c ymm11_c;
add ymm6_d ymm9_d ymm11_d;
add ymm6_e ymm9_e ymm11_e;
add ymm6_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e3ff *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpbroadcastw 0x102(%rdx),%ymm1                  #! EA = L0x555555561222; Value = 0x276d0198f85c6adf; PC = 0x55555555e404 *)
mov ymm1_0 L0x555555561222;
mov ymm1_1 L0x555555561222;
mov ymm1_2 L0x555555561222;
mov ymm1_3 L0x555555561222;
mov ymm1_4 L0x555555561222;
mov ymm1_5 L0x555555561222;
mov ymm1_6 L0x555555561222;
mov ymm1_7 L0x555555561222;
mov ymm1_8 L0x555555561222;
mov ymm1_9 L0x555555561222;
mov ymm1_a L0x555555561222;
mov ymm1_b L0x555555561222;
mov ymm1_c L0x555555561222;
mov ymm1_d L0x555555561222;
mov ymm1_e L0x555555561222;
mov ymm1_f L0x555555561222;
(* vpbroadcastw 0x302(%rdx),%ymm2                  #! EA = L0x555555561422; Value = 0x096df198105c00df; PC = 0x55555555e40d *)
mov ymm2_0 L0x555555561422;
mov ymm2_1 L0x555555561422;
mov ymm2_2 L0x555555561422;
mov ymm2_3 L0x555555561422;
mov ymm2_4 L0x555555561422;
mov ymm2_5 L0x555555561422;
mov ymm2_6 L0x555555561422;
mov ymm2_7 L0x555555561422;
mov ymm2_8 L0x555555561422;
mov ymm2_9 L0x555555561422;
mov ymm2_a L0x555555561422;
mov ymm2_b L0x555555561422;
mov ymm2_c L0x555555561422;
mov ymm2_d L0x555555561422;
mov ymm2_e L0x555555561422;
mov ymm2_f L0x555555561422;
(* vpmullw %ymm1,%ymm8,%ymm9                       #! PC = 0x55555555e416 *)
smull mulHymm8_0 mulL_0 ymm1_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm1_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm1_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm1_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm1_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm1_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm1_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm1_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm1_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm1_9 ymm8_9;
smull mulHymm8_a mulL_a ymm1_a ymm8_a;
smull mulHymm8_b mulL_b ymm1_b ymm8_b;
smull mulHymm8_c mulL_c ymm1_c ymm8_c;
smull mulHymm8_d mulL_d ymm1_d ymm8_d;
smull mulHymm8_e mulL_e ymm1_e ymm8_e;
smull mulHymm8_f mulL_f ymm1_f ymm8_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm8,%ymm8                       #! PC = 0x55555555e41a *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm2_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm2_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm2_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm2_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm2_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm2_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm2_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm2_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm2_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm2_9;
smull mulH_a mulLymm8_a ymm8_a ymm2_a;
smull mulH_b mulLymm8_b ymm8_b ymm2_b;
smull mulH_c mulLymm8_c ymm8_c ymm2_c;
smull mulH_d mulLymm8_d ymm8_d ymm2_d;
smull mulH_e mulLymm8_e ymm8_e ymm2_e;
smull mulH_f mulLymm8_f ymm8_f ymm2_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e41e *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm8_0 2**16 && true;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm8_1 2**16 && true;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm8_2 2**16 && true;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm8_3 2**16 && true;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm8_4 2**16 && true;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm8_5 2**16 && true;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm8_6 2**16 && true;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm8_7 2**16 && true;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm8_8 2**16 && true;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm8_9 2**16 && true;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm8_a 2**16 && true;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm8_b 2**16 && true;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm8_c 2**16 && true;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm8_d 2**16 && true;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm8_e 2**16 && true;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm8_f 2**16 && true;
assume red_f = mulLymm8_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm8,%ymm9,%ymm8                        #! PC = 0x55555555e422 *)
sub ymm8_0 ymm9_0 ymm8_0;
sub ymm8_1 ymm9_1 ymm8_1;
sub ymm8_2 ymm9_2 ymm8_2;
sub ymm8_3 ymm9_3 ymm8_3;
sub ymm8_4 ymm9_4 ymm8_4;
sub ymm8_5 ymm9_5 ymm8_5;
sub ymm8_6 ymm9_6 ymm8_6;
sub ymm8_7 ymm9_7 ymm8_7;
sub ymm8_8 ymm9_8 ymm8_8;
sub ymm8_9 ymm9_9 ymm8_9;
sub ymm8_a ymm9_a ymm8_a;
sub ymm8_b ymm9_b ymm8_b;
sub ymm8_c ymm9_c ymm8_c;
sub ymm8_d ymm9_d ymm8_d;
sub ymm8_e ymm9_e ymm8_e;
sub ymm8_f ymm9_f ymm8_f;
(* vpmullw %ymm1,%ymm11,%ymm9                      #! PC = 0x55555555e427 *)
smull mulHymm11_0 mulL_0 ymm1_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm1_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm1_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm1_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm1_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm1_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm1_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm1_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm1_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm1_9 ymm11_9;
smull mulHymm11_a mulL_a ymm1_a ymm11_a;
smull mulHymm11_b mulL_b ymm1_b ymm11_b;
smull mulHymm11_c mulL_c ymm1_c ymm11_c;
smull mulHymm11_d mulL_d ymm1_d ymm11_d;
smull mulHymm11_e mulL_e ymm1_e ymm11_e;
smull mulHymm11_f mulL_f ymm1_f ymm11_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm11,%ymm11                     #! PC = 0x55555555e42b *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm2_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm2_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm2_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm2_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm2_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm2_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm2_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm2_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm2_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm2_9;
smull mulH_a mulLymm11_a ymm11_a ymm2_a;
smull mulH_b mulLymm11_b ymm11_b ymm2_b;
smull mulH_c mulLymm11_c ymm11_c ymm2_c;
smull mulH_d mulLymm11_d ymm11_d ymm2_d;
smull mulH_e mulLymm11_e ymm11_e ymm2_e;
smull mulH_f mulLymm11_f ymm11_f ymm2_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e42f *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm11_0 2**16 && true;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm11_1 2**16 && true;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm11_2 2**16 && true;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm11_3 2**16 && true;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm11_4 2**16 && true;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm11_5 2**16 && true;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm11_6 2**16 && true;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm11_7 2**16 && true;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm11_8 2**16 && true;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm11_9 2**16 && true;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm11_a 2**16 && true;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm11_b 2**16 && true;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm11_c 2**16 && true;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm11_d 2**16 && true;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm11_e 2**16 && true;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm11_f 2**16 && true;
assume red_f = mulLymm11_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x55555555e433 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpmullw %ymm12,%ymm4,%ymm9                      #! PC = 0x55555555e438 *)
smull mulHymm4_0 mulL_0 ymm12_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm12_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm12_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm12_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm12_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm12_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm12_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm12_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm12_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm12_9 ymm4_9;
smull mulHymm4_a mulL_a ymm12_a ymm4_a;
smull mulHymm4_b mulL_b ymm12_b ymm4_b;
smull mulHymm4_c mulL_c ymm12_c ymm4_c;
smull mulHymm4_d mulL_d ymm12_d ymm4_d;
smull mulHymm4_e mulL_e ymm12_e ymm4_e;
smull mulHymm4_f mulL_f ymm12_f ymm4_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm4,%ymm4                      #! PC = 0x55555555e43d *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm13_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm13_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm13_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm13_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm13_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm13_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm13_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm13_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm13_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm13_9;
smull mulH_a mulLymm4_a ymm4_a ymm13_a;
smull mulH_b mulLymm4_b ymm4_b ymm13_b;
smull mulH_c mulLymm4_c ymm4_c ymm13_c;
smull mulH_d mulLymm4_d ymm4_d ymm13_d;
smull mulH_e mulLymm4_e ymm4_e ymm13_e;
smull mulH_f mulLymm4_f ymm4_f ymm13_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e442 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm4_0 2**16 && true;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm4_1 2**16 && true;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm4_2 2**16 && true;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm4_3 2**16 && true;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm4_4 2**16 && true;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm4_5 2**16 && true;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm4_6 2**16 && true;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm4_7 2**16 && true;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm4_8 2**16 && true;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm4_9 2**16 && true;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm4_a 2**16 && true;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm4_b 2**16 && true;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm4_c 2**16 && true;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm4_d 2**16 && true;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm4_e 2**16 && true;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm4_f 2**16 && true;
assume red_f = mulLymm4_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm4,%ymm4                        #! PC = 0x55555555e446 *)
sub ymm4_0 ymm4_0 ymm9_0;
sub ymm4_1 ymm4_1 ymm9_1;
sub ymm4_2 ymm4_2 ymm9_2;
sub ymm4_3 ymm4_3 ymm9_3;
sub ymm4_4 ymm4_4 ymm9_4;
sub ymm4_5 ymm4_5 ymm9_5;
sub ymm4_6 ymm4_6 ymm9_6;
sub ymm4_7 ymm4_7 ymm9_7;
sub ymm4_8 ymm4_8 ymm9_8;
sub ymm4_9 ymm4_9 ymm9_9;
sub ymm4_a ymm4_a ymm9_a;
sub ymm4_b ymm4_b ymm9_b;
sub ymm4_c ymm4_c ymm9_c;
sub ymm4_d ymm4_d ymm9_d;
sub ymm4_e ymm4_e ymm9_e;
sub ymm4_f ymm4_f ymm9_f;
(* vpmullw %ymm12,%ymm10,%ymm9                     #! PC = 0x55555555e44b *)
smull mulHymm10_0 mulL_0 ymm12_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm12_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm12_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm12_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm12_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm12_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm12_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm12_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm12_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm12_9 ymm10_9;
smull mulHymm10_a mulL_a ymm12_a ymm10_a;
smull mulHymm10_b mulL_b ymm12_b ymm10_b;
smull mulHymm10_c mulL_c ymm12_c ymm10_c;
smull mulHymm10_d mulL_d ymm12_d ymm10_d;
smull mulHymm10_e mulL_e ymm12_e ymm10_e;
smull mulHymm10_f mulL_f ymm12_f ymm10_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm10,%ymm10                    #! PC = 0x55555555e450 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm13_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm13_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm13_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm13_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm13_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm13_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm13_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm13_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm13_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm13_9;
smull mulH_a mulLymm10_a ymm10_a ymm13_a;
smull mulH_b mulLymm10_b ymm10_b ymm13_b;
smull mulH_c mulLymm10_c ymm10_c ymm13_c;
smull mulH_d mulLymm10_d ymm10_d ymm13_d;
smull mulH_e mulLymm10_e ymm10_e ymm13_e;
smull mulH_f mulLymm10_f ymm10_f ymm13_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e455 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm10_0 2**16 && true;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm10_1 2**16 && true;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm10_2 2**16 && true;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm10_3 2**16 && true;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm10_4 2**16 && true;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm10_5 2**16 && true;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm10_6 2**16 && true;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm10_7 2**16 && true;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm10_8 2**16 && true;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm10_9 2**16 && true;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm10_a 2**16 && true;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm10_b 2**16 && true;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm10_c 2**16 && true;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm10_d 2**16 && true;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm10_e 2**16 && true;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm10_f 2**16 && true;
assume red_f = mulLymm10_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm10,%ymm10                      #! PC = 0x55555555e459 *)
sub ymm10_0 ymm10_0 ymm9_0;
sub ymm10_1 ymm10_1 ymm9_1;
sub ymm10_2 ymm10_2 ymm9_2;
sub ymm10_3 ymm10_3 ymm9_3;
sub ymm10_4 ymm10_4 ymm9_4;
sub ymm10_5 ymm10_5 ymm9_5;
sub ymm10_6 ymm10_6 ymm9_6;
sub ymm10_7 ymm10_7 ymm9_7;
sub ymm10_8 ymm10_8 ymm9_8;
sub ymm10_9 ymm10_9 ymm9_9;
sub ymm10_a ymm10_a ymm9_a;
sub ymm10_b ymm10_b ymm9_b;
sub ymm10_c ymm10_c ymm9_c;
sub ymm10_d ymm10_d ymm9_d;
sub ymm10_e ymm10_e ymm9_e;
sub ymm10_f ymm10_f ymm9_f;
(* vpmullw %ymm12,%ymm7,%ymm9                      #! PC = 0x55555555e45e *)
smull mulHymm7_0 mulL_0 ymm12_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm12_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm12_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm12_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm12_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm12_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm12_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm12_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm12_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm12_9 ymm7_9;
smull mulHymm7_a mulL_a ymm12_a ymm7_a;
smull mulHymm7_b mulL_b ymm12_b ymm7_b;
smull mulHymm7_c mulL_c ymm12_c ymm7_c;
smull mulHymm7_d mulL_d ymm12_d ymm7_d;
smull mulHymm7_e mulL_e ymm12_e ymm7_e;
smull mulHymm7_f mulL_f ymm12_f ymm7_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm7,%ymm7                      #! PC = 0x55555555e463 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm13_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm13_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm13_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm13_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm13_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm13_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm13_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm13_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm13_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm13_9;
smull mulH_a mulLymm7_a ymm7_a ymm13_a;
smull mulH_b mulLymm7_b ymm7_b ymm13_b;
smull mulH_c mulLymm7_c ymm7_c ymm13_c;
smull mulH_d mulLymm7_d ymm7_d ymm13_d;
smull mulH_e mulLymm7_e ymm7_e ymm13_e;
smull mulH_f mulLymm7_f ymm7_f ymm13_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e468 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm7_0 2**16 && true;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm7_1 2**16 && true;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm7_2 2**16 && true;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm7_3 2**16 && true;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm7_4 2**16 && true;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm7_5 2**16 && true;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm7_6 2**16 && true;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm7_7 2**16 && true;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm7_8 2**16 && true;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm7_9 2**16 && true;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm7_a 2**16 && true;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm7_b 2**16 && true;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm7_c 2**16 && true;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm7_d 2**16 && true;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm7_e 2**16 && true;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm7_f 2**16 && true;
assume red_f = mulLymm7_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm7,%ymm7                        #! PC = 0x55555555e46c *)
sub ymm7_0 ymm7_0 ymm9_0;
sub ymm7_1 ymm7_1 ymm9_1;
sub ymm7_2 ymm7_2 ymm9_2;
sub ymm7_3 ymm7_3 ymm9_3;
sub ymm7_4 ymm7_4 ymm9_4;
sub ymm7_5 ymm7_5 ymm9_5;
sub ymm7_6 ymm7_6 ymm9_6;
sub ymm7_7 ymm7_7 ymm9_7;
sub ymm7_8 ymm7_8 ymm9_8;
sub ymm7_9 ymm7_9 ymm9_9;
sub ymm7_a ymm7_a ymm9_a;
sub ymm7_b ymm7_b ymm9_b;
sub ymm7_c ymm7_c ymm9_c;
sub ymm7_d ymm7_d ymm9_d;
sub ymm7_e ymm7_e ymm9_e;
sub ymm7_f ymm7_f ymm9_f;
(* vpmullw %ymm12,%ymm3,%ymm9                      #! PC = 0x55555555e471 *)
smull mulHymm3_0 mulL_0 ymm12_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm12_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm12_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm12_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm12_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm12_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm12_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm12_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm12_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm12_9 ymm3_9;
smull mulHymm3_a mulL_a ymm12_a ymm3_a;
smull mulHymm3_b mulL_b ymm12_b ymm3_b;
smull mulHymm3_c mulL_c ymm12_c ymm3_c;
smull mulHymm3_d mulL_d ymm12_d ymm3_d;
smull mulHymm3_e mulL_e ymm12_e ymm3_e;
smull mulHymm3_f mulL_f ymm12_f ymm3_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpmulhw %ymm13,%ymm3,%ymm3                      #! PC = 0x55555555e476 *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm13_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm13_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm13_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm13_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm13_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm13_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm13_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm13_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm13_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm13_9;
smull mulH_a mulLymm3_a ymm3_a ymm13_a;
smull mulH_b mulLymm3_b ymm3_b ymm13_b;
smull mulH_c mulLymm3_c ymm3_c ymm13_c;
smull mulH_d mulLymm3_d ymm3_d ymm13_d;
smull mulH_e mulLymm3_e ymm3_e ymm13_e;
smull mulH_f mulLymm3_f ymm3_f ymm13_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x55555555e47b *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert eqmod red_0 mulLymm3_0 2**16 && true;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert eqmod red_1 mulLymm3_1 2**16 && true;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert eqmod red_2 mulLymm3_2 2**16 && true;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert eqmod red_3 mulLymm3_3 2**16 && true;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert eqmod red_4 mulLymm3_4 2**16 && true;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert eqmod red_5 mulLymm3_5 2**16 && true;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert eqmod red_6 mulLymm3_6 2**16 && true;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert eqmod red_7 mulLymm3_7 2**16 && true;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert eqmod red_8 mulLymm3_8 2**16 && true;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert eqmod red_9 mulLymm3_9 2**16 && true;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert eqmod red_a mulLymm3_a 2**16 && true;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert eqmod red_b mulLymm3_b 2**16 && true;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert eqmod red_c mulLymm3_c 2**16 && true;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert eqmod red_d mulLymm3_d 2**16 && true;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert eqmod red_e mulLymm3_e 2**16 && true;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert eqmod red_f mulLymm3_f 2**16 && true;
assume red_f = mulLymm3_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpsubw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555e47f *)
sub ymm3_0 ymm3_0 ymm9_0;
sub ymm3_1 ymm3_1 ymm9_1;
sub ymm3_2 ymm3_2 ymm9_2;
sub ymm3_3 ymm3_3 ymm9_3;
sub ymm3_4 ymm3_4 ymm9_4;
sub ymm3_5 ymm3_5 ymm9_5;
sub ymm3_6 ymm3_6 ymm9_6;
sub ymm3_7 ymm3_7 ymm9_7;
sub ymm3_8 ymm3_8 ymm9_8;
sub ymm3_9 ymm3_9 ymm9_9;
sub ymm3_a ymm3_a ymm9_a;
sub ymm3_b ymm3_b ymm9_b;
sub ymm3_c ymm3_c ymm9_c;
sub ymm3_d ymm3_d ymm9_d;
sub ymm3_e ymm3_e ymm9_e;
sub ymm3_f ymm3_f ymm9_f;
(* vpaddw %ymm5,%ymm10,%ymm9                       #! PC = 0x55555555e484 *)
add ymm9_0 ymm10_0 ymm5_0;
add ymm9_1 ymm10_1 ymm5_1;
add ymm9_2 ymm10_2 ymm5_2;
add ymm9_3 ymm10_3 ymm5_3;
add ymm9_4 ymm10_4 ymm5_4;
add ymm9_5 ymm10_5 ymm5_5;
add ymm9_6 ymm10_6 ymm5_6;
add ymm9_7 ymm10_7 ymm5_7;
add ymm9_8 ymm10_8 ymm5_8;
add ymm9_9 ymm10_9 ymm5_9;
add ymm9_a ymm10_a ymm5_a;
add ymm9_b ymm10_b ymm5_b;
add ymm9_c ymm10_c ymm5_c;
add ymm9_d ymm10_d ymm5_d;
add ymm9_e ymm10_e ymm5_e;
add ymm9_f ymm10_f ymm5_f;
(* vpsubw %ymm5,%ymm10,%ymm5                       #! PC = 0x55555555e488 *)
sub ymm5_0 ymm10_0 ymm5_0;
sub ymm5_1 ymm10_1 ymm5_1;
sub ymm5_2 ymm10_2 ymm5_2;
sub ymm5_3 ymm10_3 ymm5_3;
sub ymm5_4 ymm10_4 ymm5_4;
sub ymm5_5 ymm10_5 ymm5_5;
sub ymm5_6 ymm10_6 ymm5_6;
sub ymm5_7 ymm10_7 ymm5_7;
sub ymm5_8 ymm10_8 ymm5_8;
sub ymm5_9 ymm10_9 ymm5_9;
sub ymm5_a ymm10_a ymm5_a;
sub ymm5_b ymm10_b ymm5_b;
sub ymm5_c ymm10_c ymm5_c;
sub ymm5_d ymm10_d ymm5_d;
sub ymm5_e ymm10_e ymm5_e;
sub ymm5_f ymm10_f ymm5_f;
(* vpaddw %ymm6,%ymm3,%ymm10                       #! PC = 0x55555555e48c *)
add ymm10_0 ymm3_0 ymm6_0;
add ymm10_1 ymm3_1 ymm6_1;
add ymm10_2 ymm3_2 ymm6_2;
add ymm10_3 ymm3_3 ymm6_3;
add ymm10_4 ymm3_4 ymm6_4;
add ymm10_5 ymm3_5 ymm6_5;
add ymm10_6 ymm3_6 ymm6_6;
add ymm10_7 ymm3_7 ymm6_7;
add ymm10_8 ymm3_8 ymm6_8;
add ymm10_9 ymm3_9 ymm6_9;
add ymm10_a ymm3_a ymm6_a;
add ymm10_b ymm3_b ymm6_b;
add ymm10_c ymm3_c ymm6_c;
add ymm10_d ymm3_d ymm6_d;
add ymm10_e ymm3_e ymm6_e;
add ymm10_f ymm3_f ymm6_f;
(* vpsubw %ymm6,%ymm3,%ymm6                        #! PC = 0x55555555e490 *)
sub ymm6_0 ymm3_0 ymm6_0;
sub ymm6_1 ymm3_1 ymm6_1;
sub ymm6_2 ymm3_2 ymm6_2;
sub ymm6_3 ymm3_3 ymm6_3;
sub ymm6_4 ymm3_4 ymm6_4;
sub ymm6_5 ymm3_5 ymm6_5;
sub ymm6_6 ymm3_6 ymm6_6;
sub ymm6_7 ymm3_7 ymm6_7;
sub ymm6_8 ymm3_8 ymm6_8;
sub ymm6_9 ymm3_9 ymm6_9;
sub ymm6_a ymm3_a ymm6_a;
sub ymm6_b ymm3_b ymm6_b;
sub ymm6_c ymm3_c ymm6_c;
sub ymm6_d ymm3_d ymm6_d;
sub ymm6_e ymm3_e ymm6_e;
sub ymm6_f ymm3_f ymm6_f;
(* vpaddw %ymm8,%ymm4,%ymm3                        #! PC = 0x55555555e494 *)
add ymm3_0 ymm4_0 ymm8_0;
add ymm3_1 ymm4_1 ymm8_1;
add ymm3_2 ymm4_2 ymm8_2;
add ymm3_3 ymm4_3 ymm8_3;
add ymm3_4 ymm4_4 ymm8_4;
add ymm3_5 ymm4_5 ymm8_5;
add ymm3_6 ymm4_6 ymm8_6;
add ymm3_7 ymm4_7 ymm8_7;
add ymm3_8 ymm4_8 ymm8_8;
add ymm3_9 ymm4_9 ymm8_9;
add ymm3_a ymm4_a ymm8_a;
add ymm3_b ymm4_b ymm8_b;
add ymm3_c ymm4_c ymm8_c;
add ymm3_d ymm4_d ymm8_d;
add ymm3_e ymm4_e ymm8_e;
add ymm3_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x55555555e499 *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm11,%ymm7,%ymm4                       #! PC = 0x55555555e49e *)
add ymm4_0 ymm7_0 ymm11_0;
add ymm4_1 ymm7_1 ymm11_1;
add ymm4_2 ymm7_2 ymm11_2;
add ymm4_3 ymm7_3 ymm11_3;
add ymm4_4 ymm7_4 ymm11_4;
add ymm4_5 ymm7_5 ymm11_5;
add ymm4_6 ymm7_6 ymm11_6;
add ymm4_7 ymm7_7 ymm11_7;
add ymm4_8 ymm7_8 ymm11_8;
add ymm4_9 ymm7_9 ymm11_9;
add ymm4_a ymm7_a ymm11_a;
add ymm4_b ymm7_b ymm11_b;
add ymm4_c ymm7_c ymm11_c;
add ymm4_d ymm7_d ymm11_d;
add ymm4_e ymm7_e ymm11_e;
add ymm4_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x55555555e4a3 *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vmovdqa %ymm9,0xe0(%rdi)                        #! EA = L0x7fffffffd3c0; PC = 0x55555555e4a8 *)
mov L0x7fffffffd3c0 ymm9_0;
mov L0x7fffffffd3c2 ymm9_1;
mov L0x7fffffffd3c4 ymm9_2;
mov L0x7fffffffd3c6 ymm9_3;
mov L0x7fffffffd3c8 ymm9_4;
mov L0x7fffffffd3ca ymm9_5;
mov L0x7fffffffd3cc ymm9_6;
mov L0x7fffffffd3ce ymm9_7;
mov L0x7fffffffd3d0 ymm9_8;
mov L0x7fffffffd3d2 ymm9_9;
mov L0x7fffffffd3d4 ymm9_a;
mov L0x7fffffffd3d6 ymm9_b;
mov L0x7fffffffd3d8 ymm9_c;
mov L0x7fffffffd3da ymm9_d;
mov L0x7fffffffd3dc ymm9_e;
mov L0x7fffffffd3de ymm9_f;
(* vmovdqa %ymm10,0x1e0(%rdi)                      #! EA = L0x7fffffffd4c0; PC = 0x55555555e4b0 *)
mov L0x7fffffffd4c0 ymm10_0;
mov L0x7fffffffd4c2 ymm10_1;
mov L0x7fffffffd4c4 ymm10_2;
mov L0x7fffffffd4c6 ymm10_3;
mov L0x7fffffffd4c8 ymm10_4;
mov L0x7fffffffd4ca ymm10_5;
mov L0x7fffffffd4cc ymm10_6;
mov L0x7fffffffd4ce ymm10_7;
mov L0x7fffffffd4d0 ymm10_8;
mov L0x7fffffffd4d2 ymm10_9;
mov L0x7fffffffd4d4 ymm10_a;
mov L0x7fffffffd4d6 ymm10_b;
mov L0x7fffffffd4d8 ymm10_c;
mov L0x7fffffffd4da ymm10_d;
mov L0x7fffffffd4dc ymm10_e;
mov L0x7fffffffd4de ymm10_f;
(* vmovdqa %ymm3,0x2e0(%rdi)                       #! EA = L0x7fffffffd5c0; PC = 0x55555555e4b8 *)
mov L0x7fffffffd5c0 ymm3_0;
mov L0x7fffffffd5c2 ymm3_1;
mov L0x7fffffffd5c4 ymm3_2;
mov L0x7fffffffd5c6 ymm3_3;
mov L0x7fffffffd5c8 ymm3_4;
mov L0x7fffffffd5ca ymm3_5;
mov L0x7fffffffd5cc ymm3_6;
mov L0x7fffffffd5ce ymm3_7;
mov L0x7fffffffd5d0 ymm3_8;
mov L0x7fffffffd5d2 ymm3_9;
mov L0x7fffffffd5d4 ymm3_a;
mov L0x7fffffffd5d6 ymm3_b;
mov L0x7fffffffd5d8 ymm3_c;
mov L0x7fffffffd5da ymm3_d;
mov L0x7fffffffd5dc ymm3_e;
mov L0x7fffffffd5de ymm3_f;
(* vmovdqa %ymm4,0x3e0(%rdi)                       #! EA = L0x7fffffffd6c0; PC = 0x55555555e4c0 *)
mov L0x7fffffffd6c0 ymm4_0;
mov L0x7fffffffd6c2 ymm4_1;
mov L0x7fffffffd6c4 ymm4_2;
mov L0x7fffffffd6c6 ymm4_3;
mov L0x7fffffffd6c8 ymm4_4;
mov L0x7fffffffd6ca ymm4_5;
mov L0x7fffffffd6cc ymm4_6;
mov L0x7fffffffd6ce ymm4_7;
mov L0x7fffffffd6d0 ymm4_8;
mov L0x7fffffffd6d2 ymm4_9;
mov L0x7fffffffd6d4 ymm4_a;
mov L0x7fffffffd6d6 ymm4_b;
mov L0x7fffffffd6d8 ymm4_c;
mov L0x7fffffffd6da ymm4_d;
mov L0x7fffffffd6dc ymm4_e;
mov L0x7fffffffd6de ymm4_f;
(* vmovdqa %ymm5,0x4e0(%rdi)                       #! EA = L0x7fffffffd7c0; PC = 0x55555555e4c8 *)
mov L0x7fffffffd7c0 ymm5_0;
mov L0x7fffffffd7c2 ymm5_1;
mov L0x7fffffffd7c4 ymm5_2;
mov L0x7fffffffd7c6 ymm5_3;
mov L0x7fffffffd7c8 ymm5_4;
mov L0x7fffffffd7ca ymm5_5;
mov L0x7fffffffd7cc ymm5_6;
mov L0x7fffffffd7ce ymm5_7;
mov L0x7fffffffd7d0 ymm5_8;
mov L0x7fffffffd7d2 ymm5_9;
mov L0x7fffffffd7d4 ymm5_a;
mov L0x7fffffffd7d6 ymm5_b;
mov L0x7fffffffd7d8 ymm5_c;
mov L0x7fffffffd7da ymm5_d;
mov L0x7fffffffd7dc ymm5_e;
mov L0x7fffffffd7de ymm5_f;
(* vmovdqa %ymm6,0x5e0(%rdi)                       #! EA = L0x7fffffffd8c0; PC = 0x55555555e4d0 *)
mov L0x7fffffffd8c0 ymm6_0;
mov L0x7fffffffd8c2 ymm6_1;
mov L0x7fffffffd8c4 ymm6_2;
mov L0x7fffffffd8c6 ymm6_3;
mov L0x7fffffffd8c8 ymm6_4;
mov L0x7fffffffd8ca ymm6_5;
mov L0x7fffffffd8cc ymm6_6;
mov L0x7fffffffd8ce ymm6_7;
mov L0x7fffffffd8d0 ymm6_8;
mov L0x7fffffffd8d2 ymm6_9;
mov L0x7fffffffd8d4 ymm6_a;
mov L0x7fffffffd8d6 ymm6_b;
mov L0x7fffffffd8d8 ymm6_c;
mov L0x7fffffffd8da ymm6_d;
mov L0x7fffffffd8dc ymm6_e;
mov L0x7fffffffd8de ymm6_f;
(* vmovdqa %ymm8,0x6e0(%rdi)                       #! EA = L0x7fffffffd9c0; PC = 0x55555555e4d8 *)
mov L0x7fffffffd9c0 ymm8_0;
mov L0x7fffffffd9c2 ymm8_1;
mov L0x7fffffffd9c4 ymm8_2;
mov L0x7fffffffd9c6 ymm8_3;
mov L0x7fffffffd9c8 ymm8_4;
mov L0x7fffffffd9ca ymm8_5;
mov L0x7fffffffd9cc ymm8_6;
mov L0x7fffffffd9ce ymm8_7;
mov L0x7fffffffd9d0 ymm8_8;
mov L0x7fffffffd9d2 ymm8_9;
mov L0x7fffffffd9d4 ymm8_a;
mov L0x7fffffffd9d6 ymm8_b;
mov L0x7fffffffd9d8 ymm8_c;
mov L0x7fffffffd9da ymm8_d;
mov L0x7fffffffd9dc ymm8_e;
mov L0x7fffffffd9de ymm8_f;
(* vmovdqa %ymm11,0x7e0(%rdi)                      #! EA = L0x7fffffffdac0; PC = 0x55555555e4e0 *)
mov L0x7fffffffdac0 ymm11_0;
mov L0x7fffffffdac2 ymm11_1;
mov L0x7fffffffdac4 ymm11_2;
mov L0x7fffffffdac6 ymm11_3;
mov L0x7fffffffdac8 ymm11_4;
mov L0x7fffffffdaca ymm11_5;
mov L0x7fffffffdacc ymm11_6;
mov L0x7fffffffdace ymm11_7;
mov L0x7fffffffdad0 ymm11_8;
mov L0x7fffffffdad2 ymm11_9;
mov L0x7fffffffdad4 ymm11_a;
mov L0x7fffffffdad6 ymm11_b;
mov L0x7fffffffdad8 ymm11_c;
mov L0x7fffffffdada ymm11_d;
mov L0x7fffffffdadc ymm11_e;
mov L0x7fffffffdade ymm11_f;
(* #! <- SP = 0x7fffffffca98 *)
#! 0x7fffffffca98 = 0x7fffffffca98;
(* #retq                                           #! PC = 0x55555555e4e8 *)
#retq                                           #! 0x55555555e4e8 = 0x55555555e4e8;



(**************** LEVELS 6-8, 7 *****************)

ghost out_poly7@bit,
out_poly70@bit, out_poly71@bit, out_poly72@bit, out_poly73@bit,
out_poly74@bit, out_poly75@bit, out_poly76@bit, out_poly77@bit : and [
out_poly70 =
L0x7fffffffd3c0*x** 0+L0x7fffffffd3c2*x** 1+L0x7fffffffd3c4*x** 2+
L0x7fffffffd3c6*x** 3+L0x7fffffffd3c8*x** 4+L0x7fffffffd3ca*x** 5+
L0x7fffffffd3cc*x** 6+L0x7fffffffd3ce*x** 7+L0x7fffffffd3d0*x** 8+
L0x7fffffffd3d2*x** 9+L0x7fffffffd3d4*x**10+L0x7fffffffd3d6*x**11+
L0x7fffffffd3d8*x**12+L0x7fffffffd3da*x**13+L0x7fffffffd3dc*x**14+
L0x7fffffffd3de*x**15,
out_poly71 =
L0x7fffffffd4c0*x** 0+L0x7fffffffd4c2*x** 1+L0x7fffffffd4c4*x** 2+
L0x7fffffffd4c6*x** 3+L0x7fffffffd4c8*x** 4+L0x7fffffffd4ca*x** 5+
L0x7fffffffd4cc*x** 6+L0x7fffffffd4ce*x** 7+L0x7fffffffd4d0*x** 8+
L0x7fffffffd4d2*x** 9+L0x7fffffffd4d4*x**10+L0x7fffffffd4d6*x**11+
L0x7fffffffd4d8*x**12+L0x7fffffffd4da*x**13+L0x7fffffffd4dc*x**14+
L0x7fffffffd4de*x**15,
out_poly72 =
L0x7fffffffd5c0*x** 0+L0x7fffffffd5c2*x** 1+L0x7fffffffd5c4*x** 2+
L0x7fffffffd5c6*x** 3+L0x7fffffffd5c8*x** 4+L0x7fffffffd5ca*x** 5+
L0x7fffffffd5cc*x** 6+L0x7fffffffd5ce*x** 7+L0x7fffffffd5d0*x** 8+
L0x7fffffffd5d2*x** 9+L0x7fffffffd5d4*x**10+L0x7fffffffd5d6*x**11+
L0x7fffffffd5d8*x**12+L0x7fffffffd5da*x**13+L0x7fffffffd5dc*x**14+
L0x7fffffffd5de*x**15,
out_poly73 =
L0x7fffffffd6c0*x** 0+L0x7fffffffd6c2*x** 1+L0x7fffffffd6c4*x** 2+
L0x7fffffffd6c6*x** 3+L0x7fffffffd6c8*x** 4+L0x7fffffffd6ca*x** 5+
L0x7fffffffd6cc*x** 6+L0x7fffffffd6ce*x** 7+L0x7fffffffd6d0*x** 8+
L0x7fffffffd6d2*x** 9+L0x7fffffffd6d4*x**10+L0x7fffffffd6d6*x**11+
L0x7fffffffd6d8*x**12+L0x7fffffffd6da*x**13+L0x7fffffffd6dc*x**14+
L0x7fffffffd6de*x**15,
out_poly74 =
L0x7fffffffd7c0*x** 0+L0x7fffffffd7c2*x** 1+L0x7fffffffd7c4*x** 2+
L0x7fffffffd7c6*x** 3+L0x7fffffffd7c8*x** 4+L0x7fffffffd7ca*x** 5+
L0x7fffffffd7cc*x** 6+L0x7fffffffd7ce*x** 7+L0x7fffffffd7d0*x** 8+
L0x7fffffffd7d2*x** 9+L0x7fffffffd7d4*x**10+L0x7fffffffd7d6*x**11+
L0x7fffffffd7d8*x**12+L0x7fffffffd7da*x**13+L0x7fffffffd7dc*x**14+
L0x7fffffffd7de*x**15,
out_poly75 =
L0x7fffffffd8c0*x** 0+L0x7fffffffd8c2*x** 1+L0x7fffffffd8c4*x** 2+
L0x7fffffffd8c6*x** 3+L0x7fffffffd8c8*x** 4+L0x7fffffffd8ca*x** 5+
L0x7fffffffd8cc*x** 6+L0x7fffffffd8ce*x** 7+L0x7fffffffd8d0*x** 8+
L0x7fffffffd8d2*x** 9+L0x7fffffffd8d4*x**10+L0x7fffffffd8d6*x**11+
L0x7fffffffd8d8*x**12+L0x7fffffffd8da*x**13+L0x7fffffffd8dc*x**14+
L0x7fffffffd8de*x**15,
out_poly76 =
L0x7fffffffd9c0*x** 0+L0x7fffffffd9c2*x** 1+L0x7fffffffd9c4*x** 2+
L0x7fffffffd9c6*x** 3+L0x7fffffffd9c8*x** 4+L0x7fffffffd9ca*x** 5+
L0x7fffffffd9cc*x** 6+L0x7fffffffd9ce*x** 7+L0x7fffffffd9d0*x** 8+
L0x7fffffffd9d2*x** 9+L0x7fffffffd9d4*x**10+L0x7fffffffd9d6*x**11+
L0x7fffffffd9d8*x**12+L0x7fffffffd9da*x**13+L0x7fffffffd9dc*x**14+
L0x7fffffffd9de*x**15,
out_poly77 =
L0x7fffffffdac0*x** 0+L0x7fffffffdac2*x** 1+L0x7fffffffdac4*x** 2+
L0x7fffffffdac6*x** 3+L0x7fffffffdac8*x** 4+L0x7fffffffdaca*x** 5+
L0x7fffffffdacc*x** 6+L0x7fffffffdace*x** 7+L0x7fffffffdad0*x** 8+
L0x7fffffffdad2*x** 9+L0x7fffffffdad4*x**10+L0x7fffffffdad6*x**11+
L0x7fffffffdad8*x**12+L0x7fffffffdada*x**13+L0x7fffffffdadc*x**14+
L0x7fffffffdade*x**15
,
out_poly7 =
out_poly70*x**  0+out_poly71*x**128+out_poly72*x**256+out_poly73*x**384+
out_poly74*x**512+out_poly75*x**640+out_poly76*x**768+out_poly77*x**896]
&& true;


(**************** CUT  79 *****************)

ecut and [
eqmod (out_poly7) (8*shuf_poly70) [10753, x**128 - 1],
eqmod (out_poly7) (8*shuf_poly71) [10753, x**128 - 10752],
eqmod (out_poly7) (8*shuf_poly72) [10753, x**128 - 6264],
eqmod (out_poly7) (8*shuf_poly73) [10753, x**128 - 4489],
eqmod (out_poly7) (8*shuf_poly74) [10753, x**128 - 321],
eqmod (out_poly7) (8*shuf_poly75) [10753, x**128 - 10432],
eqmod (out_poly7) (8*shuf_poly76) [10753, x**128 - 10686],
eqmod (out_poly7) (8*shuf_poly77) [10753, x**128 - 67]
];


(**************** CUT  80 *****************)

ecut true;



(**************** prepare *****************)



(**************** CUT  81 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly00) [10753, x**128 - 1],
eqmod (out_poly1) (8*shuf_poly10) [10753, x**128 - 1],
eqmod (out_poly2) (8*shuf_poly20) [10753, x**128 - 1],
eqmod (out_poly3) (8*shuf_poly30) [10753, x**128 - 1],
eqmod (out_poly4) (8*shuf_poly40) [10753, x**128 - 1],
eqmod (out_poly5) (8*shuf_poly50) [10753, x**128 - 1],
eqmod (out_poly6) (8*shuf_poly60) [10753, x**128 - 1],
eqmod (out_poly7) (8*shuf_poly70) [10753, x**128 - 1],
segment0 =
shuf_poly00*x** 0+shuf_poly10*x**16+shuf_poly20*x**32+
shuf_poly30*x**48+shuf_poly40*x**64+shuf_poly50*x**80+
shuf_poly60*x**96+shuf_poly70*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  82 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly01) [10753, x**128 - 10752],
eqmod (out_poly1) (8*shuf_poly11) [10753, x**128 - 10752],
eqmod (out_poly2) (8*shuf_poly21) [10753, x**128 - 10752],
eqmod (out_poly3) (8*shuf_poly31) [10753, x**128 - 10752],
eqmod (out_poly4) (8*shuf_poly41) [10753, x**128 - 10752],
eqmod (out_poly5) (8*shuf_poly51) [10753, x**128 - 10752],
eqmod (out_poly6) (8*shuf_poly61) [10753, x**128 - 10752],
eqmod (out_poly7) (8*shuf_poly71) [10753, x**128 - 10752],
segment1 =
shuf_poly01*x** 0+shuf_poly11*x**16+shuf_poly21*x**32+
shuf_poly31*x**48+shuf_poly41*x**64+shuf_poly51*x**80+
shuf_poly61*x**96+shuf_poly71*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  83 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly02) [10753, x**128 - 6264],
eqmod (out_poly1) (8*shuf_poly12) [10753, x**128 - 6264],
eqmod (out_poly2) (8*shuf_poly22) [10753, x**128 - 6264],
eqmod (out_poly3) (8*shuf_poly32) [10753, x**128 - 6264],
eqmod (out_poly4) (8*shuf_poly42) [10753, x**128 - 6264],
eqmod (out_poly5) (8*shuf_poly52) [10753, x**128 - 6264],
eqmod (out_poly6) (8*shuf_poly62) [10753, x**128 - 6264],
eqmod (out_poly7) (8*shuf_poly72) [10753, x**128 - 6264],
segment2 =
shuf_poly02*x** 0+shuf_poly12*x**16+shuf_poly22*x**32+
shuf_poly32*x**48+shuf_poly42*x**64+shuf_poly52*x**80+
shuf_poly62*x**96+shuf_poly72*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  84 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly03) [10753, x**128 - 4489],
eqmod (out_poly1) (8*shuf_poly13) [10753, x**128 - 4489],
eqmod (out_poly2) (8*shuf_poly23) [10753, x**128 - 4489],
eqmod (out_poly3) (8*shuf_poly33) [10753, x**128 - 4489],
eqmod (out_poly4) (8*shuf_poly43) [10753, x**128 - 4489],
eqmod (out_poly5) (8*shuf_poly53) [10753, x**128 - 4489],
eqmod (out_poly6) (8*shuf_poly63) [10753, x**128 - 4489],
eqmod (out_poly7) (8*shuf_poly73) [10753, x**128 - 4489],
segment3 =
shuf_poly03*x** 0+shuf_poly13*x**16+shuf_poly23*x**32+
shuf_poly33*x**48+shuf_poly43*x**64+shuf_poly53*x**80+
shuf_poly63*x**96+shuf_poly73*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  85 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly04) [10753, x**128 - 321],
eqmod (out_poly1) (8*shuf_poly14) [10753, x**128 - 321],
eqmod (out_poly2) (8*shuf_poly24) [10753, x**128 - 321],
eqmod (out_poly3) (8*shuf_poly34) [10753, x**128 - 321],
eqmod (out_poly4) (8*shuf_poly44) [10753, x**128 - 321],
eqmod (out_poly5) (8*shuf_poly54) [10753, x**128 - 321],
eqmod (out_poly6) (8*shuf_poly64) [10753, x**128 - 321],
eqmod (out_poly7) (8*shuf_poly74) [10753, x**128 - 321],
segment4 =
shuf_poly04*x** 0+shuf_poly14*x**16+shuf_poly24*x**32+
shuf_poly34*x**48+shuf_poly44*x**64+shuf_poly54*x**80+
shuf_poly64*x**96+shuf_poly74*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  86 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly05) [10753, x**128 - 10432],
eqmod (out_poly1) (8*shuf_poly15) [10753, x**128 - 10432],
eqmod (out_poly2) (8*shuf_poly25) [10753, x**128 - 10432],
eqmod (out_poly3) (8*shuf_poly35) [10753, x**128 - 10432],
eqmod (out_poly4) (8*shuf_poly45) [10753, x**128 - 10432],
eqmod (out_poly5) (8*shuf_poly55) [10753, x**128 - 10432],
eqmod (out_poly6) (8*shuf_poly65) [10753, x**128 - 10432],
eqmod (out_poly7) (8*shuf_poly75) [10753, x**128 - 10432],
segment5 =
shuf_poly05*x** 0+shuf_poly15*x**16+shuf_poly25*x**32+
shuf_poly35*x**48+shuf_poly45*x**64+shuf_poly55*x**80+
shuf_poly65*x**96+shuf_poly75*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  87 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly06) [10753, x**128 - 10686],
eqmod (out_poly1) (8*shuf_poly16) [10753, x**128 - 10686],
eqmod (out_poly2) (8*shuf_poly26) [10753, x**128 - 10686],
eqmod (out_poly3) (8*shuf_poly36) [10753, x**128 - 10686],
eqmod (out_poly4) (8*shuf_poly46) [10753, x**128 - 10686],
eqmod (out_poly5) (8*shuf_poly56) [10753, x**128 - 10686],
eqmod (out_poly6) (8*shuf_poly66) [10753, x**128 - 10686],
eqmod (out_poly7) (8*shuf_poly76) [10753, x**128 - 10686],
segment6 =
shuf_poly06*x** 0+shuf_poly16*x**16+shuf_poly26*x**32+
shuf_poly36*x**48+shuf_poly46*x**64+shuf_poly56*x**80+
shuf_poly66*x**96+shuf_poly76*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  88 *****************)

ecut and [
eqmod (out_poly0) (8*shuf_poly07) [10753, x**128 - 67],
eqmod (out_poly1) (8*shuf_poly17) [10753, x**128 - 67],
eqmod (out_poly2) (8*shuf_poly27) [10753, x**128 - 67],
eqmod (out_poly3) (8*shuf_poly37) [10753, x**128 - 67],
eqmod (out_poly4) (8*shuf_poly47) [10753, x**128 - 67],
eqmod (out_poly5) (8*shuf_poly57) [10753, x**128 - 67],
eqmod (out_poly6) (8*shuf_poly67) [10753, x**128 - 67],
eqmod (out_poly7) (8*shuf_poly77) [10753, x**128 - 67],
segment7 =
shuf_poly07*x** 0+shuf_poly17*x**16+shuf_poly27*x**32+
shuf_poly37*x**48+shuf_poly47*x**64+shuf_poly57*x**80+
shuf_poly67*x**96+shuf_poly77*x**112
] prove with [ all ghosts, cuts [ 65, 67, 69, 71, 73, 75, 77, 79 ] ];


(**************** CUT  89 *****************)

ecut true;



(**************** output poly *****************)

ghost out_poly@bit : out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
&& true;


(**************** CUT  90 *****************)

ecut and [
eqmod out_poly (512*inp_poly000**2) [10753, x**2 - 1],
eqmod out_poly (512*inp_poly001**2) [10753, x**2 - 10752],
eqmod out_poly (512*inp_poly002**2) [10753, x**2 - 6264],
eqmod out_poly (512*inp_poly003**2) [10753, x**2 - 4489],
eqmod out_poly (512*inp_poly004**2) [10753, x**2 - 321],
eqmod out_poly (512*inp_poly005**2) [10753, x**2 - 10432],
eqmod out_poly (512*inp_poly006**2) [10753, x**2 - 10686],
eqmod out_poly (512*inp_poly007**2) [10753, x**2 - 67],
eqmod out_poly (512*inp_poly008**2) [10753, x**2 - 9097],
eqmod out_poly (512*inp_poly009**2) [10753, x**2 - 1656],
eqmod out_poly (512*inp_poly00a**2) [10753, x**2 - 3461],
eqmod out_poly (512*inp_poly00b**2) [10753, x**2 - 7292],
eqmod out_poly (512*inp_poly00c**2) [10753, x**2 - 6074],
eqmod out_poly (512*inp_poly00d**2) [10753, x**2 - 4679],
eqmod out_poly (512*inp_poly00e**2) [10753, x**2 - 3422],
eqmod out_poly (512*inp_poly00f**2) [10753, x**2 - 7331],
eqmod out_poly (512*inp_poly010**2) [10753, x**2 - 1154],
eqmod out_poly (512*inp_poly011**2) [10753, x**2 - 9599],
eqmod out_poly (512*inp_poly012**2) [10753, x**2 - 2640],
eqmod out_poly (512*inp_poly013**2) [10753, x**2 - 8113],
eqmod out_poly (512*inp_poly014**2) [10753, x**2 - 4832],
eqmod out_poly (512*inp_poly015**2) [10753, x**2 - 5921],
eqmod out_poly (512*inp_poly016**2) [10753, x**2 - 8706],
eqmod out_poly (512*inp_poly017**2) [10753, x**2 - 2047],
eqmod out_poly (512*inp_poly018**2) [10753, x**2 - 3010],
eqmod out_poly (512*inp_poly019**2) [10753, x**2 - 7743],
eqmod out_poly (512*inp_poly01a**2) [10753, x**2 - 4631],
eqmod out_poly (512*inp_poly01b**2) [10753, x**2 - 6122],
eqmod out_poly (512*inp_poly01c**2) [10753, x**2 - 9193],
eqmod out_poly (512*inp_poly01d**2) [10753, x**2 - 1560],
eqmod out_poly (512*inp_poly01e**2) [10753, x**2 - 2637],
eqmod out_poly (512*inp_poly01f**2) [10753, x**2 - 8116],
eqmod out_poly (512*inp_poly020**2) [10753, x**2 - 7853],
eqmod out_poly (512*inp_poly021**2) [10753, x**2 - 2900],
eqmod out_poly (512*inp_poly022**2) [10753, x**2 - 6970],
eqmod out_poly (512*inp_poly023**2) [10753, x**2 - 3783],
eqmod out_poly (512*inp_poly024**2) [10753, x**2 - 4611],
eqmod out_poly (512*inp_poly025**2) [10753, x**2 - 6142],
eqmod out_poly (512*inp_poly026**2) [10753, x**2 - 746],
eqmod out_poly (512*inp_poly027**2) [10753, x**2 - 10007],
eqmod out_poly (512*inp_poly028**2) [10753, x**2 - 6562],
eqmod out_poly (512*inp_poly029**2) [10753, x**2 - 4191],
eqmod out_poly (512*inp_poly02a**2) [10753, x**2 - 6402],
eqmod out_poly (512*inp_poly02b**2) [10753, x**2 - 4351],
eqmod out_poly (512*inp_poly02c**2) [10753, x**2 - 9567],
eqmod out_poly (512*inp_poly02d**2) [10753, x**2 - 1186],
eqmod out_poly (512*inp_poly02e**2) [10753, x**2 - 1219],
eqmod out_poly (512*inp_poly02f**2) [10753, x**2 - 9534],
eqmod out_poly (512*inp_poly030**2) [10753, x**2 - 8336],
eqmod out_poly (512*inp_poly031**2) [10753, x**2 - 2417],
eqmod out_poly (512*inp_poly032**2) [10753, x**2 - 136],
eqmod out_poly (512*inp_poly033**2) [10753, x**2 - 10617],
eqmod out_poly (512*inp_poly034**2) [10753, x**2 - 9112],
eqmod out_poly (512*inp_poly035**2) [10753, x**2 - 1641],
eqmod out_poly (512*inp_poly036**2) [10753, x**2 - 644],
eqmod out_poly (512*inp_poly037**2) [10753, x**2 - 10109],
eqmod out_poly (512*inp_poly038**2) [10753, x**2 - 2436],
eqmod out_poly (512*inp_poly039**2) [10753, x**2 - 8317],
eqmod out_poly (512*inp_poly03a**2) [10753, x**2 - 597],
eqmod out_poly (512*inp_poly03b**2) [10753, x**2 - 10156],
eqmod out_poly (512*inp_poly03c**2) [10753, x**2 - 7740],
eqmod out_poly (512*inp_poly03d**2) [10753, x**2 - 3013],
eqmod out_poly (512*inp_poly03e**2) [10753, x**2 - 8836],
eqmod out_poly (512*inp_poly03f**2) [10753, x**2 - 1917],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 14, 81 ] ];


(**************** CUT  91 *****************)

ecut and [
eqmod out_poly (512*inp_poly040**2) [10753, x**2 - 10000],
eqmod out_poly (512*inp_poly041**2) [10753, x**2 - 753],
eqmod out_poly (512*inp_poly042**2) [10753, x**2 - 3775],
eqmod out_poly (512*inp_poly043**2) [10753, x**2 - 6978],
eqmod out_poly (512*inp_poly044**2) [10753, x**2 - 5606],
eqmod out_poly (512*inp_poly045**2) [10753, x**2 - 5147],
eqmod out_poly (512*inp_poly046**2) [10753, x**2 - 7439],
eqmod out_poly (512*inp_poly047**2) [10753, x**2 - 3314],
eqmod out_poly (512*inp_poly048**2) [10753, x**2 - 10373],
eqmod out_poly (512*inp_poly049**2) [10753, x**2 - 380],
eqmod out_poly (512*inp_poly04a**2) [10753, x**2 - 6846],
eqmod out_poly (512*inp_poly04b**2) [10753, x**2 - 3907],
eqmod out_poly (512*inp_poly04c**2) [10753, x**2 - 7056],
eqmod out_poly (512*inp_poly04d**2) [10753, x**2 - 3697],
eqmod out_poly (512*inp_poly04e**2) [10753, x**2 - 3954],
eqmod out_poly (512*inp_poly04f**2) [10753, x**2 - 6799],
eqmod out_poly (512*inp_poly050**2) [10753, x**2 - 2031],
eqmod out_poly (512*inp_poly051**2) [10753, x**2 - 8722],
eqmod out_poly (512*inp_poly052**2) [10753, x**2 - 1385],
eqmod out_poly (512*inp_poly053**2) [10753, x**2 - 9368],
eqmod out_poly (512*inp_poly054**2) [10753, x**2 - 6771],
eqmod out_poly (512*inp_poly055**2) [10753, x**2 - 3982],
eqmod out_poly (512*inp_poly056**2) [10753, x**2 - 3712],
eqmod out_poly (512*inp_poly057**2) [10753, x**2 - 7041],
eqmod out_poly (512*inp_poly058**2) [10753, x**2 - 2353],
eqmod out_poly (512*inp_poly059**2) [10753, x**2 - 8400],
eqmod out_poly (512*inp_poly05a**2) [10753, x**2 - 7582],
eqmod out_poly (512*inp_poly05b**2) [10753, x**2 - 3171],
eqmod out_poly (512*inp_poly05c**2) [10753, x**2 - 2603],
eqmod out_poly (512*inp_poly05d**2) [10753, x**2 - 8150],
eqmod out_poly (512*inp_poly05e**2) [10753, x**2 - 3644],
eqmod out_poly (512*inp_poly05f**2) [10753, x**2 - 7109],
eqmod out_poly (512*inp_poly060**2) [10753, x**2 - 841],
eqmod out_poly (512*inp_poly061**2) [10753, x**2 - 9912],
eqmod out_poly (512*inp_poly062**2) [10753, x**2 - 9807],
eqmod out_poly (512*inp_poly063**2) [10753, x**2 - 946],
eqmod out_poly (512*inp_poly064**2) [10753, x**2 - 1136],
eqmod out_poly (512*inp_poly065**2) [10753, x**2 - 9617],
eqmod out_poly (512*inp_poly066**2) [10753, x**2 - 8171],
eqmod out_poly (512*inp_poly067**2) [10753, x**2 - 2582],
eqmod out_poly (512*inp_poly068**2) [10753, x**2 - 5194],
eqmod out_poly (512*inp_poly069**2) [10753, x**2 - 5559],
eqmod out_poly (512*inp_poly06a**2) [10753, x**2 - 7391],
eqmod out_poly (512*inp_poly06b**2) [10753, x**2 - 3362],
eqmod out_poly (512*inp_poly06c**2) [10753, x**2 - 559],
eqmod out_poly (512*inp_poly06d**2) [10753, x**2 - 10194],
eqmod out_poly (512*inp_poly06e**2) [10753, x**2 - 6851],
eqmod out_poly (512*inp_poly06f**2) [10753, x**2 - 3902],
eqmod out_poly (512*inp_poly070**2) [10753, x**2 - 2744],
eqmod out_poly (512*inp_poly071**2) [10753, x**2 - 8009],
eqmod out_poly (512*inp_poly072**2) [10753, x**2 - 5122],
eqmod out_poly (512*inp_poly073**2) [10753, x**2 - 5631],
eqmod out_poly (512*inp_poly074**2) [10753, x**2 - 9831],
eqmod out_poly (512*inp_poly075**2) [10753, x**2 - 922],
eqmod out_poly (512*inp_poly076**2) [10753, x**2 - 9706],
eqmod out_poly (512*inp_poly077**2) [10753, x**2 - 1047],
eqmod out_poly (512*inp_poly078**2) [10753, x**2 - 4455],
eqmod out_poly (512*inp_poly079**2) [10753, x**2 - 6298],
eqmod out_poly (512*inp_poly07a**2) [10753, x**2 - 2085],
eqmod out_poly (512*inp_poly07b**2) [10753, x**2 - 8668],
eqmod out_poly (512*inp_poly07c**2) [10753, x**2 - 10659],
eqmod out_poly (512*inp_poly07d**2) [10753, x**2 - 94],
eqmod out_poly (512*inp_poly07e**2) [10753, x**2 - 2599],
eqmod out_poly (512*inp_poly07f**2) [10753, x**2 - 8154],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 21, 82 ] ];


(**************** CUT  92 *****************)

ecut and [
eqmod out_poly (512*inp_poly080**2) [10753, x**2 - 100],
eqmod out_poly (512*inp_poly081**2) [10753, x**2 - 10653],
eqmod out_poly (512*inp_poly082**2) [10753, x**2 - 2726],
eqmod out_poly (512*inp_poly083**2) [10753, x**2 - 8027],
eqmod out_poly (512*inp_poly084**2) [10753, x**2 - 10594],
eqmod out_poly (512*inp_poly085**2) [10753, x**2 - 159],
eqmod out_poly (512*inp_poly086**2) [10753, x**2 - 4053],
eqmod out_poly (512*inp_poly087**2) [10753, x**2 - 6700],
eqmod out_poly (512*inp_poly088**2) [10753, x**2 - 6448],
eqmod out_poly (512*inp_poly089**2) [10753, x**2 - 4305],
eqmod out_poly (512*inp_poly08a**2) [10753, x**2 - 2004],
eqmod out_poly (512*inp_poly08b**2) [10753, x**2 - 8749],
eqmod out_poly (512*inp_poly08c**2) [10753, x**2 - 5232],
eqmod out_poly (512*inp_poly08d**2) [10753, x**2 - 5521],
eqmod out_poly (512*inp_poly08e**2) [10753, x**2 - 8857],
eqmod out_poly (512*inp_poly08f**2) [10753, x**2 - 1896],
eqmod out_poly (512*inp_poly090**2) [10753, x**2 - 7870],
eqmod out_poly (512*inp_poly091**2) [10753, x**2 - 2883],
eqmod out_poly (512*inp_poly092**2) [10753, x**2 - 5928],
eqmod out_poly (512*inp_poly093**2) [10753, x**2 - 4825],
eqmod out_poly (512*inp_poly094**2) [10753, x**2 - 10068],
eqmod out_poly (512*inp_poly095**2) [10753, x**2 - 685],
eqmod out_poly (512*inp_poly096**2) [10753, x**2 - 10360],
eqmod out_poly (512*inp_poly097**2) [10753, x**2 - 393],
eqmod out_poly (512*inp_poly098**2) [10753, x**2 - 10669],
eqmod out_poly (512*inp_poly099**2) [10753, x**2 - 84],
eqmod out_poly (512*inp_poly09a**2) [10753, x**2 - 721],
eqmod out_poly (512*inp_poly09b**2) [10753, x**2 - 10032],
eqmod out_poly (512*inp_poly09c**2) [10753, x**2 - 5295],
eqmod out_poly (512*inp_poly09d**2) [10753, x**2 - 5458],
eqmod out_poly (512*inp_poly09e**2) [10753, x**2 - 5628],
eqmod out_poly (512*inp_poly09f**2) [10753, x**2 - 5125],
eqmod out_poly (512*inp_poly0a0**2) [10753, x**2 - 331],
eqmod out_poly (512*inp_poly0a1**2) [10753, x**2 - 10422],
eqmod out_poly (512*inp_poly0a2**2) [10753, x**2 - 8808],
eqmod out_poly (512*inp_poly0a3**2) [10753, x**2 - 1945],
eqmod out_poly (512*inp_poly0a4**2) [10753, x**2 - 9474],
eqmod out_poly (512*inp_poly0a5**2) [10753, x**2 - 1279],
eqmod out_poly (512*inp_poly0a6**2) [10753, x**2 - 10082],
eqmod out_poly (512*inp_poly0a7**2) [10753, x**2 - 671],
eqmod out_poly (512*inp_poly0a8**2) [10753, x**2 - 267],
eqmod out_poly (512*inp_poly0a9**2) [10753, x**2 - 10486],
eqmod out_poly (512*inp_poly0aa**2) [10753, x**2 - 5773],
eqmod out_poly (512*inp_poly0ab**2) [10753, x**2 - 4980],
eqmod out_poly (512*inp_poly0ac**2) [10753, x**2 - 10436],
eqmod out_poly (512*inp_poly0ad**2) [10753, x**2 - 317],
eqmod out_poly (512*inp_poly0ae**2) [10753, x**2 - 3617],
eqmod out_poly (512*inp_poly0af**2) [10753, x**2 - 7136],
eqmod out_poly (512*inp_poly0b0**2) [10753, x**2 - 5619],
eqmod out_poly (512*inp_poly0b1**2) [10753, x**2 - 5134],
eqmod out_poly (512*inp_poly0b2**2) [10753, x**2 - 2847],
eqmod out_poly (512*inp_poly0b3**2) [10753, x**2 - 7906],
eqmod out_poly (512*inp_poly0b4**2) [10753, x**2 - 7948],
eqmod out_poly (512*inp_poly0b5**2) [10753, x**2 - 2805],
eqmod out_poly (512*inp_poly0b6**2) [10753, x**2 - 10635],
eqmod out_poly (512*inp_poly0b7**2) [10753, x**2 - 118],
eqmod out_poly (512*inp_poly0b8**2) [10753, x**2 - 7034],
eqmod out_poly (512*inp_poly0b9**2) [10753, x**2 - 3719],
eqmod out_poly (512*inp_poly0ba**2) [10753, x**2 - 5935],
eqmod out_poly (512*inp_poly0bb**2) [10753, x**2 - 4818],
eqmod out_poly (512*inp_poly0bc**2) [10753, x**2 - 10537],
eqmod out_poly (512*inp_poly0bd**2) [10753, x**2 - 216],
eqmod out_poly (512*inp_poly0be**2) [10753, x**2 - 1854],
eqmod out_poly (512*inp_poly0bf**2) [10753, x**2 - 8899],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 28, 83 ] ];


(**************** CUT  93 *****************)

ecut and [
eqmod out_poly (512*inp_poly0c0**2) [10753, x**2 - 10724],
eqmod out_poly (512*inp_poly0c1**2) [10753, x**2 - 29],
eqmod out_poly (512*inp_poly0c2**2) [10753, x**2 - 1145],
eqmod out_poly (512*inp_poly0c3**2) [10753, x**2 - 9608],
eqmod out_poly (512*inp_poly0c4**2) [10753, x**2 - 1444],
eqmod out_poly (512*inp_poly0c5**2) [10753, x**2 - 9309],
eqmod out_poly (512*inp_poly0c6**2) [10753, x**2 - 1943],
eqmod out_poly (512*inp_poly0c7**2) [10753, x**2 - 8810],
eqmod out_poly (512*inp_poly0c8**2) [10753, x**2 - 5012],
eqmod out_poly (512*inp_poly0c9**2) [10753, x**2 - 5741],
eqmod out_poly (512*inp_poly0ca**2) [10753, x**2 - 7161],
eqmod out_poly (512*inp_poly0cb**2) [10753, x**2 - 3592],
eqmod out_poly (512*inp_poly0cc**2) [10753, x**2 - 6655],
eqmod out_poly (512*inp_poly0cd**2) [10753, x**2 - 4098],
eqmod out_poly (512*inp_poly0ce**2) [10753, x**2 - 8292],
eqmod out_poly (512*inp_poly0cf**2) [10753, x**2 - 2461],
eqmod out_poly (512*inp_poly0d0**2) [10753, x**2 - 9546],
eqmod out_poly (512*inp_poly0d1**2) [10753, x**2 - 1207],
eqmod out_poly (512*inp_poly0d2**2) [10753, x**2 - 9464],
eqmod out_poly (512*inp_poly0d3**2) [10753, x**2 - 1289],
eqmod out_poly (512*inp_poly0d4**2) [10753, x**2 - 10414],
eqmod out_poly (512*inp_poly0d5**2) [10753, x**2 - 339],
eqmod out_poly (512*inp_poly0d6**2) [10753, x**2 - 5598],
eqmod out_poly (512*inp_poly0d7**2) [10753, x**2 - 5155],
eqmod out_poly (512*inp_poly0d8**2) [10753, x**2 - 9487],
eqmod out_poly (512*inp_poly0d9**2) [10753, x**2 - 1266],
eqmod out_poly (512*inp_poly0da**2) [10753, x**2 - 5490],
eqmod out_poly (512*inp_poly0db**2) [10753, x**2 - 5263],
eqmod out_poly (512*inp_poly0dc**2) [10753, x**2 - 2228],
eqmod out_poly (512*inp_poly0dd**2) [10753, x**2 - 8525],
eqmod out_poly (512*inp_poly0de**2) [10753, x**2 - 9551],
eqmod out_poly (512*inp_poly0df**2) [10753, x**2 - 1202],
eqmod out_poly (512*inp_poly0e0**2) [10753, x**2 - 8829],
eqmod out_poly (512*inp_poly0e1**2) [10753, x**2 - 1924],
eqmod out_poly (512*inp_poly0e2**2) [10753, x**2 - 2177],
eqmod out_poly (512*inp_poly0e3**2) [10753, x**2 - 8576],
eqmod out_poly (512*inp_poly0e4**2) [10753, x**2 - 6070],
eqmod out_poly (512*inp_poly0e5**2) [10753, x**2 - 4683],
eqmod out_poly (512*inp_poly0e6**2) [10753, x**2 - 10625],
eqmod out_poly (512*inp_poly0e7**2) [10753, x**2 - 128],
eqmod out_poly (512*inp_poly0e8**2) [10753, x**2 - 3256],
eqmod out_poly (512*inp_poly0e9**2) [10753, x**2 - 7497],
eqmod out_poly (512*inp_poly0ea**2) [10753, x**2 - 7896],
eqmod out_poly (512*inp_poly0eb**2) [10753, x**2 - 2857],
eqmod out_poly (512*inp_poly0ec**2) [10753, x**2 - 2135],
eqmod out_poly (512*inp_poly0ed**2) [10753, x**2 - 8618],
eqmod out_poly (512*inp_poly0ee**2) [10753, x**2 - 7661],
eqmod out_poly (512*inp_poly0ef**2) [10753, x**2 - 3092],
eqmod out_poly (512*inp_poly0f0**2) [10753, x**2 - 5575],
eqmod out_poly (512*inp_poly0f1**2) [10753, x**2 - 5178],
eqmod out_poly (512*inp_poly0f2**2) [10753, x**2 - 6809],
eqmod out_poly (512*inp_poly0f3**2) [10753, x**2 - 3944],
eqmod out_poly (512*inp_poly0f4**2) [10753, x**2 - 4577],
eqmod out_poly (512*inp_poly0f5**2) [10753, x**2 - 6176],
eqmod out_poly (512*inp_poly0f6**2) [10753, x**2 - 2830],
eqmod out_poly (512*inp_poly0f7**2) [10753, x**2 - 7923],
eqmod out_poly (512*inp_poly0f8**2) [10753, x**2 - 4627],
eqmod out_poly (512*inp_poly0f9**2) [10753, x**2 - 6126],
eqmod out_poly (512*inp_poly0fa**2) [10753, x**2 - 4193],
eqmod out_poly (512*inp_poly0fb**2) [10753, x**2 - 6560],
eqmod out_poly (512*inp_poly0fc**2) [10753, x**2 - 1353],
eqmod out_poly (512*inp_poly0fd**2) [10753, x**2 - 9400],
eqmod out_poly (512*inp_poly0fe**2) [10753, x**2 - 1828],
eqmod out_poly (512*inp_poly0ff**2) [10753, x**2 - 8925],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 35, 84 ] ];


(**************** CUT  94 *****************)

ecut and [
eqmod out_poly (512*inp_poly100**2) [10753, x**2 - 10],
eqmod out_poly (512*inp_poly101**2) [10753, x**2 - 10743],
eqmod out_poly (512*inp_poly102**2) [10753, x**2 - 8875],
eqmod out_poly (512*inp_poly103**2) [10753, x**2 - 1878],
eqmod out_poly (512*inp_poly104**2) [10753, x**2 - 3210],
eqmod out_poly (512*inp_poly105**2) [10753, x**2 - 7543],
eqmod out_poly (512*inp_poly106**2) [10753, x**2 - 10083],
eqmod out_poly (512*inp_poly107**2) [10753, x**2 - 670],
eqmod out_poly (512*inp_poly108**2) [10753, x**2 - 4946],
eqmod out_poly (512*inp_poly109**2) [10753, x**2 - 5807],
eqmod out_poly (512*inp_poly10a**2) [10753, x**2 - 2351],
eqmod out_poly (512*inp_poly10b**2) [10753, x**2 - 8402],
eqmod out_poly (512*inp_poly10c**2) [10753, x**2 - 6975],
eqmod out_poly (512*inp_poly10d**2) [10753, x**2 - 3778],
eqmod out_poly (512*inp_poly10e**2) [10753, x**2 - 1961],
eqmod out_poly (512*inp_poly10f**2) [10753, x**2 - 8792],
eqmod out_poly (512*inp_poly110**2) [10753, x**2 - 787],
eqmod out_poly (512*inp_poly111**2) [10753, x**2 - 9966],
eqmod out_poly (512*inp_poly112**2) [10753, x**2 - 4894],
eqmod out_poly (512*inp_poly113**2) [10753, x**2 - 5859],
eqmod out_poly (512*inp_poly114**2) [10753, x**2 - 5308],
eqmod out_poly (512*inp_poly115**2) [10753, x**2 - 5445],
eqmod out_poly (512*inp_poly116**2) [10753, x**2 - 1036],
eqmod out_poly (512*inp_poly117**2) [10753, x**2 - 9717],
eqmod out_poly (512*inp_poly118**2) [10753, x**2 - 8594],
eqmod out_poly (512*inp_poly119**2) [10753, x**2 - 2159],
eqmod out_poly (512*inp_poly11a**2) [10753, x**2 - 3298],
eqmod out_poly (512*inp_poly11b**2) [10753, x**2 - 7455],
eqmod out_poly (512*inp_poly11c**2) [10753, x**2 - 5906],
eqmod out_poly (512*inp_poly11d**2) [10753, x**2 - 4847],
eqmod out_poly (512*inp_poly11e**2) [10753, x**2 - 4864],
eqmod out_poly (512*inp_poly11f**2) [10753, x**2 - 5889],
eqmod out_poly (512*inp_poly120**2) [10753, x**2 - 3259],
eqmod out_poly (512*inp_poly121**2) [10753, x**2 - 7494],
eqmod out_poly (512*inp_poly122**2) [10753, x**2 - 5182],
eqmod out_poly (512*inp_poly123**2) [10753, x**2 - 5571],
eqmod out_poly (512*inp_poly124**2) [10753, x**2 - 3098],
eqmod out_poly (512*inp_poly125**2) [10753, x**2 - 7655],
eqmod out_poly (512*inp_poly126**2) [10753, x**2 - 7460],
eqmod out_poly (512*inp_poly127**2) [10753, x**2 - 3293],
eqmod out_poly (512*inp_poly128**2) [10753, x**2 - 1102],
eqmod out_poly (512*inp_poly129**2) [10753, x**2 - 9651],
eqmod out_poly (512*inp_poly12a**2) [10753, x**2 - 10255],
eqmod out_poly (512*inp_poly12b**2) [10753, x**2 - 498],
eqmod out_poly (512*inp_poly12c**2) [10753, x**2 - 9646],
eqmod out_poly (512*inp_poly12d**2) [10753, x**2 - 1107],
eqmod out_poly (512*inp_poly12e**2) [10753, x**2 - 1437],
eqmod out_poly (512*inp_poly12f**2) [10753, x**2 - 9316],
eqmod out_poly (512*inp_poly130**2) [10753, x**2 - 8089],
eqmod out_poly (512*inp_poly131**2) [10753, x**2 - 2664],
eqmod out_poly (512*inp_poly132**2) [10753, x**2 - 1360],
eqmod out_poly (512*inp_poly133**2) [10753, x**2 - 9393],
eqmod out_poly (512*inp_poly134**2) [10753, x**2 - 5096],
eqmod out_poly (512*inp_poly135**2) [10753, x**2 - 5657],
eqmod out_poly (512*inp_poly136**2) [10753, x**2 - 6440],
eqmod out_poly (512*inp_poly137**2) [10753, x**2 - 4313],
eqmod out_poly (512*inp_poly138**2) [10753, x**2 - 2854],
eqmod out_poly (512*inp_poly139**2) [10753, x**2 - 7899],
eqmod out_poly (512*inp_poly13a**2) [10753, x**2 - 5970],
eqmod out_poly (512*inp_poly13b**2) [10753, x**2 - 4783],
eqmod out_poly (512*inp_poly13c**2) [10753, x**2 - 2129],
eqmod out_poly (512*inp_poly13d**2) [10753, x**2 - 8624],
eqmod out_poly (512*inp_poly13e**2) [10753, x**2 - 2336],
eqmod out_poly (512*inp_poly13f**2) [10753, x**2 - 8417],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 42, 85 ] ];


(**************** CUT  95 *****************)

ecut and [
eqmod out_poly (512*inp_poly140**2) [10753, x**2 - 3223],
eqmod out_poly (512*inp_poly141**2) [10753, x**2 - 7530],
eqmod out_poly (512*inp_poly142**2) [10753, x**2 - 5491],
eqmod out_poly (512*inp_poly143**2) [10753, x**2 - 5262],
eqmod out_poly (512*inp_poly144**2) [10753, x**2 - 2295],
eqmod out_poly (512*inp_poly145**2) [10753, x**2 - 8458],
eqmod out_poly (512*inp_poly146**2) [10753, x**2 - 9872],
eqmod out_poly (512*inp_poly147**2) [10753, x**2 - 881],
eqmod out_poly (512*inp_poly148**2) [10753, x**2 - 6953],
eqmod out_poly (512*inp_poly149**2) [10753, x**2 - 3800],
eqmod out_poly (512*inp_poly14a**2) [10753, x**2 - 3942],
eqmod out_poly (512*inp_poly14b**2) [10753, x**2 - 6811],
eqmod out_poly (512*inp_poly14c**2) [10753, x**2 - 6042],
eqmod out_poly (512*inp_poly14d**2) [10753, x**2 - 4711],
eqmod out_poly (512*inp_poly14e**2) [10753, x**2 - 7281],
eqmod out_poly (512*inp_poly14f**2) [10753, x**2 - 3472],
eqmod out_poly (512*inp_poly150**2) [10753, x**2 - 9557],
eqmod out_poly (512*inp_poly151**2) [10753, x**2 - 1196],
eqmod out_poly (512*inp_poly152**2) [10753, x**2 - 3097],
eqmod out_poly (512*inp_poly153**2) [10753, x**2 - 7656],
eqmod out_poly (512*inp_poly154**2) [10753, x**2 - 3192],
eqmod out_poly (512*inp_poly155**2) [10753, x**2 - 7561],
eqmod out_poly (512*inp_poly156**2) [10753, x**2 - 4861],
eqmod out_poly (512*inp_poly157**2) [10753, x**2 - 5892],
eqmod out_poly (512*inp_poly158**2) [10753, x**2 - 2024],
eqmod out_poly (512*inp_poly159**2) [10753, x**2 - 8729],
eqmod out_poly (512*inp_poly15a**2) [10753, x**2 - 549],
eqmod out_poly (512*inp_poly15b**2) [10753, x**2 - 10204],
eqmod out_poly (512*inp_poly15c**2) [10753, x**2 - 4524],
eqmod out_poly (512*inp_poly15d**2) [10753, x**2 - 6229],
eqmod out_poly (512*inp_poly15e**2) [10753, x**2 - 4181],
eqmod out_poly (512*inp_poly15f**2) [10753, x**2 - 6572],
eqmod out_poly (512*inp_poly160**2) [10753, x**2 - 8410],
eqmod out_poly (512*inp_poly161**2) [10753, x**2 - 2343],
eqmod out_poly (512*inp_poly162**2) [10753, x**2 - 1293],
eqmod out_poly (512*inp_poly163**2) [10753, x**2 - 9460],
eqmod out_poly (512*inp_poly164**2) [10753, x**2 - 607],
eqmod out_poly (512*inp_poly165**2) [10753, x**2 - 10146],
eqmod out_poly (512*inp_poly166**2) [10753, x**2 - 6439],
eqmod out_poly (512*inp_poly167**2) [10753, x**2 - 4314],
eqmod out_poly (512*inp_poly168**2) [10753, x**2 - 8928],
eqmod out_poly (512*inp_poly169**2) [10753, x**2 - 1825],
eqmod out_poly (512*inp_poly16a**2) [10753, x**2 - 9392],
eqmod out_poly (512*inp_poly16b**2) [10753, x**2 - 1361],
eqmod out_poly (512*inp_poly16c**2) [10753, x**2 - 5590],
eqmod out_poly (512*inp_poly16d**2) [10753, x**2 - 5163],
eqmod out_poly (512*inp_poly16e**2) [10753, x**2 - 3992],
eqmod out_poly (512*inp_poly16f**2) [10753, x**2 - 6761],
eqmod out_poly (512*inp_poly170**2) [10753, x**2 - 5934],
eqmod out_poly (512*inp_poly171**2) [10753, x**2 - 4819],
eqmod out_poly (512*inp_poly172**2) [10753, x**2 - 8208],
eqmod out_poly (512*inp_poly173**2) [10753, x**2 - 2545],
eqmod out_poly (512*inp_poly174**2) [10753, x**2 - 1533],
eqmod out_poly (512*inp_poly175**2) [10753, x**2 - 9220],
eqmod out_poly (512*inp_poly176**2) [10753, x**2 - 283],
eqmod out_poly (512*inp_poly177**2) [10753, x**2 - 10470],
eqmod out_poly (512*inp_poly178**2) [10753, x**2 - 1538],
eqmod out_poly (512*inp_poly179**2) [10753, x**2 - 9215],
eqmod out_poly (512*inp_poly17a**2) [10753, x**2 - 10097],
eqmod out_poly (512*inp_poly17b**2) [10753, x**2 - 656],
eqmod out_poly (512*inp_poly17c**2) [10753, x**2 - 9813],
eqmod out_poly (512*inp_poly17d**2) [10753, x**2 - 940],
eqmod out_poly (512*inp_poly17e**2) [10753, x**2 - 4484],
eqmod out_poly (512*inp_poly17f**2) [10753, x**2 - 6269],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 49, 86 ] ];


(**************** CUT  96 *****************)

ecut and [
eqmod out_poly (512*inp_poly180**2) [10753, x**2 - 1000],
eqmod out_poly (512*inp_poly181**2) [10753, x**2 - 9753],
eqmod out_poly (512*inp_poly182**2) [10753, x**2 - 5754],
eqmod out_poly (512*inp_poly183**2) [10753, x**2 - 4999],
eqmod out_poly (512*inp_poly184**2) [10753, x**2 - 9163],
eqmod out_poly (512*inp_poly185**2) [10753, x**2 - 1590],
eqmod out_poly (512*inp_poly186**2) [10753, x**2 - 8271],
eqmod out_poly (512*inp_poly187**2) [10753, x**2 - 2482],
eqmod out_poly (512*inp_poly188**2) [10753, x**2 - 10715],
eqmod out_poly (512*inp_poly189**2) [10753, x**2 - 38],
eqmod out_poly (512*inp_poly18a**2) [10753, x**2 - 9287],
eqmod out_poly (512*inp_poly18b**2) [10753, x**2 - 1466],
eqmod out_poly (512*inp_poly18c**2) [10753, x**2 - 9308],
eqmod out_poly (512*inp_poly18d**2) [10753, x**2 - 1445],
eqmod out_poly (512*inp_poly18e**2) [10753, x**2 - 2546],
eqmod out_poly (512*inp_poly18f**2) [10753, x**2 - 8207],
eqmod out_poly (512*inp_poly190**2) [10753, x**2 - 3429],
eqmod out_poly (512*inp_poly191**2) [10753, x**2 - 7324],
eqmod out_poly (512*inp_poly192**2) [10753, x**2 - 5515],
eqmod out_poly (512*inp_poly193**2) [10753, x**2 - 5238],
eqmod out_poly (512*inp_poly194**2) [10753, x**2 - 3903],
eqmod out_poly (512*inp_poly195**2) [10753, x**2 - 6850],
eqmod out_poly (512*inp_poly196**2) [10753, x**2 - 6823],
eqmod out_poly (512*inp_poly197**2) [10753, x**2 - 3930],
eqmod out_poly (512*inp_poly198**2) [10753, x**2 - 9913],
eqmod out_poly (512*inp_poly199**2) [10753, x**2 - 840],
eqmod out_poly (512*inp_poly19a**2) [10753, x**2 - 7210],
eqmod out_poly (512*inp_poly19b**2) [10753, x**2 - 3543],
eqmod out_poly (512*inp_poly19c**2) [10753, x**2 - 9938],
eqmod out_poly (512*inp_poly19d**2) [10753, x**2 - 815],
eqmod out_poly (512*inp_poly19e**2) [10753, x**2 - 2515],
eqmod out_poly (512*inp_poly19f**2) [10753, x**2 - 8238],
eqmod out_poly (512*inp_poly1a0**2) [10753, x**2 - 3310],
eqmod out_poly (512*inp_poly1a1**2) [10753, x**2 - 7443],
eqmod out_poly (512*inp_poly1a2**2) [10753, x**2 - 2056],
eqmod out_poly (512*inp_poly1a3**2) [10753, x**2 - 8697],
eqmod out_poly (512*inp_poly1a4**2) [10753, x**2 - 8716],
eqmod out_poly (512*inp_poly1a5**2) [10753, x**2 - 2037],
eqmod out_poly (512*inp_poly1a6**2) [10753, x**2 - 4043],
eqmod out_poly (512*inp_poly1a7**2) [10753, x**2 - 6710],
eqmod out_poly (512*inp_poly1a8**2) [10753, x**2 - 2670],
eqmod out_poly (512*inp_poly1a9**2) [10753, x**2 - 8083],
eqmod out_poly (512*inp_poly1aa**2) [10753, x**2 - 3965],
eqmod out_poly (512*inp_poly1ab**2) [10753, x**2 - 6788],
eqmod out_poly (512*inp_poly1ac**2) [10753, x**2 - 7583],
eqmod out_poly (512*inp_poly1ad**2) [10753, x**2 - 3170],
eqmod out_poly (512*inp_poly1ae**2) [10753, x**2 - 3911],
eqmod out_poly (512*inp_poly1af**2) [10753, x**2 - 6842],
eqmod out_poly (512*inp_poly1b0**2) [10753, x**2 - 2425],
eqmod out_poly (512*inp_poly1b1**2) [10753, x**2 - 8328],
eqmod out_poly (512*inp_poly1b2**2) [10753, x**2 - 6964],
eqmod out_poly (512*inp_poly1b3**2) [10753, x**2 - 3789],
eqmod out_poly (512*inp_poly1b4**2) [10753, x**2 - 4209],
eqmod out_poly (512*inp_poly1b5**2) [10753, x**2 - 6544],
eqmod out_poly (512*inp_poly1b6**2) [10753, x**2 - 9573],
eqmod out_poly (512*inp_poly1b7**2) [10753, x**2 - 1180],
eqmod out_poly (512*inp_poly1b8**2) [10753, x**2 - 5822],
eqmod out_poly (512*inp_poly1b9**2) [10753, x**2 - 4931],
eqmod out_poly (512*inp_poly1ba**2) [10753, x**2 - 5585],
eqmod out_poly (512*inp_poly1bb**2) [10753, x**2 - 5168],
eqmod out_poly (512*inp_poly1bc**2) [10753, x**2 - 8593],
eqmod out_poly (512*inp_poly1bd**2) [10753, x**2 - 2160],
eqmod out_poly (512*inp_poly1be**2) [10753, x**2 - 7787],
eqmod out_poly (512*inp_poly1bf**2) [10753, x**2 - 2966],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 56, 87 ] ];


(**************** CUT  97 *****************)

ecut and [
eqmod out_poly (512*inp_poly1c0**2) [10753, x**2 - 10463],
eqmod out_poly (512*inp_poly1c1**2) [10753, x**2 - 290],
eqmod out_poly (512*inp_poly1c2**2) [10753, x**2 - 697],
eqmod out_poly (512*inp_poly1c3**2) [10753, x**2 - 10056],
eqmod out_poly (512*inp_poly1c4**2) [10753, x**2 - 3687],
eqmod out_poly (512*inp_poly1c5**2) [10753, x**2 - 7066],
eqmod out_poly (512*inp_poly1c6**2) [10753, x**2 - 8677],
eqmod out_poly (512*inp_poly1c7**2) [10753, x**2 - 2076],
eqmod out_poly (512*inp_poly1c8**2) [10753, x**2 - 7108],
eqmod out_poly (512*inp_poly1c9**2) [10753, x**2 - 3645],
eqmod out_poly (512*inp_poly1ca**2) [10753, x**2 - 7092],
eqmod out_poly (512*inp_poly1cb**2) [10753, x**2 - 3661],
eqmod out_poly (512*inp_poly1cc**2) [10753, x**2 - 2032],
eqmod out_poly (512*inp_poly1cd**2) [10753, x**2 - 8721],
eqmod out_poly (512*inp_poly1ce**2) [10753, x**2 - 7649],
eqmod out_poly (512*inp_poly1cf**2) [10753, x**2 - 3104],
eqmod out_poly (512*inp_poly1d0**2) [10753, x**2 - 9436],
eqmod out_poly (512*inp_poly1d1**2) [10753, x**2 - 1317],
eqmod out_poly (512*inp_poly1d2**2) [10753, x**2 - 8616],
eqmod out_poly (512*inp_poly1d3**2) [10753, x**2 - 2137],
eqmod out_poly (512*inp_poly1d4**2) [10753, x**2 - 7363],
eqmod out_poly (512*inp_poly1d5**2) [10753, x**2 - 3390],
eqmod out_poly (512*inp_poly1d6**2) [10753, x**2 - 2215],
eqmod out_poly (512*inp_poly1d7**2) [10753, x**2 - 8538],
eqmod out_poly (512*inp_poly1d8**2) [10753, x**2 - 8846],
eqmod out_poly (512*inp_poly1d9**2) [10753, x**2 - 1907],
eqmod out_poly (512*inp_poly1da**2) [10753, x**2 - 1135],
eqmod out_poly (512*inp_poly1db**2) [10753, x**2 - 9618],
eqmod out_poly (512*inp_poly1dc**2) [10753, x**2 - 774],
eqmod out_poly (512*inp_poly1dd**2) [10753, x**2 - 9979],
eqmod out_poly (512*inp_poly1de**2) [10753, x**2 - 9486],
eqmod out_poly (512*inp_poly1df**2) [10753, x**2 - 1267],
eqmod out_poly (512*inp_poly1e0**2) [10753, x**2 - 2266],
eqmod out_poly (512*inp_poly1e1**2) [10753, x**2 - 8487],
eqmod out_poly (512*inp_poly1e2**2) [10753, x**2 - 264],
eqmod out_poly (512*inp_poly1e3**2) [10753, x**2 - 10489],
eqmod out_poly (512*inp_poly1e4**2) [10753, x**2 - 6935],
eqmod out_poly (512*inp_poly1e5**2) [10753, x**2 - 3818],
eqmod out_poly (512*inp_poly1e6**2) [10753, x**2 - 9473],
eqmod out_poly (512*inp_poly1e7**2) [10753, x**2 - 1280],
eqmod out_poly (512*inp_poly1e8**2) [10753, x**2 - 301],
eqmod out_poly (512*inp_poly1e9**2) [10753, x**2 - 10452],
eqmod out_poly (512*inp_poly1ea**2) [10753, x**2 - 3689],
eqmod out_poly (512*inp_poly1eb**2) [10753, x**2 - 7064],
eqmod out_poly (512*inp_poly1ec**2) [10753, x**2 - 10597],
eqmod out_poly (512*inp_poly1ed**2) [10753, x**2 - 156],
eqmod out_poly (512*inp_poly1ee**2) [10753, x**2 - 1339],
eqmod out_poly (512*inp_poly1ef**2) [10753, x**2 - 9414],
eqmod out_poly (512*inp_poly1f0**2) [10753, x**2 - 1985],
eqmod out_poly (512*inp_poly1f1**2) [10753, x**2 - 8768],
eqmod out_poly (512*inp_poly1f2**2) [10753, x**2 - 3572],
eqmod out_poly (512*inp_poly1f3**2) [10753, x**2 - 7181],
eqmod out_poly (512*inp_poly1f4**2) [10753, x**2 - 2758],
eqmod out_poly (512*inp_poly1f5**2) [10753, x**2 - 7995],
eqmod out_poly (512*inp_poly1f6**2) [10753, x**2 - 6794],
eqmod out_poly (512*inp_poly1f7**2) [10753, x**2 - 3959],
eqmod out_poly (512*inp_poly1f8**2) [10753, x**2 - 3258],
eqmod out_poly (512*inp_poly1f9**2) [10753, x**2 - 7495],
eqmod out_poly (512*inp_poly1fa**2) [10753, x**2 - 9671],
eqmod out_poly (512*inp_poly1fb**2) [10753, x**2 - 1082],
eqmod out_poly (512*inp_poly1fc**2) [10753, x**2 - 2777],
eqmod out_poly (512*inp_poly1fd**2) [10753, x**2 - 7976],
eqmod out_poly (512*inp_poly1fe**2) [10753, x**2 - 7527],
eqmod out_poly (512*inp_poly1ff**2) [10753, x**2 - 3226],
out_poly =
out_poly0*x**  0+out_poly1*x** 16+out_poly2*x** 32+out_poly3*x** 48+
out_poly4*x** 64+out_poly5*x** 80+out_poly6*x** 96+out_poly7*x**112
] prove with [ cuts [ 63, 88 ] ];



{
(**************** postcondition *****************)

and [
eqmod (out_poly) (512*inp_poly000**2) [10753, x**2 - 1],
eqmod (out_poly) (512*inp_poly001**2) [10753, x**2 - 10752],
eqmod (out_poly) (512*inp_poly002**2) [10753, x**2 - 6264],
eqmod (out_poly) (512*inp_poly003**2) [10753, x**2 - 4489],
eqmod (out_poly) (512*inp_poly004**2) [10753, x**2 - 321],
eqmod (out_poly) (512*inp_poly005**2) [10753, x**2 - 10432],
eqmod (out_poly) (512*inp_poly006**2) [10753, x**2 - 10686],
eqmod (out_poly) (512*inp_poly007**2) [10753, x**2 - 67],
eqmod (out_poly) (512*inp_poly008**2) [10753, x**2 - 9097],
eqmod (out_poly) (512*inp_poly009**2) [10753, x**2 - 1656],
eqmod (out_poly) (512*inp_poly00a**2) [10753, x**2 - 3461],
eqmod (out_poly) (512*inp_poly00b**2) [10753, x**2 - 7292],
eqmod (out_poly) (512*inp_poly00c**2) [10753, x**2 - 6074],
eqmod (out_poly) (512*inp_poly00d**2) [10753, x**2 - 4679],
eqmod (out_poly) (512*inp_poly00e**2) [10753, x**2 - 3422],
eqmod (out_poly) (512*inp_poly00f**2) [10753, x**2 - 7331],
eqmod (out_poly) (512*inp_poly010**2) [10753, x**2 - 1154],
eqmod (out_poly) (512*inp_poly011**2) [10753, x**2 - 9599],
eqmod (out_poly) (512*inp_poly012**2) [10753, x**2 - 2640],
eqmod (out_poly) (512*inp_poly013**2) [10753, x**2 - 8113],
eqmod (out_poly) (512*inp_poly014**2) [10753, x**2 - 4832],
eqmod (out_poly) (512*inp_poly015**2) [10753, x**2 - 5921],
eqmod (out_poly) (512*inp_poly016**2) [10753, x**2 - 8706],
eqmod (out_poly) (512*inp_poly017**2) [10753, x**2 - 2047],
eqmod (out_poly) (512*inp_poly018**2) [10753, x**2 - 3010],
eqmod (out_poly) (512*inp_poly019**2) [10753, x**2 - 7743],
eqmod (out_poly) (512*inp_poly01a**2) [10753, x**2 - 4631],
eqmod (out_poly) (512*inp_poly01b**2) [10753, x**2 - 6122],
eqmod (out_poly) (512*inp_poly01c**2) [10753, x**2 - 9193],
eqmod (out_poly) (512*inp_poly01d**2) [10753, x**2 - 1560],
eqmod (out_poly) (512*inp_poly01e**2) [10753, x**2 - 2637],
eqmod (out_poly) (512*inp_poly01f**2) [10753, x**2 - 8116],
eqmod (out_poly) (512*inp_poly020**2) [10753, x**2 - 7853],
eqmod (out_poly) (512*inp_poly021**2) [10753, x**2 - 2900],
eqmod (out_poly) (512*inp_poly022**2) [10753, x**2 - 6970],
eqmod (out_poly) (512*inp_poly023**2) [10753, x**2 - 3783],
eqmod (out_poly) (512*inp_poly024**2) [10753, x**2 - 4611],
eqmod (out_poly) (512*inp_poly025**2) [10753, x**2 - 6142],
eqmod (out_poly) (512*inp_poly026**2) [10753, x**2 - 746],
eqmod (out_poly) (512*inp_poly027**2) [10753, x**2 - 10007],
eqmod (out_poly) (512*inp_poly028**2) [10753, x**2 - 6562],
eqmod (out_poly) (512*inp_poly029**2) [10753, x**2 - 4191],
eqmod (out_poly) (512*inp_poly02a**2) [10753, x**2 - 6402],
eqmod (out_poly) (512*inp_poly02b**2) [10753, x**2 - 4351],
eqmod (out_poly) (512*inp_poly02c**2) [10753, x**2 - 9567],
eqmod (out_poly) (512*inp_poly02d**2) [10753, x**2 - 1186],
eqmod (out_poly) (512*inp_poly02e**2) [10753, x**2 - 1219],
eqmod (out_poly) (512*inp_poly02f**2) [10753, x**2 - 9534],
eqmod (out_poly) (512*inp_poly030**2) [10753, x**2 - 8336],
eqmod (out_poly) (512*inp_poly031**2) [10753, x**2 - 2417],
eqmod (out_poly) (512*inp_poly032**2) [10753, x**2 - 136],
eqmod (out_poly) (512*inp_poly033**2) [10753, x**2 - 10617],
eqmod (out_poly) (512*inp_poly034**2) [10753, x**2 - 9112],
eqmod (out_poly) (512*inp_poly035**2) [10753, x**2 - 1641],
eqmod (out_poly) (512*inp_poly036**2) [10753, x**2 - 644],
eqmod (out_poly) (512*inp_poly037**2) [10753, x**2 - 10109],
eqmod (out_poly) (512*inp_poly038**2) [10753, x**2 - 2436],
eqmod (out_poly) (512*inp_poly039**2) [10753, x**2 - 8317],
eqmod (out_poly) (512*inp_poly03a**2) [10753, x**2 - 597],
eqmod (out_poly) (512*inp_poly03b**2) [10753, x**2 - 10156],
eqmod (out_poly) (512*inp_poly03c**2) [10753, x**2 - 7740],
eqmod (out_poly) (512*inp_poly03d**2) [10753, x**2 - 3013],
eqmod (out_poly) (512*inp_poly03e**2) [10753, x**2 - 8836],
eqmod (out_poly) (512*inp_poly03f**2) [10753, x**2 - 1917],
eqmod (out_poly) (512*inp_poly040**2) [10753, x**2 - 10000],
eqmod (out_poly) (512*inp_poly041**2) [10753, x**2 - 753],
eqmod (out_poly) (512*inp_poly042**2) [10753, x**2 - 3775],
eqmod (out_poly) (512*inp_poly043**2) [10753, x**2 - 6978],
eqmod (out_poly) (512*inp_poly044**2) [10753, x**2 - 5606],
eqmod (out_poly) (512*inp_poly045**2) [10753, x**2 - 5147],
eqmod (out_poly) (512*inp_poly046**2) [10753, x**2 - 7439],
eqmod (out_poly) (512*inp_poly047**2) [10753, x**2 - 3314],
eqmod (out_poly) (512*inp_poly048**2) [10753, x**2 - 10373],
eqmod (out_poly) (512*inp_poly049**2) [10753, x**2 - 380],
eqmod (out_poly) (512*inp_poly04a**2) [10753, x**2 - 6846],
eqmod (out_poly) (512*inp_poly04b**2) [10753, x**2 - 3907],
eqmod (out_poly) (512*inp_poly04c**2) [10753, x**2 - 7056],
eqmod (out_poly) (512*inp_poly04d**2) [10753, x**2 - 3697],
eqmod (out_poly) (512*inp_poly04e**2) [10753, x**2 - 3954],
eqmod (out_poly) (512*inp_poly04f**2) [10753, x**2 - 6799],
eqmod (out_poly) (512*inp_poly050**2) [10753, x**2 - 2031],
eqmod (out_poly) (512*inp_poly051**2) [10753, x**2 - 8722],
eqmod (out_poly) (512*inp_poly052**2) [10753, x**2 - 1385],
eqmod (out_poly) (512*inp_poly053**2) [10753, x**2 - 9368],
eqmod (out_poly) (512*inp_poly054**2) [10753, x**2 - 6771],
eqmod (out_poly) (512*inp_poly055**2) [10753, x**2 - 3982],
eqmod (out_poly) (512*inp_poly056**2) [10753, x**2 - 3712],
eqmod (out_poly) (512*inp_poly057**2) [10753, x**2 - 7041],
eqmod (out_poly) (512*inp_poly058**2) [10753, x**2 - 2353],
eqmod (out_poly) (512*inp_poly059**2) [10753, x**2 - 8400],
eqmod (out_poly) (512*inp_poly05a**2) [10753, x**2 - 7582],
eqmod (out_poly) (512*inp_poly05b**2) [10753, x**2 - 3171],
eqmod (out_poly) (512*inp_poly05c**2) [10753, x**2 - 2603],
eqmod (out_poly) (512*inp_poly05d**2) [10753, x**2 - 8150],
eqmod (out_poly) (512*inp_poly05e**2) [10753, x**2 - 3644],
eqmod (out_poly) (512*inp_poly05f**2) [10753, x**2 - 7109],
eqmod (out_poly) (512*inp_poly060**2) [10753, x**2 - 841],
eqmod (out_poly) (512*inp_poly061**2) [10753, x**2 - 9912],
eqmod (out_poly) (512*inp_poly062**2) [10753, x**2 - 9807],
eqmod (out_poly) (512*inp_poly063**2) [10753, x**2 - 946],
eqmod (out_poly) (512*inp_poly064**2) [10753, x**2 - 1136],
eqmod (out_poly) (512*inp_poly065**2) [10753, x**2 - 9617],
eqmod (out_poly) (512*inp_poly066**2) [10753, x**2 - 8171],
eqmod (out_poly) (512*inp_poly067**2) [10753, x**2 - 2582],
eqmod (out_poly) (512*inp_poly068**2) [10753, x**2 - 5194],
eqmod (out_poly) (512*inp_poly069**2) [10753, x**2 - 5559],
eqmod (out_poly) (512*inp_poly06a**2) [10753, x**2 - 7391],
eqmod (out_poly) (512*inp_poly06b**2) [10753, x**2 - 3362],
eqmod (out_poly) (512*inp_poly06c**2) [10753, x**2 - 559],
eqmod (out_poly) (512*inp_poly06d**2) [10753, x**2 - 10194],
eqmod (out_poly) (512*inp_poly06e**2) [10753, x**2 - 6851],
eqmod (out_poly) (512*inp_poly06f**2) [10753, x**2 - 3902],
eqmod (out_poly) (512*inp_poly070**2) [10753, x**2 - 2744],
eqmod (out_poly) (512*inp_poly071**2) [10753, x**2 - 8009],
eqmod (out_poly) (512*inp_poly072**2) [10753, x**2 - 5122],
eqmod (out_poly) (512*inp_poly073**2) [10753, x**2 - 5631],
eqmod (out_poly) (512*inp_poly074**2) [10753, x**2 - 9831],
eqmod (out_poly) (512*inp_poly075**2) [10753, x**2 - 922],
eqmod (out_poly) (512*inp_poly076**2) [10753, x**2 - 9706],
eqmod (out_poly) (512*inp_poly077**2) [10753, x**2 - 1047],
eqmod (out_poly) (512*inp_poly078**2) [10753, x**2 - 4455],
eqmod (out_poly) (512*inp_poly079**2) [10753, x**2 - 6298],
eqmod (out_poly) (512*inp_poly07a**2) [10753, x**2 - 2085],
eqmod (out_poly) (512*inp_poly07b**2) [10753, x**2 - 8668],
eqmod (out_poly) (512*inp_poly07c**2) [10753, x**2 - 10659],
eqmod (out_poly) (512*inp_poly07d**2) [10753, x**2 - 94],
eqmod (out_poly) (512*inp_poly07e**2) [10753, x**2 - 2599],
eqmod (out_poly) (512*inp_poly07f**2) [10753, x**2 - 8154],
eqmod (out_poly) (512*inp_poly080**2) [10753, x**2 - 100],
eqmod (out_poly) (512*inp_poly081**2) [10753, x**2 - 10653],
eqmod (out_poly) (512*inp_poly082**2) [10753, x**2 - 2726],
eqmod (out_poly) (512*inp_poly083**2) [10753, x**2 - 8027],
eqmod (out_poly) (512*inp_poly084**2) [10753, x**2 - 10594],
eqmod (out_poly) (512*inp_poly085**2) [10753, x**2 - 159],
eqmod (out_poly) (512*inp_poly086**2) [10753, x**2 - 4053],
eqmod (out_poly) (512*inp_poly087**2) [10753, x**2 - 6700],
eqmod (out_poly) (512*inp_poly088**2) [10753, x**2 - 6448],
eqmod (out_poly) (512*inp_poly089**2) [10753, x**2 - 4305],
eqmod (out_poly) (512*inp_poly08a**2) [10753, x**2 - 2004],
eqmod (out_poly) (512*inp_poly08b**2) [10753, x**2 - 8749],
eqmod (out_poly) (512*inp_poly08c**2) [10753, x**2 - 5232],
eqmod (out_poly) (512*inp_poly08d**2) [10753, x**2 - 5521],
eqmod (out_poly) (512*inp_poly08e**2) [10753, x**2 - 8857],
eqmod (out_poly) (512*inp_poly08f**2) [10753, x**2 - 1896],
eqmod (out_poly) (512*inp_poly090**2) [10753, x**2 - 7870],
eqmod (out_poly) (512*inp_poly091**2) [10753, x**2 - 2883],
eqmod (out_poly) (512*inp_poly092**2) [10753, x**2 - 5928],
eqmod (out_poly) (512*inp_poly093**2) [10753, x**2 - 4825],
eqmod (out_poly) (512*inp_poly094**2) [10753, x**2 - 10068],
eqmod (out_poly) (512*inp_poly095**2) [10753, x**2 - 685],
eqmod (out_poly) (512*inp_poly096**2) [10753, x**2 - 10360],
eqmod (out_poly) (512*inp_poly097**2) [10753, x**2 - 393],
eqmod (out_poly) (512*inp_poly098**2) [10753, x**2 - 10669],
eqmod (out_poly) (512*inp_poly099**2) [10753, x**2 - 84],
eqmod (out_poly) (512*inp_poly09a**2) [10753, x**2 - 721],
eqmod (out_poly) (512*inp_poly09b**2) [10753, x**2 - 10032],
eqmod (out_poly) (512*inp_poly09c**2) [10753, x**2 - 5295],
eqmod (out_poly) (512*inp_poly09d**2) [10753, x**2 - 5458],
eqmod (out_poly) (512*inp_poly09e**2) [10753, x**2 - 5628],
eqmod (out_poly) (512*inp_poly09f**2) [10753, x**2 - 5125],
eqmod (out_poly) (512*inp_poly0a0**2) [10753, x**2 - 331],
eqmod (out_poly) (512*inp_poly0a1**2) [10753, x**2 - 10422],
eqmod (out_poly) (512*inp_poly0a2**2) [10753, x**2 - 8808],
eqmod (out_poly) (512*inp_poly0a3**2) [10753, x**2 - 1945],
eqmod (out_poly) (512*inp_poly0a4**2) [10753, x**2 - 9474],
eqmod (out_poly) (512*inp_poly0a5**2) [10753, x**2 - 1279],
eqmod (out_poly) (512*inp_poly0a6**2) [10753, x**2 - 10082],
eqmod (out_poly) (512*inp_poly0a7**2) [10753, x**2 - 671],
eqmod (out_poly) (512*inp_poly0a8**2) [10753, x**2 - 267],
eqmod (out_poly) (512*inp_poly0a9**2) [10753, x**2 - 10486],
eqmod (out_poly) (512*inp_poly0aa**2) [10753, x**2 - 5773],
eqmod (out_poly) (512*inp_poly0ab**2) [10753, x**2 - 4980],
eqmod (out_poly) (512*inp_poly0ac**2) [10753, x**2 - 10436],
eqmod (out_poly) (512*inp_poly0ad**2) [10753, x**2 - 317],
eqmod (out_poly) (512*inp_poly0ae**2) [10753, x**2 - 3617],
eqmod (out_poly) (512*inp_poly0af**2) [10753, x**2 - 7136],
eqmod (out_poly) (512*inp_poly0b0**2) [10753, x**2 - 5619],
eqmod (out_poly) (512*inp_poly0b1**2) [10753, x**2 - 5134],
eqmod (out_poly) (512*inp_poly0b2**2) [10753, x**2 - 2847],
eqmod (out_poly) (512*inp_poly0b3**2) [10753, x**2 - 7906],
eqmod (out_poly) (512*inp_poly0b4**2) [10753, x**2 - 7948],
eqmod (out_poly) (512*inp_poly0b5**2) [10753, x**2 - 2805],
eqmod (out_poly) (512*inp_poly0b6**2) [10753, x**2 - 10635],
eqmod (out_poly) (512*inp_poly0b7**2) [10753, x**2 - 118],
eqmod (out_poly) (512*inp_poly0b8**2) [10753, x**2 - 7034],
eqmod (out_poly) (512*inp_poly0b9**2) [10753, x**2 - 3719],
eqmod (out_poly) (512*inp_poly0ba**2) [10753, x**2 - 5935],
eqmod (out_poly) (512*inp_poly0bb**2) [10753, x**2 - 4818],
eqmod (out_poly) (512*inp_poly0bc**2) [10753, x**2 - 10537],
eqmod (out_poly) (512*inp_poly0bd**2) [10753, x**2 - 216],
eqmod (out_poly) (512*inp_poly0be**2) [10753, x**2 - 1854],
eqmod (out_poly) (512*inp_poly0bf**2) [10753, x**2 - 8899],
eqmod (out_poly) (512*inp_poly0c0**2) [10753, x**2 - 10724],
eqmod (out_poly) (512*inp_poly0c1**2) [10753, x**2 - 29],
eqmod (out_poly) (512*inp_poly0c2**2) [10753, x**2 - 1145],
eqmod (out_poly) (512*inp_poly0c3**2) [10753, x**2 - 9608],
eqmod (out_poly) (512*inp_poly0c4**2) [10753, x**2 - 1444],
eqmod (out_poly) (512*inp_poly0c5**2) [10753, x**2 - 9309],
eqmod (out_poly) (512*inp_poly0c6**2) [10753, x**2 - 1943],
eqmod (out_poly) (512*inp_poly0c7**2) [10753, x**2 - 8810],
eqmod (out_poly) (512*inp_poly0c8**2) [10753, x**2 - 5012],
eqmod (out_poly) (512*inp_poly0c9**2) [10753, x**2 - 5741],
eqmod (out_poly) (512*inp_poly0ca**2) [10753, x**2 - 7161],
eqmod (out_poly) (512*inp_poly0cb**2) [10753, x**2 - 3592],
eqmod (out_poly) (512*inp_poly0cc**2) [10753, x**2 - 6655],
eqmod (out_poly) (512*inp_poly0cd**2) [10753, x**2 - 4098],
eqmod (out_poly) (512*inp_poly0ce**2) [10753, x**2 - 8292],
eqmod (out_poly) (512*inp_poly0cf**2) [10753, x**2 - 2461],
eqmod (out_poly) (512*inp_poly0d0**2) [10753, x**2 - 9546],
eqmod (out_poly) (512*inp_poly0d1**2) [10753, x**2 - 1207],
eqmod (out_poly) (512*inp_poly0d2**2) [10753, x**2 - 9464],
eqmod (out_poly) (512*inp_poly0d3**2) [10753, x**2 - 1289],
eqmod (out_poly) (512*inp_poly0d4**2) [10753, x**2 - 10414],
eqmod (out_poly) (512*inp_poly0d5**2) [10753, x**2 - 339],
eqmod (out_poly) (512*inp_poly0d6**2) [10753, x**2 - 5598],
eqmod (out_poly) (512*inp_poly0d7**2) [10753, x**2 - 5155],
eqmod (out_poly) (512*inp_poly0d8**2) [10753, x**2 - 9487],
eqmod (out_poly) (512*inp_poly0d9**2) [10753, x**2 - 1266],
eqmod (out_poly) (512*inp_poly0da**2) [10753, x**2 - 5490],
eqmod (out_poly) (512*inp_poly0db**2) [10753, x**2 - 5263],
eqmod (out_poly) (512*inp_poly0dc**2) [10753, x**2 - 2228],
eqmod (out_poly) (512*inp_poly0dd**2) [10753, x**2 - 8525],
eqmod (out_poly) (512*inp_poly0de**2) [10753, x**2 - 9551],
eqmod (out_poly) (512*inp_poly0df**2) [10753, x**2 - 1202],
eqmod (out_poly) (512*inp_poly0e0**2) [10753, x**2 - 8829],
eqmod (out_poly) (512*inp_poly0e1**2) [10753, x**2 - 1924],
eqmod (out_poly) (512*inp_poly0e2**2) [10753, x**2 - 2177],
eqmod (out_poly) (512*inp_poly0e3**2) [10753, x**2 - 8576],
eqmod (out_poly) (512*inp_poly0e4**2) [10753, x**2 - 6070],
eqmod (out_poly) (512*inp_poly0e5**2) [10753, x**2 - 4683],
eqmod (out_poly) (512*inp_poly0e6**2) [10753, x**2 - 10625],
eqmod (out_poly) (512*inp_poly0e7**2) [10753, x**2 - 128],
eqmod (out_poly) (512*inp_poly0e8**2) [10753, x**2 - 3256],
eqmod (out_poly) (512*inp_poly0e9**2) [10753, x**2 - 7497],
eqmod (out_poly) (512*inp_poly0ea**2) [10753, x**2 - 7896],
eqmod (out_poly) (512*inp_poly0eb**2) [10753, x**2 - 2857],
eqmod (out_poly) (512*inp_poly0ec**2) [10753, x**2 - 2135],
eqmod (out_poly) (512*inp_poly0ed**2) [10753, x**2 - 8618],
eqmod (out_poly) (512*inp_poly0ee**2) [10753, x**2 - 7661],
eqmod (out_poly) (512*inp_poly0ef**2) [10753, x**2 - 3092],
eqmod (out_poly) (512*inp_poly0f0**2) [10753, x**2 - 5575],
eqmod (out_poly) (512*inp_poly0f1**2) [10753, x**2 - 5178],
eqmod (out_poly) (512*inp_poly0f2**2) [10753, x**2 - 6809],
eqmod (out_poly) (512*inp_poly0f3**2) [10753, x**2 - 3944],
eqmod (out_poly) (512*inp_poly0f4**2) [10753, x**2 - 4577],
eqmod (out_poly) (512*inp_poly0f5**2) [10753, x**2 - 6176],
eqmod (out_poly) (512*inp_poly0f6**2) [10753, x**2 - 2830],
eqmod (out_poly) (512*inp_poly0f7**2) [10753, x**2 - 7923],
eqmod (out_poly) (512*inp_poly0f8**2) [10753, x**2 - 4627],
eqmod (out_poly) (512*inp_poly0f9**2) [10753, x**2 - 6126],
eqmod (out_poly) (512*inp_poly0fa**2) [10753, x**2 - 4193],
eqmod (out_poly) (512*inp_poly0fb**2) [10753, x**2 - 6560],
eqmod (out_poly) (512*inp_poly0fc**2) [10753, x**2 - 1353],
eqmod (out_poly) (512*inp_poly0fd**2) [10753, x**2 - 9400],
eqmod (out_poly) (512*inp_poly0fe**2) [10753, x**2 - 1828],
eqmod (out_poly) (512*inp_poly0ff**2) [10753, x**2 - 8925],
eqmod (out_poly) (512*inp_poly100**2) [10753, x**2 - 10],
eqmod (out_poly) (512*inp_poly101**2) [10753, x**2 - 10743],
eqmod (out_poly) (512*inp_poly102**2) [10753, x**2 - 8875],
eqmod (out_poly) (512*inp_poly103**2) [10753, x**2 - 1878],
eqmod (out_poly) (512*inp_poly104**2) [10753, x**2 - 3210],
eqmod (out_poly) (512*inp_poly105**2) [10753, x**2 - 7543],
eqmod (out_poly) (512*inp_poly106**2) [10753, x**2 - 10083],
eqmod (out_poly) (512*inp_poly107**2) [10753, x**2 - 670],
eqmod (out_poly) (512*inp_poly108**2) [10753, x**2 - 4946],
eqmod (out_poly) (512*inp_poly109**2) [10753, x**2 - 5807],
eqmod (out_poly) (512*inp_poly10a**2) [10753, x**2 - 2351],
eqmod (out_poly) (512*inp_poly10b**2) [10753, x**2 - 8402],
eqmod (out_poly) (512*inp_poly10c**2) [10753, x**2 - 6975],
eqmod (out_poly) (512*inp_poly10d**2) [10753, x**2 - 3778],
eqmod (out_poly) (512*inp_poly10e**2) [10753, x**2 - 1961],
eqmod (out_poly) (512*inp_poly10f**2) [10753, x**2 - 8792],
eqmod (out_poly) (512*inp_poly110**2) [10753, x**2 - 787],
eqmod (out_poly) (512*inp_poly111**2) [10753, x**2 - 9966],
eqmod (out_poly) (512*inp_poly112**2) [10753, x**2 - 4894],
eqmod (out_poly) (512*inp_poly113**2) [10753, x**2 - 5859],
eqmod (out_poly) (512*inp_poly114**2) [10753, x**2 - 5308],
eqmod (out_poly) (512*inp_poly115**2) [10753, x**2 - 5445],
eqmod (out_poly) (512*inp_poly116**2) [10753, x**2 - 1036],
eqmod (out_poly) (512*inp_poly117**2) [10753, x**2 - 9717],
eqmod (out_poly) (512*inp_poly118**2) [10753, x**2 - 8594],
eqmod (out_poly) (512*inp_poly119**2) [10753, x**2 - 2159],
eqmod (out_poly) (512*inp_poly11a**2) [10753, x**2 - 3298],
eqmod (out_poly) (512*inp_poly11b**2) [10753, x**2 - 7455],
eqmod (out_poly) (512*inp_poly11c**2) [10753, x**2 - 5906],
eqmod (out_poly) (512*inp_poly11d**2) [10753, x**2 - 4847],
eqmod (out_poly) (512*inp_poly11e**2) [10753, x**2 - 4864],
eqmod (out_poly) (512*inp_poly11f**2) [10753, x**2 - 5889],
eqmod (out_poly) (512*inp_poly120**2) [10753, x**2 - 3259],
eqmod (out_poly) (512*inp_poly121**2) [10753, x**2 - 7494],
eqmod (out_poly) (512*inp_poly122**2) [10753, x**2 - 5182],
eqmod (out_poly) (512*inp_poly123**2) [10753, x**2 - 5571],
eqmod (out_poly) (512*inp_poly124**2) [10753, x**2 - 3098],
eqmod (out_poly) (512*inp_poly125**2) [10753, x**2 - 7655],
eqmod (out_poly) (512*inp_poly126**2) [10753, x**2 - 7460],
eqmod (out_poly) (512*inp_poly127**2) [10753, x**2 - 3293],
eqmod (out_poly) (512*inp_poly128**2) [10753, x**2 - 1102],
eqmod (out_poly) (512*inp_poly129**2) [10753, x**2 - 9651],
eqmod (out_poly) (512*inp_poly12a**2) [10753, x**2 - 10255],
eqmod (out_poly) (512*inp_poly12b**2) [10753, x**2 - 498],
eqmod (out_poly) (512*inp_poly12c**2) [10753, x**2 - 9646],
eqmod (out_poly) (512*inp_poly12d**2) [10753, x**2 - 1107],
eqmod (out_poly) (512*inp_poly12e**2) [10753, x**2 - 1437],
eqmod (out_poly) (512*inp_poly12f**2) [10753, x**2 - 9316],
eqmod (out_poly) (512*inp_poly130**2) [10753, x**2 - 8089],
eqmod (out_poly) (512*inp_poly131**2) [10753, x**2 - 2664],
eqmod (out_poly) (512*inp_poly132**2) [10753, x**2 - 1360],
eqmod (out_poly) (512*inp_poly133**2) [10753, x**2 - 9393],
eqmod (out_poly) (512*inp_poly134**2) [10753, x**2 - 5096],
eqmod (out_poly) (512*inp_poly135**2) [10753, x**2 - 5657],
eqmod (out_poly) (512*inp_poly136**2) [10753, x**2 - 6440],
eqmod (out_poly) (512*inp_poly137**2) [10753, x**2 - 4313],
eqmod (out_poly) (512*inp_poly138**2) [10753, x**2 - 2854],
eqmod (out_poly) (512*inp_poly139**2) [10753, x**2 - 7899],
eqmod (out_poly) (512*inp_poly13a**2) [10753, x**2 - 5970],
eqmod (out_poly) (512*inp_poly13b**2) [10753, x**2 - 4783],
eqmod (out_poly) (512*inp_poly13c**2) [10753, x**2 - 2129],
eqmod (out_poly) (512*inp_poly13d**2) [10753, x**2 - 8624],
eqmod (out_poly) (512*inp_poly13e**2) [10753, x**2 - 2336],
eqmod (out_poly) (512*inp_poly13f**2) [10753, x**2 - 8417],
eqmod (out_poly) (512*inp_poly140**2) [10753, x**2 - 3223],
eqmod (out_poly) (512*inp_poly141**2) [10753, x**2 - 7530],
eqmod (out_poly) (512*inp_poly142**2) [10753, x**2 - 5491],
eqmod (out_poly) (512*inp_poly143**2) [10753, x**2 - 5262],
eqmod (out_poly) (512*inp_poly144**2) [10753, x**2 - 2295],
eqmod (out_poly) (512*inp_poly145**2) [10753, x**2 - 8458],
eqmod (out_poly) (512*inp_poly146**2) [10753, x**2 - 9872],
eqmod (out_poly) (512*inp_poly147**2) [10753, x**2 - 881],
eqmod (out_poly) (512*inp_poly148**2) [10753, x**2 - 6953],
eqmod (out_poly) (512*inp_poly149**2) [10753, x**2 - 3800],
eqmod (out_poly) (512*inp_poly14a**2) [10753, x**2 - 3942],
eqmod (out_poly) (512*inp_poly14b**2) [10753, x**2 - 6811],
eqmod (out_poly) (512*inp_poly14c**2) [10753, x**2 - 6042],
eqmod (out_poly) (512*inp_poly14d**2) [10753, x**2 - 4711],
eqmod (out_poly) (512*inp_poly14e**2) [10753, x**2 - 7281],
eqmod (out_poly) (512*inp_poly14f**2) [10753, x**2 - 3472],
eqmod (out_poly) (512*inp_poly150**2) [10753, x**2 - 9557],
eqmod (out_poly) (512*inp_poly151**2) [10753, x**2 - 1196],
eqmod (out_poly) (512*inp_poly152**2) [10753, x**2 - 3097],
eqmod (out_poly) (512*inp_poly153**2) [10753, x**2 - 7656],
eqmod (out_poly) (512*inp_poly154**2) [10753, x**2 - 3192],
eqmod (out_poly) (512*inp_poly155**2) [10753, x**2 - 7561],
eqmod (out_poly) (512*inp_poly156**2) [10753, x**2 - 4861],
eqmod (out_poly) (512*inp_poly157**2) [10753, x**2 - 5892],
eqmod (out_poly) (512*inp_poly158**2) [10753, x**2 - 2024],
eqmod (out_poly) (512*inp_poly159**2) [10753, x**2 - 8729],
eqmod (out_poly) (512*inp_poly15a**2) [10753, x**2 - 549],
eqmod (out_poly) (512*inp_poly15b**2) [10753, x**2 - 10204],
eqmod (out_poly) (512*inp_poly15c**2) [10753, x**2 - 4524],
eqmod (out_poly) (512*inp_poly15d**2) [10753, x**2 - 6229],
eqmod (out_poly) (512*inp_poly15e**2) [10753, x**2 - 4181],
eqmod (out_poly) (512*inp_poly15f**2) [10753, x**2 - 6572],
eqmod (out_poly) (512*inp_poly160**2) [10753, x**2 - 8410],
eqmod (out_poly) (512*inp_poly161**2) [10753, x**2 - 2343],
eqmod (out_poly) (512*inp_poly162**2) [10753, x**2 - 1293],
eqmod (out_poly) (512*inp_poly163**2) [10753, x**2 - 9460],
eqmod (out_poly) (512*inp_poly164**2) [10753, x**2 - 607],
eqmod (out_poly) (512*inp_poly165**2) [10753, x**2 - 10146],
eqmod (out_poly) (512*inp_poly166**2) [10753, x**2 - 6439],
eqmod (out_poly) (512*inp_poly167**2) [10753, x**2 - 4314],
eqmod (out_poly) (512*inp_poly168**2) [10753, x**2 - 8928],
eqmod (out_poly) (512*inp_poly169**2) [10753, x**2 - 1825],
eqmod (out_poly) (512*inp_poly16a**2) [10753, x**2 - 9392],
eqmod (out_poly) (512*inp_poly16b**2) [10753, x**2 - 1361],
eqmod (out_poly) (512*inp_poly16c**2) [10753, x**2 - 5590],
eqmod (out_poly) (512*inp_poly16d**2) [10753, x**2 - 5163],
eqmod (out_poly) (512*inp_poly16e**2) [10753, x**2 - 3992],
eqmod (out_poly) (512*inp_poly16f**2) [10753, x**2 - 6761],
eqmod (out_poly) (512*inp_poly170**2) [10753, x**2 - 5934],
eqmod (out_poly) (512*inp_poly171**2) [10753, x**2 - 4819],
eqmod (out_poly) (512*inp_poly172**2) [10753, x**2 - 8208],
eqmod (out_poly) (512*inp_poly173**2) [10753, x**2 - 2545],
eqmod (out_poly) (512*inp_poly174**2) [10753, x**2 - 1533],
eqmod (out_poly) (512*inp_poly175**2) [10753, x**2 - 9220],
eqmod (out_poly) (512*inp_poly176**2) [10753, x**2 - 283],
eqmod (out_poly) (512*inp_poly177**2) [10753, x**2 - 10470],
eqmod (out_poly) (512*inp_poly178**2) [10753, x**2 - 1538],
eqmod (out_poly) (512*inp_poly179**2) [10753, x**2 - 9215],
eqmod (out_poly) (512*inp_poly17a**2) [10753, x**2 - 10097],
eqmod (out_poly) (512*inp_poly17b**2) [10753, x**2 - 656],
eqmod (out_poly) (512*inp_poly17c**2) [10753, x**2 - 9813],
eqmod (out_poly) (512*inp_poly17d**2) [10753, x**2 - 940],
eqmod (out_poly) (512*inp_poly17e**2) [10753, x**2 - 4484],
eqmod (out_poly) (512*inp_poly17f**2) [10753, x**2 - 6269],
eqmod (out_poly) (512*inp_poly180**2) [10753, x**2 - 1000],
eqmod (out_poly) (512*inp_poly181**2) [10753, x**2 - 9753],
eqmod (out_poly) (512*inp_poly182**2) [10753, x**2 - 5754],
eqmod (out_poly) (512*inp_poly183**2) [10753, x**2 - 4999],
eqmod (out_poly) (512*inp_poly184**2) [10753, x**2 - 9163],
eqmod (out_poly) (512*inp_poly185**2) [10753, x**2 - 1590],
eqmod (out_poly) (512*inp_poly186**2) [10753, x**2 - 8271],
eqmod (out_poly) (512*inp_poly187**2) [10753, x**2 - 2482],
eqmod (out_poly) (512*inp_poly188**2) [10753, x**2 - 10715],
eqmod (out_poly) (512*inp_poly189**2) [10753, x**2 - 38],
eqmod (out_poly) (512*inp_poly18a**2) [10753, x**2 - 9287],
eqmod (out_poly) (512*inp_poly18b**2) [10753, x**2 - 1466],
eqmod (out_poly) (512*inp_poly18c**2) [10753, x**2 - 9308],
eqmod (out_poly) (512*inp_poly18d**2) [10753, x**2 - 1445],
eqmod (out_poly) (512*inp_poly18e**2) [10753, x**2 - 2546],
eqmod (out_poly) (512*inp_poly18f**2) [10753, x**2 - 8207],
eqmod (out_poly) (512*inp_poly190**2) [10753, x**2 - 3429],
eqmod (out_poly) (512*inp_poly191**2) [10753, x**2 - 7324],
eqmod (out_poly) (512*inp_poly192**2) [10753, x**2 - 5515],
eqmod (out_poly) (512*inp_poly193**2) [10753, x**2 - 5238],
eqmod (out_poly) (512*inp_poly194**2) [10753, x**2 - 3903],
eqmod (out_poly) (512*inp_poly195**2) [10753, x**2 - 6850],
eqmod (out_poly) (512*inp_poly196**2) [10753, x**2 - 6823],
eqmod (out_poly) (512*inp_poly197**2) [10753, x**2 - 3930],
eqmod (out_poly) (512*inp_poly198**2) [10753, x**2 - 9913],
eqmod (out_poly) (512*inp_poly199**2) [10753, x**2 - 840],
eqmod (out_poly) (512*inp_poly19a**2) [10753, x**2 - 7210],
eqmod (out_poly) (512*inp_poly19b**2) [10753, x**2 - 3543],
eqmod (out_poly) (512*inp_poly19c**2) [10753, x**2 - 9938],
eqmod (out_poly) (512*inp_poly19d**2) [10753, x**2 - 815],
eqmod (out_poly) (512*inp_poly19e**2) [10753, x**2 - 2515],
eqmod (out_poly) (512*inp_poly19f**2) [10753, x**2 - 8238],
eqmod (out_poly) (512*inp_poly1a0**2) [10753, x**2 - 3310],
eqmod (out_poly) (512*inp_poly1a1**2) [10753, x**2 - 7443],
eqmod (out_poly) (512*inp_poly1a2**2) [10753, x**2 - 2056],
eqmod (out_poly) (512*inp_poly1a3**2) [10753, x**2 - 8697],
eqmod (out_poly) (512*inp_poly1a4**2) [10753, x**2 - 8716],
eqmod (out_poly) (512*inp_poly1a5**2) [10753, x**2 - 2037],
eqmod (out_poly) (512*inp_poly1a6**2) [10753, x**2 - 4043],
eqmod (out_poly) (512*inp_poly1a7**2) [10753, x**2 - 6710],
eqmod (out_poly) (512*inp_poly1a8**2) [10753, x**2 - 2670],
eqmod (out_poly) (512*inp_poly1a9**2) [10753, x**2 - 8083],
eqmod (out_poly) (512*inp_poly1aa**2) [10753, x**2 - 3965],
eqmod (out_poly) (512*inp_poly1ab**2) [10753, x**2 - 6788],
eqmod (out_poly) (512*inp_poly1ac**2) [10753, x**2 - 7583],
eqmod (out_poly) (512*inp_poly1ad**2) [10753, x**2 - 3170],
eqmod (out_poly) (512*inp_poly1ae**2) [10753, x**2 - 3911],
eqmod (out_poly) (512*inp_poly1af**2) [10753, x**2 - 6842],
eqmod (out_poly) (512*inp_poly1b0**2) [10753, x**2 - 2425],
eqmod (out_poly) (512*inp_poly1b1**2) [10753, x**2 - 8328],
eqmod (out_poly) (512*inp_poly1b2**2) [10753, x**2 - 6964],
eqmod (out_poly) (512*inp_poly1b3**2) [10753, x**2 - 3789],
eqmod (out_poly) (512*inp_poly1b4**2) [10753, x**2 - 4209],
eqmod (out_poly) (512*inp_poly1b5**2) [10753, x**2 - 6544],
eqmod (out_poly) (512*inp_poly1b6**2) [10753, x**2 - 9573],
eqmod (out_poly) (512*inp_poly1b7**2) [10753, x**2 - 1180],
eqmod (out_poly) (512*inp_poly1b8**2) [10753, x**2 - 5822],
eqmod (out_poly) (512*inp_poly1b9**2) [10753, x**2 - 4931],
eqmod (out_poly) (512*inp_poly1ba**2) [10753, x**2 - 5585],
eqmod (out_poly) (512*inp_poly1bb**2) [10753, x**2 - 5168],
eqmod (out_poly) (512*inp_poly1bc**2) [10753, x**2 - 8593],
eqmod (out_poly) (512*inp_poly1bd**2) [10753, x**2 - 2160],
eqmod (out_poly) (512*inp_poly1be**2) [10753, x**2 - 7787],
eqmod (out_poly) (512*inp_poly1bf**2) [10753, x**2 - 2966],
eqmod (out_poly) (512*inp_poly1c0**2) [10753, x**2 - 10463],
eqmod (out_poly) (512*inp_poly1c1**2) [10753, x**2 - 290],
eqmod (out_poly) (512*inp_poly1c2**2) [10753, x**2 - 697],
eqmod (out_poly) (512*inp_poly1c3**2) [10753, x**2 - 10056],
eqmod (out_poly) (512*inp_poly1c4**2) [10753, x**2 - 3687],
eqmod (out_poly) (512*inp_poly1c5**2) [10753, x**2 - 7066],
eqmod (out_poly) (512*inp_poly1c6**2) [10753, x**2 - 8677],
eqmod (out_poly) (512*inp_poly1c7**2) [10753, x**2 - 2076],
eqmod (out_poly) (512*inp_poly1c8**2) [10753, x**2 - 7108],
eqmod (out_poly) (512*inp_poly1c9**2) [10753, x**2 - 3645],
eqmod (out_poly) (512*inp_poly1ca**2) [10753, x**2 - 7092],
eqmod (out_poly) (512*inp_poly1cb**2) [10753, x**2 - 3661],
eqmod (out_poly) (512*inp_poly1cc**2) [10753, x**2 - 2032],
eqmod (out_poly) (512*inp_poly1cd**2) [10753, x**2 - 8721],
eqmod (out_poly) (512*inp_poly1ce**2) [10753, x**2 - 7649],
eqmod (out_poly) (512*inp_poly1cf**2) [10753, x**2 - 3104],
eqmod (out_poly) (512*inp_poly1d0**2) [10753, x**2 - 9436],
eqmod (out_poly) (512*inp_poly1d1**2) [10753, x**2 - 1317],
eqmod (out_poly) (512*inp_poly1d2**2) [10753, x**2 - 8616],
eqmod (out_poly) (512*inp_poly1d3**2) [10753, x**2 - 2137],
eqmod (out_poly) (512*inp_poly1d4**2) [10753, x**2 - 7363],
eqmod (out_poly) (512*inp_poly1d5**2) [10753, x**2 - 3390],
eqmod (out_poly) (512*inp_poly1d6**2) [10753, x**2 - 2215],
eqmod (out_poly) (512*inp_poly1d7**2) [10753, x**2 - 8538],
eqmod (out_poly) (512*inp_poly1d8**2) [10753, x**2 - 8846],
eqmod (out_poly) (512*inp_poly1d9**2) [10753, x**2 - 1907],
eqmod (out_poly) (512*inp_poly1da**2) [10753, x**2 - 1135],
eqmod (out_poly) (512*inp_poly1db**2) [10753, x**2 - 9618],
eqmod (out_poly) (512*inp_poly1dc**2) [10753, x**2 - 774],
eqmod (out_poly) (512*inp_poly1dd**2) [10753, x**2 - 9979],
eqmod (out_poly) (512*inp_poly1de**2) [10753, x**2 - 9486],
eqmod (out_poly) (512*inp_poly1df**2) [10753, x**2 - 1267],
eqmod (out_poly) (512*inp_poly1e0**2) [10753, x**2 - 2266],
eqmod (out_poly) (512*inp_poly1e1**2) [10753, x**2 - 8487],
eqmod (out_poly) (512*inp_poly1e2**2) [10753, x**2 - 264],
eqmod (out_poly) (512*inp_poly1e3**2) [10753, x**2 - 10489],
eqmod (out_poly) (512*inp_poly1e4**2) [10753, x**2 - 6935],
eqmod (out_poly) (512*inp_poly1e5**2) [10753, x**2 - 3818],
eqmod (out_poly) (512*inp_poly1e6**2) [10753, x**2 - 9473],
eqmod (out_poly) (512*inp_poly1e7**2) [10753, x**2 - 1280],
eqmod (out_poly) (512*inp_poly1e8**2) [10753, x**2 - 301],
eqmod (out_poly) (512*inp_poly1e9**2) [10753, x**2 - 10452],
eqmod (out_poly) (512*inp_poly1ea**2) [10753, x**2 - 3689],
eqmod (out_poly) (512*inp_poly1eb**2) [10753, x**2 - 7064],
eqmod (out_poly) (512*inp_poly1ec**2) [10753, x**2 - 10597],
eqmod (out_poly) (512*inp_poly1ed**2) [10753, x**2 - 156],
eqmod (out_poly) (512*inp_poly1ee**2) [10753, x**2 - 1339],
eqmod (out_poly) (512*inp_poly1ef**2) [10753, x**2 - 9414],
eqmod (out_poly) (512*inp_poly1f0**2) [10753, x**2 - 1985],
eqmod (out_poly) (512*inp_poly1f1**2) [10753, x**2 - 8768],
eqmod (out_poly) (512*inp_poly1f2**2) [10753, x**2 - 3572],
eqmod (out_poly) (512*inp_poly1f3**2) [10753, x**2 - 7181],
eqmod (out_poly) (512*inp_poly1f4**2) [10753, x**2 - 2758],
eqmod (out_poly) (512*inp_poly1f5**2) [10753, x**2 - 7995],
eqmod (out_poly) (512*inp_poly1f6**2) [10753, x**2 - 6794],
eqmod (out_poly) (512*inp_poly1f7**2) [10753, x**2 - 3959],
eqmod (out_poly) (512*inp_poly1f8**2) [10753, x**2 - 3258],
eqmod (out_poly) (512*inp_poly1f9**2) [10753, x**2 - 7495],
eqmod (out_poly) (512*inp_poly1fa**2) [10753, x**2 - 9671],
eqmod (out_poly) (512*inp_poly1fb**2) [10753, x**2 - 1082],
eqmod (out_poly) (512*inp_poly1fc**2) [10753, x**2 - 2777],
eqmod (out_poly) (512*inp_poly1fd**2) [10753, x**2 - 7976],
eqmod (out_poly) (512*inp_poly1fe**2) [10753, x**2 - 7527],
eqmod (out_poly) (512*inp_poly1ff**2) [10753, x**2 - 3226]
] prove with [ cuts [ 90, 91, 92, 93, 94, 95, 96, 97 ] ] && and [
(-28155)@16<=s L0x7fffffffd2e0,L0x7fffffffd2e0<s28155@16,
(-28155)@16<=s L0x7fffffffd2e2,L0x7fffffffd2e2<s28155@16,
(-28155)@16<=s L0x7fffffffd2e4,L0x7fffffffd2e4<s28155@16,
(-28155)@16<=s L0x7fffffffd2e6,L0x7fffffffd2e6<s28155@16,
(-28155)@16<=s L0x7fffffffd2e8,L0x7fffffffd2e8<s28155@16,
(-28155)@16<=s L0x7fffffffd2ea,L0x7fffffffd2ea<s28155@16,
(-28155)@16<=s L0x7fffffffd2ec,L0x7fffffffd2ec<s28155@16,
(-28155)@16<=s L0x7fffffffd2ee,L0x7fffffffd2ee<s28155@16,
(-28155)@16<=s L0x7fffffffd2f0,L0x7fffffffd2f0<s28155@16,
(-28155)@16<=s L0x7fffffffd2f2,L0x7fffffffd2f2<s28155@16,
(-28155)@16<=s L0x7fffffffd2f4,L0x7fffffffd2f4<s28155@16,
(-28155)@16<=s L0x7fffffffd2f6,L0x7fffffffd2f6<s28155@16,
(-28155)@16<=s L0x7fffffffd2f8,L0x7fffffffd2f8<s28155@16,
(-28155)@16<=s L0x7fffffffd2fa,L0x7fffffffd2fa<s28155@16,
(-28155)@16<=s L0x7fffffffd2fc,L0x7fffffffd2fc<s28155@16,
(-28155)@16<=s L0x7fffffffd2fe,L0x7fffffffd2fe<s28155@16,
(-28155)@16<=s L0x7fffffffd300,L0x7fffffffd300<s28155@16,
(-28155)@16<=s L0x7fffffffd302,L0x7fffffffd302<s28155@16,
(-28155)@16<=s L0x7fffffffd304,L0x7fffffffd304<s28155@16,
(-28155)@16<=s L0x7fffffffd306,L0x7fffffffd306<s28155@16,
(-28155)@16<=s L0x7fffffffd308,L0x7fffffffd308<s28155@16,
(-28155)@16<=s L0x7fffffffd30a,L0x7fffffffd30a<s28155@16,
(-28155)@16<=s L0x7fffffffd30c,L0x7fffffffd30c<s28155@16,
(-28155)@16<=s L0x7fffffffd30e,L0x7fffffffd30e<s28155@16,
(-28155)@16<=s L0x7fffffffd310,L0x7fffffffd310<s28155@16,
(-28155)@16<=s L0x7fffffffd312,L0x7fffffffd312<s28155@16,
(-28155)@16<=s L0x7fffffffd314,L0x7fffffffd314<s28155@16,
(-28155)@16<=s L0x7fffffffd316,L0x7fffffffd316<s28155@16,
(-28155)@16<=s L0x7fffffffd318,L0x7fffffffd318<s28155@16,
(-28155)@16<=s L0x7fffffffd31a,L0x7fffffffd31a<s28155@16,
(-28155)@16<=s L0x7fffffffd31c,L0x7fffffffd31c<s28155@16,
(-28155)@16<=s L0x7fffffffd31e,L0x7fffffffd31e<s28155@16,
(-16723)@16<=s L0x7fffffffd320,L0x7fffffffd320<s16723@16,
(-16723)@16<=s L0x7fffffffd322,L0x7fffffffd322<s16723@16,
(-16723)@16<=s L0x7fffffffd324,L0x7fffffffd324<s16723@16,
(-16723)@16<=s L0x7fffffffd326,L0x7fffffffd326<s16723@16,
(-16723)@16<=s L0x7fffffffd328,L0x7fffffffd328<s16723@16,
(-16723)@16<=s L0x7fffffffd32a,L0x7fffffffd32a<s16723@16,
(-16723)@16<=s L0x7fffffffd32c,L0x7fffffffd32c<s16723@16,
(-16723)@16<=s L0x7fffffffd32e,L0x7fffffffd32e<s16723@16,
(-16723)@16<=s L0x7fffffffd330,L0x7fffffffd330<s16723@16,
(-16723)@16<=s L0x7fffffffd332,L0x7fffffffd332<s16723@16,
(-16723)@16<=s L0x7fffffffd334,L0x7fffffffd334<s16723@16,
(-16723)@16<=s L0x7fffffffd336,L0x7fffffffd336<s16723@16,
(-16723)@16<=s L0x7fffffffd338,L0x7fffffffd338<s16723@16,
(-16723)@16<=s L0x7fffffffd33a,L0x7fffffffd33a<s16723@16,
(-16723)@16<=s L0x7fffffffd33c,L0x7fffffffd33c<s16723@16,
(-16723)@16<=s L0x7fffffffd33e,L0x7fffffffd33e<s16723@16,
(-16723)@16<=s L0x7fffffffd340,L0x7fffffffd340<s16723@16,
(-16723)@16<=s L0x7fffffffd342,L0x7fffffffd342<s16723@16,
(-16723)@16<=s L0x7fffffffd344,L0x7fffffffd344<s16723@16,
(-16723)@16<=s L0x7fffffffd346,L0x7fffffffd346<s16723@16,
(-16723)@16<=s L0x7fffffffd348,L0x7fffffffd348<s16723@16,
(-16723)@16<=s L0x7fffffffd34a,L0x7fffffffd34a<s16723@16,
(-16723)@16<=s L0x7fffffffd34c,L0x7fffffffd34c<s16723@16,
(-16723)@16<=s L0x7fffffffd34e,L0x7fffffffd34e<s16723@16,
(-16723)@16<=s L0x7fffffffd350,L0x7fffffffd350<s16723@16,
(-16723)@16<=s L0x7fffffffd352,L0x7fffffffd352<s16723@16,
(-16723)@16<=s L0x7fffffffd354,L0x7fffffffd354<s16723@16,
(-16723)@16<=s L0x7fffffffd356,L0x7fffffffd356<s16723@16,
(-16723)@16<=s L0x7fffffffd358,L0x7fffffffd358<s16723@16,
(-16723)@16<=s L0x7fffffffd35a,L0x7fffffffd35a<s16723@16,
(-16723)@16<=s L0x7fffffffd35c,L0x7fffffffd35c<s16723@16,
(-16723)@16<=s L0x7fffffffd35e,L0x7fffffffd35e<s16723@16,
(-11262)@16<=s L0x7fffffffd360,L0x7fffffffd360<s11262@16,
(-11262)@16<=s L0x7fffffffd362,L0x7fffffffd362<s11262@16,
(-11262)@16<=s L0x7fffffffd364,L0x7fffffffd364<s11262@16,
(-11262)@16<=s L0x7fffffffd366,L0x7fffffffd366<s11262@16,
(-11262)@16<=s L0x7fffffffd368,L0x7fffffffd368<s11262@16,
(-11262)@16<=s L0x7fffffffd36a,L0x7fffffffd36a<s11262@16,
(-11262)@16<=s L0x7fffffffd36c,L0x7fffffffd36c<s11262@16,
(-11262)@16<=s L0x7fffffffd36e,L0x7fffffffd36e<s11262@16,
(-11262)@16<=s L0x7fffffffd370,L0x7fffffffd370<s11262@16,
(-11262)@16<=s L0x7fffffffd372,L0x7fffffffd372<s11262@16,
(-11262)@16<=s L0x7fffffffd374,L0x7fffffffd374<s11262@16,
(-11262)@16<=s L0x7fffffffd376,L0x7fffffffd376<s11262@16,
(-11262)@16<=s L0x7fffffffd378,L0x7fffffffd378<s11262@16,
(-11262)@16<=s L0x7fffffffd37a,L0x7fffffffd37a<s11262@16,
(-11262)@16<=s L0x7fffffffd37c,L0x7fffffffd37c<s11262@16,
(-11262)@16<=s L0x7fffffffd37e,L0x7fffffffd37e<s11262@16,
(-11262)@16<=s L0x7fffffffd380,L0x7fffffffd380<s11262@16,
(-11262)@16<=s L0x7fffffffd382,L0x7fffffffd382<s11262@16,
(-11262)@16<=s L0x7fffffffd384,L0x7fffffffd384<s11262@16,
(-11262)@16<=s L0x7fffffffd386,L0x7fffffffd386<s11262@16,
(-11262)@16<=s L0x7fffffffd388,L0x7fffffffd388<s11262@16,
(-11262)@16<=s L0x7fffffffd38a,L0x7fffffffd38a<s11262@16,
(-11262)@16<=s L0x7fffffffd38c,L0x7fffffffd38c<s11262@16,
(-11262)@16<=s L0x7fffffffd38e,L0x7fffffffd38e<s11262@16,
(-11262)@16<=s L0x7fffffffd390,L0x7fffffffd390<s11262@16,
(-11262)@16<=s L0x7fffffffd392,L0x7fffffffd392<s11262@16,
(-11262)@16<=s L0x7fffffffd394,L0x7fffffffd394<s11262@16,
(-11262)@16<=s L0x7fffffffd396,L0x7fffffffd396<s11262@16,
(-11262)@16<=s L0x7fffffffd398,L0x7fffffffd398<s11262@16,
(-11262)@16<=s L0x7fffffffd39a,L0x7fffffffd39a<s11262@16,
(-11262)@16<=s L0x7fffffffd39c,L0x7fffffffd39c<s11262@16,
(-11262)@16<=s L0x7fffffffd39e,L0x7fffffffd39e<s11262@16,
(-11262)@16<=s L0x7fffffffd3a0,L0x7fffffffd3a0<s11262@16,
(-11262)@16<=s L0x7fffffffd3a2,L0x7fffffffd3a2<s11262@16,
(-11262)@16<=s L0x7fffffffd3a4,L0x7fffffffd3a4<s11262@16,
(-11262)@16<=s L0x7fffffffd3a6,L0x7fffffffd3a6<s11262@16,
(-11262)@16<=s L0x7fffffffd3a8,L0x7fffffffd3a8<s11262@16,
(-11262)@16<=s L0x7fffffffd3aa,L0x7fffffffd3aa<s11262@16,
(-11262)@16<=s L0x7fffffffd3ac,L0x7fffffffd3ac<s11262@16,
(-11262)@16<=s L0x7fffffffd3ae,L0x7fffffffd3ae<s11262@16,
(-11262)@16<=s L0x7fffffffd3b0,L0x7fffffffd3b0<s11262@16,
(-11262)@16<=s L0x7fffffffd3b2,L0x7fffffffd3b2<s11262@16,
(-11262)@16<=s L0x7fffffffd3b4,L0x7fffffffd3b4<s11262@16,
(-11262)@16<=s L0x7fffffffd3b6,L0x7fffffffd3b6<s11262@16,
(-11262)@16<=s L0x7fffffffd3b8,L0x7fffffffd3b8<s11262@16,
(-11262)@16<=s L0x7fffffffd3ba,L0x7fffffffd3ba<s11262@16,
(-11262)@16<=s L0x7fffffffd3bc,L0x7fffffffd3bc<s11262@16,
(-11262)@16<=s L0x7fffffffd3be,L0x7fffffffd3be<s11262@16,
(-11262)@16<=s L0x7fffffffd3c0,L0x7fffffffd3c0<s11262@16,
(-11262)@16<=s L0x7fffffffd3c2,L0x7fffffffd3c2<s11262@16,
(-11262)@16<=s L0x7fffffffd3c4,L0x7fffffffd3c4<s11262@16,
(-11262)@16<=s L0x7fffffffd3c6,L0x7fffffffd3c6<s11262@16,
(-11262)@16<=s L0x7fffffffd3c8,L0x7fffffffd3c8<s11262@16,
(-11262)@16<=s L0x7fffffffd3ca,L0x7fffffffd3ca<s11262@16,
(-11262)@16<=s L0x7fffffffd3cc,L0x7fffffffd3cc<s11262@16,
(-11262)@16<=s L0x7fffffffd3ce,L0x7fffffffd3ce<s11262@16,
(-11262)@16<=s L0x7fffffffd3d0,L0x7fffffffd3d0<s11262@16,
(-11262)@16<=s L0x7fffffffd3d2,L0x7fffffffd3d2<s11262@16,
(-11262)@16<=s L0x7fffffffd3d4,L0x7fffffffd3d4<s11262@16,
(-11262)@16<=s L0x7fffffffd3d6,L0x7fffffffd3d6<s11262@16,
(-11262)@16<=s L0x7fffffffd3d8,L0x7fffffffd3d8<s11262@16,
(-11262)@16<=s L0x7fffffffd3da,L0x7fffffffd3da<s11262@16,
(-11262)@16<=s L0x7fffffffd3dc,L0x7fffffffd3dc<s11262@16,
(-11262)@16<=s L0x7fffffffd3de,L0x7fffffffd3de<s11262@16
,
(-17540)@16<=s L0x7fffffffd3e0,L0x7fffffffd3e0<s17540@16,
(-17540)@16<=s L0x7fffffffd3e2,L0x7fffffffd3e2<s17540@16,
(-17540)@16<=s L0x7fffffffd3e4,L0x7fffffffd3e4<s17540@16,
(-17540)@16<=s L0x7fffffffd3e6,L0x7fffffffd3e6<s17540@16,
(-17540)@16<=s L0x7fffffffd3e8,L0x7fffffffd3e8<s17540@16,
(-17540)@16<=s L0x7fffffffd3ea,L0x7fffffffd3ea<s17540@16,
(-17540)@16<=s L0x7fffffffd3ec,L0x7fffffffd3ec<s17540@16,
(-17540)@16<=s L0x7fffffffd3ee,L0x7fffffffd3ee<s17540@16,
(-17540)@16<=s L0x7fffffffd3f0,L0x7fffffffd3f0<s17540@16,
(-17540)@16<=s L0x7fffffffd3f2,L0x7fffffffd3f2<s17540@16,
(-17540)@16<=s L0x7fffffffd3f4,L0x7fffffffd3f4<s17540@16,
(-17540)@16<=s L0x7fffffffd3f6,L0x7fffffffd3f6<s17540@16,
(-17540)@16<=s L0x7fffffffd3f8,L0x7fffffffd3f8<s17540@16,
(-17540)@16<=s L0x7fffffffd3fa,L0x7fffffffd3fa<s17540@16,
(-17540)@16<=s L0x7fffffffd3fc,L0x7fffffffd3fc<s17540@16,
(-17540)@16<=s L0x7fffffffd3fe,L0x7fffffffd3fe<s17540@16,
(-17574)@16<=s L0x7fffffffd400,L0x7fffffffd400<s17574@16,
(-17574)@16<=s L0x7fffffffd402,L0x7fffffffd402<s17574@16,
(-17540)@16<=s L0x7fffffffd404,L0x7fffffffd404<s17540@16,
(-17540)@16<=s L0x7fffffffd406,L0x7fffffffd406<s17540@16,
(-17576)@16<=s L0x7fffffffd408,L0x7fffffffd408<s17576@16,
(-17576)@16<=s L0x7fffffffd40a,L0x7fffffffd40a<s17576@16,
(-17574)@16<=s L0x7fffffffd40c,L0x7fffffffd40c<s17574@16,
(-17574)@16<=s L0x7fffffffd40e,L0x7fffffffd40e<s17574@16,
(-17540)@16<=s L0x7fffffffd410,L0x7fffffffd410<s17540@16,
(-17540)@16<=s L0x7fffffffd412,L0x7fffffffd412<s17540@16,
(-17540)@16<=s L0x7fffffffd414,L0x7fffffffd414<s17540@16,
(-17540)@16<=s L0x7fffffffd416,L0x7fffffffd416<s17540@16,
(-17540)@16<=s L0x7fffffffd418,L0x7fffffffd418<s17540@16,
(-17540)@16<=s L0x7fffffffd41a,L0x7fffffffd41a<s17540@16,
(-17540)@16<=s L0x7fffffffd41c,L0x7fffffffd41c<s17540@16,
(-17540)@16<=s L0x7fffffffd41e,L0x7fffffffd41e<s17540@16,
(-18899)@16<=s L0x7fffffffd420,L0x7fffffffd420<s18899@16,
(-18899)@16<=s L0x7fffffffd422,L0x7fffffffd422<s18899@16,
(-18899)@16<=s L0x7fffffffd424,L0x7fffffffd424<s18899@16,
(-18899)@16<=s L0x7fffffffd426,L0x7fffffffd426<s18899@16,
(-18899)@16<=s L0x7fffffffd428,L0x7fffffffd428<s18899@16,
(-18899)@16<=s L0x7fffffffd42a,L0x7fffffffd42a<s18899@16,
(-18899)@16<=s L0x7fffffffd42c,L0x7fffffffd42c<s18899@16,
(-18899)@16<=s L0x7fffffffd42e,L0x7fffffffd42e<s18899@16,
(-18897)@16<=s L0x7fffffffd430,L0x7fffffffd430<s18897@16,
(-18897)@16<=s L0x7fffffffd432,L0x7fffffffd432<s18897@16,
(-18897)@16<=s L0x7fffffffd434,L0x7fffffffd434<s18897@16,
(-18897)@16<=s L0x7fffffffd436,L0x7fffffffd436<s18897@16,
(-18897)@16<=s L0x7fffffffd438,L0x7fffffffd438<s18897@16,
(-18897)@16<=s L0x7fffffffd43a,L0x7fffffffd43a<s18897@16,
(-18897)@16<=s L0x7fffffffd43c,L0x7fffffffd43c<s18897@16,
(-18897)@16<=s L0x7fffffffd43e,L0x7fffffffd43e<s18897@16,
(-18903)@16<=s L0x7fffffffd440,L0x7fffffffd440<s18903@16,
(-18903)@16<=s L0x7fffffffd442,L0x7fffffffd442<s18903@16,
(-18903)@16<=s L0x7fffffffd444,L0x7fffffffd444<s18903@16,
(-18903)@16<=s L0x7fffffffd446,L0x7fffffffd446<s18903@16,
(-18903)@16<=s L0x7fffffffd448,L0x7fffffffd448<s18903@16,
(-18903)@16<=s L0x7fffffffd44a,L0x7fffffffd44a<s18903@16,
(-18903)@16<=s L0x7fffffffd44c,L0x7fffffffd44c<s18903@16,
(-18903)@16<=s L0x7fffffffd44e,L0x7fffffffd44e<s18903@16,
(-18900)@16<=s L0x7fffffffd450,L0x7fffffffd450<s18900@16,
(-18900)@16<=s L0x7fffffffd452,L0x7fffffffd452<s18900@16,
(-18900)@16<=s L0x7fffffffd454,L0x7fffffffd454<s18900@16,
(-18900)@16<=s L0x7fffffffd456,L0x7fffffffd456<s18900@16,
(-18900)@16<=s L0x7fffffffd458,L0x7fffffffd458<s18900@16,
(-18900)@16<=s L0x7fffffffd45a,L0x7fffffffd45a<s18900@16,
(-18900)@16<=s L0x7fffffffd45c,L0x7fffffffd45c<s18900@16,
(-18900)@16<=s L0x7fffffffd45e,L0x7fffffffd45e<s18900@16,
(-17553)@16<=s L0x7fffffffd460,L0x7fffffffd460<s17553@16,
(-17553)@16<=s L0x7fffffffd462,L0x7fffffffd462<s17553@16,
(-17553)@16<=s L0x7fffffffd464,L0x7fffffffd464<s17553@16,
(-17553)@16<=s L0x7fffffffd466,L0x7fffffffd466<s17553@16,
(-17553)@16<=s L0x7fffffffd468,L0x7fffffffd468<s17553@16,
(-17553)@16<=s L0x7fffffffd46a,L0x7fffffffd46a<s17553@16,
(-17553)@16<=s L0x7fffffffd46c,L0x7fffffffd46c<s17553@16,
(-17553)@16<=s L0x7fffffffd46e,L0x7fffffffd46e<s17553@16,
(-17552)@16<=s L0x7fffffffd470,L0x7fffffffd470<s17552@16,
(-17552)@16<=s L0x7fffffffd472,L0x7fffffffd472<s17552@16,
(-17552)@16<=s L0x7fffffffd474,L0x7fffffffd474<s17552@16,
(-17552)@16<=s L0x7fffffffd476,L0x7fffffffd476<s17552@16,
(-17552)@16<=s L0x7fffffffd478,L0x7fffffffd478<s17552@16,
(-17552)@16<=s L0x7fffffffd47a,L0x7fffffffd47a<s17552@16,
(-17552)@16<=s L0x7fffffffd47c,L0x7fffffffd47c<s17552@16,
(-17552)@16<=s L0x7fffffffd47e,L0x7fffffffd47e<s17552@16,
(-17557)@16<=s L0x7fffffffd480,L0x7fffffffd480<s17557@16,
(-17557)@16<=s L0x7fffffffd482,L0x7fffffffd482<s17557@16,
(-17557)@16<=s L0x7fffffffd484,L0x7fffffffd484<s17557@16,
(-17557)@16<=s L0x7fffffffd486,L0x7fffffffd486<s17557@16,
(-17558)@16<=s L0x7fffffffd488,L0x7fffffffd488<s17558@16,
(-17558)@16<=s L0x7fffffffd48a,L0x7fffffffd48a<s17558@16,
(-17557)@16<=s L0x7fffffffd48c,L0x7fffffffd48c<s17557@16,
(-17557)@16<=s L0x7fffffffd48e,L0x7fffffffd48e<s17557@16,
(-17554)@16<=s L0x7fffffffd490,L0x7fffffffd490<s17554@16,
(-17554)@16<=s L0x7fffffffd492,L0x7fffffffd492<s17554@16,
(-17554)@16<=s L0x7fffffffd494,L0x7fffffffd494<s17554@16,
(-17554)@16<=s L0x7fffffffd496,L0x7fffffffd496<s17554@16,
(-17554)@16<=s L0x7fffffffd498,L0x7fffffffd498<s17554@16,
(-17554)@16<=s L0x7fffffffd49a,L0x7fffffffd49a<s17554@16,
(-17554)@16<=s L0x7fffffffd49c,L0x7fffffffd49c<s17554@16,
(-17554)@16<=s L0x7fffffffd49e,L0x7fffffffd49e<s17554@16,
(-17877)@16<=s L0x7fffffffd4a0,L0x7fffffffd4a0<s17877@16,
(-17877)@16<=s L0x7fffffffd4a2,L0x7fffffffd4a2<s17877@16,
(-17877)@16<=s L0x7fffffffd4a4,L0x7fffffffd4a4<s17877@16,
(-17877)@16<=s L0x7fffffffd4a6,L0x7fffffffd4a6<s17877@16,
(-17877)@16<=s L0x7fffffffd4a8,L0x7fffffffd4a8<s17877@16,
(-17877)@16<=s L0x7fffffffd4aa,L0x7fffffffd4aa<s17877@16,
(-17877)@16<=s L0x7fffffffd4ac,L0x7fffffffd4ac<s17877@16,
(-17877)@16<=s L0x7fffffffd4ae,L0x7fffffffd4ae<s17877@16,
(-17717)@16<=s L0x7fffffffd4b0,L0x7fffffffd4b0<s17717@16,
(-17717)@16<=s L0x7fffffffd4b2,L0x7fffffffd4b2<s17717@16,
(-17717)@16<=s L0x7fffffffd4b4,L0x7fffffffd4b4<s17717@16,
(-17717)@16<=s L0x7fffffffd4b6,L0x7fffffffd4b6<s17717@16,
(-17717)@16<=s L0x7fffffffd4b8,L0x7fffffffd4b8<s17717@16,
(-17717)@16<=s L0x7fffffffd4ba,L0x7fffffffd4ba<s17717@16,
(-17717)@16<=s L0x7fffffffd4bc,L0x7fffffffd4bc<s17717@16,
(-17717)@16<=s L0x7fffffffd4be,L0x7fffffffd4be<s17717@16,
(-17877)@16<=s L0x7fffffffd4c0,L0x7fffffffd4c0<s17877@16,
(-17877)@16<=s L0x7fffffffd4c2,L0x7fffffffd4c2<s17877@16,
(-17877)@16<=s L0x7fffffffd4c4,L0x7fffffffd4c4<s17877@16,
(-17877)@16<=s L0x7fffffffd4c6,L0x7fffffffd4c6<s17877@16,
(-17877)@16<=s L0x7fffffffd4c8,L0x7fffffffd4c8<s17877@16,
(-17877)@16<=s L0x7fffffffd4ca,L0x7fffffffd4ca<s17877@16,
(-17877)@16<=s L0x7fffffffd4cc,L0x7fffffffd4cc<s17877@16,
(-17877)@16<=s L0x7fffffffd4ce,L0x7fffffffd4ce<s17877@16,
(-17708)@16<=s L0x7fffffffd4d0,L0x7fffffffd4d0<s17708@16,
(-17708)@16<=s L0x7fffffffd4d2,L0x7fffffffd4d2<s17708@16,
(-17708)@16<=s L0x7fffffffd4d4,L0x7fffffffd4d4<s17708@16,
(-17708)@16<=s L0x7fffffffd4d6,L0x7fffffffd4d6<s17708@16,
(-17708)@16<=s L0x7fffffffd4d8,L0x7fffffffd4d8<s17708@16,
(-17708)@16<=s L0x7fffffffd4da,L0x7fffffffd4da<s17708@16,
(-17708)@16<=s L0x7fffffffd4dc,L0x7fffffffd4dc<s17708@16,
(-17708)@16<=s L0x7fffffffd4de,L0x7fffffffd4de<s17708@16
,
(-27971)@16<=s L0x7fffffffd4e0,L0x7fffffffd4e0<s27971@16,
(-27971)@16<=s L0x7fffffffd4e2,L0x7fffffffd4e2<s27971@16,
(-27971)@16<=s L0x7fffffffd4e4,L0x7fffffffd4e4<s27971@16,
(-27971)@16<=s L0x7fffffffd4e6,L0x7fffffffd4e6<s27971@16,
(-27971)@16<=s L0x7fffffffd4e8,L0x7fffffffd4e8<s27971@16,
(-27971)@16<=s L0x7fffffffd4ea,L0x7fffffffd4ea<s27971@16,
(-27971)@16<=s L0x7fffffffd4ec,L0x7fffffffd4ec<s27971@16,
(-27971)@16<=s L0x7fffffffd4ee,L0x7fffffffd4ee<s27971@16,
(-27971)@16<=s L0x7fffffffd4f0,L0x7fffffffd4f0<s27971@16,
(-27971)@16<=s L0x7fffffffd4f2,L0x7fffffffd4f2<s27971@16,
(-27971)@16<=s L0x7fffffffd4f4,L0x7fffffffd4f4<s27971@16,
(-27971)@16<=s L0x7fffffffd4f6,L0x7fffffffd4f6<s27971@16,
(-27971)@16<=s L0x7fffffffd4f8,L0x7fffffffd4f8<s27971@16,
(-27971)@16<=s L0x7fffffffd4fa,L0x7fffffffd4fa<s27971@16,
(-27971)@16<=s L0x7fffffffd4fc,L0x7fffffffd4fc<s27971@16,
(-27971)@16<=s L0x7fffffffd4fe,L0x7fffffffd4fe<s27971@16,
(-27971)@16<=s L0x7fffffffd500,L0x7fffffffd500<s27971@16,
(-27971)@16<=s L0x7fffffffd502,L0x7fffffffd502<s27971@16,
(-27971)@16<=s L0x7fffffffd504,L0x7fffffffd504<s27971@16,
(-27971)@16<=s L0x7fffffffd506,L0x7fffffffd506<s27971@16,
(-27971)@16<=s L0x7fffffffd508,L0x7fffffffd508<s27971@16,
(-27971)@16<=s L0x7fffffffd50a,L0x7fffffffd50a<s27971@16,
(-27971)@16<=s L0x7fffffffd50c,L0x7fffffffd50c<s27971@16,
(-27971)@16<=s L0x7fffffffd50e,L0x7fffffffd50e<s27971@16,
(-27971)@16<=s L0x7fffffffd510,L0x7fffffffd510<s27971@16,
(-27971)@16<=s L0x7fffffffd512,L0x7fffffffd512<s27971@16,
(-27971)@16<=s L0x7fffffffd514,L0x7fffffffd514<s27971@16,
(-27971)@16<=s L0x7fffffffd516,L0x7fffffffd516<s27971@16,
(-27971)@16<=s L0x7fffffffd518,L0x7fffffffd518<s27971@16,
(-27971)@16<=s L0x7fffffffd51a,L0x7fffffffd51a<s27971@16,
(-27971)@16<=s L0x7fffffffd51c,L0x7fffffffd51c<s27971@16,
(-27971)@16<=s L0x7fffffffd51e,L0x7fffffffd51e<s27971@16,
(-10867)@16<=s L0x7fffffffd520,L0x7fffffffd520<s10867@16,
(-10867)@16<=s L0x7fffffffd522,L0x7fffffffd522<s10867@16,
(-10867)@16<=s L0x7fffffffd524,L0x7fffffffd524<s10867@16,
(-10867)@16<=s L0x7fffffffd526,L0x7fffffffd526<s10867@16,
(-10867)@16<=s L0x7fffffffd528,L0x7fffffffd528<s10867@16,
(-10867)@16<=s L0x7fffffffd52a,L0x7fffffffd52a<s10867@16,
(-10867)@16<=s L0x7fffffffd52c,L0x7fffffffd52c<s10867@16,
(-10867)@16<=s L0x7fffffffd52e,L0x7fffffffd52e<s10867@16,
(-10867)@16<=s L0x7fffffffd530,L0x7fffffffd530<s10867@16,
(-10867)@16<=s L0x7fffffffd532,L0x7fffffffd532<s10867@16,
(-10867)@16<=s L0x7fffffffd534,L0x7fffffffd534<s10867@16,
(-10867)@16<=s L0x7fffffffd536,L0x7fffffffd536<s10867@16,
(-10867)@16<=s L0x7fffffffd538,L0x7fffffffd538<s10867@16,
(-10867)@16<=s L0x7fffffffd53a,L0x7fffffffd53a<s10867@16,
(-10867)@16<=s L0x7fffffffd53c,L0x7fffffffd53c<s10867@16,
(-10867)@16<=s L0x7fffffffd53e,L0x7fffffffd53e<s10867@16,
(-10867)@16<=s L0x7fffffffd540,L0x7fffffffd540<s10867@16,
(-10867)@16<=s L0x7fffffffd542,L0x7fffffffd542<s10867@16,
(-10867)@16<=s L0x7fffffffd544,L0x7fffffffd544<s10867@16,
(-10867)@16<=s L0x7fffffffd546,L0x7fffffffd546<s10867@16,
(-10867)@16<=s L0x7fffffffd548,L0x7fffffffd548<s10867@16,
(-10867)@16<=s L0x7fffffffd54a,L0x7fffffffd54a<s10867@16,
(-10867)@16<=s L0x7fffffffd54c,L0x7fffffffd54c<s10867@16,
(-10867)@16<=s L0x7fffffffd54e,L0x7fffffffd54e<s10867@16,
(-10867)@16<=s L0x7fffffffd550,L0x7fffffffd550<s10867@16,
(-10867)@16<=s L0x7fffffffd552,L0x7fffffffd552<s10867@16,
(-10867)@16<=s L0x7fffffffd554,L0x7fffffffd554<s10867@16,
(-10867)@16<=s L0x7fffffffd556,L0x7fffffffd556<s10867@16,
(-10867)@16<=s L0x7fffffffd558,L0x7fffffffd558<s10867@16,
(-10867)@16<=s L0x7fffffffd55a,L0x7fffffffd55a<s10867@16,
(-10867)@16<=s L0x7fffffffd55c,L0x7fffffffd55c<s10867@16,
(-10867)@16<=s L0x7fffffffd55e,L0x7fffffffd55e<s10867@16,
(-11081)@16<=s L0x7fffffffd560,L0x7fffffffd560<s11081@16,
(-11081)@16<=s L0x7fffffffd562,L0x7fffffffd562<s11081@16,
(-11081)@16<=s L0x7fffffffd564,L0x7fffffffd564<s11081@16,
(-11081)@16<=s L0x7fffffffd566,L0x7fffffffd566<s11081@16,
(-11081)@16<=s L0x7fffffffd568,L0x7fffffffd568<s11081@16,
(-11081)@16<=s L0x7fffffffd56a,L0x7fffffffd56a<s11081@16,
(-11081)@16<=s L0x7fffffffd56c,L0x7fffffffd56c<s11081@16,
(-11081)@16<=s L0x7fffffffd56e,L0x7fffffffd56e<s11081@16,
(-11081)@16<=s L0x7fffffffd570,L0x7fffffffd570<s11081@16,
(-11081)@16<=s L0x7fffffffd572,L0x7fffffffd572<s11081@16,
(-11081)@16<=s L0x7fffffffd574,L0x7fffffffd574<s11081@16,
(-11081)@16<=s L0x7fffffffd576,L0x7fffffffd576<s11081@16,
(-11081)@16<=s L0x7fffffffd578,L0x7fffffffd578<s11081@16,
(-11081)@16<=s L0x7fffffffd57a,L0x7fffffffd57a<s11081@16,
(-11081)@16<=s L0x7fffffffd57c,L0x7fffffffd57c<s11081@16,
(-11081)@16<=s L0x7fffffffd57e,L0x7fffffffd57e<s11081@16,
(-11081)@16<=s L0x7fffffffd580,L0x7fffffffd580<s11081@16,
(-11081)@16<=s L0x7fffffffd582,L0x7fffffffd582<s11081@16,
(-11081)@16<=s L0x7fffffffd584,L0x7fffffffd584<s11081@16,
(-11081)@16<=s L0x7fffffffd586,L0x7fffffffd586<s11081@16,
(-11081)@16<=s L0x7fffffffd588,L0x7fffffffd588<s11081@16,
(-11081)@16<=s L0x7fffffffd58a,L0x7fffffffd58a<s11081@16,
(-11081)@16<=s L0x7fffffffd58c,L0x7fffffffd58c<s11081@16,
(-11081)@16<=s L0x7fffffffd58e,L0x7fffffffd58e<s11081@16,
(-11081)@16<=s L0x7fffffffd590,L0x7fffffffd590<s11081@16,
(-11081)@16<=s L0x7fffffffd592,L0x7fffffffd592<s11081@16,
(-11081)@16<=s L0x7fffffffd594,L0x7fffffffd594<s11081@16,
(-11081)@16<=s L0x7fffffffd596,L0x7fffffffd596<s11081@16,
(-11081)@16<=s L0x7fffffffd598,L0x7fffffffd598<s11081@16,
(-11081)@16<=s L0x7fffffffd59a,L0x7fffffffd59a<s11081@16,
(-11081)@16<=s L0x7fffffffd59c,L0x7fffffffd59c<s11081@16,
(-11081)@16<=s L0x7fffffffd59e,L0x7fffffffd59e<s11081@16,
(-11078)@16<=s L0x7fffffffd5a0,L0x7fffffffd5a0<s11078@16,
(-11078)@16<=s L0x7fffffffd5a2,L0x7fffffffd5a2<s11078@16,
(-11078)@16<=s L0x7fffffffd5a4,L0x7fffffffd5a4<s11078@16,
(-11078)@16<=s L0x7fffffffd5a6,L0x7fffffffd5a6<s11078@16,
(-11078)@16<=s L0x7fffffffd5a8,L0x7fffffffd5a8<s11078@16,
(-11078)@16<=s L0x7fffffffd5aa,L0x7fffffffd5aa<s11078@16,
(-11078)@16<=s L0x7fffffffd5ac,L0x7fffffffd5ac<s11078@16,
(-11078)@16<=s L0x7fffffffd5ae,L0x7fffffffd5ae<s11078@16,
(-11078)@16<=s L0x7fffffffd5b0,L0x7fffffffd5b0<s11078@16,
(-11078)@16<=s L0x7fffffffd5b2,L0x7fffffffd5b2<s11078@16,
(-11078)@16<=s L0x7fffffffd5b4,L0x7fffffffd5b4<s11078@16,
(-11078)@16<=s L0x7fffffffd5b6,L0x7fffffffd5b6<s11078@16,
(-11078)@16<=s L0x7fffffffd5b8,L0x7fffffffd5b8<s11078@16,
(-11078)@16<=s L0x7fffffffd5ba,L0x7fffffffd5ba<s11078@16,
(-11078)@16<=s L0x7fffffffd5bc,L0x7fffffffd5bc<s11078@16,
(-11078)@16<=s L0x7fffffffd5be,L0x7fffffffd5be<s11078@16,
(-11078)@16<=s L0x7fffffffd5c0,L0x7fffffffd5c0<s11078@16,
(-11078)@16<=s L0x7fffffffd5c2,L0x7fffffffd5c2<s11078@16,
(-11078)@16<=s L0x7fffffffd5c4,L0x7fffffffd5c4<s11078@16,
(-11078)@16<=s L0x7fffffffd5c6,L0x7fffffffd5c6<s11078@16,
(-11078)@16<=s L0x7fffffffd5c8,L0x7fffffffd5c8<s11078@16,
(-11078)@16<=s L0x7fffffffd5ca,L0x7fffffffd5ca<s11078@16,
(-11078)@16<=s L0x7fffffffd5cc,L0x7fffffffd5cc<s11078@16,
(-11078)@16<=s L0x7fffffffd5ce,L0x7fffffffd5ce<s11078@16,
(-11078)@16<=s L0x7fffffffd5d0,L0x7fffffffd5d0<s11078@16,
(-11078)@16<=s L0x7fffffffd5d2,L0x7fffffffd5d2<s11078@16,
(-11078)@16<=s L0x7fffffffd5d4,L0x7fffffffd5d4<s11078@16,
(-11078)@16<=s L0x7fffffffd5d6,L0x7fffffffd5d6<s11078@16,
(-11078)@16<=s L0x7fffffffd5d8,L0x7fffffffd5d8<s11078@16,
(-11078)@16<=s L0x7fffffffd5da,L0x7fffffffd5da<s11078@16,
(-11078)@16<=s L0x7fffffffd5dc,L0x7fffffffd5dc<s11078@16,
(-11078)@16<=s L0x7fffffffd5de,L0x7fffffffd5de<s11078@16
,
(-11040)@16<=s L0x7fffffffd5e0,L0x7fffffffd5e0<s11040@16,
(-11040)@16<=s L0x7fffffffd5e2,L0x7fffffffd5e2<s11040@16,
(-11040)@16<=s L0x7fffffffd5e4,L0x7fffffffd5e4<s11040@16,
(-11040)@16<=s L0x7fffffffd5e6,L0x7fffffffd5e6<s11040@16,
(-11040)@16<=s L0x7fffffffd5e8,L0x7fffffffd5e8<s11040@16,
(-11040)@16<=s L0x7fffffffd5ea,L0x7fffffffd5ea<s11040@16,
(-11040)@16<=s L0x7fffffffd5ec,L0x7fffffffd5ec<s11040@16,
(-11040)@16<=s L0x7fffffffd5ee,L0x7fffffffd5ee<s11040@16,
(-11040)@16<=s L0x7fffffffd5f0,L0x7fffffffd5f0<s11040@16,
(-11040)@16<=s L0x7fffffffd5f2,L0x7fffffffd5f2<s11040@16,
(-11040)@16<=s L0x7fffffffd5f4,L0x7fffffffd5f4<s11040@16,
(-11040)@16<=s L0x7fffffffd5f6,L0x7fffffffd5f6<s11040@16,
(-11040)@16<=s L0x7fffffffd5f8,L0x7fffffffd5f8<s11040@16,
(-11040)@16<=s L0x7fffffffd5fa,L0x7fffffffd5fa<s11040@16,
(-11040)@16<=s L0x7fffffffd5fc,L0x7fffffffd5fc<s11040@16,
(-11040)@16<=s L0x7fffffffd5fe,L0x7fffffffd5fe<s11040@16,
(-11040)@16<=s L0x7fffffffd600,L0x7fffffffd600<s11040@16,
(-11040)@16<=s L0x7fffffffd602,L0x7fffffffd602<s11040@16,
(-11040)@16<=s L0x7fffffffd604,L0x7fffffffd604<s11040@16,
(-11040)@16<=s L0x7fffffffd606,L0x7fffffffd606<s11040@16,
(-11040)@16<=s L0x7fffffffd608,L0x7fffffffd608<s11040@16,
(-11040)@16<=s L0x7fffffffd60a,L0x7fffffffd60a<s11040@16,
(-11040)@16<=s L0x7fffffffd60c,L0x7fffffffd60c<s11040@16,
(-11040)@16<=s L0x7fffffffd60e,L0x7fffffffd60e<s11040@16,
(-11040)@16<=s L0x7fffffffd610,L0x7fffffffd610<s11040@16,
(-11040)@16<=s L0x7fffffffd612,L0x7fffffffd612<s11040@16,
(-11040)@16<=s L0x7fffffffd614,L0x7fffffffd614<s11040@16,
(-11040)@16<=s L0x7fffffffd616,L0x7fffffffd616<s11040@16,
(-11040)@16<=s L0x7fffffffd618,L0x7fffffffd618<s11040@16,
(-11040)@16<=s L0x7fffffffd61a,L0x7fffffffd61a<s11040@16,
(-11040)@16<=s L0x7fffffffd61c,L0x7fffffffd61c<s11040@16,
(-11040)@16<=s L0x7fffffffd61e,L0x7fffffffd61e<s11040@16,
(-10880)@16<=s L0x7fffffffd620,L0x7fffffffd620<s10880@16,
(-10880)@16<=s L0x7fffffffd622,L0x7fffffffd622<s10880@16,
(-10880)@16<=s L0x7fffffffd624,L0x7fffffffd624<s10880@16,
(-10880)@16<=s L0x7fffffffd626,L0x7fffffffd626<s10880@16,
(-10880)@16<=s L0x7fffffffd628,L0x7fffffffd628<s10880@16,
(-10880)@16<=s L0x7fffffffd62a,L0x7fffffffd62a<s10880@16,
(-10880)@16<=s L0x7fffffffd62c,L0x7fffffffd62c<s10880@16,
(-10880)@16<=s L0x7fffffffd62e,L0x7fffffffd62e<s10880@16,
(-10880)@16<=s L0x7fffffffd630,L0x7fffffffd630<s10880@16,
(-10880)@16<=s L0x7fffffffd632,L0x7fffffffd632<s10880@16,
(-10880)@16<=s L0x7fffffffd634,L0x7fffffffd634<s10880@16,
(-10880)@16<=s L0x7fffffffd636,L0x7fffffffd636<s10880@16,
(-10880)@16<=s L0x7fffffffd638,L0x7fffffffd638<s10880@16,
(-10880)@16<=s L0x7fffffffd63a,L0x7fffffffd63a<s10880@16,
(-10880)@16<=s L0x7fffffffd63c,L0x7fffffffd63c<s10880@16,
(-10880)@16<=s L0x7fffffffd63e,L0x7fffffffd63e<s10880@16,
(-10880)@16<=s L0x7fffffffd640,L0x7fffffffd640<s10880@16,
(-10880)@16<=s L0x7fffffffd642,L0x7fffffffd642<s10880@16,
(-10880)@16<=s L0x7fffffffd644,L0x7fffffffd644<s10880@16,
(-10880)@16<=s L0x7fffffffd646,L0x7fffffffd646<s10880@16,
(-10880)@16<=s L0x7fffffffd648,L0x7fffffffd648<s10880@16,
(-10880)@16<=s L0x7fffffffd64a,L0x7fffffffd64a<s10880@16,
(-10880)@16<=s L0x7fffffffd64c,L0x7fffffffd64c<s10880@16,
(-10880)@16<=s L0x7fffffffd64e,L0x7fffffffd64e<s10880@16,
(-10880)@16<=s L0x7fffffffd650,L0x7fffffffd650<s10880@16,
(-10880)@16<=s L0x7fffffffd652,L0x7fffffffd652<s10880@16,
(-10880)@16<=s L0x7fffffffd654,L0x7fffffffd654<s10880@16,
(-10880)@16<=s L0x7fffffffd656,L0x7fffffffd656<s10880@16,
(-10880)@16<=s L0x7fffffffd658,L0x7fffffffd658<s10880@16,
(-10880)@16<=s L0x7fffffffd65a,L0x7fffffffd65a<s10880@16,
(-10880)@16<=s L0x7fffffffd65c,L0x7fffffffd65c<s10880@16,
(-10880)@16<=s L0x7fffffffd65e,L0x7fffffffd65e<s10880@16,
(-10870)@16<=s L0x7fffffffd660,L0x7fffffffd660<s10870@16,
(-10870)@16<=s L0x7fffffffd662,L0x7fffffffd662<s10870@16,
(-10870)@16<=s L0x7fffffffd664,L0x7fffffffd664<s10870@16,
(-10870)@16<=s L0x7fffffffd666,L0x7fffffffd666<s10870@16,
(-10870)@16<=s L0x7fffffffd668,L0x7fffffffd668<s10870@16,
(-10870)@16<=s L0x7fffffffd66a,L0x7fffffffd66a<s10870@16,
(-10870)@16<=s L0x7fffffffd66c,L0x7fffffffd66c<s10870@16,
(-10870)@16<=s L0x7fffffffd66e,L0x7fffffffd66e<s10870@16,
(-10870)@16<=s L0x7fffffffd670,L0x7fffffffd670<s10870@16,
(-10870)@16<=s L0x7fffffffd672,L0x7fffffffd672<s10870@16,
(-10870)@16<=s L0x7fffffffd674,L0x7fffffffd674<s10870@16,
(-10870)@16<=s L0x7fffffffd676,L0x7fffffffd676<s10870@16,
(-10870)@16<=s L0x7fffffffd678,L0x7fffffffd678<s10870@16,
(-10870)@16<=s L0x7fffffffd67a,L0x7fffffffd67a<s10870@16,
(-10870)@16<=s L0x7fffffffd67c,L0x7fffffffd67c<s10870@16,
(-10870)@16<=s L0x7fffffffd67e,L0x7fffffffd67e<s10870@16,
(-10870)@16<=s L0x7fffffffd680,L0x7fffffffd680<s10870@16,
(-10870)@16<=s L0x7fffffffd682,L0x7fffffffd682<s10870@16,
(-10870)@16<=s L0x7fffffffd684,L0x7fffffffd684<s10870@16,
(-10870)@16<=s L0x7fffffffd686,L0x7fffffffd686<s10870@16,
(-10870)@16<=s L0x7fffffffd688,L0x7fffffffd688<s10870@16,
(-10870)@16<=s L0x7fffffffd68a,L0x7fffffffd68a<s10870@16,
(-10870)@16<=s L0x7fffffffd68c,L0x7fffffffd68c<s10870@16,
(-10870)@16<=s L0x7fffffffd68e,L0x7fffffffd68e<s10870@16,
(-10870)@16<=s L0x7fffffffd690,L0x7fffffffd690<s10870@16,
(-10870)@16<=s L0x7fffffffd692,L0x7fffffffd692<s10870@16,
(-10870)@16<=s L0x7fffffffd694,L0x7fffffffd694<s10870@16,
(-10870)@16<=s L0x7fffffffd696,L0x7fffffffd696<s10870@16,
(-10870)@16<=s L0x7fffffffd698,L0x7fffffffd698<s10870@16,
(-10870)@16<=s L0x7fffffffd69a,L0x7fffffffd69a<s10870@16,
(-10870)@16<=s L0x7fffffffd69c,L0x7fffffffd69c<s10870@16,
(-10870)@16<=s L0x7fffffffd69e,L0x7fffffffd69e<s10870@16,
(-11209)@16<=s L0x7fffffffd6a0,L0x7fffffffd6a0<s11209@16,
(-11209)@16<=s L0x7fffffffd6a2,L0x7fffffffd6a2<s11209@16,
(-11209)@16<=s L0x7fffffffd6a4,L0x7fffffffd6a4<s11209@16,
(-11209)@16<=s L0x7fffffffd6a6,L0x7fffffffd6a6<s11209@16,
(-11209)@16<=s L0x7fffffffd6a8,L0x7fffffffd6a8<s11209@16,
(-11209)@16<=s L0x7fffffffd6aa,L0x7fffffffd6aa<s11209@16,
(-11209)@16<=s L0x7fffffffd6ac,L0x7fffffffd6ac<s11209@16,
(-11209)@16<=s L0x7fffffffd6ae,L0x7fffffffd6ae<s11209@16,
(-11049)@16<=s L0x7fffffffd6b0,L0x7fffffffd6b0<s11049@16,
(-11049)@16<=s L0x7fffffffd6b2,L0x7fffffffd6b2<s11049@16,
(-11049)@16<=s L0x7fffffffd6b4,L0x7fffffffd6b4<s11049@16,
(-11049)@16<=s L0x7fffffffd6b6,L0x7fffffffd6b6<s11049@16,
(-11049)@16<=s L0x7fffffffd6b8,L0x7fffffffd6b8<s11049@16,
(-11049)@16<=s L0x7fffffffd6ba,L0x7fffffffd6ba<s11049@16,
(-11049)@16<=s L0x7fffffffd6bc,L0x7fffffffd6bc<s11049@16,
(-11049)@16<=s L0x7fffffffd6be,L0x7fffffffd6be<s11049@16,
(-11209)@16<=s L0x7fffffffd6c0,L0x7fffffffd6c0<s11209@16,
(-11209)@16<=s L0x7fffffffd6c2,L0x7fffffffd6c2<s11209@16,
(-11209)@16<=s L0x7fffffffd6c4,L0x7fffffffd6c4<s11209@16,
(-11209)@16<=s L0x7fffffffd6c6,L0x7fffffffd6c6<s11209@16,
(-11209)@16<=s L0x7fffffffd6c8,L0x7fffffffd6c8<s11209@16,
(-11209)@16<=s L0x7fffffffd6ca,L0x7fffffffd6ca<s11209@16,
(-11209)@16<=s L0x7fffffffd6cc,L0x7fffffffd6cc<s11209@16,
(-11209)@16<=s L0x7fffffffd6ce,L0x7fffffffd6ce<s11209@16,
(-11040)@16<=s L0x7fffffffd6d0,L0x7fffffffd6d0<s11040@16,
(-11040)@16<=s L0x7fffffffd6d2,L0x7fffffffd6d2<s11040@16,
(-11040)@16<=s L0x7fffffffd6d4,L0x7fffffffd6d4<s11040@16,
(-11040)@16<=s L0x7fffffffd6d6,L0x7fffffffd6d6<s11040@16,
(-11040)@16<=s L0x7fffffffd6d8,L0x7fffffffd6d8<s11040@16,
(-11040)@16<=s L0x7fffffffd6da,L0x7fffffffd6da<s11040@16,
(-11040)@16<=s L0x7fffffffd6dc,L0x7fffffffd6dc<s11040@16,
(-11040)@16<=s L0x7fffffffd6de,L0x7fffffffd6de<s11040@16
,
(-28155)@16<=s L0x7fffffffd6e0,L0x7fffffffd6e0<s28155@16,
(-28155)@16<=s L0x7fffffffd6e2,L0x7fffffffd6e2<s28155@16,
(-28155)@16<=s L0x7fffffffd6e4,L0x7fffffffd6e4<s28155@16,
(-28155)@16<=s L0x7fffffffd6e6,L0x7fffffffd6e6<s28155@16,
(-28155)@16<=s L0x7fffffffd6e8,L0x7fffffffd6e8<s28155@16,
(-28155)@16<=s L0x7fffffffd6ea,L0x7fffffffd6ea<s28155@16,
(-28155)@16<=s L0x7fffffffd6ec,L0x7fffffffd6ec<s28155@16,
(-28155)@16<=s L0x7fffffffd6ee,L0x7fffffffd6ee<s28155@16,
(-28155)@16<=s L0x7fffffffd6f0,L0x7fffffffd6f0<s28155@16,
(-28155)@16<=s L0x7fffffffd6f2,L0x7fffffffd6f2<s28155@16,
(-28155)@16<=s L0x7fffffffd6f4,L0x7fffffffd6f4<s28155@16,
(-28155)@16<=s L0x7fffffffd6f6,L0x7fffffffd6f6<s28155@16,
(-28155)@16<=s L0x7fffffffd6f8,L0x7fffffffd6f8<s28155@16,
(-28155)@16<=s L0x7fffffffd6fa,L0x7fffffffd6fa<s28155@16,
(-28155)@16<=s L0x7fffffffd6fc,L0x7fffffffd6fc<s28155@16,
(-28155)@16<=s L0x7fffffffd6fe,L0x7fffffffd6fe<s28155@16,
(-28155)@16<=s L0x7fffffffd700,L0x7fffffffd700<s28155@16,
(-28155)@16<=s L0x7fffffffd702,L0x7fffffffd702<s28155@16,
(-28155)@16<=s L0x7fffffffd704,L0x7fffffffd704<s28155@16,
(-28155)@16<=s L0x7fffffffd706,L0x7fffffffd706<s28155@16,
(-28155)@16<=s L0x7fffffffd708,L0x7fffffffd708<s28155@16,
(-28155)@16<=s L0x7fffffffd70a,L0x7fffffffd70a<s28155@16,
(-28155)@16<=s L0x7fffffffd70c,L0x7fffffffd70c<s28155@16,
(-28155)@16<=s L0x7fffffffd70e,L0x7fffffffd70e<s28155@16,
(-28155)@16<=s L0x7fffffffd710,L0x7fffffffd710<s28155@16,
(-28155)@16<=s L0x7fffffffd712,L0x7fffffffd712<s28155@16,
(-28155)@16<=s L0x7fffffffd714,L0x7fffffffd714<s28155@16,
(-28155)@16<=s L0x7fffffffd716,L0x7fffffffd716<s28155@16,
(-28155)@16<=s L0x7fffffffd718,L0x7fffffffd718<s28155@16,
(-28155)@16<=s L0x7fffffffd71a,L0x7fffffffd71a<s28155@16,
(-28155)@16<=s L0x7fffffffd71c,L0x7fffffffd71c<s28155@16,
(-28155)@16<=s L0x7fffffffd71e,L0x7fffffffd71e<s28155@16,
(-16723)@16<=s L0x7fffffffd720,L0x7fffffffd720<s16723@16,
(-16723)@16<=s L0x7fffffffd722,L0x7fffffffd722<s16723@16,
(-16723)@16<=s L0x7fffffffd724,L0x7fffffffd724<s16723@16,
(-16723)@16<=s L0x7fffffffd726,L0x7fffffffd726<s16723@16,
(-16723)@16<=s L0x7fffffffd728,L0x7fffffffd728<s16723@16,
(-16723)@16<=s L0x7fffffffd72a,L0x7fffffffd72a<s16723@16,
(-16723)@16<=s L0x7fffffffd72c,L0x7fffffffd72c<s16723@16,
(-16723)@16<=s L0x7fffffffd72e,L0x7fffffffd72e<s16723@16,
(-16723)@16<=s L0x7fffffffd730,L0x7fffffffd730<s16723@16,
(-16723)@16<=s L0x7fffffffd732,L0x7fffffffd732<s16723@16,
(-16723)@16<=s L0x7fffffffd734,L0x7fffffffd734<s16723@16,
(-16723)@16<=s L0x7fffffffd736,L0x7fffffffd736<s16723@16,
(-16723)@16<=s L0x7fffffffd738,L0x7fffffffd738<s16723@16,
(-16723)@16<=s L0x7fffffffd73a,L0x7fffffffd73a<s16723@16,
(-16723)@16<=s L0x7fffffffd73c,L0x7fffffffd73c<s16723@16,
(-16723)@16<=s L0x7fffffffd73e,L0x7fffffffd73e<s16723@16,
(-16723)@16<=s L0x7fffffffd740,L0x7fffffffd740<s16723@16,
(-16723)@16<=s L0x7fffffffd742,L0x7fffffffd742<s16723@16,
(-16723)@16<=s L0x7fffffffd744,L0x7fffffffd744<s16723@16,
(-16723)@16<=s L0x7fffffffd746,L0x7fffffffd746<s16723@16,
(-16723)@16<=s L0x7fffffffd748,L0x7fffffffd748<s16723@16,
(-16723)@16<=s L0x7fffffffd74a,L0x7fffffffd74a<s16723@16,
(-16723)@16<=s L0x7fffffffd74c,L0x7fffffffd74c<s16723@16,
(-16723)@16<=s L0x7fffffffd74e,L0x7fffffffd74e<s16723@16,
(-16723)@16<=s L0x7fffffffd750,L0x7fffffffd750<s16723@16,
(-16723)@16<=s L0x7fffffffd752,L0x7fffffffd752<s16723@16,
(-16723)@16<=s L0x7fffffffd754,L0x7fffffffd754<s16723@16,
(-16723)@16<=s L0x7fffffffd756,L0x7fffffffd756<s16723@16,
(-16723)@16<=s L0x7fffffffd758,L0x7fffffffd758<s16723@16,
(-16723)@16<=s L0x7fffffffd75a,L0x7fffffffd75a<s16723@16,
(-16723)@16<=s L0x7fffffffd75c,L0x7fffffffd75c<s16723@16,
(-16723)@16<=s L0x7fffffffd75e,L0x7fffffffd75e<s16723@16,
(-11262)@16<=s L0x7fffffffd760,L0x7fffffffd760<s11262@16,
(-11262)@16<=s L0x7fffffffd762,L0x7fffffffd762<s11262@16,
(-11262)@16<=s L0x7fffffffd764,L0x7fffffffd764<s11262@16,
(-11262)@16<=s L0x7fffffffd766,L0x7fffffffd766<s11262@16,
(-11262)@16<=s L0x7fffffffd768,L0x7fffffffd768<s11262@16,
(-11262)@16<=s L0x7fffffffd76a,L0x7fffffffd76a<s11262@16,
(-11262)@16<=s L0x7fffffffd76c,L0x7fffffffd76c<s11262@16,
(-11262)@16<=s L0x7fffffffd76e,L0x7fffffffd76e<s11262@16,
(-11262)@16<=s L0x7fffffffd770,L0x7fffffffd770<s11262@16,
(-11262)@16<=s L0x7fffffffd772,L0x7fffffffd772<s11262@16,
(-11262)@16<=s L0x7fffffffd774,L0x7fffffffd774<s11262@16,
(-11262)@16<=s L0x7fffffffd776,L0x7fffffffd776<s11262@16,
(-11262)@16<=s L0x7fffffffd778,L0x7fffffffd778<s11262@16,
(-11262)@16<=s L0x7fffffffd77a,L0x7fffffffd77a<s11262@16,
(-11262)@16<=s L0x7fffffffd77c,L0x7fffffffd77c<s11262@16,
(-11262)@16<=s L0x7fffffffd77e,L0x7fffffffd77e<s11262@16,
(-11262)@16<=s L0x7fffffffd780,L0x7fffffffd780<s11262@16,
(-11262)@16<=s L0x7fffffffd782,L0x7fffffffd782<s11262@16,
(-11262)@16<=s L0x7fffffffd784,L0x7fffffffd784<s11262@16,
(-11262)@16<=s L0x7fffffffd786,L0x7fffffffd786<s11262@16,
(-11262)@16<=s L0x7fffffffd788,L0x7fffffffd788<s11262@16,
(-11262)@16<=s L0x7fffffffd78a,L0x7fffffffd78a<s11262@16,
(-11262)@16<=s L0x7fffffffd78c,L0x7fffffffd78c<s11262@16,
(-11262)@16<=s L0x7fffffffd78e,L0x7fffffffd78e<s11262@16,
(-11262)@16<=s L0x7fffffffd790,L0x7fffffffd790<s11262@16,
(-11262)@16<=s L0x7fffffffd792,L0x7fffffffd792<s11262@16,
(-11262)@16<=s L0x7fffffffd794,L0x7fffffffd794<s11262@16,
(-11262)@16<=s L0x7fffffffd796,L0x7fffffffd796<s11262@16,
(-11262)@16<=s L0x7fffffffd798,L0x7fffffffd798<s11262@16,
(-11262)@16<=s L0x7fffffffd79a,L0x7fffffffd79a<s11262@16,
(-11262)@16<=s L0x7fffffffd79c,L0x7fffffffd79c<s11262@16,
(-11262)@16<=s L0x7fffffffd79e,L0x7fffffffd79e<s11262@16,
(-11262)@16<=s L0x7fffffffd7a0,L0x7fffffffd7a0<s11262@16,
(-11262)@16<=s L0x7fffffffd7a2,L0x7fffffffd7a2<s11262@16,
(-11262)@16<=s L0x7fffffffd7a4,L0x7fffffffd7a4<s11262@16,
(-11262)@16<=s L0x7fffffffd7a6,L0x7fffffffd7a6<s11262@16,
(-11262)@16<=s L0x7fffffffd7a8,L0x7fffffffd7a8<s11262@16,
(-11262)@16<=s L0x7fffffffd7aa,L0x7fffffffd7aa<s11262@16,
(-11262)@16<=s L0x7fffffffd7ac,L0x7fffffffd7ac<s11262@16,
(-11262)@16<=s L0x7fffffffd7ae,L0x7fffffffd7ae<s11262@16,
(-11262)@16<=s L0x7fffffffd7b0,L0x7fffffffd7b0<s11262@16,
(-11262)@16<=s L0x7fffffffd7b2,L0x7fffffffd7b2<s11262@16,
(-11262)@16<=s L0x7fffffffd7b4,L0x7fffffffd7b4<s11262@16,
(-11262)@16<=s L0x7fffffffd7b6,L0x7fffffffd7b6<s11262@16,
(-11262)@16<=s L0x7fffffffd7b8,L0x7fffffffd7b8<s11262@16,
(-11262)@16<=s L0x7fffffffd7ba,L0x7fffffffd7ba<s11262@16,
(-11262)@16<=s L0x7fffffffd7bc,L0x7fffffffd7bc<s11262@16,
(-11262)@16<=s L0x7fffffffd7be,L0x7fffffffd7be<s11262@16,
(-11262)@16<=s L0x7fffffffd7c0,L0x7fffffffd7c0<s11262@16,
(-11262)@16<=s L0x7fffffffd7c2,L0x7fffffffd7c2<s11262@16,
(-11262)@16<=s L0x7fffffffd7c4,L0x7fffffffd7c4<s11262@16,
(-11262)@16<=s L0x7fffffffd7c6,L0x7fffffffd7c6<s11262@16,
(-11262)@16<=s L0x7fffffffd7c8,L0x7fffffffd7c8<s11262@16,
(-11262)@16<=s L0x7fffffffd7ca,L0x7fffffffd7ca<s11262@16,
(-11262)@16<=s L0x7fffffffd7cc,L0x7fffffffd7cc<s11262@16,
(-11262)@16<=s L0x7fffffffd7ce,L0x7fffffffd7ce<s11262@16,
(-11262)@16<=s L0x7fffffffd7d0,L0x7fffffffd7d0<s11262@16,
(-11262)@16<=s L0x7fffffffd7d2,L0x7fffffffd7d2<s11262@16,
(-11262)@16<=s L0x7fffffffd7d4,L0x7fffffffd7d4<s11262@16,
(-11262)@16<=s L0x7fffffffd7d6,L0x7fffffffd7d6<s11262@16,
(-11262)@16<=s L0x7fffffffd7d8,L0x7fffffffd7d8<s11262@16,
(-11262)@16<=s L0x7fffffffd7da,L0x7fffffffd7da<s11262@16,
(-11262)@16<=s L0x7fffffffd7dc,L0x7fffffffd7dc<s11262@16,
(-11262)@16<=s L0x7fffffffd7de,L0x7fffffffd7de<s11262@16
,
(-17540)@16<=s L0x7fffffffd7e0,L0x7fffffffd7e0<s17540@16,
(-17540)@16<=s L0x7fffffffd7e2,L0x7fffffffd7e2<s17540@16,
(-17540)@16<=s L0x7fffffffd7e4,L0x7fffffffd7e4<s17540@16,
(-17540)@16<=s L0x7fffffffd7e6,L0x7fffffffd7e6<s17540@16,
(-17540)@16<=s L0x7fffffffd7e8,L0x7fffffffd7e8<s17540@16,
(-17540)@16<=s L0x7fffffffd7ea,L0x7fffffffd7ea<s17540@16,
(-17540)@16<=s L0x7fffffffd7ec,L0x7fffffffd7ec<s17540@16,
(-17540)@16<=s L0x7fffffffd7ee,L0x7fffffffd7ee<s17540@16,
(-17540)@16<=s L0x7fffffffd7f0,L0x7fffffffd7f0<s17540@16,
(-17540)@16<=s L0x7fffffffd7f2,L0x7fffffffd7f2<s17540@16,
(-17540)@16<=s L0x7fffffffd7f4,L0x7fffffffd7f4<s17540@16,
(-17540)@16<=s L0x7fffffffd7f6,L0x7fffffffd7f6<s17540@16,
(-17540)@16<=s L0x7fffffffd7f8,L0x7fffffffd7f8<s17540@16,
(-17540)@16<=s L0x7fffffffd7fa,L0x7fffffffd7fa<s17540@16,
(-17540)@16<=s L0x7fffffffd7fc,L0x7fffffffd7fc<s17540@16,
(-17540)@16<=s L0x7fffffffd7fe,L0x7fffffffd7fe<s17540@16,
(-17574)@16<=s L0x7fffffffd800,L0x7fffffffd800<s17574@16,
(-17574)@16<=s L0x7fffffffd802,L0x7fffffffd802<s17574@16,
(-17540)@16<=s L0x7fffffffd804,L0x7fffffffd804<s17540@16,
(-17540)@16<=s L0x7fffffffd806,L0x7fffffffd806<s17540@16,
(-17576)@16<=s L0x7fffffffd808,L0x7fffffffd808<s17576@16,
(-17576)@16<=s L0x7fffffffd80a,L0x7fffffffd80a<s17576@16,
(-17574)@16<=s L0x7fffffffd80c,L0x7fffffffd80c<s17574@16,
(-17574)@16<=s L0x7fffffffd80e,L0x7fffffffd80e<s17574@16,
(-17540)@16<=s L0x7fffffffd810,L0x7fffffffd810<s17540@16,
(-17540)@16<=s L0x7fffffffd812,L0x7fffffffd812<s17540@16,
(-17540)@16<=s L0x7fffffffd814,L0x7fffffffd814<s17540@16,
(-17540)@16<=s L0x7fffffffd816,L0x7fffffffd816<s17540@16,
(-17540)@16<=s L0x7fffffffd818,L0x7fffffffd818<s17540@16,
(-17540)@16<=s L0x7fffffffd81a,L0x7fffffffd81a<s17540@16,
(-17540)@16<=s L0x7fffffffd81c,L0x7fffffffd81c<s17540@16,
(-17540)@16<=s L0x7fffffffd81e,L0x7fffffffd81e<s17540@16,
(-18899)@16<=s L0x7fffffffd820,L0x7fffffffd820<s18899@16,
(-18899)@16<=s L0x7fffffffd822,L0x7fffffffd822<s18899@16,
(-18899)@16<=s L0x7fffffffd824,L0x7fffffffd824<s18899@16,
(-18899)@16<=s L0x7fffffffd826,L0x7fffffffd826<s18899@16,
(-18899)@16<=s L0x7fffffffd828,L0x7fffffffd828<s18899@16,
(-18899)@16<=s L0x7fffffffd82a,L0x7fffffffd82a<s18899@16,
(-18899)@16<=s L0x7fffffffd82c,L0x7fffffffd82c<s18899@16,
(-18899)@16<=s L0x7fffffffd82e,L0x7fffffffd82e<s18899@16,
(-18897)@16<=s L0x7fffffffd830,L0x7fffffffd830<s18897@16,
(-18897)@16<=s L0x7fffffffd832,L0x7fffffffd832<s18897@16,
(-18897)@16<=s L0x7fffffffd834,L0x7fffffffd834<s18897@16,
(-18897)@16<=s L0x7fffffffd836,L0x7fffffffd836<s18897@16,
(-18897)@16<=s L0x7fffffffd838,L0x7fffffffd838<s18897@16,
(-18897)@16<=s L0x7fffffffd83a,L0x7fffffffd83a<s18897@16,
(-18897)@16<=s L0x7fffffffd83c,L0x7fffffffd83c<s18897@16,
(-18897)@16<=s L0x7fffffffd83e,L0x7fffffffd83e<s18897@16,
(-18903)@16<=s L0x7fffffffd840,L0x7fffffffd840<s18903@16,
(-18903)@16<=s L0x7fffffffd842,L0x7fffffffd842<s18903@16,
(-18903)@16<=s L0x7fffffffd844,L0x7fffffffd844<s18903@16,
(-18903)@16<=s L0x7fffffffd846,L0x7fffffffd846<s18903@16,
(-18903)@16<=s L0x7fffffffd848,L0x7fffffffd848<s18903@16,
(-18903)@16<=s L0x7fffffffd84a,L0x7fffffffd84a<s18903@16,
(-18903)@16<=s L0x7fffffffd84c,L0x7fffffffd84c<s18903@16,
(-18903)@16<=s L0x7fffffffd84e,L0x7fffffffd84e<s18903@16,
(-18900)@16<=s L0x7fffffffd850,L0x7fffffffd850<s18900@16,
(-18900)@16<=s L0x7fffffffd852,L0x7fffffffd852<s18900@16,
(-18900)@16<=s L0x7fffffffd854,L0x7fffffffd854<s18900@16,
(-18900)@16<=s L0x7fffffffd856,L0x7fffffffd856<s18900@16,
(-18900)@16<=s L0x7fffffffd858,L0x7fffffffd858<s18900@16,
(-18900)@16<=s L0x7fffffffd85a,L0x7fffffffd85a<s18900@16,
(-18900)@16<=s L0x7fffffffd85c,L0x7fffffffd85c<s18900@16,
(-18900)@16<=s L0x7fffffffd85e,L0x7fffffffd85e<s18900@16,
(-17553)@16<=s L0x7fffffffd860,L0x7fffffffd860<s17553@16,
(-17553)@16<=s L0x7fffffffd862,L0x7fffffffd862<s17553@16,
(-17553)@16<=s L0x7fffffffd864,L0x7fffffffd864<s17553@16,
(-17553)@16<=s L0x7fffffffd866,L0x7fffffffd866<s17553@16,
(-17553)@16<=s L0x7fffffffd868,L0x7fffffffd868<s17553@16,
(-17553)@16<=s L0x7fffffffd86a,L0x7fffffffd86a<s17553@16,
(-17553)@16<=s L0x7fffffffd86c,L0x7fffffffd86c<s17553@16,
(-17553)@16<=s L0x7fffffffd86e,L0x7fffffffd86e<s17553@16,
(-17552)@16<=s L0x7fffffffd870,L0x7fffffffd870<s17552@16,
(-17552)@16<=s L0x7fffffffd872,L0x7fffffffd872<s17552@16,
(-17552)@16<=s L0x7fffffffd874,L0x7fffffffd874<s17552@16,
(-17552)@16<=s L0x7fffffffd876,L0x7fffffffd876<s17552@16,
(-17552)@16<=s L0x7fffffffd878,L0x7fffffffd878<s17552@16,
(-17552)@16<=s L0x7fffffffd87a,L0x7fffffffd87a<s17552@16,
(-17552)@16<=s L0x7fffffffd87c,L0x7fffffffd87c<s17552@16,
(-17552)@16<=s L0x7fffffffd87e,L0x7fffffffd87e<s17552@16,
(-17557)@16<=s L0x7fffffffd880,L0x7fffffffd880<s17557@16,
(-17557)@16<=s L0x7fffffffd882,L0x7fffffffd882<s17557@16,
(-17557)@16<=s L0x7fffffffd884,L0x7fffffffd884<s17557@16,
(-17557)@16<=s L0x7fffffffd886,L0x7fffffffd886<s17557@16,
(-17558)@16<=s L0x7fffffffd888,L0x7fffffffd888<s17558@16,
(-17558)@16<=s L0x7fffffffd88a,L0x7fffffffd88a<s17558@16,
(-17557)@16<=s L0x7fffffffd88c,L0x7fffffffd88c<s17557@16,
(-17557)@16<=s L0x7fffffffd88e,L0x7fffffffd88e<s17557@16,
(-17554)@16<=s L0x7fffffffd890,L0x7fffffffd890<s17554@16,
(-17554)@16<=s L0x7fffffffd892,L0x7fffffffd892<s17554@16,
(-17554)@16<=s L0x7fffffffd894,L0x7fffffffd894<s17554@16,
(-17554)@16<=s L0x7fffffffd896,L0x7fffffffd896<s17554@16,
(-17554)@16<=s L0x7fffffffd898,L0x7fffffffd898<s17554@16,
(-17554)@16<=s L0x7fffffffd89a,L0x7fffffffd89a<s17554@16,
(-17554)@16<=s L0x7fffffffd89c,L0x7fffffffd89c<s17554@16,
(-17554)@16<=s L0x7fffffffd89e,L0x7fffffffd89e<s17554@16,
(-17877)@16<=s L0x7fffffffd8a0,L0x7fffffffd8a0<s17877@16,
(-17877)@16<=s L0x7fffffffd8a2,L0x7fffffffd8a2<s17877@16,
(-17877)@16<=s L0x7fffffffd8a4,L0x7fffffffd8a4<s17877@16,
(-17877)@16<=s L0x7fffffffd8a6,L0x7fffffffd8a6<s17877@16,
(-17877)@16<=s L0x7fffffffd8a8,L0x7fffffffd8a8<s17877@16,
(-17877)@16<=s L0x7fffffffd8aa,L0x7fffffffd8aa<s17877@16,
(-17877)@16<=s L0x7fffffffd8ac,L0x7fffffffd8ac<s17877@16,
(-17877)@16<=s L0x7fffffffd8ae,L0x7fffffffd8ae<s17877@16,
(-17717)@16<=s L0x7fffffffd8b0,L0x7fffffffd8b0<s17717@16,
(-17717)@16<=s L0x7fffffffd8b2,L0x7fffffffd8b2<s17717@16,
(-17717)@16<=s L0x7fffffffd8b4,L0x7fffffffd8b4<s17717@16,
(-17717)@16<=s L0x7fffffffd8b6,L0x7fffffffd8b6<s17717@16,
(-17717)@16<=s L0x7fffffffd8b8,L0x7fffffffd8b8<s17717@16,
(-17717)@16<=s L0x7fffffffd8ba,L0x7fffffffd8ba<s17717@16,
(-17717)@16<=s L0x7fffffffd8bc,L0x7fffffffd8bc<s17717@16,
(-17717)@16<=s L0x7fffffffd8be,L0x7fffffffd8be<s17717@16,
(-17877)@16<=s L0x7fffffffd8c0,L0x7fffffffd8c0<s17877@16,
(-17877)@16<=s L0x7fffffffd8c2,L0x7fffffffd8c2<s17877@16,
(-17877)@16<=s L0x7fffffffd8c4,L0x7fffffffd8c4<s17877@16,
(-17877)@16<=s L0x7fffffffd8c6,L0x7fffffffd8c6<s17877@16,
(-17877)@16<=s L0x7fffffffd8c8,L0x7fffffffd8c8<s17877@16,
(-17877)@16<=s L0x7fffffffd8ca,L0x7fffffffd8ca<s17877@16,
(-17877)@16<=s L0x7fffffffd8cc,L0x7fffffffd8cc<s17877@16,
(-17877)@16<=s L0x7fffffffd8ce,L0x7fffffffd8ce<s17877@16,
(-17708)@16<=s L0x7fffffffd8d0,L0x7fffffffd8d0<s17708@16,
(-17708)@16<=s L0x7fffffffd8d2,L0x7fffffffd8d2<s17708@16,
(-17708)@16<=s L0x7fffffffd8d4,L0x7fffffffd8d4<s17708@16,
(-17708)@16<=s L0x7fffffffd8d6,L0x7fffffffd8d6<s17708@16,
(-17708)@16<=s L0x7fffffffd8d8,L0x7fffffffd8d8<s17708@16,
(-17708)@16<=s L0x7fffffffd8da,L0x7fffffffd8da<s17708@16,
(-17708)@16<=s L0x7fffffffd8dc,L0x7fffffffd8dc<s17708@16,
(-17708)@16<=s L0x7fffffffd8de,L0x7fffffffd8de<s17708@16
,
(-27971)@16<=s L0x7fffffffd8e0,L0x7fffffffd8e0<s27971@16,
(-27971)@16<=s L0x7fffffffd8e2,L0x7fffffffd8e2<s27971@16,
(-27971)@16<=s L0x7fffffffd8e4,L0x7fffffffd8e4<s27971@16,
(-27971)@16<=s L0x7fffffffd8e6,L0x7fffffffd8e6<s27971@16,
(-27971)@16<=s L0x7fffffffd8e8,L0x7fffffffd8e8<s27971@16,
(-27971)@16<=s L0x7fffffffd8ea,L0x7fffffffd8ea<s27971@16,
(-27971)@16<=s L0x7fffffffd8ec,L0x7fffffffd8ec<s27971@16,
(-27971)@16<=s L0x7fffffffd8ee,L0x7fffffffd8ee<s27971@16,
(-27971)@16<=s L0x7fffffffd8f0,L0x7fffffffd8f0<s27971@16,
(-27971)@16<=s L0x7fffffffd8f2,L0x7fffffffd8f2<s27971@16,
(-27971)@16<=s L0x7fffffffd8f4,L0x7fffffffd8f4<s27971@16,
(-27971)@16<=s L0x7fffffffd8f6,L0x7fffffffd8f6<s27971@16,
(-27971)@16<=s L0x7fffffffd8f8,L0x7fffffffd8f8<s27971@16,
(-27971)@16<=s L0x7fffffffd8fa,L0x7fffffffd8fa<s27971@16,
(-27971)@16<=s L0x7fffffffd8fc,L0x7fffffffd8fc<s27971@16,
(-27971)@16<=s L0x7fffffffd8fe,L0x7fffffffd8fe<s27971@16,
(-27971)@16<=s L0x7fffffffd900,L0x7fffffffd900<s27971@16,
(-27971)@16<=s L0x7fffffffd902,L0x7fffffffd902<s27971@16,
(-27971)@16<=s L0x7fffffffd904,L0x7fffffffd904<s27971@16,
(-27971)@16<=s L0x7fffffffd906,L0x7fffffffd906<s27971@16,
(-27971)@16<=s L0x7fffffffd908,L0x7fffffffd908<s27971@16,
(-27971)@16<=s L0x7fffffffd90a,L0x7fffffffd90a<s27971@16,
(-27971)@16<=s L0x7fffffffd90c,L0x7fffffffd90c<s27971@16,
(-27971)@16<=s L0x7fffffffd90e,L0x7fffffffd90e<s27971@16,
(-27971)@16<=s L0x7fffffffd910,L0x7fffffffd910<s27971@16,
(-27971)@16<=s L0x7fffffffd912,L0x7fffffffd912<s27971@16,
(-27971)@16<=s L0x7fffffffd914,L0x7fffffffd914<s27971@16,
(-27971)@16<=s L0x7fffffffd916,L0x7fffffffd916<s27971@16,
(-27971)@16<=s L0x7fffffffd918,L0x7fffffffd918<s27971@16,
(-27971)@16<=s L0x7fffffffd91a,L0x7fffffffd91a<s27971@16,
(-27971)@16<=s L0x7fffffffd91c,L0x7fffffffd91c<s27971@16,
(-27971)@16<=s L0x7fffffffd91e,L0x7fffffffd91e<s27971@16,
(-10867)@16<=s L0x7fffffffd920,L0x7fffffffd920<s10867@16,
(-10867)@16<=s L0x7fffffffd922,L0x7fffffffd922<s10867@16,
(-10867)@16<=s L0x7fffffffd924,L0x7fffffffd924<s10867@16,
(-10867)@16<=s L0x7fffffffd926,L0x7fffffffd926<s10867@16,
(-10867)@16<=s L0x7fffffffd928,L0x7fffffffd928<s10867@16,
(-10867)@16<=s L0x7fffffffd92a,L0x7fffffffd92a<s10867@16,
(-10867)@16<=s L0x7fffffffd92c,L0x7fffffffd92c<s10867@16,
(-10867)@16<=s L0x7fffffffd92e,L0x7fffffffd92e<s10867@16,
(-10867)@16<=s L0x7fffffffd930,L0x7fffffffd930<s10867@16,
(-10867)@16<=s L0x7fffffffd932,L0x7fffffffd932<s10867@16,
(-10867)@16<=s L0x7fffffffd934,L0x7fffffffd934<s10867@16,
(-10867)@16<=s L0x7fffffffd936,L0x7fffffffd936<s10867@16,
(-10867)@16<=s L0x7fffffffd938,L0x7fffffffd938<s10867@16,
(-10867)@16<=s L0x7fffffffd93a,L0x7fffffffd93a<s10867@16,
(-10867)@16<=s L0x7fffffffd93c,L0x7fffffffd93c<s10867@16,
(-10867)@16<=s L0x7fffffffd93e,L0x7fffffffd93e<s10867@16,
(-10867)@16<=s L0x7fffffffd940,L0x7fffffffd940<s10867@16,
(-10867)@16<=s L0x7fffffffd942,L0x7fffffffd942<s10867@16,
(-10867)@16<=s L0x7fffffffd944,L0x7fffffffd944<s10867@16,
(-10867)@16<=s L0x7fffffffd946,L0x7fffffffd946<s10867@16,
(-10867)@16<=s L0x7fffffffd948,L0x7fffffffd948<s10867@16,
(-10867)@16<=s L0x7fffffffd94a,L0x7fffffffd94a<s10867@16,
(-10867)@16<=s L0x7fffffffd94c,L0x7fffffffd94c<s10867@16,
(-10867)@16<=s L0x7fffffffd94e,L0x7fffffffd94e<s10867@16,
(-10867)@16<=s L0x7fffffffd950,L0x7fffffffd950<s10867@16,
(-10867)@16<=s L0x7fffffffd952,L0x7fffffffd952<s10867@16,
(-10867)@16<=s L0x7fffffffd954,L0x7fffffffd954<s10867@16,
(-10867)@16<=s L0x7fffffffd956,L0x7fffffffd956<s10867@16,
(-10867)@16<=s L0x7fffffffd958,L0x7fffffffd958<s10867@16,
(-10867)@16<=s L0x7fffffffd95a,L0x7fffffffd95a<s10867@16,
(-10867)@16<=s L0x7fffffffd95c,L0x7fffffffd95c<s10867@16,
(-10867)@16<=s L0x7fffffffd95e,L0x7fffffffd95e<s10867@16,
(-11081)@16<=s L0x7fffffffd960,L0x7fffffffd960<s11081@16,
(-11081)@16<=s L0x7fffffffd962,L0x7fffffffd962<s11081@16,
(-11081)@16<=s L0x7fffffffd964,L0x7fffffffd964<s11081@16,
(-11081)@16<=s L0x7fffffffd966,L0x7fffffffd966<s11081@16,
(-11081)@16<=s L0x7fffffffd968,L0x7fffffffd968<s11081@16,
(-11081)@16<=s L0x7fffffffd96a,L0x7fffffffd96a<s11081@16,
(-11081)@16<=s L0x7fffffffd96c,L0x7fffffffd96c<s11081@16,
(-11081)@16<=s L0x7fffffffd96e,L0x7fffffffd96e<s11081@16,
(-11081)@16<=s L0x7fffffffd970,L0x7fffffffd970<s11081@16,
(-11081)@16<=s L0x7fffffffd972,L0x7fffffffd972<s11081@16,
(-11081)@16<=s L0x7fffffffd974,L0x7fffffffd974<s11081@16,
(-11081)@16<=s L0x7fffffffd976,L0x7fffffffd976<s11081@16,
(-11081)@16<=s L0x7fffffffd978,L0x7fffffffd978<s11081@16,
(-11081)@16<=s L0x7fffffffd97a,L0x7fffffffd97a<s11081@16,
(-11081)@16<=s L0x7fffffffd97c,L0x7fffffffd97c<s11081@16,
(-11081)@16<=s L0x7fffffffd97e,L0x7fffffffd97e<s11081@16,
(-11081)@16<=s L0x7fffffffd980,L0x7fffffffd980<s11081@16,
(-11081)@16<=s L0x7fffffffd982,L0x7fffffffd982<s11081@16,
(-11081)@16<=s L0x7fffffffd984,L0x7fffffffd984<s11081@16,
(-11081)@16<=s L0x7fffffffd986,L0x7fffffffd986<s11081@16,
(-11081)@16<=s L0x7fffffffd988,L0x7fffffffd988<s11081@16,
(-11081)@16<=s L0x7fffffffd98a,L0x7fffffffd98a<s11081@16,
(-11081)@16<=s L0x7fffffffd98c,L0x7fffffffd98c<s11081@16,
(-11081)@16<=s L0x7fffffffd98e,L0x7fffffffd98e<s11081@16,
(-11081)@16<=s L0x7fffffffd990,L0x7fffffffd990<s11081@16,
(-11081)@16<=s L0x7fffffffd992,L0x7fffffffd992<s11081@16,
(-11081)@16<=s L0x7fffffffd994,L0x7fffffffd994<s11081@16,
(-11081)@16<=s L0x7fffffffd996,L0x7fffffffd996<s11081@16,
(-11081)@16<=s L0x7fffffffd998,L0x7fffffffd998<s11081@16,
(-11081)@16<=s L0x7fffffffd99a,L0x7fffffffd99a<s11081@16,
(-11081)@16<=s L0x7fffffffd99c,L0x7fffffffd99c<s11081@16,
(-11081)@16<=s L0x7fffffffd99e,L0x7fffffffd99e<s11081@16,
(-11078)@16<=s L0x7fffffffd9a0,L0x7fffffffd9a0<s11078@16,
(-11078)@16<=s L0x7fffffffd9a2,L0x7fffffffd9a2<s11078@16,
(-11078)@16<=s L0x7fffffffd9a4,L0x7fffffffd9a4<s11078@16,
(-11078)@16<=s L0x7fffffffd9a6,L0x7fffffffd9a6<s11078@16,
(-11078)@16<=s L0x7fffffffd9a8,L0x7fffffffd9a8<s11078@16,
(-11078)@16<=s L0x7fffffffd9aa,L0x7fffffffd9aa<s11078@16,
(-11078)@16<=s L0x7fffffffd9ac,L0x7fffffffd9ac<s11078@16,
(-11078)@16<=s L0x7fffffffd9ae,L0x7fffffffd9ae<s11078@16,
(-11078)@16<=s L0x7fffffffd9b0,L0x7fffffffd9b0<s11078@16,
(-11078)@16<=s L0x7fffffffd9b2,L0x7fffffffd9b2<s11078@16,
(-11078)@16<=s L0x7fffffffd9b4,L0x7fffffffd9b4<s11078@16,
(-11078)@16<=s L0x7fffffffd9b6,L0x7fffffffd9b6<s11078@16,
(-11078)@16<=s L0x7fffffffd9b8,L0x7fffffffd9b8<s11078@16,
(-11078)@16<=s L0x7fffffffd9ba,L0x7fffffffd9ba<s11078@16,
(-11078)@16<=s L0x7fffffffd9bc,L0x7fffffffd9bc<s11078@16,
(-11078)@16<=s L0x7fffffffd9be,L0x7fffffffd9be<s11078@16,
(-11078)@16<=s L0x7fffffffd9c0,L0x7fffffffd9c0<s11078@16,
(-11078)@16<=s L0x7fffffffd9c2,L0x7fffffffd9c2<s11078@16,
(-11078)@16<=s L0x7fffffffd9c4,L0x7fffffffd9c4<s11078@16,
(-11078)@16<=s L0x7fffffffd9c6,L0x7fffffffd9c6<s11078@16,
(-11078)@16<=s L0x7fffffffd9c8,L0x7fffffffd9c8<s11078@16,
(-11078)@16<=s L0x7fffffffd9ca,L0x7fffffffd9ca<s11078@16,
(-11078)@16<=s L0x7fffffffd9cc,L0x7fffffffd9cc<s11078@16,
(-11078)@16<=s L0x7fffffffd9ce,L0x7fffffffd9ce<s11078@16,
(-11078)@16<=s L0x7fffffffd9d0,L0x7fffffffd9d0<s11078@16,
(-11078)@16<=s L0x7fffffffd9d2,L0x7fffffffd9d2<s11078@16,
(-11078)@16<=s L0x7fffffffd9d4,L0x7fffffffd9d4<s11078@16,
(-11078)@16<=s L0x7fffffffd9d6,L0x7fffffffd9d6<s11078@16,
(-11078)@16<=s L0x7fffffffd9d8,L0x7fffffffd9d8<s11078@16,
(-11078)@16<=s L0x7fffffffd9da,L0x7fffffffd9da<s11078@16,
(-11078)@16<=s L0x7fffffffd9dc,L0x7fffffffd9dc<s11078@16,
(-11078)@16<=s L0x7fffffffd9de,L0x7fffffffd9de<s11078@16
,
(-11040)@16<=s L0x7fffffffd9e0,L0x7fffffffd9e0<s11040@16,
(-11040)@16<=s L0x7fffffffd9e2,L0x7fffffffd9e2<s11040@16,
(-11040)@16<=s L0x7fffffffd9e4,L0x7fffffffd9e4<s11040@16,
(-11040)@16<=s L0x7fffffffd9e6,L0x7fffffffd9e6<s11040@16,
(-11040)@16<=s L0x7fffffffd9e8,L0x7fffffffd9e8<s11040@16,
(-11040)@16<=s L0x7fffffffd9ea,L0x7fffffffd9ea<s11040@16,
(-11040)@16<=s L0x7fffffffd9ec,L0x7fffffffd9ec<s11040@16,
(-11040)@16<=s L0x7fffffffd9ee,L0x7fffffffd9ee<s11040@16,
(-11040)@16<=s L0x7fffffffd9f0,L0x7fffffffd9f0<s11040@16,
(-11040)@16<=s L0x7fffffffd9f2,L0x7fffffffd9f2<s11040@16,
(-11040)@16<=s L0x7fffffffd9f4,L0x7fffffffd9f4<s11040@16,
(-11040)@16<=s L0x7fffffffd9f6,L0x7fffffffd9f6<s11040@16,
(-11040)@16<=s L0x7fffffffd9f8,L0x7fffffffd9f8<s11040@16,
(-11040)@16<=s L0x7fffffffd9fa,L0x7fffffffd9fa<s11040@16,
(-11040)@16<=s L0x7fffffffd9fc,L0x7fffffffd9fc<s11040@16,
(-11040)@16<=s L0x7fffffffd9fe,L0x7fffffffd9fe<s11040@16,
(-11040)@16<=s L0x7fffffffda00,L0x7fffffffda00<s11040@16,
(-11040)@16<=s L0x7fffffffda02,L0x7fffffffda02<s11040@16,
(-11040)@16<=s L0x7fffffffda04,L0x7fffffffda04<s11040@16,
(-11040)@16<=s L0x7fffffffda06,L0x7fffffffda06<s11040@16,
(-11040)@16<=s L0x7fffffffda08,L0x7fffffffda08<s11040@16,
(-11040)@16<=s L0x7fffffffda0a,L0x7fffffffda0a<s11040@16,
(-11040)@16<=s L0x7fffffffda0c,L0x7fffffffda0c<s11040@16,
(-11040)@16<=s L0x7fffffffda0e,L0x7fffffffda0e<s11040@16,
(-11040)@16<=s L0x7fffffffda10,L0x7fffffffda10<s11040@16,
(-11040)@16<=s L0x7fffffffda12,L0x7fffffffda12<s11040@16,
(-11040)@16<=s L0x7fffffffda14,L0x7fffffffda14<s11040@16,
(-11040)@16<=s L0x7fffffffda16,L0x7fffffffda16<s11040@16,
(-11040)@16<=s L0x7fffffffda18,L0x7fffffffda18<s11040@16,
(-11040)@16<=s L0x7fffffffda1a,L0x7fffffffda1a<s11040@16,
(-11040)@16<=s L0x7fffffffda1c,L0x7fffffffda1c<s11040@16,
(-11040)@16<=s L0x7fffffffda1e,L0x7fffffffda1e<s11040@16,
(-10880)@16<=s L0x7fffffffda20,L0x7fffffffda20<s10880@16,
(-10880)@16<=s L0x7fffffffda22,L0x7fffffffda22<s10880@16,
(-10880)@16<=s L0x7fffffffda24,L0x7fffffffda24<s10880@16,
(-10880)@16<=s L0x7fffffffda26,L0x7fffffffda26<s10880@16,
(-10880)@16<=s L0x7fffffffda28,L0x7fffffffda28<s10880@16,
(-10880)@16<=s L0x7fffffffda2a,L0x7fffffffda2a<s10880@16,
(-10880)@16<=s L0x7fffffffda2c,L0x7fffffffda2c<s10880@16,
(-10880)@16<=s L0x7fffffffda2e,L0x7fffffffda2e<s10880@16,
(-10880)@16<=s L0x7fffffffda30,L0x7fffffffda30<s10880@16,
(-10880)@16<=s L0x7fffffffda32,L0x7fffffffda32<s10880@16,
(-10880)@16<=s L0x7fffffffda34,L0x7fffffffda34<s10880@16,
(-10880)@16<=s L0x7fffffffda36,L0x7fffffffda36<s10880@16,
(-10880)@16<=s L0x7fffffffda38,L0x7fffffffda38<s10880@16,
(-10880)@16<=s L0x7fffffffda3a,L0x7fffffffda3a<s10880@16,
(-10880)@16<=s L0x7fffffffda3c,L0x7fffffffda3c<s10880@16,
(-10880)@16<=s L0x7fffffffda3e,L0x7fffffffda3e<s10880@16,
(-10880)@16<=s L0x7fffffffda40,L0x7fffffffda40<s10880@16,
(-10880)@16<=s L0x7fffffffda42,L0x7fffffffda42<s10880@16,
(-10880)@16<=s L0x7fffffffda44,L0x7fffffffda44<s10880@16,
(-10880)@16<=s L0x7fffffffda46,L0x7fffffffda46<s10880@16,
(-10880)@16<=s L0x7fffffffda48,L0x7fffffffda48<s10880@16,
(-10880)@16<=s L0x7fffffffda4a,L0x7fffffffda4a<s10880@16,
(-10880)@16<=s L0x7fffffffda4c,L0x7fffffffda4c<s10880@16,
(-10880)@16<=s L0x7fffffffda4e,L0x7fffffffda4e<s10880@16,
(-10880)@16<=s L0x7fffffffda50,L0x7fffffffda50<s10880@16,
(-10880)@16<=s L0x7fffffffda52,L0x7fffffffda52<s10880@16,
(-10880)@16<=s L0x7fffffffda54,L0x7fffffffda54<s10880@16,
(-10880)@16<=s L0x7fffffffda56,L0x7fffffffda56<s10880@16,
(-10880)@16<=s L0x7fffffffda58,L0x7fffffffda58<s10880@16,
(-10880)@16<=s L0x7fffffffda5a,L0x7fffffffda5a<s10880@16,
(-10880)@16<=s L0x7fffffffda5c,L0x7fffffffda5c<s10880@16,
(-10880)@16<=s L0x7fffffffda5e,L0x7fffffffda5e<s10880@16,
(-10870)@16<=s L0x7fffffffda60,L0x7fffffffda60<s10870@16,
(-10870)@16<=s L0x7fffffffda62,L0x7fffffffda62<s10870@16,
(-10870)@16<=s L0x7fffffffda64,L0x7fffffffda64<s10870@16,
(-10870)@16<=s L0x7fffffffda66,L0x7fffffffda66<s10870@16,
(-10870)@16<=s L0x7fffffffda68,L0x7fffffffda68<s10870@16,
(-10870)@16<=s L0x7fffffffda6a,L0x7fffffffda6a<s10870@16,
(-10870)@16<=s L0x7fffffffda6c,L0x7fffffffda6c<s10870@16,
(-10870)@16<=s L0x7fffffffda6e,L0x7fffffffda6e<s10870@16,
(-10870)@16<=s L0x7fffffffda70,L0x7fffffffda70<s10870@16,
(-10870)@16<=s L0x7fffffffda72,L0x7fffffffda72<s10870@16,
(-10870)@16<=s L0x7fffffffda74,L0x7fffffffda74<s10870@16,
(-10870)@16<=s L0x7fffffffda76,L0x7fffffffda76<s10870@16,
(-10870)@16<=s L0x7fffffffda78,L0x7fffffffda78<s10870@16,
(-10870)@16<=s L0x7fffffffda7a,L0x7fffffffda7a<s10870@16,
(-10870)@16<=s L0x7fffffffda7c,L0x7fffffffda7c<s10870@16,
(-10870)@16<=s L0x7fffffffda7e,L0x7fffffffda7e<s10870@16,
(-10870)@16<=s L0x7fffffffda80,L0x7fffffffda80<s10870@16,
(-10870)@16<=s L0x7fffffffda82,L0x7fffffffda82<s10870@16,
(-10870)@16<=s L0x7fffffffda84,L0x7fffffffda84<s10870@16,
(-10870)@16<=s L0x7fffffffda86,L0x7fffffffda86<s10870@16,
(-10870)@16<=s L0x7fffffffda88,L0x7fffffffda88<s10870@16,
(-10870)@16<=s L0x7fffffffda8a,L0x7fffffffda8a<s10870@16,
(-10870)@16<=s L0x7fffffffda8c,L0x7fffffffda8c<s10870@16,
(-10870)@16<=s L0x7fffffffda8e,L0x7fffffffda8e<s10870@16,
(-10870)@16<=s L0x7fffffffda90,L0x7fffffffda90<s10870@16,
(-10870)@16<=s L0x7fffffffda92,L0x7fffffffda92<s10870@16,
(-10870)@16<=s L0x7fffffffda94,L0x7fffffffda94<s10870@16,
(-10870)@16<=s L0x7fffffffda96,L0x7fffffffda96<s10870@16,
(-10870)@16<=s L0x7fffffffda98,L0x7fffffffda98<s10870@16,
(-10870)@16<=s L0x7fffffffda9a,L0x7fffffffda9a<s10870@16,
(-10870)@16<=s L0x7fffffffda9c,L0x7fffffffda9c<s10870@16,
(-10870)@16<=s L0x7fffffffda9e,L0x7fffffffda9e<s10870@16,
(-11209)@16<=s L0x7fffffffdaa0,L0x7fffffffdaa0<s11209@16,
(-11209)@16<=s L0x7fffffffdaa2,L0x7fffffffdaa2<s11209@16,
(-11209)@16<=s L0x7fffffffdaa4,L0x7fffffffdaa4<s11209@16,
(-11209)@16<=s L0x7fffffffdaa6,L0x7fffffffdaa6<s11209@16,
(-11209)@16<=s L0x7fffffffdaa8,L0x7fffffffdaa8<s11209@16,
(-11209)@16<=s L0x7fffffffdaaa,L0x7fffffffdaaa<s11209@16,
(-11209)@16<=s L0x7fffffffdaac,L0x7fffffffdaac<s11209@16,
(-11209)@16<=s L0x7fffffffdaae,L0x7fffffffdaae<s11209@16,
(-11049)@16<=s L0x7fffffffdab0,L0x7fffffffdab0<s11049@16,
(-11049)@16<=s L0x7fffffffdab2,L0x7fffffffdab2<s11049@16,
(-11049)@16<=s L0x7fffffffdab4,L0x7fffffffdab4<s11049@16,
(-11049)@16<=s L0x7fffffffdab6,L0x7fffffffdab6<s11049@16,
(-11049)@16<=s L0x7fffffffdab8,L0x7fffffffdab8<s11049@16,
(-11049)@16<=s L0x7fffffffdaba,L0x7fffffffdaba<s11049@16,
(-11049)@16<=s L0x7fffffffdabc,L0x7fffffffdabc<s11049@16,
(-11049)@16<=s L0x7fffffffdabe,L0x7fffffffdabe<s11049@16,
(-11209)@16<=s L0x7fffffffdac0,L0x7fffffffdac0<s11209@16,
(-11209)@16<=s L0x7fffffffdac2,L0x7fffffffdac2<s11209@16,
(-11209)@16<=s L0x7fffffffdac4,L0x7fffffffdac4<s11209@16,
(-11209)@16<=s L0x7fffffffdac6,L0x7fffffffdac6<s11209@16,
(-11209)@16<=s L0x7fffffffdac8,L0x7fffffffdac8<s11209@16,
(-11209)@16<=s L0x7fffffffdaca,L0x7fffffffdaca<s11209@16,
(-11209)@16<=s L0x7fffffffdacc,L0x7fffffffdacc<s11209@16,
(-11209)@16<=s L0x7fffffffdace,L0x7fffffffdace<s11209@16,
(-11040)@16<=s L0x7fffffffdad0,L0x7fffffffdad0<s11040@16,
(-11040)@16<=s L0x7fffffffdad2,L0x7fffffffdad2<s11040@16,
(-11040)@16<=s L0x7fffffffdad4,L0x7fffffffdad4<s11040@16,
(-11040)@16<=s L0x7fffffffdad6,L0x7fffffffdad6<s11040@16,
(-11040)@16<=s L0x7fffffffdad8,L0x7fffffffdad8<s11040@16,
(-11040)@16<=s L0x7fffffffdada,L0x7fffffffdada<s11040@16,
(-11040)@16<=s L0x7fffffffdadc,L0x7fffffffdadc<s11040@16,
(-11040)@16<=s L0x7fffffffdade,L0x7fffffffdade<s11040@16
]
}

