
import nttlib

P         = 10753
R         = 2**16
PINV      = (P**(2**15 - 1))%R - R        # -10751
MONT      = R % P                         # 1018
MONT_PINV = (MONT*PINV)%R - R             # -6
V         = int (2**27/P + .5)            # 12482
SHIFT     = 16
F         = ((MONT**2)*(512**(P-2)))%P    # 1268
F_PINV    = (F*PINV)%R - R                # -780

ZETA = 10 # 62 for 7681 and 10 for 10753

const_base = 0x555555561120
idx_base   = 0x5555555610a0
inp_base   = 0x7fffffffcae0
out_base   = 0x7fffffffd2e0

pdata10753 = [
#define _16XP 0
  P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P,

#define _16XPINV 16
  PINV, PINV, PINV, PINV, PINV, PINV, PINV, PINV,
  PINV, PINV, PINV, PINV, PINV, PINV, PINV, PINV,

#define _16XV 32
  V, V, V, V, V, V, V, V, V, V, V, V, V, V, V, V,

#define _16XSHIFT 48
  SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT,
  SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT, SHIFT,

#define _16XMONT_PINV 64
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV,
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV,

#define _16XMONT 80
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT,
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT,

#define _16XF_PINV 96
  F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV,
  F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV, F_PINV,

#define _16XF 112
  F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,

#define _ZETAS_PINV 128
      -6,  27359,  -1956,    408,  10093, -21094,  28517, -20856,
   -7033, -16090, -29449,  12476, -18345, -28224,   9508, -16072,
   17675,  23056, -28103,  -4547,  25543,  26518,   7228,  -7429,
   14731,   -829,  10001,  -3925, -14847,  -3639,  18363,  11683,
    4589, -23007,  31369,  20198,   2316,  23812,  22532, -24098,
  -12378,  -8441,  24269, -22623, -14341,  19326, -15864, -22209,
   -5126,   5766,  -6924,  15736, -31656,  20490,  -3407,  23781,
  -16724, -31217,   5619,   6381, -27152, -12707,    573, -15840,
    -609, -16614,    969, -24702,  26238, -12214, -31887,  11555,
   17571,  29407,   4175,   2395,    512,  -4394, -32271,  31235,
   -2017,  11854,   7795,   4090,  -1627,  30351,   1932, -22044,
   31290, -17352,  17096,    719,  22666,  29364,   1316, -11300,
     177,  -6978,  -8801, -11842, -30546,  21892,  24976,  14999,
    7356,   7856,   2066,  31418,   7716,  32076, -13579,   7326,
   11726, -13268,  28541,    780, -19844,  17412, -13012,  18845,
   31558,  24037, -27895, -17248, -28200, -25555,  -8246, -11141,
     -61,  11446, -19564,   4083, -30144, -14329,  23026, -11952,
   -4797, -29827, -32351,  -6314,  13158, -20100,  29541, -29644,
  -19863, -31583, -18881,  20070,  -6716,   3035,   6747,  -8758,
   16236,  -8289, -31058,  26286, -17394,  29151, -12976, -14237,
  -19643,  32070, -13987,   5369,  23160, -24025,  28712,  21161,
    7289, -18875, -19454, -29626, -12336,  -3346, -27572, -25482,
   14280,  -7880,  -3699,  26292,  11123,   8295,  31467, -24330,
   29370,  15511,  -9343,  -1725,  -9374,   3998,   5729, -27329,
   -6095,  30467,   9691,  15127,    232,   8935,   8807, -15517,
  -20899,  31924, -23788,  23952,   5120,  21593,   4967, -15328,
  -20173, -12531,  12415, -24641, -16273, -24165,  19320, -23836,
  -14780,  23093, -25652,   7192,  30053,  31497,  13164,  18077,
    1767,  -4248, -22471,  12653,  22215,  22313, -12384,  18918,
    8027,  13024,  20661, -13500,  11623,  -6917,  -4717,   7722,
  -13811,  -1609,  23269,   7801,  -1834, -22483,    951,  -8161,
  -12098, -21770, -16809,  24129, -19856,   6594, -16925,  19661,

#define _ZETAS 384
    1018,    223,   4188,  -3688,   2413,  -3686,    357,   -376,
    2695,   -730,   4855,   2236,   -425,   4544,   3364,  -3784,
    4875,  -1520,  -5063,  -4035,   2503,    918,  -3012,   4347,
    1931,  -1341,  -3823,   -341,  -4095,  -5175,  -2629,  -5213,
   -3091,   4129,  -2935,   2790,    268,   1284,      4,   3550,
    2982,   1287,    205,   4513,  -2565,  -2178,   4616,   -193,
   -4102,   4742,  -4876,  -4744,  -2984,  -3062,   -847,  -4379,
   -2388,  -1009,  -3085,  -1299,  -2576,   4189,   1085,    544,
    5023,    794,   -567,  -3198,   4734,  -2998,   3441,  -5341,
     675,   2271,   1615,  -2213,    512,   2774,   3057,  -2045,
    3615,  -1458,   -909,   5114,   2981,  -4977,   -116,   4580,
    -454,  -5064,   4808,  -1841,   -886,  -1356,  -4828,  -5156,
    2737,   4286,  -3169,   -578,   5294,   -636,    400,    151,
   -2884,   -336,  -1006,   -326,   1572,  -2740,   -779,   2206,
   -1586,   1068,  -3715,  -1268,   2684,  -5116,   1324,   2973,
   -2234,  -4123,   3337,   -864,    472,   -467,    970,    635,
    -573,   2230,  -1132,  -4621,   2624,  -4601,   3570,  -3760,
   -5309,   3453,  -5215,    854,  -4250,   2428,   1381,   5172,
   -5015,  -4447,   3135,   2662,   3524,  -1573,   2139,    458,
   -2196,  -2657,   4782,  -3410,   2062,   2015,  -4784,   1635,
    1349,  -1722,   2909,  -4359,   2680,   2087,     40,   3241,
   -2439,   2117,   2050,   2118,  -4144,   -274,   3148,  -1930,
    1992,   4408,   5005,  -4428,   2419,   1639,   2283,   -778,
   -2374,    663,   1409,  -2237,  -4254,  -1122,     97,  -5313,
   -3535,  -2813,   5083,    279,   4328,   2279,   2151,    355,
   -4003,   1204,  -5356,   -624,   5120,  -4519,  -1689,   1056,
    3891,  -3827,   1663,  -2625,  -2449,   3995,  -1160,   2788,
   -4540,   3125,   5068,   3096,   1893,  -2807,  -5268,   2205,
   -4889,   -152,    569,   4973,   -825,   4393,   4000,   1510,
    3419,  -3360,    693,  -3260,   4967,   4859,   2963,    554,
   -5107,    -73,  -4891,  -1927,   5334,   2605,   2487,  -2529,
    -834,   1782,   1111,   2113,   4720,  -4670,  -1053,  -4403,

#define _ZETAS_INV_PINV 640
      -6, -27359,   -408,   1956,  20856, -28517,  21094, -10093,

#define _ZETAS_INV 648
    1018,   -223,   3688,  -4188,    376,   -357,   3686,  -2413,
]


idxdata = [
#define _REVWIDX 0
  14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1,
  14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1,

#define _REVDIDX 32
  7, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0,
  3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,

#define _PACKWIDX 64
  0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15,
  0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15,

#define _UNPCKWIDX 96
  0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 12, 13, 6, 7, 14, 15,
  0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 12, 13, 6, 7, 14, 15,
]

ranges = [
# LEVEL 0
    [
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 0, 0, 0,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
2048, 2048, 2048, 2048, 2048, 0, 0, 0
    ],
# LEVEL 1
    [
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 2048, 2048, 2048,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
4096, 4096, 4096, 4096, 4096, 2048, 2048, 2048,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 2048, 2048, 2048,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
7426, 7426, 7426, 7426, 7426, 2048, 2048, 2048
    ],
# LEVEL 2
    [
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 6144, 6144, 6144,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
8192, 8192, 8192, 8192, 8192, 6144, 6144, 6144,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9474, 9474, 9474,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479,
9479, 9479, 9479, 9479, 9479, 9474, 9474, 9474,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 12913, 12913, 12913,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 13154, 13154, 13154,
13154, 13154, 13154, 13154, 13154, 12913, 12913, 12913,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 12892, 12892, 12892,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 13177, 13177, 13177,
13177, 13177, 13177, 13177, 13177, 12892, 12892, 12892
    ],
# LEVEL 3
    [
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 14336, 14336, 14336,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
16384, 16384, 16384, 16384, 16384, 14336, 14336, 14336,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13583, 13583, 13583,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13593, 13593, 13593,
13593, 13593, 13593, 13593, 13593, 13583, 13583, 13583,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15398, 15398, 15398, 15398, 15398, 15398, 15398, 15398,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
18995, 18995, 18995, 18995, 18995, 18995, 18995, 18995,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19223, 19223, 19223,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19239, 19239, 19239,
19239, 19239, 19239, 19239, 19239, 19223, 19223, 19223,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18611, 18611, 18611, 18611, 18611, 18611, 18611, 18611,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624,
18624, 18624, 18624, 18624, 18624, 18624, 18624, 18624
    ],
# LEVEL 4
    [
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 30720, 30720, 30720,
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768,
32768, 32768, 32768, 32768, 32768, 30720, 30720, 30720,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
21808, 21808, 21808, 21808, 21808, 21808, 21808, 21808,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19733, 19733, 19733,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19734, 19734, 19734,
19734, 19734, 19734, 19734, 19734, 19733, 19733, 19733,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
19732, 19732, 19732, 19732, 19732, 19732, 19732, 19732,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
25133, 25133, 25133, 25133, 25133, 25133, 25133, 25133,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
26015, 26015, 26015, 26015, 26015, 26015, 26015, 26015,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25238, 25238, 25238,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25245, 25245, 25245,
25245, 25245, 25245, 25245, 25245, 25238, 25238, 25238,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
24102, 24102, 24102, 24102, 24102, 24102, 24102, 24102,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
25241, 25241, 25241, 25241, 25241, 25241, 25241, 25241,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
24914, 24914, 24914, 24914, 24914, 24914, 24914, 24914,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032,
25032, 25032, 25032, 25032, 25032, 25032, 25032, 25032
    ],
# LEVEL 5
    [
11600, 11600, 11600, 11600, 11600, 11600, 11600, 11600,
11600, 11600, 11600, 11600, 11600, 11600, 11600, 11600,
11600, 11600, 11600, 11600, 11600, 11600, 11600, 11600,
11600, 11600, 11600, 11600, 11600, 11600, 11600, 11600,
11283, 11283, 11283, 11283, 11283, 11283, 11283, 11283,
11283, 11283, 11283, 11283, 11283, 11273, 11273, 11273,
11283, 11283, 11283, 11283, 11283, 11283, 11283, 11283,
11283, 11283, 11283, 11283, 11283, 11273, 11273, 11273,
28553, 28553, 28553, 28553, 28553, 28553, 28553, 28553,
28553, 28553, 28553, 28553, 28553, 28553, 28553, 28553,
28553, 28553, 28553, 28553, 28553, 28553, 28553, 28553,
28553, 28553, 28553, 28553, 28553, 28553, 28553, 28553,
28408, 28408, 28408, 28408, 28408, 28408, 28408, 28408,
28408, 28408, 28408, 28408, 28408, 28408, 28408, 28408,
28408, 28408, 28408, 28408, 28408, 28408, 28408, 28408,
28408, 28408, 28408, 28408, 28408, 28408, 28408, 28408,
25815, 25815, 25815, 25815, 25815, 25815, 25815, 25815,
25815, 25815, 25815, 25815, 25815, 25815, 25815, 25815,
25815, 25815, 25815, 25815, 25815, 25815, 25815, 25815,
25815, 25815, 25815, 25815, 25815, 25815, 25815, 25815,
26183, 26183, 26183, 26183, 26183, 26183, 26183, 26183,
26183, 26183, 26183, 26183, 26183, 26183, 26183, 26183,
26183, 26183, 26183, 26183, 26183, 26183, 26183, 26183,
26183, 26183, 26183, 26183, 26183, 26183, 26183, 26183,
25210, 25210, 25210, 25210, 25210, 25210, 25210, 25210,
25210, 25210, 25210, 25210, 25210, 25210, 25210, 25210,
25210, 25210, 25210, 25210, 25210, 25210, 25210, 25210,
25210, 25210, 25210, 25210, 25210, 25210, 25210, 25210,
25220, 25220, 25220, 25220, 25220, 25220, 25220, 25220,
25220, 25220, 25220, 25220, 25220, 25220, 25220, 25220,
25220, 25220, 25220, 25220, 25220, 25220, 25220, 25220,
25220, 25220, 25220, 25220, 25220, 25220, 25220, 25220,
27555, 27555, 27555, 27555, 27555, 27555, 27555, 27555,
27555, 27555, 27555, 27555, 27555, 27555, 27555, 27555,
27555, 27555, 27555, 27555, 27555, 27555, 27555, 27555,
27555, 27555, 27555, 27555, 27555, 27555, 27555, 27555,
26931, 26931, 26931, 26931, 26931, 26931, 26931, 26931,
26931, 26931, 26931, 26931, 26931, 26931, 26931, 26931,
26931, 26931, 26931, 26931, 26931, 26931, 26931, 26931,
26931, 26931, 26931, 26931, 26931, 26931, 26931, 26931,
28577, 28577, 28577, 28577, 28577, 28577, 28577, 28577,
28577, 28577, 28577, 28577, 28577, 28577, 28577, 28577,
28577, 28577, 28577, 28577, 28577, 28577, 28577, 28577,
28577, 28577, 28577, 28577, 28577, 28577, 28577, 28577,
27716, 27716, 27716, 27716, 27716, 27716, 27716, 27716,
27716, 27716, 27716, 27716, 27716, 27716, 27716, 27716,
27716, 27716, 27716, 27716, 27716, 27716, 27716, 27716,
27716, 27716, 27716, 27716, 27716, 27716, 27716, 27716,
26313, 26313, 26313, 26313, 26313, 26313, 26313, 26313,
26313, 26313, 26313, 26313, 26313, 26313, 26313, 26313,
26313, 26313, 26313, 26313, 26313, 26313, 26313, 26313,
26313, 26313, 26313, 26313, 26313, 26313, 26313, 26313,
27604, 27604, 27604, 27604, 27604, 27604, 27604, 27604,
27604, 27604, 27604, 27604, 27604, 27604, 27604, 27604,
27604, 27604, 27604, 27604, 27604, 27604, 27604, 27604,
27604, 27604, 27604, 27604, 27604, 27604, 27604, 27604,
27213, 27213, 27213, 27213, 27213, 27213, 27213, 27213,
27213, 27213, 27213, 27213, 27213, 27213, 27213, 27213,
27213, 27213, 27213, 27213, 27213, 27213, 27213, 27213,
27213, 27213, 27213, 27213, 27213, 27213, 27213, 27213,
27381, 27381, 27381, 27381, 27381, 27381, 27381, 27381,
27381, 27381, 27381, 27381, 27381, 27381, 27381, 27381,
27381, 27381, 27381, 27381, 27381, 27381, 27381, 27381,
27381, 27381, 27381, 27381, 27381, 27381, 27381, 27381,
12852, 12852, 12852, 12852, 12852, 12852, 12852, 12852,
12852, 12852, 12852, 12852, 12852, 12852, 12852, 12852,
12852, 12852, 12852, 12852, 12852, 12852, 12852, 12852,
12852, 12852, 12852, 12852, 12852, 12852, 12852, 12852,
11572, 11572, 11572, 11572, 11572, 11572, 11572, 11572,
11572, 11572, 11572, 11572, 11572, 11572, 11572, 11572,
11572, 11572, 11572, 11572, 11572, 11572, 11572, 11572,
11572, 11572, 11572, 11572, 11572, 11572, 11572, 11572,
12858, 12858, 12858, 12858, 12858, 12858, 12858, 12858,
12858, 12858, 12858, 12858, 12858, 12858, 12858, 12858,
12858, 12858, 12858, 12858, 12858, 12858, 12858, 12858,
12858, 12858, 12858, 12858, 12858, 12858, 12858, 12858,
12514, 12514, 12514, 12514, 12514, 12514, 12514, 12514,
12514, 12514, 12514, 12514, 12514, 12514, 12514, 12514,
12514, 12514, 12514, 12514, 12514, 12514, 12514, 12514,
12514, 12514, 12514, 12514, 12514, 12514, 12514, 12514,
11986, 11986, 11986, 11986, 11986, 11986, 11986, 11986,
11986, 11986, 11986, 11986, 11986, 11986, 11986, 11986,
11986, 11986, 11986, 11986, 11986, 11986, 11986, 11986,
11986, 11986, 11986, 11986, 11986, 11986, 11986, 11986,
11354, 11354, 11354, 11354, 11354, 11354, 11354, 11354,
11354, 11354, 11354, 11354, 11354, 11354, 11354, 11354,
11354, 11354, 11354, 11354, 11354, 11354, 11354, 11354,
11354, 11354, 11354, 11354, 11354, 11354, 11354, 11354,
12141, 12141, 12141, 12141, 12141, 12141, 12141, 12141,
12141, 12141, 12141, 12141, 12141, 12141, 12141, 12141,
12141, 12141, 12141, 12141, 12141, 12141, 12141, 12141,
12141, 12141, 12141, 12141, 12141, 12141, 12141, 12141,
12644, 12644, 12644, 12644, 12644, 12644, 12644, 12644,
12644, 12644, 12644, 12644, 12644, 12644, 12644, 12644,
12644, 12644, 12644, 12644, 12644, 12644, 12644, 12644,
12644, 12644, 12644, 12644, 12644, 12644, 12644, 12644,
11698, 11698, 11698, 11698, 11698, 11698, 11698, 11698,
11698, 11698, 11698, 11698, 11698, 11698, 11698, 11698,
11698, 11698, 11698, 11698, 11698, 11698, 11698, 11698,
11698, 11698, 11698, 11698, 11698, 11698, 11698, 11698,
11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495,
11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495,
11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495,
11495, 11495, 11495, 11495, 11495, 11495, 11495, 11495,
12466, 12466, 12466, 12466, 12466, 12466, 12466, 12466,
12466, 12466, 12466, 12466, 12466, 12466, 12466, 12466,
12466, 12466, 12466, 12466, 12466, 12466, 12466, 12466,
12466, 12466, 12466, 12466, 12466, 12466, 12466, 12466,
11126, 11126, 11126, 11126, 11126, 11126, 11126, 11126,
11126, 11126, 11126, 11126, 11126, 11126, 11126, 11126,
11126, 11126, 11126, 11126, 11126, 11126, 11126, 11126,
11126, 11126, 11126, 11126, 11126, 11126, 11126, 11126,
12525, 12525, 12525, 12525, 12525, 12525, 12525, 12525,
12525, 12525, 12525, 12525, 12525, 12525, 12525, 12525,
12525, 12525, 12525, 12525, 12525, 12525, 12525, 12525,
12525, 12525, 12525, 12525, 12525, 12525, 12525, 12525,
12924, 12924, 12924, 12924, 12924, 12924, 12924, 12924,
12924, 12924, 12924, 12924, 12924, 12924, 12924, 12924,
12924, 12924, 12924, 12924, 12924, 12924, 12924, 12924,
12924, 12924, 12924, 12924, 12924, 12924, 12924, 12924,
11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953,
12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953,
12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953,
12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953
    ],
# LEVEL 6
    [
17061, 17061, 17061, 17061, 17061, 17061, 17061, 17061,
17061, 17061, 17061, 17061, 17061, 17061, 17061, 17061,
17009, 17009, 17009, 17009, 17009, 17009, 17009, 17009,
17009, 17009, 17009, 17009, 17009, 17009, 17009, 17009,
17229, 17229, 17229, 17229, 17229, 17228, 17228, 17228,
17229, 17229, 17229, 17229, 17229, 17228, 17228, 17228,
17247, 17247, 17247, 17247, 17247, 17247, 17247, 17247,
17247, 17247, 17247, 17247, 17247, 17247, 17247, 17247,
12224, 12224, 12224, 12224, 12224, 12224, 12224, 12224,
12224, 12224, 12224, 12224, 12224, 12224, 12224, 12224,
12755, 12755, 12755, 12755, 12755, 12755, 12755, 12755,
12755, 12755, 12755, 12755, 12755, 12755, 12755, 12755,
11319, 11319, 11319, 11319, 11319, 11319, 11319, 11319,
11319, 11319, 11319, 11319, 11319, 11319, 11319, 11319,
11335, 11335, 11335, 11335, 11335, 11335, 11335, 11335,
11335, 11335, 11335, 11335, 11335, 11335, 11335, 11335,
12060, 12060, 12060, 12060, 12060, 12060, 12060, 12060,
12060, 12060, 12060, 12060, 12060, 12060, 12060, 12060,
11281, 11281, 11281, 11281, 11281, 11281, 11281, 11281,
11281, 11281, 11281, 11281, 11281, 11281, 11281, 11281,
12921, 12921, 12921, 12921, 12921, 12921, 12921, 12921,
12921, 12921, 12921, 12921, 12921, 12921, 12921, 12921,
11867, 11867, 11867, 11867, 11867, 11867, 11867, 11867,
11867, 11867, 11867, 11867, 11867, 11867, 11867, 11867,
11166, 11166, 11166, 11166, 11166, 11166, 11166, 11166,
11166, 11166, 11166, 11166, 11166, 11166, 11166, 11166,
12747, 12747, 12747, 12747, 12747, 12747, 12747, 12747,
12747, 12747, 12747, 12747, 12747, 12747, 12747, 12747,
12281, 12281, 12281, 12281, 12281, 12281, 12281, 12281,
12281, 12281, 12281, 12281, 12281, 12281, 12281, 12281,
12455, 12455, 12455, 12455, 12455, 12455, 12455, 12455,
12455, 12455, 12455, 12455, 12455, 12455, 12455, 12455,
13213, 13213, 13213, 13213, 13213, 13213, 13213, 13213,
13213, 13213, 13213, 13213, 13213, 13213, 13213, 13213,
11808, 11808, 11808, 11808, 11808, 11808, 11808, 11808,
11808, 11808, 11808, 11808, 11808, 11808, 11808, 11808,
13042, 13042, 13042, 13042, 13042, 13042, 13042, 13042,
13042, 13042, 13042, 13042, 13042, 13042, 13042, 13042,
12634, 12634, 12634, 12634, 12634, 12634, 12634, 12634,
12634, 12634, 12634, 12634, 12634, 12634, 12634, 12634,
12251, 12251, 12251, 12251, 12251, 12251, 12251, 12251,
12251, 12251, 12251, 12251, 12251, 12251, 12251, 12251,
11564, 11564, 11564, 11564, 11564, 11564, 11564, 11564,
11564, 11564, 11564, 11564, 11564, 11564, 11564, 11564,
12408, 12408, 12408, 12408, 12408, 12408, 12408, 12408,
12408, 12408, 12408, 12408, 12408, 12408, 12408, 12408,
12983, 12983, 12983, 12983, 12983, 12983, 12983, 12983,
12983, 12983, 12983, 12983, 12983, 12983, 12983, 12983,
11767, 11767, 11767, 11767, 11767, 11767, 11767, 11767,
11767, 11767, 11767, 11767, 11767, 11767, 11767, 11767,
11521, 11521, 11521, 11521, 11521, 11521, 11521, 11521,
11521, 11521, 11521, 11521, 11521, 11521, 11521, 11521,
12763, 12763, 12763, 12763, 12763, 12763, 12763, 12763,
12763, 12763, 12763, 12763, 12763, 12763, 12763, 12763,
11315, 11315, 11315, 11315, 11315, 11315, 11315, 11315,
11315, 11315, 11315, 11315, 11315, 11315, 11315, 11315,
12763, 12763, 12763, 12763, 12763, 12763, 12763, 12763,
12763, 12763, 12763, 12763, 12763, 12763, 12763, 12763,
13208, 13208, 13208, 13208, 13208, 13208, 13208, 13208,
13208, 13208, 13208, 13208, 13208, 13208, 13208, 13208,
12248, 12248, 12248, 12248, 12248, 12248, 12248, 12248,
12248, 12248, 12248, 12248, 12248, 12248, 12248, 12248,
13314, 13314, 13314, 13314, 13314, 13314, 13314, 13314,
13314, 13314, 13314, 13314, 13314, 13314, 13314, 13314,
18823, 18823, 18823, 18823, 18823, 18823, 18823, 18823,
18823, 18823, 18823, 18823, 18823, 18823, 18823, 18823,
18937, 18937, 18937, 18937, 18937, 18937, 18937, 18937,
18937, 18937, 18937, 18937, 18937, 18937, 18937, 18937,
17462, 17462, 17462, 17462, 17462, 17462, 17462, 17462,
17462, 17462, 17462, 17462, 17462, 17462, 17462, 17462,
17413, 17413, 17413, 17413, 17413, 17413, 17413, 17413,
17413, 17413, 17413, 17413, 17413, 17413, 17413, 17413,
18282, 18282, 18282, 18282, 18282, 18282, 18282, 18282,
18282, 18282, 18282, 18282, 18282, 18282, 18282, 18282,
18470, 18470, 18470, 18470, 18470, 18470, 18470, 18470,
18470, 18470, 18470, 18470, 18470, 18470, 18470, 18470,
17891, 17891, 17891, 17891, 17891, 17891, 17891, 17891,
17891, 17891, 17891, 17891, 17891, 17891, 17891, 17891,
18560, 18560, 18560, 18560, 18560, 18560, 18560, 18560,
18560, 18560, 18560, 18560, 18560, 18560, 18560, 18560,
17878, 17878, 17878, 17878, 17878, 17878, 17878, 17878,
17878, 17878, 17878, 17878, 17878, 17878, 17878, 17878,
17582, 17582, 17582, 17582, 17582, 17582, 17582, 17582,
17582, 17582, 17582, 17582, 17582, 17582, 17582, 17582,
16759, 16759, 16759, 16759, 16759, 16759, 16759, 16759,
16759, 16759, 16759, 16759, 16759, 16759, 16759, 16759,
17484, 17484, 17484, 17484, 17484, 17484, 17484, 17484,
17484, 17484, 17484, 17484, 17484, 17484, 17484, 17484,
17971, 17971, 17971, 17971, 17971, 17971, 17971, 17971,
17971, 17971, 17971, 17971, 17971, 17971, 17971, 17971,
17897, 17897, 17897, 17897, 17897, 17897, 17897, 17897,
17897, 17897, 17897, 17897, 17897, 17897, 17897, 17897,
18886, 18886, 18886, 18886, 18886, 18886, 18886, 18886,
18886, 18886, 18886, 18886, 18886, 18886, 18886, 18886,
18054, 18054, 18054, 18054, 18054, 18054, 18054, 18054,
18054, 18054, 18054, 18054, 18054, 18054, 18054, 18054,
17780, 17780, 17780, 17780, 17780, 17780, 17780, 17780,
17780, 17780, 17780, 17780, 17780, 17780, 17780, 17780,
17886, 17886, 17886, 17886, 17886, 17886, 17886, 17886,
17886, 17886, 17886, 17886, 17886, 17886, 17886, 17886,
17697, 17697, 17697, 17697, 17697, 17697, 17697, 17697,
17697, 17697, 17697, 17697, 17697, 17697, 17697, 17697,
17660, 17660, 17660, 17660, 17660, 17660, 17660, 17660,
17660, 17660, 17660, 17660, 17660, 17660, 17660, 17660,
18402, 18402, 18402, 18402, 18402, 18402, 18402, 18402,
18402, 18402, 18402, 18402, 18402, 18402, 18402, 18402,
18393, 18393, 18393, 18393, 18393, 18393, 18393, 18393,
18393, 18393, 18393, 18393, 18393, 18393, 18393, 18393,
16630, 16630, 16630, 16630, 16630, 16630, 16630, 16630,
16630, 16630, 16630, 16630, 16630, 16630, 16630, 16630,
17220, 17220, 17220, 17220, 17220, 17220, 17220, 17220,
17220, 17220, 17220, 17220, 17220, 17220, 17220, 17220,
18337, 18337, 18337, 18337, 18337, 18337, 18337, 18337,
18337, 18337, 18337, 18337, 18337, 18337, 18337, 18337,
18083, 18083, 18083, 18083, 18083, 18083, 18083, 18083,
18083, 18083, 18083, 18083, 18083, 18083, 18083, 18083,
18863, 18863, 18863, 18863, 18863, 18863, 18863, 18863,
18863, 18863, 18863, 18863, 18863, 18863, 18863, 18863,
18550, 18550, 18550, 18550, 18550, 18550, 18550, 18550,
18550, 18550, 18550, 18550, 18550, 18550, 18550, 18550,
17807, 17807, 17807, 17807, 17807, 17807, 17807, 17807,
17807, 17807, 17807, 17807, 17807, 17807, 17807, 17807,
18094, 18094, 18094, 18094, 18094, 18094, 18094, 18094,
18094, 18094, 18094, 18094, 18094, 18094, 18094, 18094,
18527, 18527, 18527, 18527, 18527, 18527, 18527, 18527,
18527, 18527, 18527, 18527, 18527, 18527, 18527, 18527,
18425, 18425, 18425, 18425, 18425, 18425, 18425, 18425,
18425, 18425, 18425, 18425, 18425, 18425, 18425, 18425
    ],
# LEVEL 7
    [
22692, 22692, 22692, 22692, 22692, 22692, 22692, 22692,
22488, 22488, 22488, 22488, 22488, 22488, 22488, 22488,
23361, 23361, 23361, 23361, 23361, 23361, 23361, 23361,
23326, 23326, 23326, 23326, 23326, 23326, 23326, 23326,
23229, 23229, 23229, 23229, 23229, 23229, 23229, 23229,
23559, 23559, 23559, 23559, 23559, 23559, 23559, 23559,
22704, 22704, 22704, 22704, 22704, 22704, 22704, 22704,
22717, 22717, 22717, 22717, 22717, 22717, 22717, 22717,
18075, 18075, 18075, 18075, 18075, 18075, 18075, 18075,
17724, 17724, 17724, 17724, 17724, 17724, 17724, 17724,
19068, 19068, 19068, 19068, 19068, 19068, 19068, 19068,
18556, 18556, 18556, 18556, 18556, 18556, 18556, 18556,
16761, 16761, 16761, 16761, 16761, 16761, 16761, 16761,
17441, 17441, 17441, 17441, 17441, 17441, 17441, 17441,
17249, 17249, 17249, 17249, 17249, 17249, 17249, 17249,
17336, 17336, 17336, 17336, 17336, 17336, 17336, 17336,
18315, 18315, 18315, 18315, 18315, 18315, 18315, 18315,
17702, 17702, 17702, 17702, 17702, 17702, 17702, 17702,
17477, 17477, 17477, 17477, 17477, 17477, 17477, 17477,
17333, 17333, 17333, 17333, 17333, 17333, 17333, 17333,
18762, 18762, 18762, 18762, 18762, 18762, 18762, 18762,
18459, 18459, 18459, 18459, 18459, 18459, 18459, 18459,
17726, 17726, 17726, 17726, 17726, 17726, 17726, 17726,
17998, 17998, 17998, 17998, 17998, 17998, 17998, 17998,
16847, 16847, 16847, 16847, 16847, 16847, 16847, 16847,
16760, 16760, 16760, 16760, 16760, 16760, 16760, 16760,
18846, 18846, 18846, 18846, 18846, 18846, 18846, 18846,
18186, 18186, 18186, 18186, 18186, 18186, 18186, 18186,
18409, 18409, 18409, 18409, 18409, 18409, 18409, 18409,
18566, 18566, 18566, 18566, 18566, 18566, 18566, 18566,
18296, 18296, 18296, 18296, 18296, 18296, 18296, 18296,
18795, 18795, 18795, 18795, 18795, 18795, 18795, 18795,
19184, 19184, 19184, 19184, 19184, 19184, 19184, 19184,
19416, 19416, 19416, 19416, 19416, 19416, 19416, 19416,
17698, 17698, 17698, 17698, 17698, 17698, 17698, 17698,
17661, 17661, 17661, 17661, 17661, 17661, 17661, 17661,
18466, 18466, 18466, 18466, 18466, 18466, 18466, 18466,
18654, 18654, 18654, 18654, 18654, 18654, 18654, 18654,
18011, 18011, 18011, 18011, 18011, 18011, 18011, 18011,
18680, 18680, 18680, 18680, 18680, 18680, 18680, 18680,
18168, 18168, 18168, 18168, 18168, 18168, 18168, 18168,
17847, 17847, 17847, 17847, 17847, 17847, 17847, 17847,
16969, 16969, 16969, 16969, 16969, 16969, 16969, 16969,
17725, 17725, 17725, 17725, 17725, 17725, 17725, 17725,
18242, 18242, 18242, 18242, 18242, 18242, 18242, 18242,
18174, 18174, 18174, 18174, 18174, 18174, 18174, 18174,
19237, 19237, 19237, 19237, 19237, 19237, 19237, 19237,
18394, 18394, 18394, 18394, 18394, 18394, 18394, 18394,
17849, 17849, 17849, 17849, 17849, 17849, 17849, 17849,
17959, 17959, 17959, 17959, 17959, 17959, 17959, 17959,
17723, 17723, 17723, 17723, 17723, 17723, 17723, 17723,
17686, 17686, 17686, 17686, 17686, 17686, 17686, 17686,
18702, 18702, 18702, 18702, 18702, 18702, 18702, 18702,
18725, 18725, 18725, 18725, 18725, 18725, 18725, 18725,
16820, 16820, 16820, 16820, 16820, 16820, 16820, 16820,
17425, 17425, 17425, 17425, 17425, 17425, 17425, 17425,
18586, 18586, 18586, 18586, 18586, 18586, 18586, 18586,
18321, 18321, 18321, 18321, 18321, 18321, 18321, 18321,
19199, 19199, 19199, 19199, 19199, 19199, 19199, 19199,
18834, 18834, 18834, 18834, 18834, 18834, 18834, 18834,
18072, 18072, 18072, 18072, 18072, 18072, 18072, 18072,
18403, 18403, 18403, 18403, 18403, 18403, 18403, 18403,
18888, 18888, 18888, 18888, 18888, 18888, 18888, 18888,
18801, 18801, 18801, 18801, 18801, 18801, 18801, 18801,
25607, 25607, 25607, 25607, 25607, 25607, 25607, 25607,
24405, 24405, 24405, 24405, 24405, 24405, 24405, 24405,
24468, 24468, 24468, 24468, 24468, 24468, 24468, 24468,
25167, 25167, 25167, 25167, 25167, 25167, 25167, 25167,
24056, 24056, 24056, 24056, 24056, 24056, 24056, 24056,
23614, 23614, 23614, 23614, 23614, 23614, 23614, 23614,
23680, 23680, 23680, 23680, 23680, 23680, 23680, 23680,
24190, 24190, 24190, 24190, 24190, 24190, 24190, 24190,
23831, 23831, 23831, 23831, 23831, 23831, 23831, 23831,
24277, 24277, 24277, 24277, 24277, 24277, 24277, 24277,
24280, 24280, 24280, 24280, 24280, 24280, 24280, 24280,
24440, 24440, 24440, 24440, 24440, 24440, 24440, 24440,
23407, 23407, 23407, 23407, 23407, 23407, 23407, 23407,
23998, 23998, 23998, 23998, 23998, 23998, 23998, 23998,
24790, 24790, 24790, 24790, 24790, 24790, 24790, 24790,
24497, 24497, 24497, 24497, 24497, 24497, 24497, 24497,
24181, 24181, 24181, 24181, 24181, 24181, 24181, 24181,
23634, 23634, 23634, 23634, 23634, 23634, 23634, 23634,
23183, 23183, 23183, 23183, 23183, 23183, 23183, 23183,
24280, 24280, 24280, 24280, 24280, 24280, 24280, 24280,
22874, 22874, 22874, 22874, 22874, 22874, 22874, 22874,
23372, 23372, 23372, 23372, 23372, 23372, 23372, 23372,
22886, 22886, 22886, 22886, 22886, 22886, 22886, 22886,
24001, 24001, 24001, 24001, 24001, 24001, 24001, 24001,
23465, 23465, 23465, 23465, 23465, 23465, 23465, 23465,
24705, 24705, 24705, 24705, 24705, 24705, 24705, 24705,
24437, 24437, 24437, 24437, 24437, 24437, 24437, 24437,
23749, 23749, 23749, 23749, 23749, 23749, 23749, 23749,
24496, 24496, 24496, 24496, 24496, 24496, 24496, 24496,
24633, 24633, 24633, 24633, 24633, 24633, 24633, 24633,
24728, 24728, 24728, 24728, 24728, 24728, 24728, 24728,
24848, 24848, 24848, 24848, 24848, 24848, 24848, 24848,
23872, 23872, 23872, 23872, 23872, 23872, 23872, 23872,
24284, 24284, 24284, 24284, 24284, 24284, 24284, 24284,
24098, 24098, 24098, 24098, 24098, 24098, 24098, 24098,
23407, 23407, 23407, 23407, 23407, 23407, 23407, 23407,
24499, 24499, 24499, 24499, 24499, 24499, 24499, 24499,
23238, 23238, 23238, 23238, 23238, 23238, 23238, 23238,
23138, 23138, 23138, 23138, 23138, 23138, 23138, 23138,
23071, 23071, 23071, 23071, 23071, 23071, 23071, 23071,
24561, 24561, 24561, 24561, 24561, 24561, 24561, 24561,
23852, 23852, 23852, 23852, 23852, 23852, 23852, 23852,
24038, 24038, 24038, 24038, 24038, 24038, 24038, 24038,
23858, 23858, 23858, 23858, 23858, 23858, 23858, 23858,
22391, 22391, 22391, 22391, 22391, 22391, 22391, 22391,
22679, 22679, 22679, 22679, 22679, 22679, 22679, 22679,
22795, 22795, 22795, 22795, 22795, 22795, 22795, 22795,
23148, 23148, 23148, 23148, 23148, 23148, 23148, 23148,
24139, 24139, 24139, 24139, 24139, 24139, 24139, 24139,
23971, 23971, 23971, 23971, 23971, 23971, 23971, 23971,
24461, 24461, 24461, 24461, 24461, 24461, 24461, 24461,
23776, 23776, 23776, 23776, 23776, 23776, 23776, 23776,
24985, 24985, 24985, 24985, 24985, 24985, 24985, 24985,
25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680,
24288, 24288, 24288, 24288, 24288, 24288, 24288, 24288,
24744, 24744, 24744, 24744, 24744, 24744, 24744, 24744,
23781, 23781, 23781, 23781, 23781, 23781, 23781, 23781,
24272, 24272, 24272, 24272, 24272, 24272, 24272, 24272,
24363, 24363, 24363, 24363, 24363, 24363, 24363, 24363,
23700, 23700, 23700, 23700, 23700, 23700, 23700, 23700,
24033, 24033, 24033, 24033, 24033, 24033, 24033, 24033,
24029, 24029, 24029, 24029, 24029, 24029, 24029, 24029,
24067, 24067, 24067, 24067, 24067, 24067, 24067, 24067,
23960, 23960, 23960, 23960, 23960, 23960, 23960, 23960
    ],
# LEVEL 8
    [
28323, 28323, 28323, 28323, 28139, 28139, 28139, 28139,
29243, 29243, 29243, 29243, 29090, 29090, 29090, 29090,
29576, 29576, 29576, 29576, 30023, 30023, 30023, 30023,
28819, 28819, 28819, 28819, 28825, 28825, 28825, 28825,
29557, 29557, 29557, 29557, 28853, 28853, 28853, 28853,
30636, 30636, 30636, 30636, 29728, 29728, 29728, 29728,
28214, 28214, 28214, 28214, 29618, 29618, 29618, 29618,
29205, 29205, 29205, 29205, 29399, 29399, 29399, 29399,
24765, 24765, 24765, 24765, 23847, 23847, 23847, 23847,
24454, 24454, 24454, 24454, 24176, 24176, 24176, 24176,
25150, 25150, 25150, 25150, 24695, 24695, 24695, 24695,
24780, 24780, 24780, 24780, 25148, 25148, 25148, 25148,
22605, 22605, 22605, 22605, 22477, 22477, 22477, 22477,
23828, 23828, 23828, 23828, 22907, 22907, 22907, 22907,
23672, 23672, 23672, 23672, 23955, 23955, 23955, 23955,
23383, 23383, 23383, 23383, 24060, 24060, 24060, 24060,
24528, 24528, 24528, 24528, 24801, 24801, 24801, 24801,
23858, 23858, 23858, 23858, 23824, 23824, 23824, 23824,
22916, 22916, 22916, 22916, 23187, 23187, 23187, 23187,
22710, 22710, 22710, 22710, 23632, 23632, 23632, 23632,
24981, 24981, 24981, 24981, 24482, 24482, 24482, 24482,
23885, 23885, 23885, 23885, 25070, 25070, 25070, 25070,
23787, 23787, 23787, 23787, 23686, 23686, 23686, 23686,
24621, 24621, 24621, 24621, 23415, 23415, 23415, 23415,
23255, 23255, 23255, 23255, 23413, 23413, 23413, 23413,
23347, 23347, 23347, 23347, 23334, 23334, 23334, 23334,
25056, 25056, 25056, 25056, 25090, 25090, 25090, 25090,
23789, 23789, 23789, 23789, 24760, 24760, 24760, 24760,
24451, 24451, 24451, 24451, 24047, 24047, 24047, 24047,
24776, 24776, 24776, 24776, 24292, 24292, 24292, 24292,
24368, 24368, 24368, 24368, 24801, 24801, 24801, 24801,
24470, 24470, 24470, 24470, 24317, 24317, 24317, 24317,
26003, 26003, 26003, 26003, 24781, 24781, 24781, 24781,
24947, 24947, 24947, 24947, 25667, 25667, 25667, 25667,
24326, 24326, 24326, 24326, 23850, 23850, 23850, 23850,
23928, 23928, 23928, 23928, 24467, 24467, 24467, 24467,
24015, 24015, 24015, 24015, 24471, 24471, 24471, 24471,
24483, 24483, 24483, 24483, 24624, 24624, 24624, 24624,
23528, 23528, 23528, 23528, 24118, 24118, 24118, 24118,
24910, 24910, 24910, 24910, 24617, 24617, 24617, 24617,
24481, 24481, 24481, 24481, 23929, 23929, 23929, 23929,
23450, 23450, 23450, 23450, 24605, 24605, 24605, 24605,
23107, 23107, 23107, 23107, 23612, 23612, 23612, 23612,
23127, 23127, 23127, 23127, 24252, 24252, 24252, 24252,
23740, 23740, 23740, 23740, 25010, 25010, 25010, 25010,
24750, 24750, 24750, 24750, 24054, 24054, 24054, 24054,
24864, 24864, 24864, 24864, 24999, 24999, 24999, 24999,
25106, 25106, 25106, 25106, 25188, 25188, 25188, 25188,
23941, 23941, 23941, 23941, 24353, 24353, 24353, 24353,
24171, 24171, 24171, 24171, 23480, 23480, 23480, 23480,
24525, 24525, 24525, 24525, 23264, 23264, 23264, 23264,
23164, 23164, 23164, 23164, 23097, 23097, 23097, 23097,
24870, 24870, 24870, 24870, 24173, 24173, 24173, 24173,
24372, 24372, 24372, 24372, 24191, 24191, 24191, 24191,
22582, 22582, 22582, 22582, 22877, 22877, 22877, 22877,
23000, 23000, 23000, 23000, 23353, 23353, 23353, 23353,
24388, 24388, 24388, 24388, 24222, 24222, 24222, 24222,
24699, 24699, 24699, 24699, 24014, 24014, 24014, 24014,
25349, 25349, 25349, 25349, 26047, 26047, 26047, 26047,
24581, 24581, 24581, 24581, 25028, 25028, 25028, 25028,
24046, 24046, 24046, 24046, 24570, 24570, 24570, 24570,
24704, 24704, 24704, 24704, 24009, 24009, 24009, 24009,
24394, 24394, 24394, 24394, 24390, 24390, 24390, 24390,
24443, 24443, 24443, 24443, 24336, 24336, 24336, 24336,
31199, 31199, 31199, 31199, 31836, 31836, 31836, 31836,
30187, 30187, 30187, 30187, 31492, 31492, 31492, 31492,
30808, 30808, 30808, 30808, 31522, 31522, 31522, 31522,
31855, 31855, 31855, 31855, 31951, 31951, 31951, 31951,
31317, 31317, 31317, 31317, 30689, 30689, 30689, 30689,
30823, 30823, 30823, 30823, 29289, 29289, 29289, 29289,
30567, 30567, 30567, 30567, 29916, 29916, 29916, 29916,
30049, 30049, 30049, 30049, 31454, 31454, 31454, 31454,
30984, 30984, 30984, 30984, 30808, 30808, 30808, 30808,
30793, 30793, 30793, 30793, 30605, 30605, 30605, 30605,
30925, 30925, 30925, 30925, 30233, 30233, 30233, 30233,
30590, 30590, 30590, 30590, 29986, 29986, 29986, 29986,
29552, 29552, 29552, 29552, 29721, 29721, 29721, 29721,
31089, 31089, 31089, 31089, 30585, 30585, 30585, 30585,
30924, 30924, 30924, 30924, 30908, 30908, 30908, 30908,
31644, 31644, 31644, 31644, 30477, 30477, 30477, 30477,
30033, 30033, 30033, 30033, 30169, 30169, 30169, 30169,
30045, 30045, 30045, 30045, 30566, 30566, 30566, 30566,
29481, 29481, 29481, 29481, 29286, 29286, 29286, 29286,
29670, 29670, 29670, 29670, 30846, 30846, 30846, 30846,
29088, 29088, 29088, 29088, 28987, 28987, 28987, 28987,
29460, 29460, 29460, 29460, 29489, 29489, 29489, 29489,
29687, 29687, 29687, 29687, 28349, 28349, 28349, 28349,
30506, 30506, 30506, 30506, 30057, 30057, 30057, 30057,
29527, 29527, 29527, 29527, 30394, 30394, 30394, 30394,
31923, 31923, 31923, 31923, 31742, 31742, 31742, 31742,
30698, 30698, 30698, 30698, 30423, 30423, 30423, 30423,
29945, 29945, 29945, 29945, 29394, 29394, 29394, 29394,
30735, 30735, 30735, 30735, 30101, 30101, 30101, 30101,
30525, 30525, 30525, 30525, 30808, 30808, 30808, 30808,
31676, 31676, 31676, 31676, 30502, 30502, 30502, 30502,
30256, 30256, 30256, 30256, 32217, 32217, 32217, 32217,
30532, 30532, 30532, 30532, 30253, 30253, 30253, 30253,
31517, 31517, 31517, 31517, 29757, 29757, 29757, 29757,
31043, 31043, 31043, 31043, 30297, 30297, 30297, 30297,
29534, 29534, 29534, 29534, 28903, 28903, 28903, 28903,
31355, 31355, 31355, 31355, 30306, 30306, 30306, 30306,
30482, 30482, 30482, 30482, 28829, 28829, 28829, 28829,
30322, 30322, 30322, 30322, 30067, 30067, 30067, 30067,
29035, 29035, 29035, 29035, 28813, 28813, 28813, 28813,
31363, 31363, 31363, 31363, 31350, 31350, 31350, 31350,
29822, 29822, 29822, 29822, 30170, 30170, 30170, 30170,
30281, 30281, 30281, 30281, 30869, 30869, 30869, 30869,
29643, 29643, 29643, 29643, 30225, 30225, 30225, 30225,
29291, 29291, 29291, 29291, 28805, 28805, 28805, 28805,
29801, 29801, 29801, 29801, 29097, 29097, 29097, 29097,
28801, 28801, 28801, 28801, 29116, 29116, 29116, 29116,
30345, 30345, 30345, 30345, 29273, 29273, 29273, 29273,
31298, 31298, 31298, 31298, 29564, 29564, 29564, 29564,
29540, 29540, 29540, 29540, 31125, 31125, 31125, 31125,
30130, 30130, 30130, 30130, 31447, 31447, 31447, 31447,
30590, 30590, 30590, 30590, 29686, 29686, 29686, 29686,
31650, 31650, 31650, 31650, 31626, 31626, 31626, 31626,
31302, 31302, 31302, 31302, 32319, 32319, 32319, 32319,
31476, 31476, 31476, 31476, 31427, 31427, 31427, 31427,
31228, 31228, 31228, 31228, 30316, 30316, 30316, 30316,
30984, 30984, 30984, 30984, 29179, 29179, 29179, 29179,
31436, 31436, 31436, 31436, 30357, 30357, 30357, 30357,
31678, 31678, 31678, 31678, 30683, 30683, 30683, 30683,
29955, 29955, 29955, 29955, 29974, 29974, 29974, 29974,
29704, 29704, 29704, 29704, 30042, 30042, 30042, 30042,
29791, 29791, 29791, 29791, 30166, 30166, 30166, 30166,
31148, 31148, 31148, 31148, 31146, 31146, 31146, 31146,
29702, 29702, 29702, 29702, 30657, 30657, 30657, 30657
    ]
]

def print_parameters (inp_poly_name, cname):
    print ('bit x, bit {0},'.format (inp_poly_name))
    for i in range (32):
        print ('bit {0}{1:02}'.format (inp_poly_name, i),
               end = ',\n' if i % 4 == 3 else ', ')
    for i in range (512):
        print ('sint16 {0}{1:03x}'.format (cname, i),
               end = '\n' if i == 511 else
                     (',\n' if i % 5 == 4 else ', '))
        
def print_range_precondition (cname, bound):
    for i in range (509):
        print ('(-{0})@16<=s {1}{2:03x},{1}{2:03x}<s {0}@16'.
               format (bound, cname, i),
               end = ',\n' if i % 2 == 1 else ',')
    for i in range (509, 512):
        print ('0@16 = {0}{1:03x}'.
               format (cname, i),
               end = '\n' if i == 511 else ',')

def print_initialization (base, cname):
    for i in range (512):
        print ('mov L0x{0:x} {1}{2:03x};'.format (base + 2*i, cname, i),
               end = '\n' if i % 3 == 2 or i == 1023 else ' ')

def print_constants (base, consts):
    for i in range (len (consts)):
        print ('mov L0x{0:x} ({1:6})@sint16;'.format (base + 2*i, consts[i]),
               end = '\n' if i % 2 == 1 or i == len (consts) - 1 else ' ')

def print_indices (base, idx):
    for i in range (len (idx) // 2):
        print ('mov L0x{0:x} (0x{1:04x})@sint16;'.
               format (base + 2*i, 0x100*idx[2*i+1] + idx[2*i]),
               end = '\n' if i % 2 == 1 or i == len (idx) - 1 else ' ')

# convert ymm registers of the given indices to coefficient list
def ymm2coeffs (indices, slice_size):
    idxs = []
    for i in range (len (indices)):
        cur = []
        for j in range (16):
            cur.append ('ymm' + str(indices[i]) + '_' + '{0:x}'.format (j))
        idxs.append (cur)
    ret = []
    for k in range (16//slice_size):
        for i in range (len (indices)):
            ret = ret + idxs[i][(k*slice_size):((k+1)*slice_size)]
    return (ret)

def _print_algebraic_condition02 (cname, indices, offset):
    num_rings = 2**(2+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (num_rings):
        print ('eqmod (', end = '')
        for j in range (4):
            for k in range (16):
                print ('{0}{1:03x}*x**{1:3}'.
                       format (cname, 0x80*j + 16*offset + k),
                       end = ')\n      (' if j == 3 and k == 15 else
                             ('+\n       ' if k % 4 == 3 else '+'))
        for k in range (16):
            print ('ymm{0}_{1:x}*x**{2:2}'.
                   format (indices[i], k, 16*offset + k),
                   end = ')\n      ' if k == 15 else
                         ('+\n       ' if k % 4 == 3 else '+'))
        print ('[{0}, x**128 - {1}]'.format (P, revexps[i]),
               end = '\n' if i == num_rings - 1 else ',\n')

def print_algebraic_condition02 (cname, base, offset, num_slice=1, ith_slice=0):
    num_rings = 2**(2+1)
    rings_per_slice = num_rings // num_slice
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (ith_slice * rings_per_slice, 
                    (ith_slice + 1) * rings_per_slice) :
        print ('eqmod (', end = '')
        for j in range (4):
            for k in range (16):
                print ('{0}{1:03x}*x**{1:3}'.
                       format (cname, 0x80*j + 16*offset + k),
                       end = ')\n      (' if j == 3 and k == 15 else
                             ('+\n       ' if k % 4 == 3 else '+'))
        for k in range (16):
            print ('L0x{0:x}*x**{1:2}'.
                   format (base + 2*(16*offset + 128*i + k), 16*offset + k),
                   end = ')\n      ' if k == 15 else
                         ('+\n       ' if k % 3 == 2 else '+'))
        print ('[{0}, x**128 - {1}]'.format (P, revexps[i]),
               end = '\n' if i == (ith_slice+1)*rings_per_slice - 1 else ',\n')
        
def __print_range_condition02 (membase, offset):
    bound = ranges[2]
    subbase = 16*offset
    for i in range (8):
        base = 128*i
        for j in range (16):
            print ('({0:6})@16<=s L0x{2:x},L0x{2:x}<s {1:5}@16'.
                   format (-bound[base+subbase+j],
                            bound[base+subbase+j],
                            membase+2*(base+subbase+j)),
                   end = '\n' if i == 7 and j == 15 else ',\n')

def print_range_condition02 (membase, offset):
    bound = ranges[2]
    base = 128*offset
    for i in range (8):
        for j in range (16):
            print ('({0:6})@16<=s L0x{2:x},L0x{2:x}<s {1:5}@16'.
                   format (-bound[base+16*i+j],
                            bound[base+16*i+j],
                            membase+2*(base+16*i+j)),
                   end = '\n' if i == 7 and j == 15 else ',\n')

def print_algebraic_condition3 (base, indices, offset):
    num_rings = 2**(3+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (2):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for j in range (4):
            for k in range (16):
                print ('ymm{0}_{1:x}*x**{2:2}'.
                       format (indices[i][j], k, 16*j+k),
                       end = ')\n      ' if j == 3 and k == 15 else
                             ('+\n       ' if k % 4 == 3 else '+'))
        print ('[{0}, x**64 - {1}]'.format (P, revexps[2*offset+i]),
               end = '\n' if i == 1 else ',\n')
        
def print_algebraic_condition34 (base, indices, offset):
    num_rings = 2**(4+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (4):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for j in range (2):
            for k in range (16):
                print ('ymm{0}_{1:x}*x**{2:2}'.
                       format (indices[i][j], k, 16*j+k),
                       end = ')\n      ' if j == 1 and k == 15 else
                             ('+\n       ' if k % 4 == 3 else '+'))
        print ('[{0}, x**32 - {1}]'.format (P, revexps[4*offset+i]),
               end = '\n' if i == 3 else ',\n')

def print_algebraic_condition35 (base, indices, offset):
    num_rings = 2**(5+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (8):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for k in range (16):
            print ('ymm{0}_{1:x}*x**{1:2}'.
                   format (indices[i], k),
                   end = ')\n      ' if k == 15 else
                         ('+\n       ' if k % 4 == 3 else '+'))
        print ('[{0}, x**16 - {1}]'.format (P, revexps[8*offset+i]),
               end = '\n' if i == 7 else ',\n')

def print_range_condition35 (offset):
    bound = ranges[5]
    regs = [ 9, 3, 7, 6, 5, 8, 4, 11 ]
    base = 128*offset
    for i in range (8):
        subbase = 16*i
        reg = regs[i]
        for j in range (16):
            print ('({0:6})@16<=s ymm{2}_{3:x},ymm{2}_{3:x}<=s {1:5}@16'.
                   format (-bound[base+subbase+j],
                            bound[base+subbase+j],
                            reg, j),
                       end = '\n' if i == 7 and j == 15 else
                             (',\n' if j % 2 == 1 else ','))
        
def print_algebraic_condition36 (base, indices, offset):
    num_rings = 2**(6+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    for i in range (16):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for k in range (8):
            # 0 8 2 a 4 c 6 e or 1 9 3 b 5 d 7 f
            print ('ymm{0}_{1:x}*x**{2:2}'.
                   format (indices[2*(i//4)+i%2], 8*(k%2)+k-(k%2)+(1 if i%4 > 1 else 0), k),
                   end = ')\n      ' if k == 7 else
                         ('+\n       ' if k % 4 == 3 else '+'))
        print ('[{0}, x**8 - {1}]'.format (P, revexps[16*offset+i]),
               end = '\n' if i == 15 else ',\n')

def print_algebraic_condition37 (base, indices, offset):
    num_rings = 2**(7+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8, 4, 12], [1, 9, 5, 13], [2, 10, 6, 14], [3, 11, 7, 15] ]
    for i in range (32):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for k in range (4):
            print ('ymm{0}_{1:x}*x**{2:2}'.
                   format (indices[2*(i//8)+i%2], limbs[(i//2)%4][k], k),
                   end = ')\n      ' if k == 3 else '+')
        print ('[{0}, x**4 - {1}]'.format (P, revexps[32*offset+i]),
               end = '\n' if i == 31 else ',\n')

def print_mid_results (base, offset):
    print ('ghost')
    for i in range (128):
        print ('L0x{0:x}o@sint16'.format (base + 2*(128*offset + i)),
               end = ' : true && and [\n' if i == 127 else
                     (',\n' if i % 3 == 2 else ', '))
    for i in range (128):
        print ('L0x{0:x}o = L0x{0:x}'.
               format (base + 2*(128*offset + i)),
               end = '\n];\n' if i == 127 else
                     (',\n' if i % 2 == 1 else ', '))
        
def _print_algebraic_condition38 (base, indices, offset):
    num_rings = 2**(8+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15] ]
    for i in range (64):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for k in range (2):
            print ('ymm{0}_{1:x}*x**{2:2}'.
                   format (indices[2*(i//16)+i%2], limbs[(i//2)%8][k], k),
                   end = ') ' if k == 1 else '+')
        print ('[{0}, x**2 - {1}]'.format (P, revexps[64*offset+i]),
               end = '\n' if i == 63 else ',\n')

def __print_algebraic_condition38 (base, offset):
    num_rings = 2**(8+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15] ]
    for i in range (64):
        print ('eqmod (', end = '')
        for j in range (128):
            print ('L0x{0:x}o*x**{1:3}'.
                   format (base + 2*(128*offset + j), j),
                   end = ')\n      (' if j == 127 else
                         ('+\n       ' if j % 3 == 2 else '+'))
        for k in range (2):
            print ('L0x{0:x}*x**{1:2}'.
                   format (base +
                           2*(128*offset +
                              16*(2*(i//16)+i%2)+
                              limbs[(i//2)%8][k]), k),
                   end = ') ' if k == 1 else '+')
        print ('[{0}, x**2 - {1}]'.format (P, revexps[64*offset+i]),
               end = '\n' if i == 63 else ',\n')

def print_algebraic_condition38 (inp_poly_name, base, offset):
    num_rings = 2**(8+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15] ]
    for i in range (64):
        print ('eqmod ({0}**2) ('.format (inp_poly_name), end = '')
        for k in range (2):
            print ('L0x{0:x}*x**{1:2}'.
                   format (base +
                           2*(128*offset +
                              16*(2*(i//16)+i%2)+
                              limbs[(i//2)%8][k]), k),
                   end = ')\n      ' if k == 1 else '+')
        print ('[{0}, x**2 - {1}]'.format (P, revexps[64*offset+i]),
               end = '\n' if i == 63 else ',\n')

def print_algebraic_condition38_imm (inp_poly_name, base, offset):
    num_rings = 2**(8+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15] ]
    for i in range (64):
        print ('eqmod (')
        for j in range (128) :
            print ('L0x{0:x}o*x**{1:3}'.
                   format(base+2*(128*offset+j), j),
                   end = '\n' if j == 127 else '+' if j%2 == 0 else '+\n')
        print (') (')
        for k in range (2):
            print ('L0x{0:x}*x**{1:2}'.
                   format (base +
                           2*(128*offset +
                              16*(2*(i//16)+i%2)+
                              limbs[(i//2)%8][k]), k),
                   end = ')\n      ' if k == 1 else '+')
        print ('[{0}, x**2 - {1}]'.format (P, revexps[64*offset+i]),
               end = '\n' if i == 63 else ',\n')
        
def print_algebraic_postcondition (inp_poly_name, base, offset):
    num_rings = 2**(8+1)
    exps = [ i for i in range (num_rings) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    limbs = [ [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15] ]
    for i in range (64):
        print ('eqmod ({0}**2) ('.format (inp_poly_name),
               end = '')
        for k in range (2):
            print ('L0x{0:x}*x**{1:2}'.
                   format (base +
                           2*(128*offset +
                              16*(2*(i//16)+i%2)+
                              limbs[(i//2)%8][k]), k),
                   end = ')\n      ' if k == 1 else '+')
        print ('[{0}, x**2 - {1}]'.format (P, revexps[64*offset+i]),
               end = '\n' if i == 63 else ',\n')

def print_range_postcondition (membase, offset):
    bound = ranges[8]
    base = 128*offset
    for i in range (4):
        subbase = 32*i
        for j in range (16):
            for k in range (2):
                print ('({0:6})@16<=s L0x{2:x},L0x{2:x}<=s {1:5}@16'.
                   format (-bound[base+subbase+j*2+k],
                            bound[base+subbase+j*2+k],
                            membase+2*(base+subbase+(j//2)+16*(j%2)+8*k)),
                       end = '\n' if i == 3 and j == 15 and k == 1 else ',\n')

def print_algebraic_condition (inp_poly_name, indices, level, offset):
    exps = [ i for i in range (2**(level+1)) ]
    exprevbits = map (lambda e :
                      list (reversed (nttlib.num_to_bits (e, 9))),
                      exps)
    revexps = list (map (lambda b : (ZETA**(nttlib.bits_to_num (b)))%P,
                         exprevbits))
    slice_size = 16
    coefficients = ymm2coeffs (indices, slice_size)
    degree = 1024//(2**(level+1))
    coeffidx = 0
    for i in range (len (revexps)):
        modulus = revexps[i]
        print ('eqmod ({0}{1:02}**2)'.format (inp_poly_name, offset))
        coeffidx = (2**(level+1)) * (i//(2**(level+1)))
        for j in range (0, 16):
            print ('{0}*(x**{1})'.
                   format (coefficients[coeffidx], j,
                           '(' if j == 0 else ''),
                   end = ')\n' if j == degree - 1 else
                              (' +\n ' if j % 4 == 3 else ' + '))
            coeffidx += 1
        print ('[{0}, x - {1}]{2}'.
               format (P, modulus,
                       ',' if i < len (revexps) - 1 else ']'))

        
ecut_counter = 0
rcut_counter = 0

def print_cut_helper (cut_name, condition = '') :
    print ('\n(**************** CUT {0:3},{1:3} *****************)\n'.
           format (ecut_counter, rcut_counter))
    print ('{0} {1}'.format (cut_name, condition),
           end = '\n' if condition == '' else ';\n')

def print_ecut (condition = ''):
    global ecut_counter
    print_cut_helper ('ecut', condition)
    ecut_counter += 1
    
def print_rcut (condition = ''):
    global rcut_counter
    print_cut_helper ('rcut', condition)
    rcut_counter += 1
    
def print_cut (condition = ''):
    global ecut_counter
    global rcut_counter
    print_cut_helper ('cut', condition)
    ecut_counter += 1
    rcut_counter += 1
    
def get_ecut_counter () :
    return (ecut_counter - 1)

def get_rcut_counter () :
    return (rcut_counter - 1)

print ('\n\n\n(**************** parameters *****************)\n')
print_parameters ('inp_poly', 'c')

print ('\n\n\n(**************** precondition *****************)\n')
print ('and [')
nttlib.print_poly ('inp_poly', lambda i: 'c{0:03x}'.format (i), 512, 32)
print ('] && and [')
print_range_precondition ('c', 2048)
print (']')


### cut 
print_ecut ('true')


print ('\n\n\n(**************** initialization *****************)\n')
print_initialization (inp_base, 'c')

print ('\n\n\n(**************** constants *****************)\n')
print_constants (const_base, pdata10753)

print ('\n\n\n(**************** indices *****************)\n')
print_indices (idx_base, idxdata)

ecut02 = [[] for i in range (8)]
rcut_all02 = []
for offset in range (8):
    print ('\n\n\n(**************** LEVELS 0-2, {0} *****************)\n'.
           format (offset))
    if offset < 7:
        print_ecut ()
    else:
        print_cut ()
    print ('  and [')
#    print_algebraic_condition02 ('c', [5, 4, 3, 7, 6, 9, 8, 11], offset)
    print_algebraic_condition02 ('c', out_base, offset)
    if offset < 7:
        print ('  ];')
    else:
        print ('] && and [')
        for o in range (8):
            print_range_condition02 (out_base, o)
            print (',' if o < 7 else '')
        print ('] prove with [ precondition ];')
        rcut_all02.append (get_rcut_counter ())
    ecut_all = get_ecut_counter ()


    print ('\n\n(* === split the CUT into 8 slices === *)')
    for i in range (8) :
        print_ecut ('true')
        print_ecut ()
        print ('  and [')
        print_algebraic_condition02 ('c', out_base, offset, 
                                     num_slice=8, ith_slice=i)
        print ('  ] prove with [cuts [{0}]];\n'.format(ecut_all))
        ecut02[offset].append(get_ecut_counter ())
    
    print ('\n\n(* === be ready for next level and offset === *)')
    if offset < 7:
        print_ecut ('true')
    else:
        print_cut ()
        print ('true && and [')
        print_range_condition02 (out_base, 0)
        print ('] prove with [ cuts [ ', end = '')
        for i in range (len (rcut_all02)) :
            print ('{0}'.format(rcut_all02[i]),
                   end = '' if i == len (rcut_all02) - 1 else ', ')
        print (' ] ];')



"""
print ('\n\n\n(**************** LEVELS 3, 0 *****************)\n')
print ('(**************** CUT {0:3} *****************)\n'.
       format (cut_counter))
print ('ecut and [')
print_algebraic_condition3 (out_base, [[3, 4, 5, 6], [8, 9, 10, 11]], 0)
print ('];')
cut_counter += 1
"""

"""
print ('\n\n\n(**************** LEVELS 3-4, 0 *****************)\n')
print ('(**************** CUT {0:3} *****************)\n'.
       format (cut_counter))
print ('ecut and [')
print_algebraic_condition34 (out_base, [[7, 3], [5, 6], [4, 8], [10, 11]], 0)
print ('];')
cut_counter += 1
"""

"""
print ('\n\n\n(**************** LEVELS 3-5, 0 *****************)\n')
print ('(**************** CUT {0:3} *****************)\n'.
       format (cut_counter))
print ('ecut and [')
print_algebraic_condition35 (out_base, [9, 3, 7, 6, 5, 8, 4, 11], 0)
print ('];')
cut_counter += 1
"""

"""
print ('\n\n\n(**************** LEVELS 3-6, 0 *****************)\n')
print ('(**************** CUT {0:3} *****************)\n'.
       format (cut_counter))
print ('ecut and [')
print_algebraic_condition36 (out_base, [4, 3, 10, 6, 9, 8, 7, 11], 0)
print ('];')
cut_counter += 1
"""

"""
print ('\n\n\n(**************** LEVELS 3-7, 0 *****************)\n')
print ('(**************** CUT {0:3} *****************)\n'.
       format (cut_counter))
print ('ecut and [')
print_algebraic_condition37 (out_base, [7, 3, 5, 6, 4, 8, 10, 11], 0)
print ('];')
cut_counter += 1
"""

"""
print ('\n\n\n(**************** mid results 0 *****************)\n')
print_mid_results (out_base, 0);
"""

ecut38 = []
rcut38 = []
for offset in range (8):
    print ('\n\n\n(**************** LEVELS 3-5, {0} *****************)\n'.
           format (offset))
    print_rcut ()
    print ('  and [')
    print_range_condition35 (offset)
    print ('] prove with [ all ghosts, cuts [ ', end = '')
    for i in range (len (rcut_all02)) :
        print ('{0}'.format(rcut_all02[i]),
               end = '' if i == len (rcut_all02) - 1 else ', ')
    print (' ] ];')
    
    print ('\n\n\n(**************** LEVELS 3-8, {0} *****************)\n'.
           format (offset))
    print_cut ()
    print ('  and [')
    # print_algebraic_condition38 (out_base, [10, 3, 9, 6, 7, 8, 5, 11], 0)
    print_algebraic_condition38 ('inp_poly', out_base, offset)
    print ('  ] prove with [ precondition, cuts [ ', end='')
    for i in range (8) :
        print ('{0}'.format(ecut02[i][offset]), end = '' if i == 7 else ', ')
    print ('] ] && and [')
    print_range_postcondition (out_base, offset)
    print ('];')
    ecut38.append(get_ecut_counter ())
    rcut38.append(get_rcut_counter ())

    print ('\n\n(* === be ready for next level and offset === *)')
    if offset < 7:
        print_cut ()
        print ('true && and [')
        print_range_condition02 (out_base, offset + 1)
        print ('] prove with [ cuts [ ', end = '')
        for i in range (len (rcut_all02)) :
            print ('{0}'.format(rcut_all02[i]),
                   end = '' if i == len (rcut_all02) - 1 else ', ')
        print (' ] ];')
    else:
        print_ecut ('true')
    



print ('\n\n\n(**************** postcondition *****************)\n')
print ('and [')
for offset in range (8):
    print_algebraic_postcondition ('inp_poly', out_base, offset)
    print ('] prove with [ cuts [ ' if offset == 7 else ',\n', end='')
for i in range (8) :
    print ('{0}'.format(ecut38[i]), end = '' if i == 7 else ', ')
print (' ] ]')
print ('&& and [')
for offset in range (8):
    print_range_postcondition (out_base, offset)
    print ('] prove with [ cuts [ ' if offset == 7 else ',\n', end='')
for i in range (8) :
    print ('{0}'.format(rcut38[i]), end = '' if i == 7 else ', ')
print (' ] ]')
