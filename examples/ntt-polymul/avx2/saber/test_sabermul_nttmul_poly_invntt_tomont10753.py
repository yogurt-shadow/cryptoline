#!/usr/bin/env python3

# 1. to_zdsl.py --no-main --no-pre --no-post test_sabermul_nttmul_poly_invntt_tomont.gas 1> test_sabermul_nttmul_poly_invntt_tomont_preprocessed.cl
# 2. ./test_sabermul_nttmul_poly_invntt_tomont.py test_sabermul_nttmul_poly_invntt_tomont_preprocessed.cl > test_sabermul_nttmul_poly_invntt_tomont.cl

# Inputs:
# %rdx = 0x55555555f7c0
# L0x555555560700-L0x55555556071e (_16XP = 7681 or 10753, num = 16)
# L0x555555560780-L0x55555556079e (_16XMONT_PINV = -9 or -6, _16XMONT * P^-1 mod 2^16, num = 16)
# L0x5555555607a0-L0x5555555607be (_16XMONT = -3593 or 1018, 2^16 mod P, num = 16)
# L0x555555560800-L0x55555556093e (_ZETAS, num = 160)
# L0x555555560940-L0x555555560d3e (_TWIST32, num = 512)
# L0x555555560d40-L0x555555560dbe (_TWISTS4, num = 64)
# L0x7fffffffbb20-L0x7fffffffbd1e (input coefficients, num = 256)
# L0x7fffffffbb20-L0x7fffffffbd1e (output coefficients, num = 256)

import re, math
from argparse import ArgumentParser

ORIGINAL_N = 256
ORIGINAL_P = 8192
P = 10753
PINV = -10751  # p^-1 mod 2^16
MONT = 1018    # 2^16 mod p
MONT_PINV = -6 # (MONT * p^-1) mod 2^16
ROOT = 10      # 10**256 = -1 (mod 10753)

_16XP_BASE = 0x555555560700
_16XP_NUM = 16
_16XMONT_PINV_BASE = 0x555555560780
_16XMONT_PINV_NUM = 16
_16XMONT_BASE = 0x5555555607a0
_16XMONT_NUM = 16
_ZETAS_BASE = 0x555555560800
_ZETAS_NUM = 160
_TWIST32_BASE = 0x555555560940
_TWIST32_NUM = 512
_TWISTS4_BASE = 0x555555560d40
_TWISTS4_NUM = 64
INPUT_BASE = 0x7fffffffbb20 # (L0x7fffffffbb20 ~ L0x7fffffffbd1e)
INPUT_NUM = 256
ANS_BASE = 0x7fffffffbb20 # (L0x7fffffffbb20 ~ L0x7fffffffbd1e)
ANS_NUM = 256
LEVEL3_TWIST = [10, 8417, 3223, 6269, 1000, 2966, 10463, 3226]
LEVEL3_TWIST_INV = [3226, 10463, 2966, 1000, 6269, 3223, 8417, 10]
LEVEL7_TWIST = [1, 321, 9097, 7331, 1154, 2047, 3010, 8116]
LEVEL7_TWIST_INV = [1, 67, 7331, 9097, 8116, 3010, 2047, 1154]
POLY_NAME = "inp_poly"
POLY_VAR = "x"
FIRST_ECUT_LEVEL = 4   # max 5
SPLIT_ECUTS = [
    True, # level 0
    True, # level 1
    True, # level 2
    True, # level 3
    True, # level 4
    True, # level 5
    True  # level 6
    ]

INIT_RANGES_10753 = [
    6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6169, 6169, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010
    ]

RANGES_10753 = [
    # Level 0
    [12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12338, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12972, 12972, 12020, 5409, 12654, 12654, 12020, 5409, 12654, 12654, 12020, 5409],
    # Level 1
    [5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6744, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486, 5631, 5631, 5631, 5631, 5631, 6388, 5455, 6533, 5631, 5476, 6743, 6362, 5631, 6028, 6953, 5466, 5631, 6389, 5511, 5985, 5631, 5491, 5493, 5572, 5631, 5985, 6749, 6278, 5631, 6069, 6268, 5486],
    # Level 2
    [11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13697, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113, 11262, 12019, 11086, 12164, 11262, 12019, 11086, 12164, 11262, 11504, 13696, 11828, 5406, 5409, 5419, 5409, 11262, 11880, 11004, 11557, 5964, 6033, 5963, 5998, 11262, 12054, 13017, 11764, 5945, 6118, 6132, 6113],
    # Level 3
    [22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24783, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24783, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23523, 24782, 23992, 16668, 17428, 16505, 17573, 22524, 23934, 24021, 23321, 11909, 12151, 12095, 12111, 5447, 5450, 5450, 5447, 5409, 5409, 5409, 5409],
    # Level 4
    [5800, 7257, 5641, 7685, 5607, 6350, 7567, 6109, 7562, 5607, 6375, 6230, 5434, 5728, 6047, 7146, 6966, 6500, 6694, 5703, 7278, 6597, 7320, 5574, 7201, 6029, 5443, 6799, 6552, 5496, 7125, 6680, 5800, 7571, 6081, 6441, 6398, 7306, 6668, 7269, 7100, 7409, 6812, 7614, 5437, 7122, 6508, 6104, 6767, 6703, 5796, 6120, 7429, 5908, 7537, 7438, 5757, 6465, 6635, 5872, 6290, 6275, 6080, 6543, 5800, 6350, 6345, 7651, 7278, 6029, 7672, 6335, 5520, 5641, 5931, 6545, 6290, 6968, 5816, 5463, 7309, 7146, 5648, 7391, 5798, 6870, 6348, 7359, 6015, 6593, 5823, 7509, 6900, 6220, 5414, 5389, 5800, 6961, 6596, 7573, 7146, 7653, 5657, 6441, 6196, 7372, 6376, 6545, 5464, 5647, 6358, 6184, 5545, 7684, 6069, 6276, 6468, 7491, 5610, 6668, 7503, 6098, 7066, 7712, 5437, 5595, 6879, 5854, 5800, 7750, 7567, 5607, 5455, 7684, 6634, 6633, 7201, 6777, 7817, 6312, 5801, 6543, 5478, 5591, 6321, 7364, 7659, 7514, 6583, 7412, 5574, 6638, 7501, 5492, 6647, 6473, 6381, 5909, 5578, 6151, 5800, 5981, 6957, 7602, 6668, 6344, 6337, 7306, 6419, 6440, 5612, 7601, 6233, 5763, 6412, 5952, 7415, 6279, 7480, 5856, 5378, 6298, 5934, 6127, 6482, 5413, 5732, 5443, 6944, 6556, 5471, 6469, 5800, 6108, 6289, 6578, 6914, 6335, 5503, 6237, 7083, 7392, 5993, 7382, 6381, 6075, 6733, 6536, 5676, 7331, 5717, 7670, 7373, 6388, 5546, 5865, 6963, 7639, 5760, 7634, 6233, 6801, 6239, 5647, 5800, 5634, 7631, 6896, 6701, 5981, 6556, 7571, 7430, 7573, 6994, 7094, 6737, 6058, 5879, 7152, 6526, 7723, 5671, 7140, 6668, 6441, 6581, 6894, 6196, 6320, 5572, 7409, 6168, 6175, 6108, 5665],
    # Level 5
    [11600, 14828, 11722, 14126, 12005, 13656, 14235, 13378, 14662, 13016, 13187, 13844, 10871, 12850, 12555, 13250, 13733, 13203, 12490, 11823, 14707, 12505, 14857, 13012, 12958, 12494, 12078, 12671, 12842, 11771, 13205, 13223, 5441, 5452, 5441, 5447, 5441, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5435, 5447, 5447, 5447, 5447, 5447, 5447, 5441, 5447, 5447, 5452, 5447, 5447, 5447, 5441, 5447, 5447, 5441, 5447, 5447, 11600, 13311, 12941, 15224, 14424, 13682, 13329, 12776, 11716, 13013, 12307, 13090, 11754, 12615, 12174, 11647, 12854, 14830, 11717, 13667, 12266, 14361, 11958, 14027, 13518, 12691, 12889, 15221, 12337, 11815, 12293, 11243, 5434, 5434, 5434, 5439, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5436, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5439, 5434, 5434, 5434, 5434, 11600, 13731, 14524, 13209, 12123, 14028, 12971, 13939, 13620, 13217, 13429, 13913, 12034, 12306, 11890, 11543, 13736, 13643, 15139, 13370, 11961, 13710, 11508, 12765, 13983, 10905, 12379, 11916, 13325, 12465, 11049, 12620, 5998, 6140, 6172, 6085, 6037, 6140, 6069, 6140, 6124, 6085, 6124, 6140, 6037, 6053, 6037, 5998, 6140, 6124, 6211, 6124, 6037, 6140, 5998, 6069, 6140, 5966, 6053, 6037, 6124, 6053, 5982, 6069, 11600, 11742, 13920, 13474, 13615, 12316, 12059, 13808, 14513, 14965, 12987, 14476, 13118, 12133, 12612, 13688, 12202, 15054, 11388, 14810, 14041, 12829, 12127, 12759, 13159, 13959, 11332, 15043, 12401, 12976, 12347, 11312, 5788, 5791, 5869, 5844, 5844, 5816, 5791, 5869, 5894, 5897, 5841, 5894, 5841, 5791, 5816, 5869, 5791, 5897, 5788, 5897, 5869, 5841, 5791, 5841, 5841, 5869, 5788, 5897, 5816, 5841, 5816, 5788],
    # Level 6
    [5631, 5800, 5631, 5800, 5631, 5800, 5800, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5800, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 5800, 5631, 5631, 5631, 5631, 10875, 10886, 10875, 10886, 10875, 10881, 10881, 10881, 10881, 10881, 10881, 10881, 10869, 10881, 10881, 10881, 10881, 10883, 10881, 10875, 10881, 10881, 10886, 10881, 10881, 10881, 10875, 10886, 10881, 10875, 10881, 10881, 6671, 6921, 6743, 6992, 6849, 6885, 6886, 6814, 6815, 6814, 6779, 6884, 6636, 6779, 6743, 6743, 6849, 6921, 6708, 6779, 6884, 6850, 6850, 6884, 6849, 6778, 6743, 6920, 6778, 6672, 6779, 6742, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5963, 5631, 5631, 5800, 5631, 5631, 5631, 5631, 5800, 5800, 5800, 5631, 5800, 5631, 5631, 5631, 5631, 5631, 5800, 5631, 5800, 5631, 5631, 5631, 5631, 5636, 5631, 5631, 5631, 5631, 5631, 5631, 5631, 11786, 11931, 12041, 11929, 11881, 11956, 11860, 12009, 12018, 11982, 11965, 12034, 11878, 11844, 11853, 11867, 11931, 12021, 11999, 12021, 11906, 11981, 11789, 11910, 11981, 11835, 11841, 11934, 11940, 11894, 11798, 11857, 6765, 6960, 7165, 6978, 6964, 6973, 6953, 6994, 7160, 7161, 6974, 7164, 6955, 6784, 6785, 6956, 6967, 7169, 6976, 7161, 6968, 6976, 6772, 6961, 6985, 6951, 6773, 6982, 6964, 6959, 6768, 6776, 6114, 6116, 6117, 6116, 6115, 6116, 6115, 6117, 6117, 6117, 6116, 6117, 6115, 6115, 6115, 6115, 6116, 6117, 6117, 6117, 6115, 6117, 6114, 6115, 6117, 6114, 6114, 6116, 6116, 6115, 6114, 6115],
    # Level 7
    [11262, 11431, 11431, 11431, 11262, 11431, 11431, 11431, 11431, 11431, 11262, 11431, 11262, 11262, 11262, 11262, 11262, 11600, 11262, 11431, 11262, 11262, 11262, 11262, 11267, 11262, 11262, 11431, 11262, 11262, 11262, 11262, 22661, 22817, 22916, 22815, 22756, 22837, 22741, 22890, 22899, 22863, 22846, 22915, 22747, 22725, 22734, 22748, 22812, 22904, 22880, 22896, 22787, 22862, 22675, 22791, 22862, 22716, 22716, 22820, 22821, 22769, 22679, 22738, 13436, 13881, 13908, 13970, 13813, 13858, 13839, 13808, 13975, 13975, 13753, 14048, 13591, 13563, 13528, 13699, 13816, 14090, 13684, 13940, 13852, 13826, 13622, 13845, 13834, 13729, 13516, 13902, 13742, 13631, 13547, 13518, 12077, 12079, 12080, 12079, 12078, 12079, 12078, 12080, 12080, 12080, 12079, 12080, 12078, 12078, 12078, 12078, 12079, 12080, 12080, 12080, 12078, 12080, 12077, 12078, 12080, 12077, 12077, 12079, 12079, 12078, 12077, 12078, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5409, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5406, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5447, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5419, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409, 5409]
    ]

def join_chunks(xs, glue, n, indent=0):
    return [" " * indent + glue.join(xs[i:i + n]) for i in range(0, len(xs), n)]

def flatten(ll):
    return [i for l in ll for i in l]

def ziplist(l1, l2):
    return list(zip(l1, l2))

def num_to_bits (n, w):
    r = []
    for i in range (w):
        r.append (n % 2)
        n //= 2
    return (r)

def bits_to_num (l):
    r = 0
    for i in range (len(l) - 1, -1, -1):
        r = r * 2 + l[i]
    return (r)

def modP(n, p):
    n = n % p
    return n - p if n > p//2 else n

def ntt_mod(n_expn, prime, mont, root, negacyclic, stage):
    num_rings = 2**stage
    num_bits = n_expn + 1 if negacyclic else n_expn
    res = []
    for i in range (num_rings):
        if negacyclic:
            l = num_to_bits(i, stage)
            l.reverse()
            l.insert(0, 1)
            l = [0 for i in range(num_bits - stage - 1)] + l
        else:
            l = num_to_bits(i, num_bits)
            l.reverse()
        e = bits_to_num(l)
        modulo = (root**e) % prime
        modulo_mont = (modulo * mont) % prime
        modulo = modulo - prime if modulo > prime / 2 else modulo
        modulo_mont = modulo_mont - prime if modulo_mont > prime / 2 else modulo_mont
        res.append(dict(modulo = modulo, mont = modulo_mont))
    return res

def get_ntt_mod_level3to7(stage, i):
    return ntt_mod(n_expn=9, prime=P, mont=MONT, root=ROOT, negacyclic=False, stage=stage)[i]["modulo"]

def make_ymms(ymms, off, num):
    return ["ymm{}_{:x}".format(ymm, off + i) for ymm in ymms for i in range(num)]

def make_eqmod(poly_name, poly_mult, ymms, coefs, mods, mon_per_line=4):
    return "\n".join([
        "eqmod",
        "  {1}({0} * {0})".format(poly_name, "" if poly_mult == 1 else (str(poly_mult) + " * ")),
        "  (",
        " +\n".join(join_chunks([ymms[i] if i == 0 else "{0}*({1}**{2})".format(ymms[i], coefs[i], i) for i in range(len(ymms))], " + ", mon_per_line, indent=4)),
        "  )",
        "  [{}]".format(", ".join(mods))
    ])

def str_range(args, left_rel, right_rel):
    return "  " + ",\n  ".join(join_chunks(["(-({1}))@16 {2} {0}, {0} {3} ({1})@16".format(ymm, r, left_rel, right_rel) for (ymm, r) in args], ", ", 2))

def print_comment(str):
    print("(* {} *)".format(str))

def str_ghost(typed_vars, easserts, rasserts):
    return "\n".join([
             "ghost {} :".format(", ".join(["{0}@{1}".format(var, typ) for (var, typ) in typed_vars])),
             "and [",
             "  {}".format("true" if len(easserts) == 0 else ",\n  ".join(easserts)),
             "] && and [",
             "  {}".format("true" if len(rasserts) == 0 else ",\n  ".join(rasserts)),
             "];"
           ])

def get_algebra(args, expn, mon_per_line=4):
    return [
        make_eqmod(poly_name, poly_mult, ymms, [POLY_VAR if poly_var_mult == 1 else "({0}*{1})".format(poly_var_mult, POLY_VAR)] * len(ymms),
                       [str(P), "{0} - ({1})".format(POLY_VAR, m) if expn == 1 else "{0}**{2} - ({1})".format(POLY_VAR, m, expn)],
                       mon_per_line) for (poly_name, poly_mult, poly_var_mult, ymms, m) in args
    ]

def str_algebra(args, expn, mon_per_line=4):
    return ",\n".join(get_algebra(args, expn, mon_per_line))

def str_main_args ():
    return "\n".join([
        "(* parameters *)\n",
        f"{POLY_VAR}@sint16,",
        ",\n".join(join_chunks([f"{POLY_NAME}{i}@sint16" for i in range(256)], ", ", 8)) + ",",
        ",\n".join(join_chunks(["sint16 f{:03d}".format(i) for i in range(INPUT_NUM)], ", ", 8))])

def str_precondition_algebra ():
    return "\n".join([
        "(* algebraic precondition *)\n",
        "and [",
        ",\n".join(join_chunks(["{0}{1}*{0}{1} = f{2:03d}".format(POLY_NAME, i + off*128, i%8*16 + i//8 + off*128) for off in range(2) for i in range(128)], ", ", 4)),
        "]"
        ])

def str_precondition_range ():
    return "\n".join([
        "(* range precondition *)\n",
        "and [",
        ",\n".join(join_chunks(["(-{0})@16 <=s f{1:03d}, f{1:03d} <=s {0}@16".format(INIT_RANGES_10753[i+off*128], i%8*16 + i//8 + off*128) for off in range(2) for i in range(128)], ", ", 4)),
        "]"])

def str_inits ():
    return "\n".join([
        "(* inits *)\n",
        "\n".join(join_chunks(["mov L0x{:x} f{:03d};".format(INPUT_BASE + 2 * i, i) for i in range(INPUT_NUM)], " ", 4))])

def str_twiddles ():
    _16XP = [ P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P ]
    _16XMONT_PINV = [
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV,
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV
        ]
    _16XMONT = [
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT,
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT
        ]
    _ZETAS = [
   27359,  27359,  27359,  27359,  27359,  27359,  27359,  27359,
   27359,  27359,  27359,  27359,  27359,  27359,  27359,  27359,
     223,    223,    223,    223,    223,    223,    223,    223,
     223,    223,    223,    223,    223,    223,    223,    223,
   -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,
   -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,
    4188,   4188,   4188,   4188,   4188,   4188,   4188,   4188,
    4188,   4188,   4188,   4188,   4188,   4188,   4188,   4188,
   10093,  10093,  10093,  10093,  10093,  10093,  10093,  10093,
  -21094, -21094, -21094, -21094, -21094, -21094, -21094, -21094,
    2413,   2413,   2413,   2413,   2413,   2413,   2413,   2413,
   -3686,  -3686,  -3686,  -3686,  -3686,  -3686,  -3686,  -3686,
     408,    408,    408,    408,    408,    408,    408,    408,
     408,    408,    408,    408,    408,    408,    408,    408,
   -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,
   -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,
   28517,  28517,  28517,  28517,  28517,  28517,  28517,  28517,
  -20856, -20856, -20856, -20856, -20856, -20856, -20856, -20856,
     357,    357,    357,    357,    357,    357,    357,    357,
    -376,   -376,   -376,   -376,   -376,   -376,   -376,   -376
        ]
    _TWIST32 = [
      -6,    -61,   -609,  -6095,     -6,  14237, -31235,  23836,
      -6, -19643,  -2017, -13811,     -6,  27329,  11300,  -7722,
    1018,   -573,   5023,  -3535,   1018,  -1635,   2045,  -2788,
    1018,   1349,   3615,  -5107,   1018,   5313,   5156,   -554,
    4589, -19643,    177,   1767,  24098,   1725, -31418,  -7801,
  -12378,  16236,  31558,    232,  22209,  29644, -18845,  23836,
   -3091,   1349,   2737,  -4889,  -3550,   2237,    326,   1927,
    2982,  -2196,  -2234,   4328,    193,  -5172,  -2973,  -2788,
   17675, -19863,  -2017, -20173,   4547,  -4083, -29364, -21593,
   25543,  11123,    512,  11623,   7429, -21161, -11555, -24129,
    4875,  -5015,   3615,   3891,   4035,   4621,   1356,   4519,
    2503,   2419,    512,   4967,  -4347,  -3241,   5341,  -2113,
   -5126,  14280,  11726, -13811, -20490,  24025, -24037, -13024,
  -27152, -19564,  -8801,  12415,  -6381, -26286, -31418, -23952,
   -4102,   1992,  -1586,  -5107,   3062,  -2087,   4123,   3360,
   -2576,  -1132,  -3169,   1663,   1299,   3410,    326,    624,
   -7033,  -4797,  17571, -20899,  16090,  31583,  16614, -13164,
  -29449, -19454,  17096, -16809, -12476, -26292,  -4090, -12653,
    2695,  -5309,    675,  -4003,    730,   4447,   -794,   5268,
    4855,   2050,   4808,   1111,  -2236,   4428,  -5114,  -4973,
  -12378,   7289,   7356,   8027,  15864, -31467, -24976,  16809,
   22532,   6747, -13012,   4967, -20198,  -4083,  25555, -31497,
    2982,  -2439,  -2884,   3419,  -4616,  -2283,   -400,  -1111,
       4,   2139,   1324,  -1689,  -2790,   4621,    467,   2807,
   14731,  16236,  31290, -14780, -10001,  32351,  -7795,  -9691,
   18363,   5729, -16614,  -4248,   3639,   3346,   4394,  22483,
    1931,  -2196,   -454,  -4540,   3823,   5215,    909,  -5083,
   -2629,     97,    794,   -152,   5175,    274,  -2774,  -2605,
  -16724,  29370,  31558, -12098,  27152,  12336,  19844, -22215,
    5766, -29827,   7856,  23093, -20490,  -3035, -21892,  -8935,
   -2388,  -2374,  -2234,   -834,   2576,   4144,  -2684,    825,
    4742,   3453,   -336,   3125,   3062,   1573,    636,  -2279,
      -6,  -6095,    177, -19863,     -6, -18077,  -7326,  29644,
      -6,   1767,  11726,   7289,     -6, -19661,  11141,  27329,
    1018,  -3535,   2737,  -5015,   1018,  -2205,  -2206,  -5172,
    1018,  -4889,  -1586,  -2439,   1018,   4403,   -635,   5313,
   -5126, -13811,  17571,   7289, -23781, -18918, -11555,   1725,
  -16724,    232,  -1627,  13158,  15840, -18077,  11300,  14237,
   -4102,  -5107,    675,  -2439,   4379,  -1510,   5341,   2237,
   -2388,   4328,   2981,  -4250,   -544,  -2205,   5156,  -1635,
   14731, -14780,  31558, -30144,   3925, -23952,   -780, -20070,
  -14847, -19856,  -8801,  -3699, -11683,  -7722,  -7326,  25482,
    1931,  -4540,  -2234,   2624,    341,    624,   1268,  -2662,
   -4095,   4720,  -3169,   5005,   5213,   -554,  -2206,   1930,
    2316,  22215,  -1627,  11123, -20198,  -6594, -29364,   3346,
   24269, -25652, -31887,   6747,  22209,  15328, -31235,  29644,
     268,   -825,   2981,   2419,  -2790,   4670,   1356,    274,
     205,   5068,   3441,   2139,    193,  -1056,   2045,  -5172,
  -18345,   5120,   7716, -17394,  28224,  24165, -21892,  14329,
    9508,  -4717,  -8246,  32070,  16072,   8161, -18845,  24330,
    -425,   5120,   1572,   2062,  -4544,  -3995,    636,   4601,
    3364,   2963,    970,  -1722,   3784,   2529,  -2973,    778,
  -27152, -19856,    969, -13987,  31217, -13024, -29407,   7880,
    5766,  31924, -17352, -14329, -23781,  23836,  22044,   8758,
   -2576,   4720,   -567,   2909,   1009,   3360,  -2271,  -4408,
    4742,   1204,  -5064,  -4601,   4379,  -2788,  -4580,   -458,
  -28103,  12415,  28541, -32351, -23056, -30467,   8246,  12976,
   26518, -22483,  32076,   3998,   7429, -18918, -14999, -21161,
   -5063,   1663,  -3715,  -5215,   1520,   2813,   -970,   4784,
     918,   2605,  -2740,  -1122,  -4347,  -1510,   -151,  -3241,
   24269,  20661,  17096,  -9343,  15864,   -951,  -1932, -28712,
   20198, -24641,   2395,  26286,  24098,  15517, -11555,  11952,
     205,    693,   4808,   1409,  -4616,  -2487,    116,    -40,
    2790,  -2625,  -2213,  -3410,  -3550,   -355,   5341,   3760
        ]
    _TWISTS4 = [
      -6,   -408, -27359,   1956,   1018,   3688,   -223,  -4188,
      -6,  -1956,  27359,    408,   1018,   4188,    223,  -3688,
      -6,  10093,  -1956,  28517,   1018,   2413,   4188,    357,
      -6,  20856,   -408,  21094,   1018,    376,   3688,   3686,
      -6,  -7033,  10093, -18345,   1018,   2695,   2413,   -425,
      -6, -12476,  21094,  -9508,   1018,  -2236,   3686,  -3364,
      -6, -18345,  28517, -16090,   1018,   -425,    357,   -730,
      -6,  16072,  20856, -12476,   1018,   3784,    376,  -2236
        ]
    twiddles = [
        ("_16XP", _16XP, _16XP_BASE),
        ("_16XMONT_PINV", _16XMONT_PINV, _16XMONT_PINV_BASE),
        ("_16XMONT", _16XMONT, _16XMONT_BASE),
        ("_ZETAS", _ZETAS, _ZETAS_BASE),
        ("_TWIST32", _TWIST32, _TWIST32_BASE),
        ("_TWISTS4", _TWISTS4, _TWISTS4_BASE)
        ]
    res = []
    for (name, arr, base) in twiddles:
        res.append("\n(* {} *)\n".format(name))
        res.append("\n".join(join_chunks(["mov L0x{:x} ({:6d})@sint16;".format(base + 2*i, arr[i]) for i in range (len(arr))], " ", 4)))
    return "\n".join(res)

def str_assertions(pairs):
    equalities = []
    for (ymm1, ymm2) in pairs:
        for i in range(0, 16):
            equalities.append("mulLymm{0}_{2:x} = mulLymm{1}_{2:x}".format(ymm1, ymm2, i))
    return "assert true && and [\n{0}\n];\nassume and [\n{0}\n] && true;".format(",\n".join(join_chunks(equalities, ", ", 2)))

level = 0
off = 0
ecut_id = 0
rcut_id = 0
level0t6_ecut_ids = [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]
level6_rcut_ids = []
level7_ecut_ids = []
level7_rcut_ids = []

def print_instr(instr):
    global level, off, ecut_id, rcut_id, level0t6_ecut_ids, level6_rcut_ids, level7_ecut_ids, level7_rcut_ids

    # ========== Level 0 ==========
    if instr.startswith("(* vmovdqa 0x40(%rsi),%ymm6"):
        print_comment("===== Start of Level {}, off {} =====".format(level, off))
    elif instr.startswith("(* vpaddw %ymm5,%ymm4,%ymm14") and level == 0:
        print(str_assertions([(7, 12), (11, 13)]))
    elif instr.startswith("(* vpaddw %ymm6,%ymm14,%ymm4") and level == 0:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       "{0}*{1}".format(str(LEVEL3_TWIST_INV[(i//32)+4*off]), str(LEVEL7_TWIST_INV[(i//4)%8])),
                       make_ymms([[14, 5], [6, 7], [15, 9], [10, 11]][(i%8)//2], i//8, 1),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1)
        ranges = str_range(
            ziplist(flatten([make_ymms([[14, 5], [6, 7], [15, 9], [10, 11]][i%4], i//4, 1) for i in range(64)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 1 ==========
    elif instr.startswith("(* vpsubw %ymm14,%ymm4,%ymm4") and level == 1:
        print(str_assertions([(4, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm5,%ymm5") and level == 1:
        print(str_assertions([(5, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm6,%ymm6") and level == 1:
        print(str_assertions([(6, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm7,%ymm7") and level == 1:
        print(str_assertions([(7, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm8,%ymm8") and level == 1:
        print(str_assertions([(8, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm13,%ymm13") and level == 1:
        print(str_assertions([(13, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm10,%ymm10") and level == 1:
        print(str_assertions([(10, 14)]))
    elif instr.startswith("(* vpsubw %ymm14,%ymm11,%ymm11") and level == 1:
        print(str_assertions([(11, 14)]))
    elif instr.startswith("(* vpsubw %ymm6,%ymm7,%ymm12") and level == 1:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       str(LEVEL3_TWIST_INV[(i//32)+4*off]),
                       make_ymms([[4], [5], [6], [7], [8], [13], [10], [11]][((i//4)%8)], i//32 * 4, 4),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1)
        ranges = str_range(
            ziplist(flatten([make_ymms([[4], [5], [6], [7], [8], [13], [10], [11]][i%8], i//8 * 4, 4) for i in range(32)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL < level:
            print("cut")
            if SPLIT_ECUTS[level - 1]:
                print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
            else:
                print(",\n".join(algebras))
            print("&& and [")
        elif FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 2 ==========
    elif instr.startswith("(* vpaddw %ymm5,%ymm4,%ymm15") and level == 2:
        print(str_assertions([(7, 12), (13, 9), (11, 14)]))
    elif instr.startswith("(* vpsubw %ymm8,%ymm10,%ymm12") and level == 2:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       str(LEVEL3_TWIST_INV[(i//32)+4*off]),
                       make_ymms([[15, 5], [6, 7], [8, 9], [10, 11]][((i//8)%4)], i//32 * 4, 4),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1)
        ranges = str_range(
            ziplist(flatten([make_ymms([[15, 5], [6, 7], [8, 9], [10, 11]][i%4], i//4 * 4, 4) for i in range(16)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL < level:
            print("cut")
            if SPLIT_ECUTS[level - 1]:
                print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
            else:
                print(",\n".join(algebras))
            print("&& and [")
        elif FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 3 ==========
    elif instr.startswith("(* vpaddw %ymm6,%ymm15,%ymm4") and level == 3:
        print(str_assertions([(10, 12), (11, 13)]))
    elif instr.startswith("(* vmovdqa 0x80(%rdx),%ymm13") and level == 3:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       str(LEVEL3_TWIST_INV[(i//32)+4*off]),
                       make_ymms([[4, 15, 6, 7], [8, 9, 10, 11]][((i//16)%2)], i//32 * 4, 4),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1)
        ranges = str_range(
            ziplist(flatten([make_ymms([[4, 15, 6, 7], [8, 9, 10, 11]][i%2], i//2 * 4, 4) for i in range(8)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL < level:
            print("cut")
            if SPLIT_ECUTS[level - 1]:
                print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
            else:
                print(",\n".join(algebras))
            print("&& and [")
        elif FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 4 ==========
    elif instr.startswith("(* vpsubw %ymm12,%ymm4,%ymm4") and level == 4:
        print(str_assertions([(4, 12)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm12,%ymm12") and level == 4:
        print(str_assertions([(12, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm5,%ymm5") and level == 4:
        print(str_assertions([(5, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm13,%ymm13") and level == 4:
        print(str_assertions([(13, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm14,%ymm14") and level == 4:
        print(str_assertions([(14, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm8,%ymm8") and level == 4:
        print(str_assertions([(8, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm9,%ymm9") and level == 4:
        print(str_assertions([(9, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm10,%ymm10") and level == 4:
        print(str_assertions([(10, 7)]))
    elif instr.startswith("(* vpsubw %ymm7,%ymm11,%ymm11") and level == 4:
        print(str_assertions([(11, 7)]))
    elif (instr.startswith("(* vpermq $0x4e,0x200(%rdx),%ymm2") or instr.startswith("(* vpermq $0x4e,0x180(%rdx),%ymm2")) and level == 4:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       1,
                       make_ymms([[3, 5, 7, 9], [4, 6, 8, 10]][((i//32)%2)], i//64 * 8, 8),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1,
            mon_per_line=8)
        ranges = str_range(
            ziplist(flatten([make_ymms([[3, 5, 7, 9], [4, 6, 8, 10]][i%2], i//2 * 8, 8) for i in range(4)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL < level:
            print("cut")
            if SPLIT_ECUTS[level - 1]:
                print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
            else:
                print(",\n".join(algebras))
            print("&& and [")
        elif FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 5 ==========
    elif instr.startswith("(* vpsubw %ymm4,%ymm12,%ymm4") and level == 5:
        print(str_assertions([(4, 12), (6, 13), (8, 14), (10, 15)]))
    elif (instr.startswith("(* vmovdqa 0x1c0(%rdx),%ymm2") or instr.startswith("(* vmovdqa 0x140(%rdx),%ymm2")) and level == 5:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       1,
                       make_ymms([[11, 3, 7, 4], [5, 9, 6, 10]][i//64], 0, 16),
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1,
            mon_per_line=16)
        ranges = str_range(
            ziplist(flatten([make_ymms([[11, 3, 7, 4], [5, 9, 6, 10]][i], 0, 16) for i in range(2)]), RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        summary_ecut_id = ecut_id
        if FIRST_ECUT_LEVEL <= level:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        else:
            print("\n(* rcut {0} *)\n".format(rcut_id))
        if FIRST_ECUT_LEVEL < level:
            print("cut")
            if SPLIT_ECUTS[level - 1]:
                print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
            else:
                print(",\n".join(algebras))
            print("&& and [")
        elif FIRST_ECUT_LEVEL == level:
            print("cut and [")
            print(",\n".join(algebras))
            print("]{0} && and [".format("" if off == 0 else " prove with [precondition]"))
        else:
            print("rcut and [")
        print(ranges)
        print("];\n")
        if FIRST_ECUT_LEVEL <= level:
            ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        if FIRST_ECUT_LEVEL <= level and SPLIT_ECUTS[level]:
            for i in range(128):
                print("\n(* ecut {0} *)\n".format(ecut_id))
                print("ecut")
                print(algebras[i])
                print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
                level0t6_ecut_ids[level][off].append(ecut_id)
                ecut_id = ecut_id + 1
        level = level + 1
        print_comment("===== Start of level {}, off {} =====".format(level, off))

    # ========== Level 6 ==========
    elif instr.startswith("(* vpsubw %ymm5,%ymm12,%ymm5") and level == 6:
        print(str_assertions([(5, 12), (9, 13), (6, 14), (10, 15)]))
    elif instr.startswith("(* vpsubw %ymm13,%ymm11,%ymm11") and level == 6:
        print(str_assertions([(13, 11)]))
    elif instr.startswith("(* vpsubw %ymm13,%ymm3,%ymm3") and level == 6:
        print(str_assertions([(13, 3)]))
    elif (instr.startswith("(* vmovdqa 0x140(%rsi),%ymm6") or instr.startswith("(* vmovdqa (%rdi),%ymm4")) and level == 6:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        algebras = get_algebra(
            args=[("{0}{1}".format(POLY_NAME, i + off*128),
                       2**(level+1),
                       1,
                       ["L0x{:x}".format(ANS_BASE + 2 * (j + off*128)) for j in range(128)],
                       modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for i in range(128)],
            expn=1,
            mon_per_line=32)
        ranges = str_range(
            ziplist(["L0x{:x}".format(ANS_BASE + 2 * (j + off*128)) for j in range(128)], RANGES_10753[level][(off*128):(off*128+128)]),
            "<=s",
            "<=s")
        level6_rcut_ids.append(rcut_id)
        summary_ecut_id = ecut_id
        print("cut")
        if SPLIT_ECUTS[level - 1]:
            print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i], level0t6_ecut_ids[level - 1][off][i]) for i in range(128)]))
        else:
            print(",\n".join(algebras))
        print("&& and [")
        print(ranges)
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        for i in range(128):
            print("\n(* ecut {0} *)\n".format(ecut_id))
            print("ecut")
            print(algebras[i])
            print("prove with [cuts [{0}]];\n".format(summary_ecut_id))
            level0t6_ecut_ids[level][off].append(ecut_id)
            ecut_id = ecut_id + 1
        if off == 0:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
            print("cut true && and [")
            print(",\n".join(join_chunks(["(-{0})@16 <=s f{1:03d}, f{1:03d} <=s {0}@16".format(INIT_RANGES_10753[i+128], i%8*16 + i//8 + 128) for i in range(128)], ", ", 4)))
            print("] prove with [precondition];\n")
            ecut_id = ecut_id + 1
            rcut_id = rcut_id + 1
        if off == 1:
            # Summarize ranges after level 6 (off=0 and off=1)
            print("\n(* rcut {0} *)\n".format(rcut_id))
            print("rcut and [")
            print(str_range(
                ziplist(["L0x{:x}".format(ANS_BASE + 2 * (j + off*128)) for off in range(2) for j in range(128)], RANGES_10753[level]),
                "<=s",
                "<=s"))
            print("] prove with [cuts {0}];\n".format(level6_rcut_ids))
            rcut_id = rcut_id + 1
        (level, off) = (0, 1) if off == 0 else (7, 0)
        print_comment("===== Start of Level {}, off {} =====".format(level, off))

    # ========== Level 7 ==========
    elif instr.startswith("(* vpsubw %ymm8,%ymm12,%ymm8") and level == 7:
        print(str_assertions([(8, 12), (9, 13), (10, 14), (11, 15)]))
    elif (instr.startswith("(* vmovdqa 0x80(%rdi),%ymm4") or instr.startswith("(* #! <- SP = 0x7fffffff9a78 *)")) and level == 7:
        print_comment("===== End of Level {}, off {} =====".format(level, off))
        off = off + 1
        if off == 1:
            print_comment("===== Start of Level {}, off {} =====".format(level, off))
        elif off == 2:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
            algebras = get_algebra(
                args=[("{0}{1}".format(POLY_NAME, i + off*128),
                           2**(level+1),
                           1,
                           ["L0x{:x}".format(ANS_BASE + 2 * j) for j in range(256)],
                           modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for off in range(2) for i in range(128)],
                           expn=1,
                mon_per_line=64)
            ranges = str_range(
                ziplist(["L0x{:x}".format(ANS_BASE + 2 * j) for j in range(256)], RANGES_10753[level]),
                "<=s",
                "<=s")
            level7_ecut_ids.append(ecut_id)
            level7_rcut_ids.append(rcut_id)
            print("cut")
            print(",\n".join(["{0} prove with [cuts [{1}]]".format(algebras[i+off*128], level0t6_ecut_ids[level - 1][off][i]) for off in range(2) for i in range(128)]))
            print("&& and [")
            print(ranges)
            print("];\n")
            ecut_id = ecut_id + 1
            rcut_id = rcut_id + 1

    print(instr)

def str_post():
    algebras = get_algebra(
        args=[("{0}{1}".format(POLY_NAME, i + off*128),
                   2**(level+1),
                   1,
                   ["L0x{:x}".format(ANS_BASE + 2 * j) for j in range(256)],
                   modP(LEVEL3_TWIST[i//32 + off*4] * LEVEL7_TWIST[(i//4)%8] * get_ntt_mod_level3to7(2, i%4), P)) for off in range(2) for i in range(128)],
                   expn=1,
        mon_per_line=64)
    ranges = str_range(ziplist(["L0x{:x}".format(ANS_BASE + 2 * j) for j in range(256)], RANGES_10753[level]),
                      "<=s",
                      "<=s")
    return "\n".join([
        "\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id),
        "{",
        "and [",
        ",\n".join(algebras),
        "] && and [",
        ranges,
        "]",
        "}"
    ])

def main():
    parser = ArgumentParser()
    parser.add_argument("cl_file", help="the nttmul_poly_ntt cl file to be processed")
    args = parser.parse_args()
    with open(args.cl_file) as f:
        # ========== proc main ==========
        print('proc main(\n')
        print(str_main_args())
        print('\n) =\n')
        # ========== pre-condition ==========
        print('{\n')
        print(str_precondition_algebra())
        print("\n&&\n")
        print(str_precondition_range())
        print('\n}\n')
        # ========== inits ==========
        print(str_inits())
        print(str_twiddles())
        print()
        # ========== program ==========
        print("\n\n#===== program start =====\n\n")
        for line in f.readlines():
            print_instr(line.strip())
        # ========== post-condition ==========
        print(str_post())


if __name__ == "__main__":
  main()
