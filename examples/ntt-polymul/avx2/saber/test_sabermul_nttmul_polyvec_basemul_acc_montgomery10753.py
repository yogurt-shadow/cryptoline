#!/usr/bin/env python3

# 1. to_zdsl.py --no-main --no-pre --no-post test_sabermul_nttmul_polyvec_basemul_acc_montgomery.gas > test_sabermul_nttmul_polyvec_basemul_acc_montgomery_preprocessed.cl
# 2. ./test_sabermul_nttmul_polyvec_basemul_acc_montgomery10753.py test_sabermul_nttmul_polyvec_basemul_acc_montgomery_preprocessed.cl > test_sabermul_nttmul_polyvec_basemul_acc_montgomery10753.cl

import re, math
from argparse import ArgumentParser

P = 10753
PINV = -10751
F = 2536
F_PINV = -1560
_16XP_BASE = 0x555555560700
_16XP_NUM = 16
_16XPINV_BASE = 0x555555560720
_16XPINV_NUM = 16
_16XF_PINV_BASE = 0x5555555607c0
_16XF_PINV_NUM = 16
_16XF_BASE = 0x5555555607e0
_16XF_NUM = 16
KEM_K = 3
INPUT_NUM = 256
INPUT_TYPE = "sint16"
INPUT1_VAR = ["f0", "f1", "f2"]
INPUT2_VAR = ["g0", "g1", "g2"]
INPUT1_BASE = [0x7fffffffba40, 0x7fffffffbc40, 0x7fffffffbe40]
INPUT2_BASE = [0x7fffffffb440, 0x7fffffffb640, 0x7fffffffb840]
INPUT1_RANGE = [22524, 22524, 16668, 16668, 24561, 24561, 16500, 16500, 24108, 24108, 17809, 17809, 24496, 24496, 17712, 17712, 23779, 23779, 17305, 17305, 25170, 25170, 17755, 17755, 22299, 22299, 16530, 16530, 24090, 24090, 16550, 16550, 22524, 22524, 16668, 16668, 24594, 24594, 16497, 16497, 24095, 24095, 17796, 17796, 24442, 24442, 17642, 17642, 23733, 23733, 17255, 17255, 25138, 25138, 17723, 17723, 22299, 22299, 16530, 16530, 24110, 24110, 16544, 16544, 22524, 22524, 16668, 16668, 24521, 24521, 16505, 16505, 24118, 24118, 17822, 17822, 24511, 24511, 17748, 17748, 23786, 23786, 17333, 17333, 25203, 25203, 17810, 17810, 22281, 22281, 16530, 16530, 24045, 24045, 16556, 16556, 22524, 22524, 16668, 16668, 24711, 24711, 16505, 16505, 24344, 24344, 17992, 17992, 24563, 24563, 17783, 17783, 23903, 23903, 17358, 17358, 25230, 25230, 17842, 17842, 22306, 22306, 16535, 16535, 24174, 24174, 16562, 16562, 22524, 22524, 16668, 16668, 24571, 24571, 16497, 16497, 24151, 24151, 17802, 17802, 24467, 24467, 17677, 17677, 23769, 23769, 17280, 17280, 25185, 25185, 17739, 17739, 22296, 22296, 16530, 16530, 24175, 24175, 16550, 16550, 22524, 22524, 16668, 16668, 24595, 24595, 16497, 16497, 24094, 24094, 17795, 17795, 24481, 24481, 17642, 17642, 23738, 23738, 17255, 17255, 25154, 25154, 17723, 17723, 22299, 22299, 16530, 16530, 24117, 24117, 16544, 16544, 22524, 22524, 16668, 16668, 24531, 24531, 16497, 16497, 24118, 24118, 17794, 17794, 24361, 24361, 17642, 17642, 23731, 23731, 17255, 17255, 25093, 25093, 17723, 17723, 22291, 22291, 16530, 16530, 24111, 24111, 16544, 16544, 22524, 22524, 16668, 16668, 24523, 24523, 16497, 16497, 24098, 24098, 17799, 17799, 24444, 24444, 17676, 17676, 23744, 23744, 17280, 17280, 25085, 25085, 17739, 17739, 22286, 22286, 16530, 16530, 24052, 24052, 16544, 16544]
INPUT2_RANGE = [22524, 22524, 16668, 16668, 24516, 24516, 16497, 16497, 24098, 24098, 17802, 17802, 24445, 24445, 17677, 17677, 23736, 23736, 17280, 17280, 25078, 25078, 17739, 17739, 22281, 22281, 16530, 16530, 24039, 24039, 16550, 16550, 22524, 22524, 16668, 16668, 24517, 24517, 16497, 16497, 24088, 24088, 17792, 17792, 24409, 24409, 17641, 17641, 23708, 23708, 17252, 17252, 25046, 25046, 17707, 17707, 22281, 22281, 16530, 16530, 24052, 24052, 16544, 16544, 22524, 22524, 16668, 16668, 24509, 24509, 16500, 16500, 24079, 24079, 17808, 17808, 24458, 24458, 17711, 17711, 23749, 23749, 17305, 17305, 25079, 25079, 17755, 17755, 22276, 22276, 16530, 16530, 24013, 24013, 16550, 16550, 22524, 22524, 16668, 16668, 24532, 24532, 16500, 16500, 24142, 24142, 17818, 17818, 24466, 24466, 17747, 17747, 23779, 23779, 17308, 17308, 25160, 25160, 17794, 17794, 22291, 22291, 16530, 16530, 24123, 24123, 16556, 16556, 22524, 22524, 16668, 16668, 24525, 24525, 16497, 16497, 24096, 24096, 17797, 17797, 24428, 24428, 17676, 17676, 23727, 23727, 17255, 17255, 25097, 25097, 17723, 17723, 22291, 22291, 16530, 16530, 24064, 24064, 16544, 16544, 22524, 22524, 16668, 16668, 24551, 24551, 16497, 16497, 24088, 24088, 17792, 17792, 24425, 24425, 17641, 17641, 23713, 23713, 17252, 17252, 25111, 25111, 17707, 17707, 22281, 22281, 16530, 16530, 24065, 24065, 16544, 16544, 22524, 22524, 16668, 16668, 24486, 24486, 16497, 16497, 24090, 24090, 17791, 17791, 24338, 24338, 17641, 17641, 23711, 23711, 17252, 17252, 25037, 25037, 17707, 17707, 22273, 22273, 16530, 16530, 24057, 24057, 16544, 16544, 22524, 22524, 16668, 16668, 24510, 24510, 16497, 16497, 24065, 24065, 17794, 17794, 24389, 24389, 17642, 17642, 23698, 23698, 17255, 17255, 25043, 25043, 17723, 17723, 22281, 22281, 16530, 16530, 24026, 24026, 16544, 16544]
OUTPUT_NUM = 256
OUTPUT_BASE = 0x7fffffffc040
OUTPUT_RANGE = [6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6169, 6169, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6486, 6486, 6010, 6010, 6327, 6327, 6010, 6010, 6327, 6327, 6010, 6010]

def join_chunks(xs, glue, n, indent=0):
    return [" " * indent + glue.join(xs[i:i + n]) for i in range(0, len(xs), n)]

def str_assertions(pairs):
    equalities = []
    for (ymm1, ymm2) in pairs:
        for i in range(0, 16):
            equalities.append("mulLymm{0}_{2:x} = mulLymm{1}_{2:x}".format(ymm1, ymm2, i))
    return "assert true && and [\n{0}\n];\nassume and [\n{0}\n] && true;".format(",\n".join(join_chunks(equalities, ", ", 2)))

def str_main_args():
    return ", ".join(["{0}_{1:03d}@{2}".format(var, i, INPUT_TYPE) for k in range(KEM_K) for var in [INPUT1_VAR[k], INPUT2_VAR[k]] for i in range(INPUT_NUM)])

def str_precondition_algebra():
    return "true"

def str_precondition_range():
    return "\n".join([
        "and [",
        ",\n".join(join_chunks(["(-{0})@16 <s {1}_{2:03d}, {1}_{2:03d} <s {0}@16".format(ir[i], ivar, i)
                                    for k in range(KEM_K) for (ivar, ir) in [(INPUT1_VAR[k], INPUT1_RANGE), (INPUT2_VAR[k], INPUT2_RANGE)] for i in range(INPUT_NUM)], ", ", 2, 2)),
       "]"])

def str_inits():
    return "\n".join(
        ["(* inits *)",] +
        ["\n".join(join_chunks(["mov L0x{0:x} {1}_{2:03d};".format(base + i * 2, var, i)], " ", 4))
             for k in range(KEM_K) for (base, var) in [(INPUT1_BASE[k], INPUT1_VAR[k]), (INPUT2_BASE[k], INPUT2_VAR[k])] for i in range(INPUT_NUM)] +
        ["\n(* {} *)\n".format(name) + "\n".join(join_chunks(["mov L0x{0:x} ({1})@{2};".format(base + i * 2, val, INPUT_TYPE) for i in range(num)], " ", 4))
             for (name, base, num, val) in [ ("_16XP", _16XP_BASE, _16XP_NUM, P), ("_16XPINV", _16XPINV_BASE, _16XPINV_NUM, PINV),
                                             ("_16XF_PINV", _16XF_PINV_BASE, _16XF_PINV_NUM, F_PINV), ("_16XF", _16XF_BASE, _16XF_NUM, F)]]
    )

def print_instr(instr):
    if instr.startswith("(* vpaddw %ymm8,%ymm4,%ymm4"):
        print(str_assertions([(3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]))
    elif instr.startswith("(* vpsubw %ymm5,%ymm3,%ymm3"):
        print(str_assertions([(5, 3)]))
    elif instr.startswith("(* vpsubw %ymm5,%ymm4,%ymm4"):
        print(str_assertions([(5, 4)]))

    print(instr)

def str_postcondition_algebra():
    def muladd(vpairs):
        return "(" + (" + ".join(["{0}_{2:03d} * {1}_{2:03d}".format(v1, v2, i) for (v1, v2, i) in vpairs])) + ")"
    return "\n".join([
        "and [",
        "  " + ",\n  ".join(["eqmod ({0}) (2**8 * L0x{1:x}) [{2}]".format(muladd([(INPUT1_VAR[k], INPUT2_VAR[k], i) for k in range(KEM_K)]), OUTPUT_BASE + i * 2, P)  for i in range(OUTPUT_NUM)]),
        "]"
    ])

def str_postcondition_range():
    return "\n".join([
        "and [",
        ",\n".join(join_chunks(["(-{0})@16 <s L0x{1:x}, L0x{1:x} <s {0}@16".format(OUTPUT_RANGE[i]*3, OUTPUT_BASE + i * 2)
                                    for i in range(OUTPUT_NUM)], ", ", 2, 2)),
       "]"])

def main():
    parser = ArgumentParser()
    parser.add_argument("cl_file", help="the nttmul_poly_basemul_montgomery cl file to be processed")
    args = parser.parse_args()
    with open(args.cl_file) as f:
        # ========== proc main ==========
        print('proc main(\n')
        print(str_main_args())
        print('\n) =\n')
        # ========== pre-condition ==========
        print('{\n')
        print("(* algebraic precondition *)\n")
        print(str_precondition_algebra())
        print("\n&&\n")
        print("(* range precondition *)\n")
        print(str_precondition_range())
        print('\n}\n')
        # ========== inits ==========
        print(str_inits())
        print()
        # ========== program ==========
        print("\n\n#===== program start =====\n\n")
        for line in f.readlines():
            print_instr(line.strip())
        # ========== post-condition ==========
        print('{\n')
        print("(* algebraic postcondition *)\n")
        print(str_postcondition_algebra())
        print("\n&&\n")
        print("(* range postcondition *)\n")
        print(str_postcondition_range())
        print('\n}')

if __name__ == "__main__":
  main()
