#!/usr/bin/env python3

# 1. to_zdsl.py --no-main --no-pre --no-post nttmul_poly_ntt.gas > nttmul_poly_ntt_preprocessed.cl
# 2. ./nttmul_poly_ntt.py nttmul_poly_ntt_preprocessed.cl > nttmul_poly_ntt.cl

# q1 = 7681, root1 = 62, 2^(-16)%7681 = 900
# q2 = 10753, root = 10

# Inputs:
# %rdx = 0x55555555f7c0
# L0x555555560700-L0x55555556071e (_16XP = 7681 or 10753, num = 16)
# L0x555555560780-L0x55555556079e (_16XMONT_PINV = -9 or -6, _16XMONT * P^-1 mod 2^16, num = 16)
# L0x5555555607a0-L0x5555555607be (_16XMONT = -3593 or 1018, 2^16 mod P, num = 16)
# L0x555555560800-L0x55555556093e (_ZETAS, num = 160)
# L0x555555560940-L0x555555560d3e (_TWIST32, num = 512)
# L0x555555560d40-L0x555555560dbe (_TWISTS4, num = 64)
# L0x7fffffffaee0-L0x7fffffffb0de (input coefficients, num = 256)
# L0x7fffffffb4e0-L0x7fffffffb6de (output coefficients, num = 256)

import re, math
from argparse import ArgumentParser

ORIGINAL_N = 256
ORIGINAL_P = 8192
P = 10753
PINV = -10751  # p^-1 mod 2^16
MONT = 1018    # 2^16 mod p
MONT_PINV = -6 # (MONT * p^-1) mod 2^16
ROOT = 10      # 10**256 = -1 (mod 10753)

_16XP_BASE = 0x555555560700
_16XP_NUM = 16
_16XMONT_PINV_BASE = 0x555555560780
_16XMONT_PINV_NUM = 16
_16XMONT_BASE = 0x5555555607a0
_16XMONT_NUM = 16
_ZETAS_BASE = 0x555555560800
_ZETAS_NUM = 160
_TWIST32_BASE = 0x555555560940
_TWIST32_NUM = 512
_TWISTS4_BASE = 0x555555560d40
_TWISTS4_NUM = 64
INPUT_BASE = 0x7fffffffaee0
INPUT_NUM = 256
ANS_BASE = 0x7fffffffb4e0
ANS_NUM = 256
LEVEL3_TWIST_BASE = [10, 8417, 3223, 6269, 1000, 2966, 10463, 3226]
LEVEL3_TWIST_INV = [3226, 10463, 2966, 1000, 6269, 3223, 8417, 10]
LEVEL7_TWIST_BASE = [1, 321, 9097, 7331, 1154, 2047, 3010, 8116]
LEVEL7_TWIST_INV = [1, 67, 7331, 9097, 8116, 3010, 2047, 1154]
POLY_NAME = "inp_poly"
POLY_VAR = "x"

# The ranges are obtained from test_range256n
RANGES_10753_4096 = [
  #0

  #1

  #2
  [21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21320, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 21625, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20812, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822, 20822],
  #3
  [11866, 12576, 12563, 13141, 12675, 11935, 12510, 13419, 12906, 13058, 12044, 13441, 12790, 12131, 11957, 12650, 11866, 12576, 12563, 13141, 12675, 11935, 12510, 13419, 12906, 13058, 12044, 13441, 12790, 12131, 11957, 12650, 11242, 12701, 11652, 13297, 13348, 12114, 10972, 11704, 13294, 13906, 11443, 13801, 12550, 12718, 12910, 12051, 11242, 12701, 11652, 13297, 13348, 12114, 10972, 11704, 13294, 13906, 11443, 13801, 12550, 12718, 12910, 12051, 12583, 11842, 13400, 12750, 11718, 12126, 11881, 12722, 12420, 11573, 11172, 12412, 13111, 12205, 11863, 12290, 12583, 11842, 13400, 12750, 11718, 12126, 11881, 12722, 12420, 11573, 11172, 12412, 13111, 12205, 11863, 12290, 11722, 13920, 14076, 12527, 11712, 13912, 11824, 12540, 13834, 11871, 13353, 12258, 12147, 12336, 11055, 11670, 11722, 13920, 14076, 12527, 11712, 13912, 11824, 12540, 13834, 11871, 13353, 12258, 12147, 12336, 11055, 11670, 11132, 13476, 12082, 12956, 12829, 13825, 11126, 12413, 12915, 12686, 12600, 13200, 10889, 11211, 13170, 11942, 11132, 13476, 12082, 12956, 12829, 13825, 11126, 12413, 12915, 12686, 12600, 13200, 10889, 11211, 13170, 11942, 12423, 12699, 11610, 13806, 12428, 12244, 13063, 12769, 11312, 11810, 11441, 13066, 13061, 12967, 11201, 10848, 12423, 12699, 11610, 13806, 12428, 12244, 13063, 12769, 11312, 11810, 11441, 13066, 13061, 12967, 11201, 10848, 12022, 13207, 11523, 12037, 12982, 12475, 13250, 13507, 12305, 13057, 12574, 12678, 11679, 13156, 12495, 12459, 12022, 13207, 11523, 12037, 12982, 12475, 13250, 13507, 12305, 13057, 12574, 12678, 11679, 13156, 12495, 12459, 12190, 12544, 11838, 12634, 12289, 12316, 13573, 11403, 13734, 11382, 11467, 12342, 11911, 11175, 13052, 13533, 12190, 12544, 11838, 12634, 12289, 12316, 13573, 11403, 13734, 11382, 11467, 12342, 11911, 11175, 13052, 13533],
  #4
  [17327, 18037, 18024, 18602, 18136, 17396, 17971, 18880, 17327, 18037, 18024, 18602, 18136, 17396, 17971, 18880, 17280, 17990, 17972, 18560, 18089, 17344, 17919, 18833, 17280, 17990, 17972, 18560, 18089, 17344, 17919, 18833, 16703, 18162, 17113, 18758, 18809, 17575, 16433, 17165, 16703, 18162, 17113, 18758, 18809, 17575, 16433, 17165, 16656, 18120, 17058, 18716, 18762, 17528, 16386, 17113, 16656, 18120, 17058, 18716, 18762, 17528, 16386, 17113, 18044, 17303, 18861, 18211, 17179, 17587, 17342, 18183, 18044, 17303, 18861, 18211, 17179, 17587, 17342, 18183, 17997, 17251, 18806, 18159, 17132, 17535, 17290, 18131, 17997, 17251, 18806, 18159, 17132, 17535, 17290, 18131, 17183, 19381, 19537, 17988, 17173, 19373, 17285, 18001, 17183, 19381, 19537, 17988, 17173, 19373, 17285, 18001, 17141, 19329, 19490, 17936, 17121, 19321, 17230, 17949, 17141, 19329, 19490, 17936, 17121, 19321, 17230, 17949, 16593, 18937, 17543, 18417, 18290, 19286, 16587, 17874, 16593, 18937, 17543, 18417, 18290, 19286, 16587, 17874, 16546, 18890, 17496, 18370, 18235, 19231, 16540, 17822, 16546, 18890, 17496, 18370, 18235, 19231, 16540, 17822, 17884, 18160, 17071, 19267, 17889, 17705, 18524, 18230, 17884, 18160, 17071, 19267, 17889, 17705, 18524, 18230, 17829, 18108, 17016, 19220, 17842, 17658, 18469, 18175, 17829, 18108, 17016, 19220, 17842, 17658, 18469, 18175, 17483, 18668, 16984, 17498, 18443, 17936, 18711, 18968, 17483, 18668, 16984, 17498, 18443, 17936, 18711, 18968, 17431, 18621, 16937, 17451, 18391, 17889, 18664, 18921, 17431, 18621, 16937, 17451, 18391, 17889, 18664, 18921, 17651, 18005, 17299, 18095, 17750, 17777, 19034, 16864, 17651, 18005, 17299, 18095, 17750, 17777, 19034, 16864, 17609, 17950, 17244, 18043, 17698, 17722, 18987, 16822, 17609, 17950, 17244, 18043, 17698, 17722, 18987, 16822],
  #5
  [22958, 23668, 23655, 24233, 22958, 23668, 23655, 24233, 22759, 23464, 23456, 24034, 22759, 23464, 23456, 24034, 23809, 24347, 24338, 25100, 23809, 24347, 24338, 25100, 23634, 24308, 24325, 24983, 23634, 24308, 24325, 24983, 22334, 23793, 22744, 24389, 22334, 23793, 22744, 24389, 22135, 23589, 22537, 24185, 22135, 23589, 22537, 24185, 23195, 24480, 23401, 25070, 23195, 24480, 23401, 25070, 23079, 24472, 23339, 25033, 23079, 24472, 23339, 25033, 23675, 22934, 24492, 23842, 23675, 22934, 24492, 23842, 23471, 22730, 24288, 23643, 23471, 22730, 24288, 23643, 24351, 23611, 25162, 24688, 24351, 23611, 25162, 24688, 24314, 23603, 25124, 24513, 24314, 23603, 25124, 24513, 22814, 25012, 25168, 23619, 22814, 25012, 25168, 23619, 22610, 24818, 24964, 23420, 22610, 24818, 24964, 23420, 23495, 25876, 25845, 24302, 23495, 25876, 25845, 24302, 23458, 25753, 25807, 24289, 23458, 25753, 25807, 24289, 22224, 24568, 23174, 24048, 22224, 24568, 23174, 24048, 22025, 24374, 22967, 23844, 22025, 24374, 22967, 23844, 23077, 25436, 23841, 24734, 23077, 25436, 23841, 24734, 22934, 25314, 23778, 24723, 22934, 25314, 23778, 24723, 23515, 23791, 22702, 24898, 23515, 23791, 22702, 24898, 23311, 23587, 22503, 24699, 23311, 23587, 22503, 24699, 24194, 24470, 23550, 25750, 24194, 24470, 23550, 25750, 24182, 24460, 23404, 25574, 24182, 24460, 23404, 25574, 23114, 24299, 22615, 23129, 23114, 24299, 22615, 23129, 22915, 24095, 22416, 22935, 22915, 24095, 22416, 22935, 23964, 24986, 23474, 23992, 23964, 24986, 23474, 23992, 23819, 24974, 23326, 23874, 23819, 24974, 23326, 23874, 23282, 23636, 22930, 23726, 23282, 23636, 22930, 23726, 23078, 23432, 22736, 23519, 23078, 23432, 22736, 23519, 23971, 24313, 23786, 24392, 23971, 24313, 23786, 24392, 23961, 24302, 23667, 24326, 23961, 24302, 23667, 24326],
  #6
  [11262, 11262, 11262, 11262, 11081, 13480, 11081, 13480, 12400, 11708, 12400, 11708, 12303, 12193, 12303, 12193, 11896, 11883, 11896, 11883, 12341, 12829, 12341, 12829, 11124, 11175, 11124, 11175, 11136, 12954, 11136, 12954, 11262, 11262, 11262, 11262, 11078, 13516, 11078, 13516, 12387, 11708, 12387, 11708, 12233, 12209, 12233, 12209, 11846, 11887, 11846, 11887, 12309, 12829, 12309, 12829, 11124, 11175, 11124, 11175, 11130, 12980, 11130, 12980, 11262, 11262, 11262, 11262, 11086, 13435, 11086, 13435, 12413, 11705, 12413, 11705, 12339, 12172, 12339, 12172, 11924, 11862, 11924, 11862, 12396, 12807, 12396, 12807, 11124, 11157, 11124, 11157, 11142, 12903, 11142, 12903, 11262, 11262, 11262, 11262, 11086, 13625, 11086, 13625, 12583, 11761, 12583, 11761, 12374, 12189, 12374, 12189, 11949, 11954, 11949, 11954, 12428, 12802, 12428, 12802, 11129, 11177, 11129, 11177, 11148, 13026, 11148, 13026, 11262, 11262, 11262, 11262, 11078, 13493, 11078, 13493, 12393, 11758, 12393, 11758, 12268, 12199, 12268, 12199, 11871, 11898, 11871, 11898, 12325, 12860, 12325, 12860, 11124, 11172, 11124, 11172, 11136, 13039, 11136, 13039, 11262, 11262, 11262, 11262, 11078, 13517, 11078, 13517, 12386, 11708, 12386, 11708, 12233, 12248, 12233, 12248, 11846, 11892, 11846, 11892, 12309, 12845, 12309, 12845, 11124, 11175, 11124, 11175, 11130, 12987, 11130, 12987, 11262, 11262, 11262, 11262, 11078, 13453, 11078, 13453, 12385, 11733, 12385, 11733, 12233, 12128, 12233, 12128, 11846, 11885, 11846, 11885, 12309, 12784, 12309, 12784, 11124, 11167, 11124, 11167, 11130, 12981, 11130, 12981, 11262, 11262, 11262, 11262, 11078, 13445, 11078, 13445, 12390, 11708, 12390, 11708, 12267, 12177, 12267, 12177, 11871, 11873, 11871, 11873, 12325, 12760, 12325, 12760, 11124, 11162, 11124, 11162, 11130, 12922, 11130, 12922],
  #7
  [22524, 22524, 16668, 16668, 24561, 24561, 16500, 16500, 24108, 24108, 17809, 17809, 24496, 24496, 17712, 17712, 23779, 23779, 17305, 17305, 25170, 25170, 17755, 17755, 22299, 22299, 16530, 16530, 24090, 24090, 16550, 16550, 22524, 22524, 16668, 16668, 24594, 24594, 16497, 16497, 24095, 24095, 17796, 17796, 24442, 24442, 17642, 17642, 23733, 23733, 17255, 17255, 25138, 25138, 17723, 17723, 22299, 22299, 16530, 16530, 24110, 24110, 16544, 16544, 22524, 22524, 16668, 16668, 24521, 24521, 16505, 16505, 24118, 24118, 17822, 17822, 24511, 24511, 17748, 17748, 23786, 23786, 17333, 17333, 25203, 25203, 17810, 17810, 22281, 22281, 16530, 16530, 24045, 24045, 16556, 16556, 22524, 22524, 16668, 16668, 24711, 24711, 16505, 16505, 24344, 24344, 17992, 17992, 24563, 24563, 17783, 17783, 23903, 23903, 17358, 17358, 25230, 25230, 17842, 17842, 22306, 22306, 16535, 16535, 24174, 24174, 16562, 16562, 22524, 22524, 16668, 16668, 24571, 24571, 16497, 16497, 24151, 24151, 17802, 17802, 24467, 24467, 17677, 17677, 23769, 23769, 17280, 17280, 25185, 25185, 17739, 17739, 22296, 22296, 16530, 16530, 24175, 24175, 16550, 16550, 22524, 22524, 16668, 16668, 24595, 24595, 16497, 16497, 24094, 24094, 17795, 17795, 24481, 24481, 17642, 17642, 23738, 23738, 17255, 17255, 25154, 25154, 17723, 17723, 22299, 22299, 16530, 16530, 24117, 24117, 16544, 16544, 22524, 22524, 16668, 16668, 24531, 24531, 16497, 16497, 24118, 24118, 17794, 17794, 24361, 24361, 17642, 17642, 23731, 23731, 17255, 17255, 25093, 25093, 17723, 17723, 22291, 22291, 16530, 16530, 24111, 24111, 16544, 16544, 22524, 22524, 16668, 16668, 24523, 24523, 16497, 16497, 24098, 24098, 17799, 17799, 24444, 24444, 17676, 17676, 23744, 23744, 17280, 17280, 25085, 25085, 17739, 17739, 22286, 22286, 16530, 16530, 24052, 24052, 16544, 16544]
]

def join_chunks(xs, glue, n, indent=0):
    return [" " * indent + glue.join(xs[i:i + n]) for i in range(0, len(xs), n)]

def num_to_bits (n, w):
    r = []
    for i in range (w):
        r.append (n % 2)
        n //= 2
    return (r)

def bits_to_num (l):
    r = 0
    for i in range (len(l) - 1, -1, -1):
        r = r * 2 + l[i]
    return (r)

def modP(n, p):
    n = n % p
    return n - p if n > p//2 else n

def flatten(ll):
    return [i for l in ll for i in l]

def ziplist(l1, l2):
    return list(zip(l1, l2))

def str_main_args ():
    return "\n".join([
        "(* parameters *)\n",
        ",\n".join(join_chunks(["sint16 f{:03d}".format(i) for i in range(INPUT_NUM)], ", ", 4))])

def str_precondition_algebra ():
    return "\n".join([
        "(* algebraic precondition *)\n",
        "true"])

def str_precondition_range ():
    return "\n".join([
        "(* range precondition *)\n",
        "and [",
        format(",\n".join(join_chunks(["(-{0})@16 <s f{1:03d}, f{1:03d} <s {0}@16".format(4096, i) for i in range(INPUT_NUM)], ", ", 4))),
        "]"])

def str_twiddles ():
    _16XP = [ P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P ]
    _16XMONT_PINV = [
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV,
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV
        ]
    _16XMONT = [
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT,
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT
        ]
    _ZETAS = [
   27359,  27359,  27359,  27359,  27359,  27359,  27359,  27359,
   27359,  27359,  27359,  27359,  27359,  27359,  27359,  27359,
     223,    223,    223,    223,    223,    223,    223,    223,
     223,    223,    223,    223,    223,    223,    223,    223,
   -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,
   -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,  -1956,
    4188,   4188,   4188,   4188,   4188,   4188,   4188,   4188,
    4188,   4188,   4188,   4188,   4188,   4188,   4188,   4188,
   10093,  10093,  10093,  10093,  10093,  10093,  10093,  10093,
  -21094, -21094, -21094, -21094, -21094, -21094, -21094, -21094,
    2413,   2413,   2413,   2413,   2413,   2413,   2413,   2413,
   -3686,  -3686,  -3686,  -3686,  -3686,  -3686,  -3686,  -3686,
     408,    408,    408,    408,    408,    408,    408,    408,
     408,    408,    408,    408,    408,    408,    408,    408,
   -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,
   -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,  -3688,
   28517,  28517,  28517,  28517,  28517,  28517,  28517,  28517,
  -20856, -20856, -20856, -20856, -20856, -20856, -20856, -20856,
     357,    357,    357,    357,    357,    357,    357,    357,
    -376,   -376,   -376,   -376,   -376,   -376,   -376,   -376
        ]
    _TWIST32 = [
      -6,    -61,   -609,  -6095,     -6,  14237, -31235,  23836,
      -6, -19643,  -2017, -13811,     -6,  27329,  11300,  -7722,
    1018,   -573,   5023,  -3535,   1018,  -1635,   2045,  -2788,
    1018,   1349,   3615,  -5107,   1018,   5313,   5156,   -554,
    4589, -19643,    177,   1767,  24098,   1725, -31418,  -7801,
  -12378,  16236,  31558,    232,  22209,  29644, -18845,  23836,
   -3091,   1349,   2737,  -4889,  -3550,   2237,    326,   1927,
    2982,  -2196,  -2234,   4328,    193,  -5172,  -2973,  -2788,
   17675, -19863,  -2017, -20173,   4547,  -4083, -29364, -21593,
   25543,  11123,    512,  11623,   7429, -21161, -11555, -24129,
    4875,  -5015,   3615,   3891,   4035,   4621,   1356,   4519,
    2503,   2419,    512,   4967,  -4347,  -3241,   5341,  -2113,
   -5126,  14280,  11726, -13811, -20490,  24025, -24037, -13024,
  -27152, -19564,  -8801,  12415,  -6381, -26286, -31418, -23952,
   -4102,   1992,  -1586,  -5107,   3062,  -2087,   4123,   3360,
   -2576,  -1132,  -3169,   1663,   1299,   3410,    326,    624,
   -7033,  -4797,  17571, -20899,  16090,  31583,  16614, -13164,
  -29449, -19454,  17096, -16809, -12476, -26292,  -4090, -12653,
    2695,  -5309,    675,  -4003,    730,   4447,   -794,   5268,
    4855,   2050,   4808,   1111,  -2236,   4428,  -5114,  -4973,
  -12378,   7289,   7356,   8027,  15864, -31467, -24976,  16809,
   22532,   6747, -13012,   4967, -20198,  -4083,  25555, -31497,
    2982,  -2439,  -2884,   3419,  -4616,  -2283,   -400,  -1111,
       4,   2139,   1324,  -1689,  -2790,   4621,    467,   2807,
   14731,  16236,  31290, -14780, -10001,  32351,  -7795,  -9691,
   18363,   5729, -16614,  -4248,   3639,   3346,   4394,  22483,
    1931,  -2196,   -454,  -4540,   3823,   5215,    909,  -5083,
   -2629,     97,    794,   -152,   5175,    274,  -2774,  -2605,
  -16724,  29370,  31558, -12098,  27152,  12336,  19844, -22215,
    5766, -29827,   7856,  23093, -20490,  -3035, -21892,  -8935,
   -2388,  -2374,  -2234,   -834,   2576,   4144,  -2684,    825,
    4742,   3453,   -336,   3125,   3062,   1573,    636,  -2279,
      -6,  -6095,    177, -19863,     -6, -18077,  -7326,  29644,
      -6,   1767,  11726,   7289,     -6, -19661,  11141,  27329,
    1018,  -3535,   2737,  -5015,   1018,  -2205,  -2206,  -5172,
    1018,  -4889,  -1586,  -2439,   1018,   4403,   -635,   5313,
   -5126, -13811,  17571,   7289, -23781, -18918, -11555,   1725,
  -16724,    232,  -1627,  13158,  15840, -18077,  11300,  14237,
   -4102,  -5107,    675,  -2439,   4379,  -1510,   5341,   2237,
   -2388,   4328,   2981,  -4250,   -544,  -2205,   5156,  -1635,
   14731, -14780,  31558, -30144,   3925, -23952,   -780, -20070,
  -14847, -19856,  -8801,  -3699, -11683,  -7722,  -7326,  25482,
    1931,  -4540,  -2234,   2624,    341,    624,   1268,  -2662,
   -4095,   4720,  -3169,   5005,   5213,   -554,  -2206,   1930,
    2316,  22215,  -1627,  11123, -20198,  -6594, -29364,   3346,
   24269, -25652, -31887,   6747,  22209,  15328, -31235,  29644,
     268,   -825,   2981,   2419,  -2790,   4670,   1356,    274,
     205,   5068,   3441,   2139,    193,  -1056,   2045,  -5172,
  -18345,   5120,   7716, -17394,  28224,  24165, -21892,  14329,
    9508,  -4717,  -8246,  32070,  16072,   8161, -18845,  24330,
    -425,   5120,   1572,   2062,  -4544,  -3995,    636,   4601,
    3364,   2963,    970,  -1722,   3784,   2529,  -2973,    778,
  -27152, -19856,    969, -13987,  31217, -13024, -29407,   7880,
    5766,  31924, -17352, -14329, -23781,  23836,  22044,   8758,
   -2576,   4720,   -567,   2909,   1009,   3360,  -2271,  -4408,
    4742,   1204,  -5064,  -4601,   4379,  -2788,  -4580,   -458,
  -28103,  12415,  28541, -32351, -23056, -30467,   8246,  12976,
   26518, -22483,  32076,   3998,   7429, -18918, -14999, -21161,
   -5063,   1663,  -3715,  -5215,   1520,   2813,   -970,   4784,
     918,   2605,  -2740,  -1122,  -4347,  -1510,   -151,  -3241,
   24269,  20661,  17096,  -9343,  15864,   -951,  -1932, -28712,
   20198, -24641,   2395,  26286,  24098,  15517, -11555,  11952,
     205,    693,   4808,   1409,  -4616,  -2487,    116,    -40,
    2790,  -2625,  -2213,  -3410,  -3550,   -355,   5341,   3760
        ]
    _TWISTS4 = [
      -6,   -408, -27359,   1956,   1018,   3688,   -223,  -4188,
      -6,  -1956,  27359,    408,   1018,   4188,    223,  -3688,
      -6,  10093,  -1956,  28517,   1018,   2413,   4188,    357,
      -6,  20856,   -408,  21094,   1018,    376,   3688,   3686,
      -6,  -7033,  10093, -18345,   1018,   2695,   2413,   -425,
      -6, -12476,  21094,  -9508,   1018,  -2236,   3686,  -3364,
      -6, -18345,  28517, -16090,   1018,   -425,    357,   -730,
      -6,  16072,  20856, -12476,   1018,   3784,    376,  -2236
        ]
    twiddles = [
        ("_16XP", _16XP, _16XP_BASE),
        ("_16XMONT_PINV", _16XMONT_PINV, _16XMONT_PINV_BASE),
        ("_16XMONT", _16XMONT, _16XMONT_BASE),
        ("_ZETAS", _ZETAS, _ZETAS_BASE),
        ("_TWIST32", _TWIST32, _TWIST32_BASE),
        ("_TWISTS4", _TWISTS4, _TWISTS4_BASE)
        ]
    res = []
    for (name, arr, base) in twiddles:
        res.append("\n(* {} *)\n".format(name))
        res.append("\n".join(join_chunks(["mov L0x{:x} ({:6d})@sint16;".format(base + 2*i, arr[i]) for i in range (len(arr))], " ", 4)))
    return "\n".join(res)

def ntt_mod(n_expn, prime, mont, root, negacyclic, stage):
    num_rings = 2**stage
    num_bits = n_expn + 1 if negacyclic else n_expn
    res = []
    for i in range (num_rings):
        if negacyclic:
            l = num_to_bits(i, stage)
            l.reverse()
            l.insert(0, 1)
            l = [0 for i in range(num_bits - stage - 1)] + l
        else:
            l = num_to_bits(i, num_bits)
            l.reverse()
        e = bits_to_num(l)
        modulo = (root**e) % prime
        modulo_mont = (modulo * mont) % prime
        modulo = modulo - prime if modulo > prime / 2 else modulo
        modulo_mont = modulo_mont - prime if modulo_mont > prime / 2 else modulo_mont
        res.append(dict(modulo = modulo, mont = modulo_mont))
    return res

def str_inits ():
    return "\n".join([
        "(* inits *)\n",
        "\n".join(join_chunks(["mov L0x{:x} f{:03d};".format(INPUT_BASE + 2 * i, i) for i in range(INPUT_NUM)], " ", 4))])

def str_init_poly_var(poly_var):
    return ("ghost {}@sint16 : true && true;").format(poly_var)

def str_init_poly (poly, poly_var, prefix, num):
    return "\n".join([
        "(* {} *)\n".format(poly),
        "ghost {}@bit :".format(poly),
        "{0} * {0} =".format(poly),
        "{} && true;".format(" +\n".join(join_chunks(["{0}{1:03d}*({2}**{1})".format (prefix, i, poly_var) for i in range(num)], " + ", 4)))])

def str_range_condition(args, left_rel, right_rel):
    return "  " + ",\n  ".join(join_chunks(["(-({1}))@16 {2} {0}, {0} {3} ({1})@16".format(ymm, r, left_rel, right_rel) for (ymm, r) in args], ", ", 2))

def make_ymms(ymms, off, num):
    return ["ymm{}_{:x}".format(ymm, off + i) for ymm in ymms for i in range(num)]

def make_eqmod(poly_name, ymms, coefs, mods, mon_per_line=4):
    return "\n".join([
        "eqmod",
        "  ({0} * {0})".format(poly_name),
        "  (",
        " +\n".join(join_chunks([ymms[i] if i == 0 else "{0}*({1}**{2})".format(ymms[i], coefs[i], i) for i in range(len(ymms))], " + ", mon_per_line, indent=4)),
        "  )",
        "  [{}]".format(", ".join(mods))
    ])

def get_algebra(args, expn, mon_per_line=4):
    return [
        make_eqmod(poly_name, ymms, [POLY_VAR if poly_var_mult == 1 else "({0}*{1})".format(poly_var_mult, POLY_VAR)] * len(ymms),
                       [str(P), "{0} - ({1})".format(POLY_VAR, m) if expn == 1 else "{0}**{2} - ({1})".format(POLY_VAR, m, expn)],
                       mon_per_line) for (poly_name, poly_var_mult, ymms, m) in args
    ]

def str_algebra(args, expn, mon_per_line=4):
    return ",\n".join(get_algebra(args, expn, mon_per_line))

def get_ntt_mod_level0to2(stage, i):
    return ntt_mod(n_expn=8, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=stage)[i]["modulo"]

def get_ntt_mod_level3to7(stage, i):
    return ntt_mod(n_expn=9, prime=P, mont=MONT, root=ROOT, negacyclic=False, stage=stage)[i]["modulo"]

def str_assertions(pairs):
    equalities = []
    for (ymm1, ymm2) in pairs:
        for i in range(0, 16):
            equalities.append("mulLymm{0}_{2:x} = mulLymm{1}_{2:x}".format(ymm1, ymm2, i))
    return "assert true && and [\n{0}\n];\nassume and [\n{0}\n] && true;".format(",\n".join(join_chunks(equalities, ", ", 2)))

level = 0
off = 0
ecut_id = 0
rcut_id = 0
level7_ecut_ids = []
level7_rcut_ids = []

def print_comment(str):
    print("(* {} *)".format(str))

def print_unpack_vectors(indices):
    for i in indices:
        dest = ', '.join([f'ymm{i}_{hex(j)[2:]}' for j in range(16)])
        print(f'mov [{dest}] %ymm{i};')

def print_instr(instr):
    global level, off, ecut_id, rcut_id, level7_ecut_ids, level7_rcut_ids

    # ==================== Level 0 ====================
    if instr.startswith("(* vmovdqa 0x100(%rsi),%ymm8") and level == 0:
        print_comment("===== Start of level {0} =====".format(level))
    elif instr.startswith("(* vpaddw %ymm8,%ymm4,%ymm3") and level == 0:
        print(str_assertions([(8, 12), (9, 13), (10, 14), (11, 15)]))
    elif instr.startswith("(* vmovdqa 0x140(%rdx),%ymm15") and level == 0:
        print_comment("===== End of level {0} =====".format(level))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  1,
                  ["L0x{:x}".format(ANS_BASE + (k + i*128)*2) for k in range(128)],
                  get_ntt_mod_level0to2(level+1, i)) for i in range(2)],
            expn=128))
        print("] && and [")
        print(str_range_condition(
            args=[("L0x{:x}".format(ANS_BASE + i*2), RANGES_10753_4096[level][i]) for i in range(256)],
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 1 ====================
    elif instr.startswith("(* vpaddw %ymm8,%ymm4,%ymm3") and level == 1:
        print(str_assertions([(8, 12), (9, 13), (10, 14), (11, 15)]))
    elif instr.startswith("(* vperm2i128 $0x20,%ymm10,%ymm5,%ymm7") and level == 1:
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([3, 4, 5, 6, 8, 9, 10, 11])

        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  1,
                  make_ymms([[3, 4, 5, 6], [8, 9, 10, 11]][i], 0, 16),
                  get_ntt_mod_level0to2(level+1, i+off*2)) for i in range(2)],
            expn=64))
        print ("] && and [")
        print(str_range_condition(
            args=ziplist(make_ymms([3, 4, 5, 6, 8, 9, 10, 11], 0, 16), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 2 ====================
    elif instr.startswith("(* vpaddw %ymm7,%ymm6,%ymm4") and level == 2:
        print(str_assertions([(7, 12), (10, 13), (5, 14), (11, 15)]))
    elif instr.startswith("(* vpunpcklqdq %ymm7,%ymm4,%ymm9") and level == 2:
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([4, 6, 8, 3, 7, 10, 5, 11])

        print ("cut")
        print ("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  1,
                  make_ymms([[4, 6, 8, 3], [7, 10, 5, 11]][i%2], (i//2)*8, 8),
                  get_ntt_mod_level0to2(level+1, i+off*4)) for i in range(4)],
            expn=32))
        print ("] && and [")
        print(str_range_condition(
            args=ziplist(flatten(make_ymms([[4, 6, 8, 3], [7, 10, 5, 11]][i%2], (i//2)*8, 8) for i in range(4)), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 3 ====================
    elif (instr.startswith("(* vpmullw 0x340(%rdx),%ymm6,%ymm12") or instr.startswith("(* vpmullw 0x540(%rdx),%ymm6,%ymm12")) and level == 3:
        print(str_assertions([(9, 12), (7, 13), (4, 14), (10, 15)]))
    elif instr.startswith("(* vpaddw %ymm6,%ymm9,%ymm3") and level == 3:
        print(str_assertions([(6, 12), (5, 13), (8, 14), (11, 15)]))
    elif instr.startswith("(* vmovdqa 0x80(%rdx),%ymm14") and level == 3:
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([3, 9, 7, 4, 6, 5, 8, 11])

        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  LEVEL3_TWIST_INV[(i//2)+4*off],
                  make_ymms([[3, 9, 7, 4], [6, 5, 8, 11]][i%2], (i//2)*4, 4),
                  modP(LEVEL3_TWIST_BASE[(i//2)+4*off]**16 * get_ntt_mod_level3to7(level - 2, i%2), P)) for i in range(8)],
            expn=16))
        print("] && and [")
        print(str_range_condition(
            args=ziplist(flatten(make_ymms([[3, 9, 7, 4], [6, 5, 8, 11]][i%2], (i//2)*4, 4) for i in range(8)), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 4 ====================
    elif instr.startswith("(* vpsubw %ymm13,%ymm7,%ymm7") and level == 4:
        print(str_assertions([(7, 13)]))
    elif instr.startswith("(* vpsubw %ymm13,%ymm4,%ymm4") and level == 4:
        print(str_assertions([(4, 13)]))
    elif instr.startswith("(* vpaddw %ymm8,%ymm6,%ymm9") and level == 4:
        print(str_assertions([(8, 12), (11, 13)]))
    elif instr.startswith("(* vpmullw %ymm14,%ymm3,%ymm13") and level == 4:
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([10, 3, 7, 4, 9, 6, 8, 11])

        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  LEVEL3_TWIST_INV[(i//4)+4*off],
                  make_ymms([[10, 3], [7, 4], [9, 6], [8, 11]][i%4], (i//4)*4, 4),
                  modP(LEVEL3_TWIST_BASE[(i//4)+4*off]**8 * get_ntt_mod_level3to7(level - 2, i%4), P)) for i in range(16)],
            expn=8))
        print("] && and [")
        print(str_range_condition(
            args=ziplist(flatten([make_ymms([[10, 3], [7, 4], [9, 6], [8, 11]][i%4], (i//4)*4, 4) for i in range(16)]), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 5 ====================
    elif instr.startswith("(* vpsubw %ymm13,%ymm3,%ymm3") and level == 5:
        print(str_assertions([(3, 13)]))
    elif instr.startswith("(* vpaddw %ymm4,%ymm7,%ymm10") and level == 5:
        print(str_assertions([(4, 12), (6, 13), (11, 14)]))
    elif instr.startswith("(* vpmullw 0x80(%rdx),%ymm5,%ymm12") and level == 5:
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([5, 3, 10, 4, 7, 6, 9, 11])

        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  LEVEL3_TWIST_INV[(i//8)+4*off],
                  make_ymms([[5], [3], [10], [4], [7], [6], [9], [11]][i%8], (i//8)*4, 4),
                  modP(LEVEL3_TWIST_BASE[(i//8)+4*off]**4 * get_ntt_mod_level3to7(level - 2, i%8), P)) for i in range(32)],
            expn=4))
        print("] && and [")
        print(str_range_condition(
            args=ziplist(flatten([make_ymms([[5], [3], [10], [4], [7], [6], [9], [11]][i%8], (i//8)*4, 4) for i in range(32)]), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 6 ====================
    elif instr.startswith("(* vpsubw %ymm12,%ymm5,%ymm5") and level == 6:
        print(str_assertions([(5, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm3,%ymm3") and level == 6:
        print(str_assertions([(3, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm10,%ymm10") and level == 6:
        print(str_assertions([(10, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm4,%ymm4") and level == 6:
        print(str_assertions([(4, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm7,%ymm7") and level == 6:
        print(str_assertions([(7, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm6,%ymm6") and level == 6:
        print(str_assertions([(6, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm9,%ymm9") and level == 6:
        print(str_assertions([(9, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm11,%ymm11") and level == 6:
        print(str_assertions([(11, 12)]))
    elif instr.startswith("(* vpmullw %ymm1,%ymm9,%ymm12") and level == 6:
        # End of level 6
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))

        print_unpack_vectors([6, 4, 8, 9, 3, 7, 5, 11])

        print("cut")
        print("and [")
        print(str_algebra(
            args=[(POLY_NAME,
                  "{0}*{1}".format(str(LEVEL3_TWIST_INV[(i//16)+4*off]), str(LEVEL7_TWIST_INV[(i//2)%8])),
                  make_ymms([[6, 4], [8, 9], [3, 7], [5, 11]][i%4], i//4, 1),
                  modP(LEVEL3_TWIST_BASE[(i//16)+4*off]**2 * LEVEL7_TWIST_BASE[(i//2)%8]**2 * get_ntt_mod_level3to7(level - 5, i%2), P)) for i in range(64)],
            expn=2))
        print("] && and [")
        print(str_range_condition(
            args=ziplist(flatten([make_ymms([[6, 4], [8, 9], [3, 7], [5, 11]][i%4], i//4, 1) for i in range(64)]), RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        level = level + 1
        print_comment("===== Start of level {0}, off {1} =====".format(level, off))

    # ==================== Level 7 ====================
    elif instr.startswith("(* vpaddw %ymm9,%ymm8,%ymm3") and level == 7:
        print(str_assertions([(9, 12), (11, 13)]))   # Verified
    elif instr.startswith("(* vmovdqa %ymm10,(%rdi)") and level == 7:
        print_comment("===== Store results of levels1t7, off {} =====".format(off))
    elif instr.startswith("(* vmovdqa 0x1c0(%rdx),%ymm15") or instr.startswith("(* #! <- SP = 0x7fffffffa038 *)"):
        print_comment("===== End of level {0}, off {1} =====".format(level, off))
        level7_ecut_ids.append(ecut_id)
        level7_rcut_ids.append(rcut_id)
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print(str_algebra(
            args=[(POLY_NAME,
                  "{0}*{1}".format(str(LEVEL3_TWIST_INV[(i//32)+4*off]), str(LEVEL7_TWIST_INV[(i//4)%8])),
                  ["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128))],
                  modP(LEVEL3_TWIST_BASE[(i//32)+4*off] * LEVEL7_TWIST_BASE[(i//4)%8] * get_ntt_mod_level3to7(level - 5, i%4), P)) for i in range(128)],
            expn=1))
        print("&& and [")
        print(str_range_condition(
            args=ziplist(["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128)) for i in range(128)], RANGES_10753_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        # Print the high part of cut 0
        if off == 0:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
            print("cut")
            print("and [")
            print(str_algebra(
                args=[(POLY_NAME,
                      1,
                      ["L0x{:x}".format(ANS_BASE + (k + 128)*2) for k in range(128)],
                      get_ntt_mod_level0to2(1, 1))],
                expn=128))
            print ("] prove with [ cuts [ 0 ] ] && and [")
            print(str_range_condition(
                args=[("L0x{:x}".format(ANS_BASE + (i+128)*2), RANGES_10753_4096[0][i+128]) for i in range(128)],
                left_rel="<s",
                right_rel="<s"))
            print("] prove with [ cuts [ 0 ] ];\n")
            ecut_id = ecut_id + 1
            rcut_id = rcut_id + 1
            off = 1
            level = 1
            print_comment("===== Start of level {0}, off {1} =====".format(level, off))
        # Start of level 1, off = 1

    print(instr)

def str_post():
    return "\n".join([
        "{",
        "and [",
        str_algebra(
            args=[(POLY_NAME,
                       "{0}*{1}".format(str(LEVEL3_TWIST_INV[(i//32)+4*off]), str(LEVEL7_TWIST_INV[(i//4)%8])),
                       ["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128))],
                       modP(LEVEL3_TWIST_BASE[(i//32)+4*off] * LEVEL7_TWIST_BASE[(i//4)%8] * get_ntt_mod_level3to7(7 - 5, i%4), P)) for off in range(2) for i in range(128)],
            expn=1),
        "] prove with [cuts {0}] && and [".format(level7_ecut_ids),
        str_range_condition(
            args=ziplist(["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128)) for off in range(2) for i in range(128)], RANGES_10753_4096[7]),
            left_rel="<=s",
            right_rel="<=s"),
        "] prove with [cuts {0}]".format(level7_rcut_ids),
        "}"
    ])

def main():
    parser = ArgumentParser()
    parser.add_argument("cl_file", help="the nttmul_poly_ntt cl file to be processed")
    args = parser.parse_args()
    with open(args.cl_file) as f:
        # ========== proc main ==========
        print('proc main(\n')
        print(str_main_args())
        print('\n) =\n')
        # ========== pre-condition ==========
        print('{\n')
        print(str_precondition_algebra())
        print("\n&&\n")
        print(str_precondition_range())
        print('\n}\n')
        # ========== inits ==========
        print(str_inits())
        print(str_twiddles())
        print()
        print(str_init_poly_var(POLY_VAR))
        print(str_init_poly(poly=POLY_NAME, poly_var=POLY_VAR, prefix='f', num=INPUT_NUM))
        # ========== program ==========
        print("\n\n#===== program start =====\n\n")
        for line in f.readlines():
            print_instr(line.strip())
        # ========== post-condition ==========
        print(str_post())


if __name__ == "__main__":
  main()
