(* quine: cv.exe -v -isafety -slicing -jobs 20 gfp25519inv.final.cl
Parsing Cryptoline file:		[OK]		0.191863 seconds
Checking well-formedness:		[OK]		0.026066 seconds
Transforming to SSA form:		[OK]		0.028775 seconds
Normalizing specification:		[OK]		0.030945 seconds
Rewriting assignments:			[OK]		0.032461 seconds
Verifying program safety:		[OK]		335.674984 seconds
Verifying range assertions:		[OK]		0.210055 seconds
Verifying range specification:		[OK]		2.794946 seconds
Rewriting value-preserved casting:	[OK]		0.022452 seconds
Verifying algebraic assertions:		[OK]		0.023415 seconds
Verifying algebraic specification:	[OK]		42.874009 seconds
Verification result:			[OK]		381.921259 seconds
*)


proc main (uint64 L0x7fffffffdfe8, uint64 L0x7fffffffe030, uint64 L0x7fffffffe050, uint64 L0x7fffffffe058, uint64 L0x7fffffffe060, uint64 L0x7fffffffe068, uint64 rbx, uint64 rdi, uint64 rdx, uint64 rsi, uint64 rsp) =
{
  true
  &&
  true
}

ghost X1@uint256 : and [
     eq X1 (limbs 64 [L0x7fffffffe050, L0x7fffffffe058, L0x7fffffffe060, L0x7fffffffe068])
     ] && true;

# /* 1 */  gfp25519sqr(&z2,e);

(* gfp25519inv: *)
(* gfp25519inv:; *)
(* #! -> SP = 0x7fffffffe038 *)
#! 0x7fffffffe038 = 0x7fffffffe038;
(* endbr64                                         #! PC = 0x401f30 *)
(* endbr64                                         #! 0x401f30 = 0x401f30; *)
(* push   %rbp                                     #! EA = L0x7fffffffe030; PC = 0x401f34 *)
(* push   %%rbp *)
(* mov    %rdi,%rbp                                #! PC = 0x401f35 *)
mov rbp rdi;
(* #callq  0x401d40 <gfp25519fltinv>               #! PC = 0x401f38 *)
#callq  0x401d40 <gfp25519fltinv>               #! 0x401f38 = 0x401f38;
(* #! -> SP = 0x7fffffffe028 *)
#! 0x7fffffffe028 = 0x7fffffffe028;
(* endbr64                                         #! PC = 0x401d40 *)
(* endbr64                                         #! 0x401d40 = 0x401d40; *)
(* push   %r15                                     #! EA = L0x7fffffffe020; PC = 0x401d44 *)
(* push   %%r15 *)
(* mov    $0x1,%edx                                #! PC = 0x401d46 *)
mov rdx 1@uint64;
(* push   %r14                                     #! EA = L0x7fffffffe018; PC = 0x401d4b *)
(* push   %%r14 *)
(* mov    %rdi,%r14                                #! PC = 0x401d4d *)
mov r14 rdi;
(* push   %r13                                     #! EA = L0x7fffffffe010; PC = 0x401d50 *)
(* push   %%r13 *)
(* push   %r12                                     #! EA = L0x7fffffffe008; PC = 0x401d52 *)
(* push   %%r12 *)
(* mov    %rsi,%r12                                #! PC = 0x401d54 *)
mov r12 rsi;
(* push   %rbp                                     #! EA = L0x7fffffffe000; PC = 0x401d57 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdff8; PC = 0x401d58 *)
(* push   %%rbx *)
(* sub    $0x138,%rsp                              #! PC = 0x401d59 *)
subs carry rsp rsp 0x138@uint64;
(* lea    0x20(%rsp),%rbx                          #! PC = 0x401d60 *)
adds dontcare rbx rsp 0x20@uint64;
(* mov    %rsp,%rbp                                #! PC = 0x401d65 *)
mov rbp rsp;
(* mov    %rbx,%rdi                                #! PC = 0x401d68 *)
mov rdi rbx;
(* mov    %fs:0x28,%rax                            #! PC = 0x401d6b *)
(* mov    %fs:0x28,%%rax                            #! 0x401d6b = 0x401d6b; *)
(* mov    %rax,0x128(%rsp)                         #! EA = L0x7fffffffdfe8; PC = 0x401d74 *)
(* mov    %%rax,0x128(%%rsp)                         #! L0x7fffffffdfe8 = L0x7fffffffdfe8; 0x401d74 = 0x401d74; *)
(* xor    %eax,%eax                                #! PC = 0x401d7c *)
(* xor    %eax,%eax                                #! 0x401d7c = 0x401d7c; *)

(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401d7e *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401d7e = 0x401d7e;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffe050; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffe050;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffe058; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffe058;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffe060; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffe060;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffe068; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffe068;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdee0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdee0; PC = 0x401ca6 *)
mov L0x7fffffffdee0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdee8; PC = 0x401ca9 *)
mov L0x7fffffffdee8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffdef0; PC = 0x401cad *)
mov L0x7fffffffdef0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffdef8; PC = 0x401cb1 *)
mov L0x7fffffffdef8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffe050; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00000000004050a0; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffe050; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X2@uint256 : and [
     eq X2 (limbs 64 [L0x7fffffffdee0, L0x7fffffffdee8, L0x7fffffffdef0, L0x7fffffffdef8])
     ] && true;

cut
    and [
     eqmod X2
     	   (X1**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




# /* 2 */  gfp25519sqr(&t,&z2);


(* mov    %rbx,%rsi                                #! PC = 0x401d83 *)
mov rsi rbx;
(* mov    $0x1,%edx                                #! PC = 0x401d86 *)
mov rdx 0x1@uint64;
(* mov    %rbp,%rdi                                #! PC = 0x401d8b *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401d8e *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401d8e = 0x401d8e;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdee0; Value = 0xffffffffffffffee; PC = 0x401b2b *)
mov rbx L0x7fffffffdee0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdee8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdee8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdef0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdef0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdef8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdef8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffe050; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00000000004050a0; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffe050; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X4@uint256 : and [
     eq X4 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X4
     	   (X2**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




#        /* 4  */ gfp25519sqr(&t,&t);


(* lea    0x40(%rsp),%r13                          #! PC = 0x401d93 *)
adds dontcare r13 rsp 0x40@uint64;
(* mov    $0x1,%edx                                #! PC = 0x401d98 *)
mov rdx 0x1@uint64;
(* mov    %rbp,%rsi                                #! PC = 0x401d9d *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401da0 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401da3 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401da3 = 0x401da3;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401b2b *)
mov rbx L0x7fffffffdec0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdec8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffded0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffded8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffe050; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffe050; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X8@uint256 : and [
     eq X8 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X8
     	   (X4**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




#         /* 8  */ gfp25519mul(&z9,&t,e);

(* lea    0x60(%rsp),%r15                          #! PC = 0x401da8 *)
adds dontcare r15 rsp 0x60@uint64;
(* mov    %r12,%rdx                                #! PC = 0x401dad *)
mov rdx r12;
(* mov    %r13,%rdi                                #! PC = 0x401db0 *)
mov rdi r13;
(* mov    %rbp,%rsi                                #! PC = 0x401db3 *)
mov rsi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401db6 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401db6 = 0x401db6;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffe050; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffe050;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffe058; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffe058;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffe060; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffe060;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffe068; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffe068;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdf00; PC = 0x401abc *)
mov L0x7fffffffdf00 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdf08; PC = 0x401abf *)
mov L0x7fffffffdf08 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdf10; PC = 0x401ac3 *)
mov L0x7fffffffdf10 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdf18; PC = 0x401ac7 *)
mov L0x7fffffffdf18 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffe050; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X9@uint256 : and [
     eq X9 (limbs 64 [L0x7fffffffdf00, L0x7fffffffdf08, L0x7fffffffdf10, L0x7fffffffdf18])
     ] && true;

cut
    and [
     eqmod X9
     	   (mul X8 X1)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




#  /* 9  */ gfp25519mul(&z11,&z9,&z2);


(* mov    %rbx,%rdx                                #! PC = 0x401dbb *)
mov rdx rbx;
(* mov    %r13,%rsi                                #! PC = 0x401dbe *)
mov rsi r13;
(* mov    %r15,%rdi                                #! PC = 0x401dc1 *)
mov rdi r15;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401dc4 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401dc4 = 0x401dc4;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdee0; Value = 0xffffffffffffffee; PC = 0x401910 *)
mov rdx L0x7fffffffdee0;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdf00; Value = 0xffffffffffffffec; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdf00 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdf08; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdf08 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffdf10; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffdf10 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffdf18; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffdf18 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdee8; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdee8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdf00; Value = 0xffffffffffffffec; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdf00 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdf08; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdf08 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf10; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffdf10 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf18; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffdf18 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdef0; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdef0;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdf00; Value = 0xffffffffffffffec; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdf00 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdf08; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdf08 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf10; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffdf10 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf18; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffdf18 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdef8; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdef8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdf00; Value = 0xffffffffffffffec; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdf00 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdf08; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdf08 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf10; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffdf10 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffdf18; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffdf18 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdf20; PC = 0x401abc *)
mov L0x7fffffffdf20 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdf28; PC = 0x401abf *)
mov L0x7fffffffdf28 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdf30; PC = 0x401ac3 *)
mov L0x7fffffffdf30 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdf38; PC = 0x401ac7 *)
mov L0x7fffffffdf38 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffe050; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X11@uint256 : and [
     eq X11 (limbs 64 [L0x7fffffffdf20, L0x7fffffffdf28, L0x7fffffffdf30, L0x7fffffffdf38])
     ] && true;

cut
    and [
     eqmod X11
     	   (mul X9 X2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




#       /* 11 */  gfp25519sqr(&t,&z11);
 
(* lea    0x80(%rsp),%r12                          #! PC = 0x401dc9 *)
adds dontcare r12 rsp 0x80@uint64;
(* mov    $0x1,%edx                                #! PC = 0x401dd1 *)
mov rdx 0x1@uint64;
(* mov    %r15,%rsi                                #! PC = 0x401dd6 *)
mov rsi r15;
(* mov    %rbp,%rdi                                #! PC = 0x401dd9 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401ddc *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401ddc = 0x401ddc;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdf20; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdf20;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdf28; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdf28;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdf30; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdf30;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdf38; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdf38;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X22@uint256 : and [
     eq X22 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X22
     	   (X11**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;




#       /* 22 */ gfp25519mul(&z2_5_0,&t,&z9);


(* mov    %r13,%rdx                                #! PC = 0x401de1 *)
mov rdx r13;
(* mov    %r12,%rdi                                #! PC = 0x401de4 *)
mov rdi r12;
(* mov    %rbp,%rsi                                #! PC = 0x401de7 *)
mov rsi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401dea *)
#callq  0x401900 <gfp25519mul>                  #! 0x401dea = 0x401dea;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf00; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf00;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf08; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf08;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf10; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf10;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf18; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf18;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdf40; PC = 0x401abc *)
mov L0x7fffffffdf40 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdf48; PC = 0x401abf *)
mov L0x7fffffffdf48 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdf50; PC = 0x401ac3 *)
mov L0x7fffffffdf50 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdf58; PC = 0x401ac7 *)
mov L0x7fffffffdf58 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdee0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X31@uint256 : and [
     eq X31 (limbs 64 [L0x7fffffffdf40, L0x7fffffffdf48, L0x7fffffffdf50, L0x7fffffffdf58])
     ] && true;

cut
    and [
     eqmod X31
     	   (mul X22 X9)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#        /* 2^5 - 1       */ gfp25519nsqr(&t,&z2_5_0, 5);



(* lea    0xa0(%rsp),%rbx                          #! PC = 0x401def *)
adds dontcare rbx rsp 0xa0@uint64;
(* mov    %r12,%rsi                                #! PC = 0x401df7 *)
mov rsi r12;
(* mov    $0x5,%edx                                #! PC = 0x401dfa *)
mov rdx 0x5@uint64;
(* mov    %rbp,%rdi                                #! PC = 0x401dff *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401e02 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401e02 = 0x401e02;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdf40; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdf40;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdf48; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdf48;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdf50; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdf50;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdf58; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdf58;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X62@uint256 : and [
     eq X62 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X62
     	   (X31**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X124@uint256 : and [
     eq X124 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X124
     	   (X62**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X248@uint256 : and [
     eq X248 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X248
     	   (X124**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X496@uint256 : and [
     eq X496 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X496
     	   (X248**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X992@uint256 : and [
     eq X992 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X992
     	   (X496**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#        /* 2^10 - 2^5    */ gfp25519mul(&z2_10_0,&t,&z2_5_0); 


(* mov    %r12,%rdx                                #! PC = 0x401e07 *)
mov rdx r12;
(* mov    %rbx,%rdi                                #! PC = 0x401e0a *)
mov rdi rbx;
(* mov    %rbp,%rsi                                #! PC = 0x401e0d *)
mov rsi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401e10 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401e10 = 0x401e10;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf40; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf40;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf48; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf48;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf50; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf50;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf58; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf58;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdf60; PC = 0x401abc *)
mov L0x7fffffffdf60 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdf68; PC = 0x401abf *)
mov L0x7fffffffdf68 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdf70; PC = 0x401ac3 *)
mov L0x7fffffffdf70 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdf78; PC = 0x401ac7 *)
mov L0x7fffffffdf78 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf00; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1023@uint256 : and [
     eq X1023 (limbs 64 [L0x7fffffffdf60, L0x7fffffffdf68, L0x7fffffffdf70, L0x7fffffffdf78])
     ] && true;

cut
    and [
     eqmod X1023
     	   (mul X992 X31)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#        /* 2^10 - 1      */ gfp25519nsqr(&t,&z2_10_0, 10);



(* lea    0xc0(%rsp),%r13                          #! PC = 0x401e15 *)
adds dontcare r13 rsp 0xc0@uint64;
(* mov    %rbx,%rsi                                #! PC = 0x401e1d *)
mov rsi rbx;
(* mov    $0xa,%edx                                #! PC = 0x401e20 *)
mov rdx 0xa@uint64;
(* mov    %rbp,%rdi                                #! PC = 0x401e25 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401e28 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401e28 = 0x401e28;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdf60; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdf60;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdf68; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdf68;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdf70; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdf70;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdf78; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdf78;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2046@uint256 : and [
     eq X2046 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2046
     	   (X1023**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4092@uint256 : and [
     eq X4092 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4092
     	   (X2046**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X8184@uint256 : and [
     eq X8184 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X8184
     	   (X4092**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X16368@uint256 : and [
     eq X16368 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X16368
     	   (X8184**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X32736@uint256 : and [
     eq X32736 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X32736
     	   (X16368**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X65472@uint256 : and [
     eq X65472 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X65472
     	   (X32736**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X130944@uint256 : and [
     eq X130944 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X130944
     	   (X65472**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X261888@uint256 : and [
     eq X261888 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X261888
     	   (X130944**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X523776@uint256 : and [
     eq X523776 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X523776
     	   (X261888**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1047552@uint256 : and [
     eq X1047552 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1047552
     	   (X523776**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


# /* 2^20 - 2^10   */ gfp25519mul(&z2_20_0,&t,&z2_10_0);

(* mov    %rbx,%rdx                                #! PC = 0x401e2d *)
mov rdx rbx;
(* mov    %rbp,%rsi                                #! PC = 0x401e30 *)
mov rsi rbp;
(* mov    %r13,%rdi                                #! PC = 0x401e33 *)
mov rdi r13;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401e36 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401e36 = 0x401e36;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf60; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf60;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf68; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf68;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf70; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf70;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf78; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf78;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdf80; PC = 0x401abc *)
mov L0x7fffffffdf80 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdf88; PC = 0x401abf *)
mov L0x7fffffffdf88 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdf90; PC = 0x401ac3 *)
mov L0x7fffffffdf90 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdf98; PC = 0x401ac7 *)
mov L0x7fffffffdf98 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1048575@uint256 : and [
     eq X1048575 (limbs 64 [L0x7fffffffdf80, L0x7fffffffdf88, L0x7fffffffdf90, L0x7fffffffdf98])
     ] && true;

cut
    and [
     eqmod X1048575
     	   (mul X1047552 X1023)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^20 - 1      */  gfp25519nsqr(&t,&z2_20_0, 20);

(* mov    $0x14,%edx                               #! PC = 0x401e3b *)
mov rdx 0x14@uint64;
(* mov    %r13,%rsi                                #! PC = 0x401e40 *)
mov rsi r13;
(* mov    %rbp,%rdi                                #! PC = 0x401e43 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401e46 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401e46 = 0x401e46;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdf80; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdf80;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdf88; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdf88;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdf90; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdf90;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdf98; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdf98;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2097150@uint256 : and [
     eq X2097150 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2097150
     	   (X1048575**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4194300@uint256 : and [
     eq X4194300 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4194300
     	   (X2097150**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X8388600@uint256 : and [
     eq X8388600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X8388600
     	   (X4194300**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X16777200@uint256 : and [
     eq X16777200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X16777200
     	   (X8388600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X33554400@uint256 : and [
     eq X33554400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X33554400
     	   (X16777200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X67108800@uint256 : and [
     eq X67108800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X67108800
     	   (X33554400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X134217600@uint256 : and [
     eq X134217600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X134217600
     	   (X67108800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X268435200@uint256 : and [
     eq X268435200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X268435200
     	   (X134217600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X536870400@uint256 : and [
     eq X536870400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X536870400
     	   (X268435200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1073740800@uint256 : and [
     eq X1073740800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1073740800
     	   (X536870400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2147481600@uint256 : and [
     eq X2147481600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2147481600
     	   (X1073740800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4294963200@uint256 : and [
     eq X4294963200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4294963200
     	   (X2147481600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X8589926400@uint256 : and [
     eq X8589926400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X8589926400
     	   (X4294963200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X17179852800@uint256 : and [
     eq X17179852800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X17179852800
     	   (X8589926400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X34359705600@uint256 : and [
     eq X34359705600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X34359705600
     	   (X17179852800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X68719411200@uint256 : and [
     eq X68719411200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X68719411200
     	   (X34359705600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X137438822400@uint256 : and [
     eq X137438822400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X137438822400
     	   (X68719411200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X274877644800@uint256 : and [
     eq X274877644800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X274877644800
     	   (X137438822400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X549755289600@uint256 : and [
     eq X549755289600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X549755289600
     	   (X274877644800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1099510579200@uint256 : and [
     eq X1099510579200 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1099510579200
     	   (X549755289600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^40 - 2^20   */ gfp25519mul(&t,&t,&z2_20_0);


(* mov    %r13,%rdx                                #! PC = 0x401e4b *)
mov rdx r13;
(* mov    %rbp,%rsi                                #! PC = 0x401e4e *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401e51 *)
mov rdi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401e54 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401e54 = 0x401e54;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf80; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf80;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf88; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf88;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf90; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf90;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf98; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf98;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdec0; PC = 0x401abc *)
mov L0x7fffffffdec0 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdec8; PC = 0x401abf *)
mov L0x7fffffffdec8 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401ac3 *)
mov L0x7fffffffded0 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401ac7 *)
mov L0x7fffffffded8 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdf40; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1099511627775@uint256 : and [
     eq X1099511627775 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X1099511627775
     	   (mul X1099510579200 X1048575)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^40 - 1      */ gfp25519nsqr(&t,&t,10);

(* lea    0xe0(%rsp),%r12                          #! PC = 0x401e59 *)
adds dontcare r12 rsp 0xe0@uint64;
(* mov    $0xa,%edx                                #! PC = 0x401e61 *)
mov rdx 0xa@uint64;
(* mov    %rbp,%rsi                                #! PC = 0x401e66 *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401e69 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401e6c *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401e6c = 0x401e6c;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdec0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdec8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffded0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffded8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2199023255550@uint256 : and [
     eq X2199023255550 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2199023255550
     	   (X1099511627775**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4398046511100@uint256 : and [
     eq X4398046511100 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4398046511100
     	   (X2199023255550**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X8796093022200@uint256 : and [
     eq X8796093022200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X8796093022200
     	   (X4398046511100**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X17592186044400@uint256 : and [
     eq X17592186044400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X17592186044400
     	   (X8796093022200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X35184372088800@uint256 : and [
     eq X35184372088800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X35184372088800
     	   (X17592186044400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X70368744177600@uint256 : and [
     eq X70368744177600 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X70368744177600
     	   (X35184372088800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X140737488355200@uint256 : and [
     eq X140737488355200 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X140737488355200
     	   (X70368744177600**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X281474976710400@uint256 : and [
     eq X281474976710400 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X281474976710400
     	   (X140737488355200**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X562949953420800@uint256 : and [
     eq X562949953420800 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X562949953420800
     	   (X281474976710400**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1125899906841600@uint256 : and [
     eq X1125899906841600 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1125899906841600
     	   (X562949953420800**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^50 - 2^10   */ gfp25519mul(&z2_50_0,&t,&z2_10_0);

(* mov    %rbx,%rdx                                #! PC = 0x401e71 *)
mov rdx rbx;
(* mov    %rbp,%rsi                                #! PC = 0x401e74 *)
mov rsi rbp;
(* mov    %r12,%rdi                                #! PC = 0x401e77 *)
mov rdi r12;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401e7a *)
#callq  0x401900 <gfp25519mul>                  #! 0x401e7a = 0x401e7a;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf60; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf60;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf68; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf68;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf70; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf70;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf78; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf78;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdfa0; PC = 0x401abc *)
mov L0x7fffffffdfa0 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdfa8; PC = 0x401abf *)
mov L0x7fffffffdfa8 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdfb0; PC = 0x401ac3 *)
mov L0x7fffffffdfb0 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdfb8; PC = 0x401ac7 *)
mov L0x7fffffffdfb8 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdf60; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1125899906842623@uint256 : and [
     eq X1125899906842623 (limbs 64 [L0x7fffffffdfa0, L0x7fffffffdfa8, L0x7fffffffdfb0, L0x7fffffffdfb8])
     ] && true;

cut
    and [
     eqmod X1125899906842623
     	   (mul X1125899906841600 X1023)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^50 - 1      */ gfp25519nsqr(&t,&z2_50_0, 50);

(* lea    0x100(%rsp),%rbx                         #! PC = 0x401e7f *)
adds dontcare rbx rsp 0x100@uint64;
(* mov    $0x32,%edx                               #! PC = 0x401e87 *)
mov rdx 0x32@uint64;
(* mov    %r12,%rsi                                #! PC = 0x401e8c *)
mov rsi r12;
(* mov    %rbp,%rdi                                #! PC = 0x401e8f *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401e92 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401e92 = 0x401e92;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdfa0; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdfa0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdfa8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdfa8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdfb0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdfb0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdfb8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdfb8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2251799813685246@uint256 : and [
     eq X2251799813685246 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2251799813685246
     	   (X1125899906842623**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4503599627370492@uint256 : and [
     eq X4503599627370492 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4503599627370492
     	   (X2251799813685246**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X9007199254740984@uint256 : and [
     eq X9007199254740984 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X9007199254740984
     	   (X4503599627370492**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X18014398509481968@uint256 : and [
     eq X18014398509481968 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X18014398509481968
     	   (X9007199254740984**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X36028797018963936@uint256 : and [
     eq X36028797018963936 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X36028797018963936
     	   (X18014398509481968**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X72057594037927872@uint256 : and [
     eq X72057594037927872 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X72057594037927872
     	   (X36028797018963936**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X144115188075855744@uint256 : and [
     eq X144115188075855744 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X144115188075855744
     	   (X72057594037927872**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X288230376151711488@uint256 : and [
     eq X288230376151711488 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X288230376151711488
     	   (X144115188075855744**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X576460752303422976@uint256 : and [
     eq X576460752303422976 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X576460752303422976
     	   (X288230376151711488**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1152921504606845952@uint256 : and [
     eq X1152921504606845952 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1152921504606845952
     	   (X576460752303422976**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2305843009213691904@uint256 : and [
     eq X2305843009213691904 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2305843009213691904
     	   (X1152921504606845952**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4611686018427383808@uint256 : and [
     eq X4611686018427383808 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4611686018427383808
     	   (X2305843009213691904**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X9223372036854767616@uint256 : and [
     eq X9223372036854767616 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X9223372036854767616
     	   (X4611686018427383808**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X18446744073709535232@uint256 : and [
     eq X18446744073709535232 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X18446744073709535232
     	   (X9223372036854767616**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X36893488147419070464@uint256 : and [
     eq X36893488147419070464 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X36893488147419070464
     	   (X18446744073709535232**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X73786976294838140928@uint256 : and [
     eq X73786976294838140928 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X73786976294838140928
     	   (X36893488147419070464**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X147573952589676281856@uint256 : and [
     eq X147573952589676281856 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X147573952589676281856
     	   (X73786976294838140928**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X295147905179352563712@uint256 : and [
     eq X295147905179352563712 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X295147905179352563712
     	   (X147573952589676281856**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X590295810358705127424@uint256 : and [
     eq X590295810358705127424 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X590295810358705127424
     	   (X295147905179352563712**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1180591620717410254848@uint256 : and [
     eq X1180591620717410254848 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1180591620717410254848
     	   (X590295810358705127424**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2361183241434820509696@uint256 : and [
     eq X2361183241434820509696 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2361183241434820509696
     	   (X1180591620717410254848**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4722366482869641019392@uint256 : and [
     eq X4722366482869641019392 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4722366482869641019392
     	   (X2361183241434820509696**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X9444732965739282038784@uint256 : and [
     eq X9444732965739282038784 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X9444732965739282038784
     	   (X4722366482869641019392**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X18889465931478564077568@uint256 : and [
     eq X18889465931478564077568 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X18889465931478564077568
     	   (X9444732965739282038784**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X37778931862957128155136@uint256 : and [
     eq X37778931862957128155136 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X37778931862957128155136
     	   (X18889465931478564077568**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X75557863725914256310272@uint256 : and [
     eq X75557863725914256310272 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X75557863725914256310272
     	   (X37778931862957128155136**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X151115727451828512620544@uint256 : and [
     eq X151115727451828512620544 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X151115727451828512620544
     	   (X75557863725914256310272**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X302231454903657025241088@uint256 : and [
     eq X302231454903657025241088 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X302231454903657025241088
     	   (X151115727451828512620544**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X604462909807314050482176@uint256 : and [
     eq X604462909807314050482176 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X604462909807314050482176
     	   (X302231454903657025241088**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1208925819614628100964352@uint256 : and [
     eq X1208925819614628100964352 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1208925819614628100964352
     	   (X604462909807314050482176**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2417851639229256201928704@uint256 : and [
     eq X2417851639229256201928704 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2417851639229256201928704
     	   (X1208925819614628100964352**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4835703278458512403857408@uint256 : and [
     eq X4835703278458512403857408 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4835703278458512403857408
     	   (X2417851639229256201928704**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X9671406556917024807714816@uint256 : and [
     eq X9671406556917024807714816 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X9671406556917024807714816
     	   (X4835703278458512403857408**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X19342813113834049615429632@uint256 : and [
     eq X19342813113834049615429632 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X19342813113834049615429632
     	   (X9671406556917024807714816**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X38685626227668099230859264@uint256 : and [
     eq X38685626227668099230859264 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X38685626227668099230859264
     	   (X19342813113834049615429632**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X77371252455336198461718528@uint256 : and [
     eq X77371252455336198461718528 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X77371252455336198461718528
     	   (X38685626227668099230859264**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X154742504910672396923437056@uint256 : and [
     eq X154742504910672396923437056 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X154742504910672396923437056
     	   (X77371252455336198461718528**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X309485009821344793846874112@uint256 : and [
     eq X309485009821344793846874112 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X309485009821344793846874112
     	   (X154742504910672396923437056**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X618970019642689587693748224@uint256 : and [
     eq X618970019642689587693748224 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X618970019642689587693748224
     	   (X309485009821344793846874112**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1237940039285379175387496448@uint256 : and [
     eq X1237940039285379175387496448 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1237940039285379175387496448
     	   (X618970019642689587693748224**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2475880078570758350774992896@uint256 : and [
     eq X2475880078570758350774992896 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2475880078570758350774992896
     	   (X1237940039285379175387496448**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X4951760157141516701549985792@uint256 : and [
     eq X4951760157141516701549985792 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X4951760157141516701549985792
     	   (X2475880078570758350774992896**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X9903520314283033403099971584@uint256 : and [
     eq X9903520314283033403099971584 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X9903520314283033403099971584
     	   (X4951760157141516701549985792**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X19807040628566066806199943168@uint256 : and [
     eq X19807040628566066806199943168 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X19807040628566066806199943168
     	   (X9903520314283033403099971584**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X39614081257132133612399886336@uint256 : and [
     eq X39614081257132133612399886336 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X39614081257132133612399886336
     	   (X19807040628566066806199943168**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X79228162514264267224799772672@uint256 : and [
     eq X79228162514264267224799772672 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X79228162514264267224799772672
     	   (X39614081257132133612399886336**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X158456325028528534449599545344@uint256 : and [
     eq X158456325028528534449599545344 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X158456325028528534449599545344
     	   (X79228162514264267224799772672**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X316912650057057068899199090688@uint256 : and [
     eq X316912650057057068899199090688 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X316912650057057068899199090688
     	   (X158456325028528534449599545344**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X633825300114114137798398181376@uint256 : and [
     eq X633825300114114137798398181376 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X633825300114114137798398181376
     	   (X316912650057057068899199090688**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1267650600228228275596796362752@uint256 : and [
     eq X1267650600228228275596796362752 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1267650600228228275596796362752
     	   (X633825300114114137798398181376**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^100 - 2^50  */ gfp25519mul(&z2_100_0,&t,&z2_50_0);

(* mov    %r12,%rdx                                #! PC = 0x401e97 *)
mov rdx r12;
(* mov    %rbp,%rsi                                #! PC = 0x401e9a *)
mov rsi rbp;
(* mov    %rbx,%rdi                                #! PC = 0x401e9d *)
mov rdi rbx;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401ea0 *)
#callq  0x401900 <gfp25519mul>                  #! 0x401ea0 = 0x401ea0;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdfa0; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdfa0;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdfa8; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdfa8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdfb0; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdfb0;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdfb8; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdfb8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdfc0; PC = 0x401abc *)
mov L0x7fffffffdfc0 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdfc8; PC = 0x401abf *)
mov L0x7fffffffdfc8 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffdfd0; PC = 0x401ac3 *)
mov L0x7fffffffdfd0 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffdfd8; PC = 0x401ac7 *)
mov L0x7fffffffdfd8 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1267650600228229401496703205375@uint256 : and [
     eq X1267650600228229401496703205375 (limbs 64 [L0x7fffffffdfc0, L0x7fffffffdfc8, L0x7fffffffdfd0, L0x7fffffffdfd8])
     ] && true;

cut
    and [
     eqmod X1267650600228229401496703205375
     	   (mul X1267650600228228275596796362752 X1125899906842623)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^100 - 1     */ gfp25519nsqr(&t,&z2_100_0, 100);

(* mov    $0x64,%edx                               #! PC = 0x401ea5 *)
mov rdx 0x64@uint64;
(* mov    %rbx,%rsi                                #! PC = 0x401eaa *)
mov rsi rbx;
(* mov    %rbp,%rdi                                #! PC = 0x401ead *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401eb0 *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401eb0 = 0x401eb0;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdfc0; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdfc0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdfc8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdfc8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffdfd0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffdfd0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffdfd8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffdfd8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2535301200456458802993406410750@uint256 : and [
     eq X2535301200456458802993406410750 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2535301200456458802993406410750
     	   (X1267650600228229401496703205375**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5070602400912917605986812821500@uint256 : and [
     eq X5070602400912917605986812821500 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5070602400912917605986812821500
     	   (X2535301200456458802993406410750**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X10141204801825835211973625643000@uint256 : and [
     eq X10141204801825835211973625643000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X10141204801825835211973625643000
     	   (X5070602400912917605986812821500**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X20282409603651670423947251286000@uint256 : and [
     eq X20282409603651670423947251286000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X20282409603651670423947251286000
     	   (X10141204801825835211973625643000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X40564819207303340847894502572000@uint256 : and [
     eq X40564819207303340847894502572000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X40564819207303340847894502572000
     	   (X20282409603651670423947251286000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X81129638414606681695789005144000@uint256 : and [
     eq X81129638414606681695789005144000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X81129638414606681695789005144000
     	   (X40564819207303340847894502572000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X162259276829213363391578010288000@uint256 : and [
     eq X162259276829213363391578010288000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X162259276829213363391578010288000
     	   (X81129638414606681695789005144000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X324518553658426726783156020576000@uint256 : and [
     eq X324518553658426726783156020576000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X324518553658426726783156020576000
     	   (X162259276829213363391578010288000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X649037107316853453566312041152000@uint256 : and [
     eq X649037107316853453566312041152000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X649037107316853453566312041152000
     	   (X324518553658426726783156020576000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1298074214633706907132624082304000@uint256 : and [
     eq X1298074214633706907132624082304000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1298074214633706907132624082304000
     	   (X649037107316853453566312041152000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2596148429267413814265248164608000@uint256 : and [
     eq X2596148429267413814265248164608000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2596148429267413814265248164608000
     	   (X1298074214633706907132624082304000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5192296858534827628530496329216000@uint256 : and [
     eq X5192296858534827628530496329216000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5192296858534827628530496329216000
     	   (X2596148429267413814265248164608000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X10384593717069655257060992658432000@uint256 : and [
     eq X10384593717069655257060992658432000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X10384593717069655257060992658432000
     	   (X5192296858534827628530496329216000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X20769187434139310514121985316864000@uint256 : and [
     eq X20769187434139310514121985316864000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X20769187434139310514121985316864000
     	   (X10384593717069655257060992658432000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X41538374868278621028243970633728000@uint256 : and [
     eq X41538374868278621028243970633728000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X41538374868278621028243970633728000
     	   (X20769187434139310514121985316864000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X83076749736557242056487941267456000@uint256 : and [
     eq X83076749736557242056487941267456000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X83076749736557242056487941267456000
     	   (X41538374868278621028243970633728000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X166153499473114484112975882534912000@uint256 : and [
     eq X166153499473114484112975882534912000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X166153499473114484112975882534912000
     	   (X83076749736557242056487941267456000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X332306998946228968225951765069824000@uint256 : and [
     eq X332306998946228968225951765069824000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X332306998946228968225951765069824000
     	   (X166153499473114484112975882534912000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X664613997892457936451903530139648000@uint256 : and [
     eq X664613997892457936451903530139648000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X664613997892457936451903530139648000
     	   (X332306998946228968225951765069824000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1329227995784915872903807060279296000@uint256 : and [
     eq X1329227995784915872903807060279296000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1329227995784915872903807060279296000
     	   (X664613997892457936451903530139648000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2658455991569831745807614120558592000@uint256 : and [
     eq X2658455991569831745807614120558592000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2658455991569831745807614120558592000
     	   (X1329227995784915872903807060279296000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5316911983139663491615228241117184000@uint256 : and [
     eq X5316911983139663491615228241117184000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5316911983139663491615228241117184000
     	   (X2658455991569831745807614120558592000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X10633823966279326983230456482234368000@uint256 : and [
     eq X10633823966279326983230456482234368000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X10633823966279326983230456482234368000
     	   (X5316911983139663491615228241117184000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X21267647932558653966460912964468736000@uint256 : and [
     eq X21267647932558653966460912964468736000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X21267647932558653966460912964468736000
     	   (X10633823966279326983230456482234368000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X42535295865117307932921825928937472000@uint256 : and [
     eq X42535295865117307932921825928937472000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X42535295865117307932921825928937472000
     	   (X21267647932558653966460912964468736000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X85070591730234615865843651857874944000@uint256 : and [
     eq X85070591730234615865843651857874944000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X85070591730234615865843651857874944000
     	   (X42535295865117307932921825928937472000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X170141183460469231731687303715749888000@uint256 : and [
     eq X170141183460469231731687303715749888000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X170141183460469231731687303715749888000
     	   (X85070591730234615865843651857874944000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X340282366920938463463374607431499776000@uint256 : and [
     eq X340282366920938463463374607431499776000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X340282366920938463463374607431499776000
     	   (X170141183460469231731687303715749888000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X680564733841876926926749214862999552000@uint256 : and [
     eq X680564733841876926926749214862999552000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X680564733841876926926749214862999552000
     	   (X340282366920938463463374607431499776000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1361129467683753853853498429725999104000@uint256 : and [
     eq X1361129467683753853853498429725999104000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1361129467683753853853498429725999104000
     	   (X680564733841876926926749214862999552000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2722258935367507707706996859451998208000@uint256 : and [
     eq X2722258935367507707706996859451998208000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2722258935367507707706996859451998208000
     	   (X1361129467683753853853498429725999104000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5444517870735015415413993718903996416000@uint256 : and [
     eq X5444517870735015415413993718903996416000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5444517870735015415413993718903996416000
     	   (X2722258935367507707706996859451998208000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X10889035741470030830827987437807992832000@uint256 : and [
     eq X10889035741470030830827987437807992832000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X10889035741470030830827987437807992832000
     	   (X5444517870735015415413993718903996416000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X21778071482940061661655974875615985664000@uint256 : and [
     eq X21778071482940061661655974875615985664000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X21778071482940061661655974875615985664000
     	   (X10889035741470030830827987437807992832000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X43556142965880123323311949751231971328000@uint256 : and [
     eq X43556142965880123323311949751231971328000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X43556142965880123323311949751231971328000
     	   (X21778071482940061661655974875615985664000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X87112285931760246646623899502463942656000@uint256 : and [
     eq X87112285931760246646623899502463942656000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X87112285931760246646623899502463942656000
     	   (X43556142965880123323311949751231971328000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X174224571863520493293247799004927885312000@uint256 : and [
     eq X174224571863520493293247799004927885312000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X174224571863520493293247799004927885312000
     	   (X87112285931760246646623899502463942656000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X348449143727040986586495598009855770624000@uint256 : and [
     eq X348449143727040986586495598009855770624000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X348449143727040986586495598009855770624000
     	   (X174224571863520493293247799004927885312000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X696898287454081973172991196019711541248000@uint256 : and [
     eq X696898287454081973172991196019711541248000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X696898287454081973172991196019711541248000
     	   (X348449143727040986586495598009855770624000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1393796574908163946345982392039423082496000@uint256 : and [
     eq X1393796574908163946345982392039423082496000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1393796574908163946345982392039423082496000
     	   (X696898287454081973172991196019711541248000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2787593149816327892691964784078846164992000@uint256 : and [
     eq X2787593149816327892691964784078846164992000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2787593149816327892691964784078846164992000
     	   (X1393796574908163946345982392039423082496000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5575186299632655785383929568157692329984000@uint256 : and [
     eq X5575186299632655785383929568157692329984000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5575186299632655785383929568157692329984000
     	   (X2787593149816327892691964784078846164992000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X11150372599265311570767859136315384659968000@uint256 : and [
     eq X11150372599265311570767859136315384659968000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X11150372599265311570767859136315384659968000
     	   (X5575186299632655785383929568157692329984000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X22300745198530623141535718272630769319936000@uint256 : and [
     eq X22300745198530623141535718272630769319936000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X22300745198530623141535718272630769319936000
     	   (X11150372599265311570767859136315384659968000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X44601490397061246283071436545261538639872000@uint256 : and [
     eq X44601490397061246283071436545261538639872000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X44601490397061246283071436545261538639872000
     	   (X22300745198530623141535718272630769319936000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X89202980794122492566142873090523077279744000@uint256 : and [
     eq X89202980794122492566142873090523077279744000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X89202980794122492566142873090523077279744000
     	   (X44601490397061246283071436545261538639872000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X178405961588244985132285746181046154559488000@uint256 : and [
     eq X178405961588244985132285746181046154559488000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X178405961588244985132285746181046154559488000
     	   (X89202980794122492566142873090523077279744000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X356811923176489970264571492362092309118976000@uint256 : and [
     eq X356811923176489970264571492362092309118976000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X356811923176489970264571492362092309118976000
     	   (X178405961588244985132285746181046154559488000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X713623846352979940529142984724184618237952000@uint256 : and [
     eq X713623846352979940529142984724184618237952000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X713623846352979940529142984724184618237952000
     	   (X356811923176489970264571492362092309118976000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1427247692705959881058285969448369236475904000@uint256 : and [
     eq X1427247692705959881058285969448369236475904000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1427247692705959881058285969448369236475904000
     	   (X713623846352979940529142984724184618237952000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2854495385411919762116571938896738472951808000@uint256 : and [
     eq X2854495385411919762116571938896738472951808000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2854495385411919762116571938896738472951808000
     	   (X1427247692705959881058285969448369236475904000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5708990770823839524233143877793476945903616000@uint256 : and [
     eq X5708990770823839524233143877793476945903616000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5708990770823839524233143877793476945903616000
     	   (X2854495385411919762116571938896738472951808000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X11417981541647679048466287755586953891807232000@uint256 : and [
     eq X11417981541647679048466287755586953891807232000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X11417981541647679048466287755586953891807232000
     	   (X5708990770823839524233143877793476945903616000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X22835963083295358096932575511173907783614464000@uint256 : and [
     eq X22835963083295358096932575511173907783614464000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X22835963083295358096932575511173907783614464000
     	   (X11417981541647679048466287755586953891807232000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X45671926166590716193865151022347815567228928000@uint256 : and [
     eq X45671926166590716193865151022347815567228928000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X45671926166590716193865151022347815567228928000
     	   (X22835963083295358096932575511173907783614464000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X91343852333181432387730302044695631134457856000@uint256 : and [
     eq X91343852333181432387730302044695631134457856000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X91343852333181432387730302044695631134457856000
     	   (X45671926166590716193865151022347815567228928000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X182687704666362864775460604089391262268915712000@uint256 : and [
     eq X182687704666362864775460604089391262268915712000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X182687704666362864775460604089391262268915712000
     	   (X91343852333181432387730302044695631134457856000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X365375409332725729550921208178782524537831424000@uint256 : and [
     eq X365375409332725729550921208178782524537831424000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X365375409332725729550921208178782524537831424000
     	   (X182687704666362864775460604089391262268915712000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X730750818665451459101842416357565049075662848000@uint256 : and [
     eq X730750818665451459101842416357565049075662848000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X730750818665451459101842416357565049075662848000
     	   (X365375409332725729550921208178782524537831424000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1461501637330902918203684832715130098151325696000@uint256 : and [
     eq X1461501637330902918203684832715130098151325696000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1461501637330902918203684832715130098151325696000
     	   (X730750818665451459101842416357565049075662848000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2923003274661805836407369665430260196302651392000@uint256 : and [
     eq X2923003274661805836407369665430260196302651392000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2923003274661805836407369665430260196302651392000
     	   (X1461501637330902918203684832715130098151325696000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5846006549323611672814739330860520392605302784000@uint256 : and [
     eq X5846006549323611672814739330860520392605302784000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5846006549323611672814739330860520392605302784000
     	   (X2923003274661805836407369665430260196302651392000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X11692013098647223345629478661721040785210605568000@uint256 : and [
     eq X11692013098647223345629478661721040785210605568000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X11692013098647223345629478661721040785210605568000
     	   (X5846006549323611672814739330860520392605302784000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X23384026197294446691258957323442081570421211136000@uint256 : and [
     eq X23384026197294446691258957323442081570421211136000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X23384026197294446691258957323442081570421211136000
     	   (X11692013098647223345629478661721040785210605568000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X46768052394588893382517914646884163140842422272000@uint256 : and [
     eq X46768052394588893382517914646884163140842422272000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X46768052394588893382517914646884163140842422272000
     	   (X23384026197294446691258957323442081570421211136000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X93536104789177786765035829293768326281684844544000@uint256 : and [
     eq X93536104789177786765035829293768326281684844544000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X93536104789177786765035829293768326281684844544000
     	   (X46768052394588893382517914646884163140842422272000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X187072209578355573530071658587536652563369689088000@uint256 : and [
     eq X187072209578355573530071658587536652563369689088000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X187072209578355573530071658587536652563369689088000
     	   (X93536104789177786765035829293768326281684844544000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X374144419156711147060143317175073305126739378176000@uint256 : and [
     eq X374144419156711147060143317175073305126739378176000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X374144419156711147060143317175073305126739378176000
     	   (X187072209578355573530071658587536652563369689088000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X748288838313422294120286634350146610253478756352000@uint256 : and [
     eq X748288838313422294120286634350146610253478756352000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X748288838313422294120286634350146610253478756352000
     	   (X374144419156711147060143317175073305126739378176000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1496577676626844588240573268700293220506957512704000@uint256 : and [
     eq X1496577676626844588240573268700293220506957512704000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1496577676626844588240573268700293220506957512704000
     	   (X748288838313422294120286634350146610253478756352000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X2993155353253689176481146537400586441013915025408000@uint256 : and [
     eq X2993155353253689176481146537400586441013915025408000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X2993155353253689176481146537400586441013915025408000
     	   (X1496577676626844588240573268700293220506957512704000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X5986310706507378352962293074801172882027830050816000@uint256 : and [
     eq X5986310706507378352962293074801172882027830050816000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X5986310706507378352962293074801172882027830050816000
     	   (X2993155353253689176481146537400586441013915025408000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X11972621413014756705924586149602345764055660101632000@uint256 : and [
     eq X11972621413014756705924586149602345764055660101632000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X11972621413014756705924586149602345764055660101632000
     	   (X5986310706507378352962293074801172882027830050816000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X23945242826029513411849172299204691528111320203264000@uint256 : and [
     eq X23945242826029513411849172299204691528111320203264000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X23945242826029513411849172299204691528111320203264000
     	   (X11972621413014756705924586149602345764055660101632000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X47890485652059026823698344598409383056222640406528000@uint256 : and [
     eq X47890485652059026823698344598409383056222640406528000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X47890485652059026823698344598409383056222640406528000
     	   (X23945242826029513411849172299204691528111320203264000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X95780971304118053647396689196818766112445280813056000@uint256 : and [
     eq X95780971304118053647396689196818766112445280813056000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X95780971304118053647396689196818766112445280813056000
     	   (X47890485652059026823698344598409383056222640406528000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X191561942608236107294793378393637532224890561626112000@uint256 : and [
     eq X191561942608236107294793378393637532224890561626112000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X191561942608236107294793378393637532224890561626112000
     	   (X95780971304118053647396689196818766112445280813056000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X383123885216472214589586756787275064449781123252224000@uint256 : and [
     eq X383123885216472214589586756787275064449781123252224000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X383123885216472214589586756787275064449781123252224000
     	   (X191561942608236107294793378393637532224890561626112000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X766247770432944429179173513574550128899562246504448000@uint256 : and [
     eq X766247770432944429179173513574550128899562246504448000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X766247770432944429179173513574550128899562246504448000
     	   (X383123885216472214589586756787275064449781123252224000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1532495540865888858358347027149100257799124493008896000@uint256 : and [
     eq X1532495540865888858358347027149100257799124493008896000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1532495540865888858358347027149100257799124493008896000
     	   (X766247770432944429179173513574550128899562246504448000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3064991081731777716716694054298200515598248986017792000@uint256 : and [
     eq X3064991081731777716716694054298200515598248986017792000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3064991081731777716716694054298200515598248986017792000
     	   (X1532495540865888858358347027149100257799124493008896000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6129982163463555433433388108596401031196497972035584000@uint256 : and [
     eq X6129982163463555433433388108596401031196497972035584000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6129982163463555433433388108596401031196497972035584000
     	   (X3064991081731777716716694054298200515598248986017792000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X12259964326927110866866776217192802062392995944071168000@uint256 : and [
     eq X12259964326927110866866776217192802062392995944071168000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X12259964326927110866866776217192802062392995944071168000
     	   (X6129982163463555433433388108596401031196497972035584000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X24519928653854221733733552434385604124785991888142336000@uint256 : and [
     eq X24519928653854221733733552434385604124785991888142336000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X24519928653854221733733552434385604124785991888142336000
     	   (X12259964326927110866866776217192802062392995944071168000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X49039857307708443467467104868771208249571983776284672000@uint256 : and [
     eq X49039857307708443467467104868771208249571983776284672000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X49039857307708443467467104868771208249571983776284672000
     	   (X24519928653854221733733552434385604124785991888142336000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X98079714615416886934934209737542416499143967552569344000@uint256 : and [
     eq X98079714615416886934934209737542416499143967552569344000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X98079714615416886934934209737542416499143967552569344000
     	   (X49039857307708443467467104868771208249571983776284672000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X196159429230833773869868419475084832998287935105138688000@uint256 : and [
     eq X196159429230833773869868419475084832998287935105138688000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X196159429230833773869868419475084832998287935105138688000
     	   (X98079714615416886934934209737542416499143967552569344000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X392318858461667547739736838950169665996575870210277376000@uint256 : and [
     eq X392318858461667547739736838950169665996575870210277376000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X392318858461667547739736838950169665996575870210277376000
     	   (X196159429230833773869868419475084832998287935105138688000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X784637716923335095479473677900339331993151740420554752000@uint256 : and [
     eq X784637716923335095479473677900339331993151740420554752000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X784637716923335095479473677900339331993151740420554752000
     	   (X392318858461667547739736838950169665996575870210277376000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1569275433846670190958947355800678663986303480841109504000@uint256 : and [
     eq X1569275433846670190958947355800678663986303480841109504000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1569275433846670190958947355800678663986303480841109504000
     	   (X784637716923335095479473677900339331993151740420554752000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3138550867693340381917894711601357327972606961682219008000@uint256 : and [
     eq X3138550867693340381917894711601357327972606961682219008000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3138550867693340381917894711601357327972606961682219008000
     	   (X1569275433846670190958947355800678663986303480841109504000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6277101735386680763835789423202714655945213923364438016000@uint256 : and [
     eq X6277101735386680763835789423202714655945213923364438016000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6277101735386680763835789423202714655945213923364438016000
     	   (X3138550867693340381917894711601357327972606961682219008000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X12554203470773361527671578846405429311890427846728876032000@uint256 : and [
     eq X12554203470773361527671578846405429311890427846728876032000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X12554203470773361527671578846405429311890427846728876032000
     	   (X6277101735386680763835789423202714655945213923364438016000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X25108406941546723055343157692810858623780855693457752064000@uint256 : and [
     eq X25108406941546723055343157692810858623780855693457752064000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X25108406941546723055343157692810858623780855693457752064000
     	   (X12554203470773361527671578846405429311890427846728876032000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X50216813883093446110686315385621717247561711386915504128000@uint256 : and [
     eq X50216813883093446110686315385621717247561711386915504128000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X50216813883093446110686315385621717247561711386915504128000
     	   (X25108406941546723055343157692810858623780855693457752064000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X100433627766186892221372630771243434495123422773831008256000@uint256 : and [
     eq X100433627766186892221372630771243434495123422773831008256000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X100433627766186892221372630771243434495123422773831008256000
     	   (X50216813883093446110686315385621717247561711386915504128000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X200867255532373784442745261542486868990246845547662016512000@uint256 : and [
     eq X200867255532373784442745261542486868990246845547662016512000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X200867255532373784442745261542486868990246845547662016512000
     	   (X100433627766186892221372630771243434495123422773831008256000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X401734511064747568885490523084973737980493691095324033024000@uint256 : and [
     eq X401734511064747568885490523084973737980493691095324033024000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X401734511064747568885490523084973737980493691095324033024000
     	   (X200867255532373784442745261542486868990246845547662016512000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X803469022129495137770981046169947475960987382190648066048000@uint256 : and [
     eq X803469022129495137770981046169947475960987382190648066048000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X803469022129495137770981046169947475960987382190648066048000
     	   (X401734511064747568885490523084973737980493691095324033024000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1606938044258990275541962092339894951921974764381296132096000@uint256 : and [
     eq X1606938044258990275541962092339894951921974764381296132096000 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1606938044258990275541962092339894951921974764381296132096000
     	   (X803469022129495137770981046169947475960987382190648066048000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^200 - 2^100 */  gfp25519mul(&t,&t,&z2_100_0);

(* mov    %rbx,%rdx                                #! PC = 0x401eb5 *)
mov rdx rbx;
(* mov    %rbp,%rsi                                #! PC = 0x401eb8 *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401ebb *)
mov rdi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401ebe *)
#callq  0x401900 <gfp25519mul>                  #! 0x401ebe = 0x401ebe;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdfc0; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdfc0;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdfc8; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdfc8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdfd0; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdfd0;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdfd8; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdfd8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdec0; PC = 0x401abc *)
mov L0x7fffffffdec0 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdec8; PC = 0x401abf *)
mov L0x7fffffffdec8 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401ac3 *)
mov L0x7fffffffded0 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401ac7 *)
mov L0x7fffffffded8 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1606938044258990275541962092341162602522202993782792835301375@uint256 : and [
     eq X1606938044258990275541962092341162602522202993782792835301375 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X1606938044258990275541962092341162602522202993782792835301375
     	   (mul X1606938044258990275541962092339894951921974764381296132096000 X1267650600228229401496703205375)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^200 - 1     */ gfp25519nsqr(&t,&t, 50);


(* mov    $0x32,%edx                               #! PC = 0x401ec3 *)
mov rdx 0x32@uint64;
(* mov    %rbp,%rsi                                #! PC = 0x401ec8 *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401ecb *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401ece *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401ece = 0x401ece;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdec0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdec8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffded0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffded8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3213876088517980551083924184682325205044405987565585670602750@uint256 : and [
     eq X3213876088517980551083924184682325205044405987565585670602750 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3213876088517980551083924184682325205044405987565585670602750
     	   (X1606938044258990275541962092341162602522202993782792835301375**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6427752177035961102167848369364650410088811975131171341205500@uint256 : and [
     eq X6427752177035961102167848369364650410088811975131171341205500 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6427752177035961102167848369364650410088811975131171341205500
     	   (X3213876088517980551083924184682325205044405987565585670602750**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X12855504354071922204335696738729300820177623950262342682411000@uint256 : and [
     eq X12855504354071922204335696738729300820177623950262342682411000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X12855504354071922204335696738729300820177623950262342682411000
     	   (X6427752177035961102167848369364650410088811975131171341205500**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X25711008708143844408671393477458601640355247900524685364822000@uint256 : and [
     eq X25711008708143844408671393477458601640355247900524685364822000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X25711008708143844408671393477458601640355247900524685364822000
     	   (X12855504354071922204335696738729300820177623950262342682411000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X51422017416287688817342786954917203280710495801049370729644000@uint256 : and [
     eq X51422017416287688817342786954917203280710495801049370729644000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X51422017416287688817342786954917203280710495801049370729644000
     	   (X25711008708143844408671393477458601640355247900524685364822000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X102844034832575377634685573909834406561420991602098741459288000@uint256 : and [
     eq X102844034832575377634685573909834406561420991602098741459288000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X102844034832575377634685573909834406561420991602098741459288000
     	   (X51422017416287688817342786954917203280710495801049370729644000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X205688069665150755269371147819668813122841983204197482918576000@uint256 : and [
     eq X205688069665150755269371147819668813122841983204197482918576000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X205688069665150755269371147819668813122841983204197482918576000
     	   (X102844034832575377634685573909834406561420991602098741459288000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X411376139330301510538742295639337626245683966408394965837152000@uint256 : and [
     eq X411376139330301510538742295639337626245683966408394965837152000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X411376139330301510538742295639337626245683966408394965837152000
     	   (X205688069665150755269371147819668813122841983204197482918576000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X822752278660603021077484591278675252491367932816789931674304000@uint256 : and [
     eq X822752278660603021077484591278675252491367932816789931674304000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X822752278660603021077484591278675252491367932816789931674304000
     	   (X411376139330301510538742295639337626245683966408394965837152000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1645504557321206042154969182557350504982735865633579863348608000@uint256 : and [
     eq X1645504557321206042154969182557350504982735865633579863348608000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1645504557321206042154969182557350504982735865633579863348608000
     	   (X822752278660603021077484591278675252491367932816789931674304000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3291009114642412084309938365114701009965471731267159726697216000@uint256 : and [
     eq X3291009114642412084309938365114701009965471731267159726697216000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3291009114642412084309938365114701009965471731267159726697216000
     	   (X1645504557321206042154969182557350504982735865633579863348608000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6582018229284824168619876730229402019930943462534319453394432000@uint256 : and [
     eq X6582018229284824168619876730229402019930943462534319453394432000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6582018229284824168619876730229402019930943462534319453394432000
     	   (X3291009114642412084309938365114701009965471731267159726697216000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X13164036458569648337239753460458804039861886925068638906788864000@uint256 : and [
     eq X13164036458569648337239753460458804039861886925068638906788864000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X13164036458569648337239753460458804039861886925068638906788864000
     	   (X6582018229284824168619876730229402019930943462534319453394432000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X26328072917139296674479506920917608079723773850137277813577728000@uint256 : and [
     eq X26328072917139296674479506920917608079723773850137277813577728000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X26328072917139296674479506920917608079723773850137277813577728000
     	   (X13164036458569648337239753460458804039861886925068638906788864000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X52656145834278593348959013841835216159447547700274555627155456000@uint256 : and [
     eq X52656145834278593348959013841835216159447547700274555627155456000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X52656145834278593348959013841835216159447547700274555627155456000
     	   (X26328072917139296674479506920917608079723773850137277813577728000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X105312291668557186697918027683670432318895095400549111254310912000@uint256 : and [
     eq X105312291668557186697918027683670432318895095400549111254310912000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X105312291668557186697918027683670432318895095400549111254310912000
     	   (X52656145834278593348959013841835216159447547700274555627155456000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X210624583337114373395836055367340864637790190801098222508621824000@uint256 : and [
     eq X210624583337114373395836055367340864637790190801098222508621824000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X210624583337114373395836055367340864637790190801098222508621824000
     	   (X105312291668557186697918027683670432318895095400549111254310912000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X421249166674228746791672110734681729275580381602196445017243648000@uint256 : and [
     eq X421249166674228746791672110734681729275580381602196445017243648000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X421249166674228746791672110734681729275580381602196445017243648000
     	   (X210624583337114373395836055367340864637790190801098222508621824000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X842498333348457493583344221469363458551160763204392890034487296000@uint256 : and [
     eq X842498333348457493583344221469363458551160763204392890034487296000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X842498333348457493583344221469363458551160763204392890034487296000
     	   (X421249166674228746791672110734681729275580381602196445017243648000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1684996666696914987166688442938726917102321526408785780068974592000@uint256 : and [
     eq X1684996666696914987166688442938726917102321526408785780068974592000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1684996666696914987166688442938726917102321526408785780068974592000
     	   (X842498333348457493583344221469363458551160763204392890034487296000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3369993333393829974333376885877453834204643052817571560137949184000@uint256 : and [
     eq X3369993333393829974333376885877453834204643052817571560137949184000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3369993333393829974333376885877453834204643052817571560137949184000
     	   (X1684996666696914987166688442938726917102321526408785780068974592000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6739986666787659948666753771754907668409286105635143120275898368000@uint256 : and [
     eq X6739986666787659948666753771754907668409286105635143120275898368000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6739986666787659948666753771754907668409286105635143120275898368000
     	   (X3369993333393829974333376885877453834204643052817571560137949184000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X13479973333575319897333507543509815336818572211270286240551796736000@uint256 : and [
     eq X13479973333575319897333507543509815336818572211270286240551796736000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X13479973333575319897333507543509815336818572211270286240551796736000
     	   (X6739986666787659948666753771754907668409286105635143120275898368000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X26959946667150639794667015087019630673637144422540572481103593472000@uint256 : and [
     eq X26959946667150639794667015087019630673637144422540572481103593472000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X26959946667150639794667015087019630673637144422540572481103593472000
     	   (X13479973333575319897333507543509815336818572211270286240551796736000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X53919893334301279589334030174039261347274288845081144962207186944000@uint256 : and [
     eq X53919893334301279589334030174039261347274288845081144962207186944000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X53919893334301279589334030174039261347274288845081144962207186944000
     	   (X26959946667150639794667015087019630673637144422540572481103593472000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X107839786668602559178668060348078522694548577690162289924414373888000@uint256 : and [
     eq X107839786668602559178668060348078522694548577690162289924414373888000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X107839786668602559178668060348078522694548577690162289924414373888000
     	   (X53919893334301279589334030174039261347274288845081144962207186944000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X215679573337205118357336120696157045389097155380324579848828747776000@uint256 : and [
     eq X215679573337205118357336120696157045389097155380324579848828747776000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X215679573337205118357336120696157045389097155380324579848828747776000
     	   (X107839786668602559178668060348078522694548577690162289924414373888000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X431359146674410236714672241392314090778194310760649159697657495552000@uint256 : and [
     eq X431359146674410236714672241392314090778194310760649159697657495552000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X431359146674410236714672241392314090778194310760649159697657495552000
     	   (X215679573337205118357336120696157045389097155380324579848828747776000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X862718293348820473429344482784628181556388621521298319395314991104000@uint256 : and [
     eq X862718293348820473429344482784628181556388621521298319395314991104000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X862718293348820473429344482784628181556388621521298319395314991104000
     	   (X431359146674410236714672241392314090778194310760649159697657495552000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1725436586697640946858688965569256363112777243042596638790629982208000@uint256 : and [
     eq X1725436586697640946858688965569256363112777243042596638790629982208000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1725436586697640946858688965569256363112777243042596638790629982208000
     	   (X862718293348820473429344482784628181556388621521298319395314991104000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3450873173395281893717377931138512726225554486085193277581259964416000@uint256 : and [
     eq X3450873173395281893717377931138512726225554486085193277581259964416000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3450873173395281893717377931138512726225554486085193277581259964416000
     	   (X1725436586697640946858688965569256363112777243042596638790629982208000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X6901746346790563787434755862277025452451108972170386555162519928832000@uint256 : and [
     eq X6901746346790563787434755862277025452451108972170386555162519928832000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X6901746346790563787434755862277025452451108972170386555162519928832000
     	   (X3450873173395281893717377931138512726225554486085193277581259964416000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X13803492693581127574869511724554050904902217944340773110325039857664000@uint256 : and [
     eq X13803492693581127574869511724554050904902217944340773110325039857664000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X13803492693581127574869511724554050904902217944340773110325039857664000
     	   (X6901746346790563787434755862277025452451108972170386555162519928832000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X27606985387162255149739023449108101809804435888681546220650079715328000@uint256 : and [
     eq X27606985387162255149739023449108101809804435888681546220650079715328000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X27606985387162255149739023449108101809804435888681546220650079715328000
     	   (X13803492693581127574869511724554050904902217944340773110325039857664000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X55213970774324510299478046898216203619608871777363092441300159430656000@uint256 : and [
     eq X55213970774324510299478046898216203619608871777363092441300159430656000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X55213970774324510299478046898216203619608871777363092441300159430656000
     	   (X27606985387162255149739023449108101809804435888681546220650079715328000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X110427941548649020598956093796432407239217743554726184882600318861312000@uint256 : and [
     eq X110427941548649020598956093796432407239217743554726184882600318861312000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X110427941548649020598956093796432407239217743554726184882600318861312000
     	   (X55213970774324510299478046898216203619608871777363092441300159430656000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X220855883097298041197912187592864814478435487109452369765200637722624000@uint256 : and [
     eq X220855883097298041197912187592864814478435487109452369765200637722624000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X220855883097298041197912187592864814478435487109452369765200637722624000
     	   (X110427941548649020598956093796432407239217743554726184882600318861312000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X441711766194596082395824375185729628956870974218904739530401275445248000@uint256 : and [
     eq X441711766194596082395824375185729628956870974218904739530401275445248000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X441711766194596082395824375185729628956870974218904739530401275445248000
     	   (X220855883097298041197912187592864814478435487109452369765200637722624000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X883423532389192164791648750371459257913741948437809479060802550890496000@uint256 : and [
     eq X883423532389192164791648750371459257913741948437809479060802550890496000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X883423532389192164791648750371459257913741948437809479060802550890496000
     	   (X441711766194596082395824375185729628956870974218904739530401275445248000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X1766847064778384329583297500742918515827483896875618958121605101780992000@uint256 : and [
     eq X1766847064778384329583297500742918515827483896875618958121605101780992000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X1766847064778384329583297500742918515827483896875618958121605101780992000
     	   (X883423532389192164791648750371459257913741948437809479060802550890496000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3533694129556768659166595001485837031654967793751237916243210203561984000@uint256 : and [
     eq X3533694129556768659166595001485837031654967793751237916243210203561984000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3533694129556768659166595001485837031654967793751237916243210203561984000
     	   (X1766847064778384329583297500742918515827483896875618958121605101780992000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X7067388259113537318333190002971674063309935587502475832486420407123968000@uint256 : and [
     eq X7067388259113537318333190002971674063309935587502475832486420407123968000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X7067388259113537318333190002971674063309935587502475832486420407123968000
     	   (X3533694129556768659166595001485837031654967793751237916243210203561984000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X14134776518227074636666380005943348126619871175004951664972840814247936000@uint256 : and [
     eq X14134776518227074636666380005943348126619871175004951664972840814247936000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X14134776518227074636666380005943348126619871175004951664972840814247936000
     	   (X7067388259113537318333190002971674063309935587502475832486420407123968000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X28269553036454149273332760011886696253239742350009903329945681628495872000@uint256 : and [
     eq X28269553036454149273332760011886696253239742350009903329945681628495872000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X28269553036454149273332760011886696253239742350009903329945681628495872000
     	   (X14134776518227074636666380005943348126619871175004951664972840814247936000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X56539106072908298546665520023773392506479484700019806659891363256991744000@uint256 : and [
     eq X56539106072908298546665520023773392506479484700019806659891363256991744000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X56539106072908298546665520023773392506479484700019806659891363256991744000
     	   (X28269553036454149273332760011886696253239742350009903329945681628495872000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X113078212145816597093331040047546785012958969400039613319782726513983488000@uint256 : and [
     eq X113078212145816597093331040047546785012958969400039613319782726513983488000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X113078212145816597093331040047546785012958969400039613319782726513983488000
     	   (X56539106072908298546665520023773392506479484700019806659891363256991744000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X226156424291633194186662080095093570025917938800079226639565453027966976000@uint256 : and [
     eq X226156424291633194186662080095093570025917938800079226639565453027966976000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X226156424291633194186662080095093570025917938800079226639565453027966976000
     	   (X113078212145816597093331040047546785012958969400039613319782726513983488000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X452312848583266388373324160190187140051835877600158453279130906055933952000@uint256 : and [
     eq X452312848583266388373324160190187140051835877600158453279130906055933952000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X452312848583266388373324160190187140051835877600158453279130906055933952000
     	   (X226156424291633194186662080095093570025917938800079226639565453027966976000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X904625697166532776746648320380374280103671755200316906558261812111867904000@uint256 : and [
     eq X904625697166532776746648320380374280103671755200316906558261812111867904000 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X904625697166532776746648320380374280103671755200316906558261812111867904000
     	   (X452312848583266388373324160190187140051835877600158453279130906055933952000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X1809251394333065553493296640760748560207343510400633813116523624223735808000@uint256 : and [
     eq X1809251394333065553493296640760748560207343510400633813116523624223735808000 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X1809251394333065553493296640760748560207343510400633813116523624223735808000
     	   (X904625697166532776746648320380374280103671755200316906558261812111867904000**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^250 - 2^50  */ gfp25519mul(&t,&t,&z2_50_0);

(* mov    %r12,%rdx                                #! PC = 0x401ed3 *)
mov rdx r12;
(* mov    %rbp,%rsi                                #! PC = 0x401ed6 *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401ed9 *)
mov rdi rbp;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401edc *)
#callq  0x401900 <gfp25519mul>                  #! 0x401edc = 0x401edc;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdfa0; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdfa0;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdfa8; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdfa8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdfb0; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdfb0;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdfb8; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdfb8;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffdec0; PC = 0x401abc *)
mov L0x7fffffffdec0 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffdec8; PC = 0x401abf *)
mov L0x7fffffffdec8 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401ac3 *)
mov L0x7fffffffded0 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401ac7 *)
mov L0x7fffffffded8 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X1809251394333065553493296640760748560207343510400633813116524750123642650623@uint256 : and [
     eq X1809251394333065553493296640760748560207343510400633813116524750123642650623 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
     eqmod X1809251394333065553493296640760748560207343510400633813116524750123642650623
     	   (mul X1809251394333065553493296640760748560207343510400633813116523624223735808000 X1125899906842623)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^250 - 1     */ gfp25519nsqr(&t,&t,5); 

(* mov    $0x5,%edx                                #! PC = 0x401ee1 *)
mov rdx 0x5@uint64;
(* mov    %rbp,%rsi                                #! PC = 0x401ee6 *)
mov rsi rbp;
(* mov    %rbp,%rdi                                #! PC = 0x401ee9 *)
mov rdi rbp;
(* #callq  0x401b20 <gfp25519nsqr>                 #! PC = 0x401eec *)
#callq  0x401b20 <gfp25519nsqr>                 #! 0x401eec = 0x401eec;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401b20 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401b21 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401b22 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401b24 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401b26 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401b28 *)
(* push   %%r15 *)
(* push   %rdi                                     #! EA = L0x7fffffffde80; PC = 0x401b2a *)
(* push   %%rdi *)
(* mov    (%rsi),%rbx                              #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffec; PC = 0x401b2b *)
mov rbx L0x7fffffffdec0;
(* mov    0x8(%rsi),%rbp                           #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401b2e *)
mov rbp L0x7fffffffdec8;
(* mov    0x10(%rsi),%rax                          #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401b32 *)
mov rax L0x7fffffffded0;
(* mov    0x18(%rsi),%rsi                          #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401b36 *)
mov rsi L0x7fffffffded8;
(* mov    %rdx,%rdi                                #! PC = 0x401b3a *)
mov rdi rdx;
(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X3618502788666131106986593281521497120414687020801267626233049500247285301246@uint256 : and [
     eq X3618502788666131106986593281521497120414687020801267626233049500247285301246 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X3618502788666131106986593281521497120414687020801267626233049500247285301246
     	   (X1809251394333065553493296640760748560207343510400633813116524750123642650623**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X7237005577332262213973186563042994240829374041602535252466099000494570602492@uint256 : and [
     eq X7237005577332262213973186563042994240829374041602535252466099000494570602492 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X7237005577332262213973186563042994240829374041602535252466099000494570602492
     	   (X3618502788666131106986593281521497120414687020801267626233049500247285301246**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X14474011154664524427946373126085988481658748083205070504932198000989141204984@uint256 : and [
     eq X14474011154664524427946373126085988481658748083205070504932198000989141204984 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X14474011154664524427946373126085988481658748083205070504932198000989141204984
     	   (X7237005577332262213973186563042994240829374041602535252466099000494570602492**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;

ghost X28948022309329048855892746252171976963317496166410141009864396001978282409968@uint256 : and [
     eq X28948022309329048855892746252171976963317496166410141009864396001978282409968 (limbs 64 [rbx, rbp, rax, rsi])
     ] && true;

cut
    and [
     eqmod X28948022309329048855892746252171976963317496166410141009864396001978282409968
     	   (X14474011154664524427946373126085988481658748083205070504932198000989141204984**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;

(* dec    %rdi                                     #! PC = 0x401b3d *)
(* dec    %%rdi *)
(* xor    %r13,%r13                                #! PC = 0x401b40 *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401b43 *)
mov rdx rbx;
(* mulx   %rbp,%r9,%r10                            #! PC = 0x401b46 *)
umull r10 r9 rbp rdx;
(* mulx   %rax,%rcx,%r11                           #! PC = 0x401b4b *)
umull r11 rcx rax rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401b50 *)
adcs carry r10 r10 rcx carry;
(* mulx   %rsi,%rcx,%r12                           #! PC = 0x401b56 *)
umull r12 rcx rsi rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b5b *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x401b61 *)
adc r12 r12 r13 carry;
(* mov    %rbp,%rdx                                #! PC = 0x401b67 *)
mov rdx rbp;
(* xor    %r14,%r14                                #! PC = 0x401b6a *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mulx   %rax,%rcx,%rdx                           #! PC = 0x401b6d *)
umull rdx rcx rax rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401b72 *)
adcs carry r11 r11 rcx carry;
(* adox   %rdx,%r12                                #! PC = 0x401b78 *)
adcs overflow r12 r12 rdx overflow;
(* mov    %rbp,%rdx                                #! PC = 0x401b7e *)
mov rdx rbp;
(* mulx   %rsi,%rcx,%rdx                           #! PC = 0x401b81 *)
umull rdx rcx rsi rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401b86 *)
adcs carry r12 r12 rcx carry;
(* adox   %rdx,%r13                                #! PC = 0x401b8c *)
adc r13 r13 rdx overflow;
(* adcx   %r14,%r13                                #! PC = 0x401b92 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401b98 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rax,%rdx                                #! PC = 0x401b9b *)
mov rdx rax;
(* mulx   %rsi,%rcx,%r14                           #! PC = 0x401b9e *)
umull r14 rcx rsi rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401ba3 *)
adcs carry r13 r13 rcx carry;
(* adcx   %r15,%r14                                #! PC = 0x401ba9 *)
adc r14 r14 r15 carry;
(* shld   $0x1,%r14,%r15                           #! PC = 0x401baf *)
(* cshl r15 dontcare r15 r14 0x1; *)
(* shld   $0x1,%r13,%r14                           #! PC = 0x401bb4 *)
(* cshl r14 dontcare r14 r13 0x1; *)
(* shld   $0x1,%r12,%r13                           #! PC = 0x401bb9 *)
(* cshl r13 dontcare r13 r12 0x1; *)
(* shld   $0x1,%r11,%r12                           #! PC = 0x401bbe *)
(* cshl r12 dontcare r12 r11 0x1; *)
(* shld   $0x1,%r10,%r11                           #! PC = 0x401bc3 *)
(* cshl r11 dontcare r11 r10 0x1; *)
(* shld   $0x1,%r9,%r10                            #! PC = 0x401bc8 *)
(* cshl r10 dontcare r10 r9 0x1; *)
(* shl    %r9                                      #! PC = 0x401bcd *)
(* shl    %%r9                                      #! 0x401bcd = 0x401bcd; *)



adds carry r9 r9 r9;
adcs carry r10 r10 r10 carry;
adcs carry r11 r11 r11 carry;
adcs carry r12 r12 r12 carry;
adcs carry r13 r13 r13 carry;
adcs carry r14 r14 r14 carry;
adc r15 r15 r15 carry;

(* xor    %rdx,%rdx                                #! PC = 0x401bd0 *)
mov rdx 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    %rbx,%rdx                                #! PC = 0x401bd3 *)
mov rdx rbx;
(* mulx   %rdx,%r8,%rdx                            #! PC = 0x401bd6 *)
umull rdx r8 rdx rdx;
(* adcx   %rdx,%r9                                 #! PC = 0x401bdb *)
adcs carry r9 r9 rdx carry;
(* mov    %rbp,%rdx                                #! PC = 0x401be1 *)
mov rdx rbp;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401be4 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401be9 *)
adcs carry r10 r10 rcx carry;
(* adcx   %rdx,%r11                                #! PC = 0x401bef *)
adcs carry r11 r11 rdx carry;
(* mov    %rax,%rdx                                #! PC = 0x401bf5 *)
mov rdx rax;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401bf8 *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401bfd *)
adcs carry r12 r12 rcx carry;
(* adcx   %rdx,%r13                                #! PC = 0x401c03 *)
adcs carry r13 r13 rdx carry;
(* mov    %rsi,%rdx                                #! PC = 0x401c09 *)
mov rdx rsi;
(* mulx   %rdx,%rcx,%rdx                           #! PC = 0x401c0c *)
umull rdx rcx rdx rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401c11 *)
adcs carry r14 r14 rcx carry;
(* adcx   %rdx,%r15                                #! PC = 0x401c17 *)
adc r15 r15 rdx carry;
(* xor    %rbp,%rbp                                #! PC = 0x401c1d *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401c20 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rbx,%rbp                           #! PC = 0x401c27 *)
umull rbp rbx r12 rdx;
(* adcx   %r8,%rbx                                 #! PC = 0x401c2c *)
adcs carry rbx rbx r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x401c32 *)
adcs overflow rbp rbp r9 overflow;
(* mulx   %r13,%rcx,%rax                           #! PC = 0x401c38 *)
umull rax rcx r13 rdx;
(* adcx   %rcx,%rbp                                #! PC = 0x401c3d *)
adcs carry rbp rbp rcx carry;
(* adox   %r10,%rax                                #! PC = 0x401c43 *)
adcs overflow rax rax r10 overflow;
(* mulx   %r14,%rcx,%rsi                           #! PC = 0x401c49 *)
umull rsi rcx r14 rdx;
(* adcx   %rcx,%rax                                #! PC = 0x401c4e *)
adcs carry rax rax rcx carry;
(* adox   %r11,%rsi                                #! PC = 0x401c54 *)
adcs overflow rsi rsi r11 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401c5a *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%rsi                                #! PC = 0x401c5f *)
adcs carry rsi rsi rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401c65 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401c70 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%rsi,%r15                           #! PC = 0x401c7b *)
(* cshl r15 dontcare r15 rsi 0x1; *)
(* and    0x405070,%rsi                            #! PC = 0x401c80 *)
(* split dontcare rsi rsi 63; *)
join t r15 rsi;
split t1 t2 t 63;
vpc rsi@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401c88 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%rbx                                #! PC = 0x401c8c *)
adds carry rbx r15 rbx;
nondet overflow@uint1;
(* adc    $0x0,%rbp                                #! PC = 0x401c8f *)
adcs carry rbp 0x0@uint64 rbp carry;
nondet overflow@uint1;
(* adc    $0x0,%rax                                #! PC = 0x401c93 *)
adcs carry rax 0x0@uint64 rax carry;
nondet overflow@uint1;
(* adc    $0x0,%rsi                                #! PC = 0x401c97 *)
adc rsi 0x0@uint64 rsi carry;
nondet overflow@uint1;
(* cmp    $0x0,%rdi                                #! PC = 0x401c9b *)
(* cmp    $0x0,%%rdi                                #! 0x401c9b = 0x401c9b; *)
nondet carry@uint1;
nondet overflow@uint1;
(* #jne    0x401b3d <.START>                       #! PC = 0x401c9f *)
#jne    0x401b3d <.START>                       #! 0x401c9f = 0x401c9f;
(* pop    %rdi                                     #! EA = L0x7fffffffde80; Value = 0x00007fffffffdec0; PC = 0x401ca5 *)
(* pop    %%rdi *)
(* mov    %rbx,(%rdi)                              #! EA = L0x7fffffffdec0; PC = 0x401ca6 *)
mov L0x7fffffffdec0 rbx;
(* mov    %rbp,0x8(%rdi)                           #! EA = L0x7fffffffdec8; PC = 0x401ca9 *)
mov L0x7fffffffdec8 rbp;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffded0; PC = 0x401cad *)
mov L0x7fffffffded0 rax;
(* mov    %rsi,0x18(%rdi)                          #! EA = L0x7fffffffded8; PC = 0x401cb1 *)
mov L0x7fffffffded8 rsi;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401cb5 *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401cb7 *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401cb9 *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401cbb *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401cbd *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401cbe *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401cbf *)
#retq                                           #! 0x401cbf = 0x401cbf;

ghost X57896044618658097711785492504343953926634992332820282019728792003956564819936@uint256 : and [
     eq X57896044618658097711785492504343953926634992332820282019728792003956564819936 (limbs 64 [L0x7fffffffdec0, L0x7fffffffdec8, L0x7fffffffded0, L0x7fffffffded8])
     ] && true;

cut
    and [
      eqmod X57896044618658097711785492504343953926634992332820282019728792003956564819936
     	   (X28948022309329048855892746252171976963317496166410141009864396001978282409968**2)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] && true;


#	/* 2^255 - 2^5   */ gfp25519mul(einv,&t,&z11);

(* mov    %r15,%rdx                                #! PC = 0x401ef1 *)
mov rdx r15;
(* mov    %rbp,%rsi                                #! PC = 0x401ef4 *)
mov rsi rbp;
(* mov    %r14,%rdi                                #! PC = 0x401ef7 *)
mov rdi r14;
(* #callq  0x401900 <gfp25519mul>                  #! PC = 0x401efa *)
#callq  0x401900 <gfp25519mul>                  #! 0x401efa = 0x401efa;
(* #! -> SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* push   %rbp                                     #! EA = L0x7fffffffdeb0; PC = 0x401900 *)
(* push   %%rbp *)
(* push   %rbx                                     #! EA = L0x7fffffffdea8; PC = 0x401901 *)
(* push   %%rbx *)
(* push   %r12                                     #! EA = L0x7fffffffdea0; PC = 0x401902 *)
(* push   %%r12 *)
(* push   %r13                                     #! EA = L0x7fffffffde98; PC = 0x401904 *)
(* push   %%r13 *)
(* push   %r14                                     #! EA = L0x7fffffffde90; PC = 0x401906 *)
(* push   %%r14 *)
(* push   %r15                                     #! EA = L0x7fffffffde88; PC = 0x401908 *)
(* push   %%r15 *)
(* mov    %rdx,%rbx                                #! PC = 0x40190a *)
mov rbx rdx;
(* xor    %r13,%r13                                #! PC = 0x40190d *)
mov r13 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffdf20; Value = 0xffffffffffffffec; PC = 0x401910 *)
mov rdx L0x7fffffffdf20;
(* mulx   (%rsi),%r8,%r9                           #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401913 *)
umull r9 r8 L0x7fffffffdec0 rdx;
(* mulx   0x8(%rsi),%rcx,%r10                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401918 *)
umull r10 rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40191e *)
adcs carry r9 r9 rcx carry;
(* mulx   0x10(%rsi),%rcx,%r11                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401924 *)
umull r11 rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x40192a *)
adcs carry r10 r10 rcx carry;
(* mulx   0x18(%rsi),%rcx,%r12                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401930 *)
umull r12 rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401936 *)
adcs carry r11 r11 rcx carry;
(* adcx   %r13,%r12                                #! PC = 0x40193c *)
adc r12 r12 r13 carry;
(* xor    %r14,%r14                                #! PC = 0x401942 *)
mov r14 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffdf28; Value = 0xffffffffffffffff; PC = 0x401945 *)
mov rdx L0x7fffffffdf28;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x401949 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x40194e *)
adcs carry r9 r9 rcx carry;
(* adox   %rbp,%r10                                #! PC = 0x401954 *)
adcs overflow r10 r10 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x40195a *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401960 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x401966 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x40196c *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401972 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x401978 *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x40197e *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401984 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x40198a *)
adc r13 r13 rbp overflow;
(* adcx   %r14,%r13                                #! PC = 0x401990 *)
adc r13 r13 r14 carry;
(* xor    %r15,%r15                                #! PC = 0x401996 *)
mov r15 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffdf30; Value = 0xffffffffffffffff; PC = 0x401999 *)
mov rdx L0x7fffffffdf30;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x40199d *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x4019a2 *)
adcs carry r10 r10 rcx carry;
(* adox   %rbp,%r11                                #! PC = 0x4019a8 *)
adcs overflow r11 r11 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x4019ae *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019b4 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019ba *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x4019c0 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x4019c6 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x4019cc *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x4019d2 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x4019d8 *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x4019de *)
adc r14 r14 rbp overflow;
(* adcx   %r15,%r14                                #! PC = 0x4019e4 *)
adc r14 r14 r15 carry;
(* xor    %rax,%rax                                #! PC = 0x4019ea *)
mov rax 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffdf38; Value = 0x7fffffffffffffff; PC = 0x4019ed *)
mov rdx L0x7fffffffdf38;
(* mulx   (%rsi),%rcx,%rbp                         #! EA = L0x7fffffffdec0; Value = 0xffffffffffffffee; PC = 0x4019f1 *)
umull rbp rcx L0x7fffffffdec0 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x4019f6 *)
adcs carry r11 r11 rcx carry;
(* adox   %rbp,%r12                                #! PC = 0x4019fc *)
adcs overflow r12 r12 rbp overflow;
(* mulx   0x8(%rsi),%rcx,%rbp                      #! EA = L0x7fffffffdec8; Value = 0xffffffffffffffff; PC = 0x401a02 *)
umull rbp rcx L0x7fffffffdec8 rdx;
(* adcx   %rcx,%r12                                #! PC = 0x401a08 *)
adcs carry r12 r12 rcx carry;
(* adox   %rbp,%r13                                #! PC = 0x401a0e *)
adcs overflow r13 r13 rbp overflow;
(* mulx   0x10(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded0; Value = 0xffffffffffffffff; PC = 0x401a14 *)
umull rbp rcx L0x7fffffffded0 rdx;
(* adcx   %rcx,%r13                                #! PC = 0x401a1a *)
adcs carry r13 r13 rcx carry;
(* adox   %rbp,%r14                                #! PC = 0x401a20 *)
adcs overflow r14 r14 rbp overflow;
(* mulx   0x18(%rsi),%rcx,%rbp                     #! EA = L0x7fffffffded8; Value = 0x7fffffffffffffff; PC = 0x401a26 *)
umull rbp rcx L0x7fffffffded8 rdx;
(* adcx   %rcx,%r14                                #! PC = 0x401a2c *)
adcs carry r14 r14 rcx carry;
(* adox   %rbp,%r15                                #! PC = 0x401a32 *)
adc r15 r15 rbp overflow;
(* adcx   %rax,%r15                                #! PC = 0x401a38 *)
adc r15 r15 rax carry;
(* xor    %rbp,%rbp                                #! PC = 0x401a3e *)
mov rbp 0@uint64;
mov carry 0@uint1;
mov overflow 0@uint1;
(* mov    $0x26,%rdx                               #! PC = 0x401a41 *)
mov rdx 0x26@uint64;
(* mulx   %r12,%rax,%r12                           #! PC = 0x401a48 *)
umull r12 rax r12 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x401a4d *)
adcs carry r8 r8 rax carry;
(* adox   %r12,%r9                                 #! PC = 0x401a53 *)
adcs overflow r9 r9 r12 overflow;
(* mulx   %r13,%rcx,%r13                           #! PC = 0x401a59 *)
umull r13 rcx r13 rdx;
(* adcx   %rcx,%r9                                 #! PC = 0x401a5e *)
adcs carry r9 r9 rcx carry;
(* adox   %r13,%r10                                #! PC = 0x401a64 *)
adcs overflow r10 r10 r13 overflow;
(* mulx   %r14,%rcx,%r14                           #! PC = 0x401a6a *)
umull r14 rcx r14 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x401a6f *)
adcs carry r10 r10 rcx carry;
(* adox   %r14,%r11                                #! PC = 0x401a75 *)
adcs overflow r11 r11 r14 overflow;
(* mulx   %r15,%rcx,%r15                           #! PC = 0x401a7b *)
umull r15 rcx r15 rdx;
(* adcx   %rcx,%r11                                #! PC = 0x401a80 *)
adcs carry r11 r11 rcx carry;
(* adox   0x405068,%r15                            #! PC = 0x401a86 *)
adc r15 0@uint64 r15 overflow;
(* adcx   0x405068,%r15                            #! PC = 0x401a91 *)
adc r15 0@uint64 r15 carry;
(* shld   $0x1,%r11,%r15                           #! PC = 0x401a9c *)
(* cshl r15 dontcare r15 r11 0x1; *)
(* and    0x405070,%r11                            #! PC = 0x401aa1 *)
(* split dontcare r11 r11 63; *)
join t r15 r11;
split t1 t2 t 63;
vpc r11@uint64 t2;
vpc r15@uint64 t1;
(* imul   $0x13,%r15,%r15                          #! PC = 0x401aa9 *)
mul r15 r15 0x13@uint64;
(* add    %r15,%r8                                 #! PC = 0x401aad *)
adds carry r8 r15 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401ab0 *)
adcs carry r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* adc    $0x0,%r10                                #! PC = 0x401ab4 *)
adcs carry r10 0x0@uint64 r10 carry;
nondet overflow@uint1;
(* adc    $0x0,%r11                                #! PC = 0x401ab8 *)
adc r11 0x0@uint64 r11 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffe070; PC = 0x401abc *)
mov L0x7fffffffe070 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffe078; PC = 0x401abf *)
mov L0x7fffffffe078 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffe080; PC = 0x401ac3 *)
mov L0x7fffffffe080 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffe088; PC = 0x401ac7 *)
mov L0x7fffffffe088 r11;
(* pop    %r15                                     #! EA = L0x7fffffffde88; Value = 0x00007fffffffdf20; PC = 0x401acb *)
(* pop    %%r15 *)
(* pop    %r14                                     #! EA = L0x7fffffffde90; Value = 0x00007fffffffe070; PC = 0x401acd *)
(* pop    %%r14 *)
(* pop    %r13                                     #! EA = L0x7fffffffde98; Value = 0x00007fffffffdf80; PC = 0x401acf *)
(* pop    %%r13 *)
(* pop    %r12                                     #! EA = L0x7fffffffdea0; Value = 0x00007fffffffdfa0; PC = 0x401ad1 *)
(* pop    %%r12 *)
(* pop    %rbx                                     #! EA = L0x7fffffffdea8; Value = 0x00007fffffffdfc0; PC = 0x401ad3 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffdeb0; Value = 0x00007fffffffdec0; PC = 0x401ad4 *)
(* pop    %%rbp *)
(* #! <- SP = 0x7fffffffdeb8 *)
#! 0x7fffffffdeb8 = 0x7fffffffdeb8;
(* #retq                                           #! PC = 0x401ad5 *)
#retq                                           #! 0x401ad5 = 0x401ad5;

ghost X57896044618658097711785492504343953926634992332820282019728792003956564819947@uint256 : and [
     eq X57896044618658097711785492504343953926634992332820282019728792003956564819947 (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088])
     ] && true;

cut
    and [
     eqmod X57896044618658097711785492504343953926634992332820282019728792003956564819947
     	   (mul X57896044618658097711785492504343953926634992332820282019728792003956564819936 X11)
	   (((2**255 )- 19)) ]
   prove with [all ghosts] &&  (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) < (2**255+2**64)@256;


#	/* 2^255 - 21    */

#
#{
#  and [
#    eqmod	
#    (limbs 64 [L0x7fffffffe050, L0x7fffffffe058, L0x7fffffffe060, L0x7fffffffe068])
#    ((limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) ** 57896044618658097711785492504343953926634992332820282019728792003956564819947)
#    (((2**255 )- 19)) ]
#    prove with [all cuts, all ghosts] && true
#}


(* mov    0x128(%rsp),%rax                         #! EA = L0x7fffffffdfe8; Value = 0x64e11aee4710d300; PC = 0x401eff *)
(* mov    0x128(%%rsp),%%rax                         #! L0x7fffffffdfe8 = L0x7fffffffdfe8; 0x64e11aee4710d300 = 0x64e11aee4710d300; 0x401eff = 0x401eff; *)
(* xor    %fs:0x28,%rax                            #! PC = 0x401f07 *)
(* xor    %fs:0x28,%%rax                            #! 0x401f07 = 0x401f07; *)
(* #jne    0x401f24 <gfp25519fltinv+484>           #! PC = 0x401f10 *)
#jne    0x401f24 <gfp25519fltinv+484>           #! 0x401f10 = 0x401f10;
(* add    $0x138,%rsp                              #! PC = 0x401f12 *)
adds dontcare rsp rsp 0x138@uint64;
(* pop    %rbx                                     #! EA = L0x7fffffffdff8; Value = 0x0000000000402040; PC = 0x401f19 *)
(* pop    %%rbx *)
(* pop    %rbp                                     #! EA = L0x7fffffffe000; Value = 0x00007fffffffe070; PC = 0x401f1a *)
(* pop    %%rbp *)
(* pop    %r12                                     #! EA = L0x7fffffffe008; Value = 0x0000000000401810; PC = 0x401f1b *)
(* pop    %%r12 *)
(* pop    %r13                                     #! EA = L0x7fffffffe010; Value = 0x00000000004050a0; PC = 0x401f1d *)
(* pop    %%r13 *)
(* pop    %r14                                     #! EA = L0x7fffffffe018; Value = 0x00000000000003e8; PC = 0x401f1f *)
(* pop    %%r14 *)
(* pop    %r15                                     #! EA = L0x7fffffffe020; Value = 0x00007fffffffe050; PC = 0x401f21 *)
(* pop    %%r15 *)
(* #! <- SP = 0x7fffffffe028 *)
#! 0x7fffffffe028 = 0x7fffffffe028;
(* #retq                                           #! PC = 0x401f23 *)
#retq                                           #! 0x401f23 = 0x401f23;


(* mov    %rbp,%rdi                                #! PC = 0x401f3d *)
mov rdi rbp;
(* #callq  0x401ae0 <gfp25519reduce>               #! PC = 0x401f40 *)
#callq  0x401ae0 <gfp25519reduce>               #! 0x401f40 = 0x401f40;
(* #! -> SP = 0x7fffffffe028 *)
#! 0x7fffffffe028 = 0x7fffffffe028;
(* mov    (%rdi),%r8                               #! EA = L0x7fffffffe070; Value = 0xffffffffffffffec; PC = 0x401ae0 *)
mov r8 L0x7fffffffe070;
(* mov    0x8(%rdi),%r9                            #! EA = L0x7fffffffe078; Value = 0xffffffffffffffff; PC = 0x401ae3 *)
mov r9 L0x7fffffffe078;
(* mov    0x18(%rdi),%r10                          #! EA = L0x7fffffffe088; Value = 0x7fffffffffffffff; PC = 0x401ae7 *)
mov r10 L0x7fffffffe088;
(* mov    %r10,%r11                                #! PC = 0x401aeb *)
mov r11 r10;
(* shr    $0x3f,%r11                               #! PC = 0x401aee *)
(* shr    $0x3f,%%r11                               #! 0x401aee = 0x401aee; *)
split r11 dontcare r11 63;
(* and    0x405070,%r10                            #! PC = 0x401af2 *)
split dontcare r10 r10 63;

assert true && (r11 = dontcare);
assume (r11 = dontcare) && true;

(* imul   $0x13,%r11,%r11                          #! PC = 0x401afa *)
mul r11 r11 0x13@uint64;
(* add    %r11,%r8                                 #! PC = 0x401afe *)
adds carry r8 r11 r8;
nondet overflow@uint1;
(* adc    $0x0,%r9                                 #! PC = 0x401b01 *)
adc r9 0x0@uint64 r9 carry;
nondet overflow@uint1;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffe070; PC = 0x401b05 *)
mov L0x7fffffffe070 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffe078; PC = 0x401b08 *)
mov L0x7fffffffe078 r9;
(* mov    %r10,0x18(%rdi)                          #! EA = L0x7fffffffe088; PC = 0x401b0c *)
mov L0x7fffffffe088 r10;
(* #! <- SP = 0x7fffffffe028 *)
#! 0x7fffffffe028 = 0x7fffffffe028;
(* #retq                                           #! PC = 0x401b10 *)
#retq                                           #! 0x401b10 = 0x401b10;

ghost XPenultimate@uint256 : and [
     eq XPenultimate (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088])
     ] && true;

cut
    and [
        eqmod XPenultimate X57896044618658097711785492504343953926634992332820282019728792003956564819947 (((2**255 )- 19)) ] prove with [all ghosts] && (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) < (2**255)@256;

(* mov    %rbp,%rdi                                #! PC = 0x401f45 *)
mov rdi rbp;
(* pop    %rbp                                     #! EA = L0x7fffffffe030; Value = 0x00007fffffffe070; PC = 0x401f48 *)
(* pop    %%rbp *)
(* #jmpq   0x401cc0 <gfp25519makeunique>           #! PC = 0x401f49 *)
#jmpq   0x401cc0 <gfp25519makeunique>           #! 0x401f49 = 0x401f49;
(* mov    %rsp,%r11                                #! PC = 0x401cc0 *)
mov r11 rsp;
(* sub    $0x10,%rsp                               #! PC = 0x401cc3 *)
subs dontcare rsp rsp 0x10@uint64;
(* mov    %r11,(%rsp)                              #! EA = L0x7fffffffe028; PC = 0x401cc7 *)
mov L0x7fffffffe028 r11;
(* mov    %r12,0x8(%rsp)                           #! EA = L0x7fffffffe030; PC = 0x401ccb *)
mov L0x7fffffffe030 r12;
(* mov    (%rdi),%r8                               #! EA = L0x7fffffffe070; Value = 0xffffffffffffffec; PC = 0x401cd0 *)
mov r8 L0x7fffffffe070;
(* mov    0x8(%rdi),%r9                            #! EA = L0x7fffffffe078; Value = 0xffffffffffffffff; PC = 0x401cd3 *)
mov r9 L0x7fffffffe078;
(* mov    0x10(%rdi),%r10                          #! EA = L0x7fffffffe080; Value = 0xffffffffffffffff; PC = 0x401cd7 *)
mov r10 L0x7fffffffe080;
(* mov    0x18(%rdi),%r11                          #! EA = L0x7fffffffe088; Value = 0x7fffffffffffffff; PC = 0x401cdb *)
mov r11 L0x7fffffffe088;
(* mov    %r8,%rax                                 #! PC = 0x401cdf *)
mov rax r8;
(* mov    %r9,%rcx                                 #! PC = 0x401ce2 *)
mov rcx r9;
(* mov    %r10,%rdx                                #! PC = 0x401ce5 *)
mov rdx r10;
(* mov    %r11,%rsi                                #! PC = 0x401ce8 *)
mov rsi r11;
(* sub    0x405050,%r8                             #! PC = 0x401ceb *)
subb carry  r8 r8 0xffffffffffffffed@uint64;
(* sbb    0x405058,%r9                             #! PC = 0x401cf3 *)
sbbs carry r9 r9 0xffffffffffffffff@uint64 carry;
(* sbb    0x405058,%r10                            #! PC = 0x401cfb *)
sbbs carry r10 r10 0xffffffffffffffff@uint64 carry;
(* sbb    0x405060,%r11                            #! PC = 0x401d03 *)
sbbs b1 r11 r11 0x7fffffffffffffff@uint64 carry;
(* mov    %r11,%r12                                #! PC = 0x401d0b *)
mov r12 r11;
(* shl    %r12                                     #! PC = 0x401d0e *)
adds carry r12 r12 r12;
(* cmovb  %rax,%r8                                 #! PC = 0x401d11 *)
assert true && (carry = b1);
assume (carry = b1) && true;
cmov r8 carry rax r8;
(* cmovb  %rcx,%r9                                 #! PC = 0x401d15 *)
cmov r9 carry rcx r9;
(* cmovb  %rdx,%r10                                #! PC = 0x401d19 *)
cmov r10 carry rdx r10;
(* cmovb  %rsi,%r11                                #! PC = 0x401d1d *)
cmov r11 carry rsi r11;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffe070; PC = 0x401d21 *)
mov L0x7fffffffe070 r8;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffe078; PC = 0x401d24 *)
mov L0x7fffffffe078 r9;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffe080; PC = 0x401d28 *)
mov L0x7fffffffe080 r10;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffe088; PC = 0x401d2c *)
mov L0x7fffffffe088 r11;
(* mov    0x8(%rsp),%r12                           #! EA = L0x7fffffffe030; Value = 0x0000000000401810; PC = 0x401d30 *)
mov r12  L0x7fffffffe030;
(* mov    (%rsp),%rsp                              #! EA = L0x7fffffffe028; Value = 0x00007fffffffe038; PC = 0x401d35 *)
(* mov    (%%rsp),%%rsp                              #! L0x7fffffffe028 = L0x7fffffffe028; 0x00007fffffffe038 = 0x00007fffffffe038; 0x401d35 = 0x401d35; *)
(* #! <- SP = 0x7fffffffe038 *)
#! 0x7fffffffe038 = 0x7fffffffe038;
(* #retq                                           #! PC = 0x401d39 *)
#retq                                           #! 0x401d39 = 0x401d39;

ghost XFinal@uint256 : and [
     eq XFinal (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088])
     ] && true;

cut
    and [
        eqmod XFinal XPenultimate (((2**255 )- 19)) ] prove with [all ghosts] &&
	#true;
	(limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) < (2**255-19)@256;

cut 
    and [
    eqmod XFinal (X1 ** 57896044618658097711785492504343953926634992332820282019728792003956564819947)
    (((2**255 )- 19)) ] prove with [all cuts] &&
    (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) < (2**255-19)@256;


{
  and [
    eqmod
    XFinal
    (X1 ** 57896044618658097711785492504343953926634992332820282019728792003956564819947)
    (((2**255 )- 19)),
    eq
    X1 
    (limbs 64 [L0x7fffffffe050, L0x7fffffffe058, L0x7fffffffe060, L0x7fffffffe068]),
    eq
    XFinal (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) ]
    prove with [all cuts, all ghosts]
  &&
  (limbs 64 [L0x7fffffffe070, L0x7fffffffe078, L0x7fffffffe080, L0x7fffffffe088]) < (2**255-19)@256
}
